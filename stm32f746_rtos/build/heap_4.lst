ARM GAS  /tmp/cc41qESQ.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"heap_4.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.bss.ucHeap,"aw",%nobits
  18              		.align	2
  21              	ucHeap:
  22 0000 00000000 		.space	15360
  22      00000000 
  22      00000000 
  22      00000000 
  22      00000000 
  23              		.section	.rodata.xHeapStructSize,"a",%progbits
  24              		.align	2
  27              	xHeapStructSize:
  28 0000 08000000 		.word	8
  29              		.section	.bss.xStart,"aw",%nobits
  30              		.align	2
  33              	xStart:
  34 0000 00000000 		.space	8
  34      00000000 
  35              		.section	.bss.pxEnd,"aw",%nobits
  36              		.align	2
  39              	pxEnd:
  40 0000 00000000 		.space	4
  41              		.section	.bss.xFreeBytesRemaining,"aw",%nobits
  42              		.align	2
  45              	xFreeBytesRemaining:
  46 0000 00000000 		.space	4
  47              		.section	.bss.xMinimumEverFreeBytesRemaining,"aw",%nobits
  48              		.align	2
  51              	xMinimumEverFreeBytesRemaining:
  52 0000 00000000 		.space	4
  53              		.section	.bss.xBlockAllocatedBit,"aw",%nobits
  54              		.align	2
  57              	xBlockAllocatedBit:
  58 0000 00000000 		.space	4
  59              		.section	.text.pvPortMalloc,"ax",%progbits
  60              		.align	1
  61              		.global	pvPortMalloc
  62              		.syntax unified
  63              		.thumb
  64              		.thumb_func
  65              		.fpu fpv4-sp-d16
  67              	pvPortMalloc:
ARM GAS  /tmp/cc41qESQ.s 			page 2


  68              	.LFB143:
  69              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
ARM GAS  /tmp/cc41qESQ.s 			page 3


  56:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * A sample implementation of pvPortMalloc() and vPortFree() that combines
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * (coalescences) adjacent memory blocks as they are freed, and in so doing
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * limits memory fragmentation.
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****  *
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * See heap_1.c, heap_2.c and heap_3.c for alternative implementations, and the
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * memory management pages of http://www.FreeRTOS.org for more information.
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****  */
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** #include <stdlib.h>
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** all the API functions to use the MPU wrappers.  That should only be done when
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** task.h is included from an application file. */
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** #include "FreeRTOS.h"
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** #include "task.h"
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 0 )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	#error This file must not be used if configSUPPORT_DYNAMIC_ALLOCATION is 0
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** #endif
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** /* Block sizes must not get too small. */
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** #define heapMINIMUM_BLOCK_SIZE	( ( size_t ) ( xHeapStructSize << 1 ) )
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** /* Assumes 8bit bytes! */
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** #define heapBITS_PER_BYTE		( ( size_t ) 8 )
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** /* Allocate the memory for the heap. */
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** #if( configAPPLICATION_ALLOCATED_HEAP == 1 )
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	/* The application writer has already defined the array used for the RTOS
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	heap - probably so it can be placed in a special segment or address. */
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	extern uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** #else
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	static uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** #endif /* configAPPLICATION_ALLOCATED_HEAP */
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** /* Define the linked list structure.  This is used to link free blocks in order
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** of their memory address. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** typedef struct A_BLOCK_LINK
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** {
ARM GAS  /tmp/cc41qESQ.s 			page 4


 113:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	struct A_BLOCK_LINK *pxNextFreeBlock;	/*<< The next free block in the list. */
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	size_t xBlockSize;						/*<< The size of the free block. */
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** } BlockLink_t;
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * Inserts a block of memory that is being freed into the correct position in
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * the list of free memory blocks.  The block being freed will be merged with
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * the block in front it and/or the block behind it if the memory blocks are
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * adjacent to each other.
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****  */
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert );
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * Called automatically to setup the required heap structures the first time
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****  * pvPortMalloc() is called.
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c ****  */
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** static void prvHeapInit( void );
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** /* The size of the structure placed at the beginning of each allocated memory
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** block must by correctly byte aligned. */
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** static const size_t xHeapStructSize	= ( sizeof( BlockLink_t ) + ( ( size_t ) ( portBYTE_ALIGNMENT -
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** /* Create a couple of list links to mark the start and end of the list. */
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** static BlockLink_t xStart, *pxEnd = NULL;
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** /* Keeps track of the number of free bytes remaining, but says nothing about
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** fragmentation. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** static size_t xFreeBytesRemaining = 0U;
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** static size_t xMinimumEverFreeBytesRemaining = 0U;
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** /* Gets set to the top bit of an size_t type.  When this bit in the xBlockSize
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** member of an BlockLink_t structure is set then the block belongs to the
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** application.  When the bit is free the block is still part of the free heap
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** space. */
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** static size_t xBlockAllocatedBit = 0;
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** void *pvPortMalloc( size_t xWantedSize )
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** {
  70              		.loc 1 156 0
  71              		.cfi_startproc
  72              		@ args = 0, pretend = 0, frame = 40
  73              		@ frame_needed = 1, uses_anonymous_args = 0
  74 0000 80B5     		push	{r7, lr}
  75              	.LCFI0:
  76              		.cfi_def_cfa_offset 8
  77              		.cfi_offset 7, -8
  78              		.cfi_offset 14, -4
  79 0002 8AB0     		sub	sp, sp, #40
  80              	.LCFI1:
  81              		.cfi_def_cfa_offset 48
  82 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/cc41qESQ.s 			page 5


  83              	.LCFI2:
  84              		.cfi_def_cfa_register 7
  85 0006 7860     		str	r0, [r7, #4]
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** void *pvReturn = NULL;
  86              		.loc 1 158 0
  87 0008 0023     		movs	r3, #0
  88 000a FB61     		str	r3, [r7, #28]
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	vTaskSuspendAll();
  89              		.loc 1 160 0
  90 000c FFF7FEFF 		bl	vTaskSuspendAll
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	{
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		/* If this is the first call to malloc then the heap will require
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		initialisation to setup the list of free blocks. */
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		if( pxEnd == NULL )
  91              		.loc 1 164 0
  92 0010 5A4B     		ldr	r3, .L16
  93 0012 1B68     		ldr	r3, [r3]
  94 0014 002B     		cmp	r3, #0
  95 0016 01D1     		bne	.L2
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		{
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			prvHeapInit();
  96              		.loc 1 166 0
  97 0018 FFF7FEFF 		bl	prvHeapInit
  98              	.L2:
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		}
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		else
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		{
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			mtCOVERAGE_TEST_MARKER();
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		}
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		/* Check the requested block size is not so large that the top bit is
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		set.  The top bit of the block size member of the BlockLink_t structure
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		is used to determine who owns the block - the application or the
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		kernel, so it must be free. */
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
  99              		.loc 1 177 0
 100 001c 584B     		ldr	r3, .L16+4
 101 001e 1A68     		ldr	r2, [r3]
 102 0020 7B68     		ldr	r3, [r7, #4]
 103 0022 1340     		ands	r3, r3, r2
 104 0024 002B     		cmp	r3, #0
 105 0026 40F09080 		bne	.L3
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			/* The wanted size is increased so it can contain a BlockLink_t
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			structure in addition to the requested amount of bytes. */
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			if( xWantedSize > 0 )
 106              		.loc 1 181 0
 107 002a 7B68     		ldr	r3, [r7, #4]
 108 002c 002B     		cmp	r3, #0
 109 002e 1ED0     		beq	.L4
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				xWantedSize += xHeapStructSize;
 110              		.loc 1 183 0
 111 0030 0822     		movs	r2, #8
 112 0032 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cc41qESQ.s 			page 6


 113 0034 1344     		add	r3, r3, r2
 114 0036 7B60     		str	r3, [r7, #4]
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				/* Ensure that blocks are always aligned to the required number
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				of bytes. */
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 115              		.loc 1 187 0
 116 0038 7B68     		ldr	r3, [r7, #4]
 117 003a 03F00703 		and	r3, r3, #7
 118 003e 002B     		cmp	r3, #0
 119 0040 15D0     		beq	.L4
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				{
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					/* Byte alignment required. */
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 120              		.loc 1 190 0
 121 0042 7B68     		ldr	r3, [r7, #4]
 122 0044 23F00703 		bic	r3, r3, #7
 123 0048 0833     		adds	r3, r3, #8
 124 004a 7B60     		str	r3, [r7, #4]
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 125              		.loc 1 191 0
 126 004c 7B68     		ldr	r3, [r7, #4]
 127 004e 03F00703 		and	r3, r3, #7
 128 0052 002B     		cmp	r3, #0
 129 0054 0BD0     		beq	.L4
 130              	.LBB12:
 131              	.LBB13:
 132              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    platform software that is more than just the market leader, it     *
ARM GAS  /tmp/cc41qESQ.s 			page 7


  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef PORTMACRO_H
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define PORTMACRO_H
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifdef __cplusplus
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern "C" {
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * Port specific definitions.
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * given hardware and compiler.
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * These settings should not be altered.
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *-----------------------------------------------------------
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  */
ARM GAS  /tmp/cc41qESQ.s 			page 8


  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Type definitions. */
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portCHAR		char
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portFLOAT		float
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portDOUBLE		double
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portLONG		long
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSHORT		short
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portBASE_TYPE	long
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef long BaseType_t;
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef unsigned long UBaseType_t;
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	typedef uint16_t TickType_t;
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #else
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	typedef uint32_t TickType_t;
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	not need to be guarded with a critical section. */
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Architecture specifics. */
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Scheduler utilities. */
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portYIELD() 															\
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {																				\
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 																				\
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "isb" );													\
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Critical section management. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern void vPortEnterCritical( void );
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern void vPortExitCritical( void );
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
ARM GAS  /tmp/cc41qESQ.s 			page 9


 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** (which build with all the ports) will build. */
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Tickless idle/low power functionality. */
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Architecture specific optimisations. */
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Generic helper function. */
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	uint8_t ucReturn;
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		return ucReturn;
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Check the configuration. */
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#endif
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifdef configASSERT
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
ARM GAS  /tmp/cc41qESQ.s 			page 10


 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* portNOP() is not required by this port. */
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNOP()
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portINLINE	__inline
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef portFORCE_INLINE
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** BaseType_t xReturn;
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		xReturn = pdFALSE;
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	else
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		xReturn = pdTRUE;
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	return xReturn;
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 235:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** uint32_t ulNewBASEPRI;
 236:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile
 133              		.loc 2 237 0 discriminator 1
 134              		.syntax unified
 135              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 136 0056 4FF05003 			mov r3, #80												
 137 005a 72B6     		cpsid i													
 138 005c 83F31188 		msr basepri, r3											
 139 0060 BFF36F8F 		isb														
 140 0064 BFF34F8F 		dsb														
 141 0068 62B6     		cpsie i													
 142              	
 143              	@ 0 "" 2
 144              		.thumb
 145              		.syntax unified
 146 006a 7B61     		str	r3, [r7, #20]
 147              	.L5:
 148              	.LBE13:
 149              	.LBE12:
 150              		.loc 1 191 0 discriminator 1
 151 006c FEE7     		b	.L5
 152              	.L4:
ARM GAS  /tmp/cc41qESQ.s 			page 11


 192:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				}
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				else
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				{
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					mtCOVERAGE_TEST_MARKER();
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				}
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			}
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			else
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			{
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				mtCOVERAGE_TEST_MARKER();
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			}
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 153              		.loc 1 203 0
 154 006e 7B68     		ldr	r3, [r7, #4]
 155 0070 002B     		cmp	r3, #0
 156 0072 6AD0     		beq	.L3
 157              		.loc 1 203 0 is_stmt 0 discriminator 1
 158 0074 434B     		ldr	r3, .L16+8
 159 0076 1B68     		ldr	r3, [r3]
 160 0078 7A68     		ldr	r2, [r7, #4]
 161 007a 9A42     		cmp	r2, r3
 162 007c 65D8     		bhi	.L3
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			{
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				/* Traverse the list from the start	(lowest address) block until
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				one	of adequate size is found. */
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				pxPreviousBlock = &xStart;
 163              		.loc 1 207 0 is_stmt 1
 164 007e 424B     		ldr	r3, .L16+12
 165 0080 3B62     		str	r3, [r7, #32]
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				pxBlock = xStart.pxNextFreeBlock;
 166              		.loc 1 208 0
 167 0082 414B     		ldr	r3, .L16+12
 168 0084 1B68     		ldr	r3, [r3]
 169 0086 7B62     		str	r3, [r7, #36]
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 170              		.loc 1 209 0
 171 0088 04E0     		b	.L6
 172              	.L8:
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				{
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					pxPreviousBlock = pxBlock;
 173              		.loc 1 211 0
 174 008a 7B6A     		ldr	r3, [r7, #36]
 175 008c 3B62     		str	r3, [r7, #32]
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					pxBlock = pxBlock->pxNextFreeBlock;
 176              		.loc 1 212 0
 177 008e 7B6A     		ldr	r3, [r7, #36]
 178 0090 1B68     		ldr	r3, [r3]
 179 0092 7B62     		str	r3, [r7, #36]
 180              	.L6:
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 181              		.loc 1 209 0
 182 0094 7B6A     		ldr	r3, [r7, #36]
 183 0096 5B68     		ldr	r3, [r3, #4]
 184 0098 7A68     		ldr	r2, [r7, #4]
 185 009a 9A42     		cmp	r2, r3
 186 009c 03D9     		bls	.L7
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
ARM GAS  /tmp/cc41qESQ.s 			page 12


 187              		.loc 1 209 0 is_stmt 0 discriminator 1
 188 009e 7B6A     		ldr	r3, [r7, #36]
 189 00a0 1B68     		ldr	r3, [r3]
 190 00a2 002B     		cmp	r3, #0
 191 00a4 F1D1     		bne	.L8
 192              	.L7:
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				}
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				/* If the end marker was reached then a block of adequate size
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				was	not found. */
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				if( pxBlock != pxEnd )
 193              		.loc 1 217 0 is_stmt 1
 194 00a6 354B     		ldr	r3, .L16
 195 00a8 1B68     		ldr	r3, [r3]
 196 00aa 7A6A     		ldr	r2, [r7, #36]
 197 00ac 9A42     		cmp	r2, r3
 198 00ae 4CD0     		beq	.L3
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				{
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					/* Return the memory space pointed to - jumping over the
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					BlockLink_t structure at its start. */
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize )
 199              		.loc 1 221 0
 200 00b0 3B6A     		ldr	r3, [r7, #32]
 201 00b2 1B68     		ldr	r3, [r3]
 202 00b4 0822     		movs	r2, #8
 203 00b6 1344     		add	r3, r3, r2
 204 00b8 FB61     		str	r3, [r7, #28]
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					/* This block is being returned for use so must be taken out
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					of the list of free blocks. */
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 205              		.loc 1 225 0
 206 00ba 7B6A     		ldr	r3, [r7, #36]
 207 00bc 1A68     		ldr	r2, [r3]
 208 00be 3B6A     		ldr	r3, [r7, #32]
 209 00c0 1A60     		str	r2, [r3]
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					/* If the block is larger than required it can be split into
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					two. */
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 210              		.loc 1 229 0
 211 00c2 7B6A     		ldr	r3, [r7, #36]
 212 00c4 5A68     		ldr	r2, [r3, #4]
 213 00c6 7B68     		ldr	r3, [r7, #4]
 214 00c8 D21A     		subs	r2, r2, r3
 215 00ca 0823     		movs	r3, #8
 216 00cc 5B00     		lsls	r3, r3, #1
 217 00ce 9A42     		cmp	r2, r3
 218 00d0 20D9     		bls	.L9
 230:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					{
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						/* This block is to be split into two.  Create a new
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						block following the number of bytes requested. The void
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						cast is used to prevent byte alignment warnings from the
 234:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						compiler. */
 235:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 219              		.loc 1 235 0
 220 00d2 7A6A     		ldr	r2, [r7, #36]
ARM GAS  /tmp/cc41qESQ.s 			page 13


 221 00d4 7B68     		ldr	r3, [r7, #4]
 222 00d6 1344     		add	r3, r3, r2
 223 00d8 BB61     		str	r3, [r7, #24]
 236:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 224              		.loc 1 236 0
 225 00da BB69     		ldr	r3, [r7, #24]
 226 00dc 03F00703 		and	r3, r3, #7
 227 00e0 002B     		cmp	r3, #0
 228 00e2 0BD0     		beq	.L10
 229              	.LBB14:
 230              	.LBB15:
 231              		.loc 2 237 0 discriminator 1
 232              		.syntax unified
 233              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 234 00e4 4FF05003 			mov r3, #80												
 235 00e8 72B6     		cpsid i													
 236 00ea 83F31188 		msr basepri, r3											
 237 00ee BFF36F8F 		isb														
 238 00f2 BFF34F8F 		dsb														
 239 00f6 62B6     		cpsie i													
 240              	
 241              	@ 0 "" 2
 242              		.thumb
 243              		.syntax unified
 244 00f8 3B61     		str	r3, [r7, #16]
 245              	.L11:
 246              	.LBE15:
 247              	.LBE14:
 248              		.loc 1 236 0 discriminator 3
 249 00fa FEE7     		b	.L11
 250              	.L10:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 238:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						/* Calculate the sizes of two blocks split from the
 239:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						single block. */
 240:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 251              		.loc 1 240 0
 252 00fc 7B6A     		ldr	r3, [r7, #36]
 253 00fe 5A68     		ldr	r2, [r3, #4]
 254 0100 7B68     		ldr	r3, [r7, #4]
 255 0102 D21A     		subs	r2, r2, r3
 256 0104 BB69     		ldr	r3, [r7, #24]
 257 0106 5A60     		str	r2, [r3, #4]
 241:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						pxBlock->xBlockSize = xWantedSize;
 258              		.loc 1 241 0
 259 0108 7B6A     		ldr	r3, [r7, #36]
 260 010a 7A68     		ldr	r2, [r7, #4]
 261 010c 5A60     		str	r2, [r3, #4]
 242:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 243:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						/* Insert the new block into the list of free blocks. */
 244:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						prvInsertBlockIntoFreeList( pxNewBlockLink );
 262              		.loc 1 244 0
 263 010e B869     		ldr	r0, [r7, #24]
 264 0110 FFF7FEFF 		bl	prvInsertBlockIntoFreeList
 265              	.L9:
 245:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					}
 246:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					else
 247:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					{
ARM GAS  /tmp/cc41qESQ.s 			page 14


 248:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						mtCOVERAGE_TEST_MARKER();
 249:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					}
 250:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 251:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					xFreeBytesRemaining -= pxBlock->xBlockSize;
 266              		.loc 1 251 0
 267 0114 1B4B     		ldr	r3, .L16+8
 268 0116 1A68     		ldr	r2, [r3]
 269 0118 7B6A     		ldr	r3, [r7, #36]
 270 011a 5B68     		ldr	r3, [r3, #4]
 271 011c D31A     		subs	r3, r2, r3
 272 011e 194A     		ldr	r2, .L16+8
 273 0120 1360     		str	r3, [r2]
 252:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 274              		.loc 1 253 0
 275 0122 184B     		ldr	r3, .L16+8
 276 0124 1A68     		ldr	r2, [r3]
 277 0126 194B     		ldr	r3, .L16+16
 278 0128 1B68     		ldr	r3, [r3]
 279 012a 9A42     		cmp	r2, r3
 280 012c 03D2     		bcs	.L12
 254:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					{
 255:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 281              		.loc 1 255 0
 282 012e 154B     		ldr	r3, .L16+8
 283 0130 1B68     		ldr	r3, [r3]
 284 0132 164A     		ldr	r2, .L16+16
 285 0134 1360     		str	r3, [r2]
 286              	.L12:
 256:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					}
 257:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					else
 258:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					{
 259:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 						mtCOVERAGE_TEST_MARKER();
 260:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					}
 261:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 262:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					/* The block is being returned - it is allocated and owned
 263:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					by the application and has no "next" block. */
 264:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					pxBlock->xBlockSize |= xBlockAllocatedBit;
 287              		.loc 1 264 0
 288 0136 7B6A     		ldr	r3, [r7, #36]
 289 0138 5A68     		ldr	r2, [r3, #4]
 290 013a 114B     		ldr	r3, .L16+4
 291 013c 1B68     		ldr	r3, [r3]
 292 013e 1A43     		orrs	r2, r2, r3
 293 0140 7B6A     		ldr	r3, [r7, #36]
 294 0142 5A60     		str	r2, [r3, #4]
 265:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					pxBlock->pxNextFreeBlock = NULL;
 295              		.loc 1 265 0
 296 0144 7B6A     		ldr	r3, [r7, #36]
 297 0146 0022     		movs	r2, #0
 298 0148 1A60     		str	r2, [r3]
 299              	.L3:
 266:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				}
 267:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				else
 268:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				{
 269:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					mtCOVERAGE_TEST_MARKER();
 270:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				}
ARM GAS  /tmp/cc41qESQ.s 			page 15


 271:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			}
 272:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			else
 273:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			{
 274:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				mtCOVERAGE_TEST_MARKER();
 275:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			}
 276:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		}
 277:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		else
 278:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		{
 279:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			mtCOVERAGE_TEST_MARKER();
 280:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		}
 281:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 282:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		traceMALLOC( pvReturn, xWantedSize );
 283:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	}
 284:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	( void ) xTaskResumeAll();
 300              		.loc 1 284 0
 301 014a FFF7FEFF 		bl	xTaskResumeAll
 285:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 286:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
 287:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	{
 288:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		if( pvReturn == NULL )
 289:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		{
 290:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			extern void vApplicationMallocFailedHook( void );
 291:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			vApplicationMallocFailedHook();
 292:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		}
 293:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		else
 294:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		{
 295:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			mtCOVERAGE_TEST_MARKER();
 296:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		}
 297:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	}
 298:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	#endif
 299:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 300:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 302              		.loc 1 300 0
 303 014e FB69     		ldr	r3, [r7, #28]
 304 0150 03F00703 		and	r3, r3, #7
 305 0154 002B     		cmp	r3, #0
 306 0156 0BD0     		beq	.L13
 307              	.LBB16:
 308              	.LBB17:
 309              		.loc 2 237 0 discriminator 1
 310              		.syntax unified
 311              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 312 0158 4FF05003 			mov r3, #80												
 313 015c 72B6     		cpsid i													
 314 015e 83F31188 		msr basepri, r3											
 315 0162 BFF36F8F 		isb														
 316 0166 BFF34F8F 		dsb														
 317 016a 62B6     		cpsie i													
 318              	
 319              	@ 0 "" 2
 320              		.thumb
 321              		.syntax unified
 322 016c FB60     		str	r3, [r7, #12]
 323              	.L14:
 324              	.LBE17:
 325              	.LBE16:
 326              		.loc 1 300 0 discriminator 5
ARM GAS  /tmp/cc41qESQ.s 			page 16


 327 016e FEE7     		b	.L14
 328              	.L13:
 301:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	return pvReturn;
 329              		.loc 1 301 0
 330 0170 FB69     		ldr	r3, [r7, #28]
 302:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** }
 331              		.loc 1 302 0
 332 0172 1846     		mov	r0, r3
 333 0174 2837     		adds	r7, r7, #40
 334              	.LCFI3:
 335              		.cfi_def_cfa_offset 8
 336 0176 BD46     		mov	sp, r7
 337              	.LCFI4:
 338              		.cfi_def_cfa_register 13
 339              		@ sp needed
 340 0178 80BD     		pop	{r7, pc}
 341              	.L17:
 342 017a 00BF     		.align	2
 343              	.L16:
 344 017c 00000000 		.word	pxEnd
 345 0180 00000000 		.word	xBlockAllocatedBit
 346 0184 00000000 		.word	xFreeBytesRemaining
 347 0188 00000000 		.word	xStart
 348 018c 00000000 		.word	xMinimumEverFreeBytesRemaining
 349              		.cfi_endproc
 350              	.LFE143:
 352              		.section	.text.vPortFree,"ax",%progbits
 353              		.align	1
 354              		.global	vPortFree
 355              		.syntax unified
 356              		.thumb
 357              		.thumb_func
 358              		.fpu fpv4-sp-d16
 360              	vPortFree:
 361              	.LFB144:
 303:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 304:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 305:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** void vPortFree( void *pv )
 306:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** {
 362              		.loc 1 306 0
 363              		.cfi_startproc
 364              		@ args = 0, pretend = 0, frame = 24
 365              		@ frame_needed = 1, uses_anonymous_args = 0
 366 0000 80B5     		push	{r7, lr}
 367              	.LCFI5:
 368              		.cfi_def_cfa_offset 8
 369              		.cfi_offset 7, -8
 370              		.cfi_offset 14, -4
 371 0002 86B0     		sub	sp, sp, #24
 372              	.LCFI6:
 373              		.cfi_def_cfa_offset 32
 374 0004 00AF     		add	r7, sp, #0
 375              	.LCFI7:
 376              		.cfi_def_cfa_register 7
 377 0006 7860     		str	r0, [r7, #4]
 307:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** uint8_t *puc = ( uint8_t * ) pv;
 378              		.loc 1 307 0
ARM GAS  /tmp/cc41qESQ.s 			page 17


 379 0008 7B68     		ldr	r3, [r7, #4]
 380 000a 7B61     		str	r3, [r7, #20]
 308:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** BlockLink_t *pxLink;
 309:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 310:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	if( pv != NULL )
 381              		.loc 1 310 0
 382 000c 7B68     		ldr	r3, [r7, #4]
 383 000e 002B     		cmp	r3, #0
 384 0010 4AD0     		beq	.L24
 311:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	{
 312:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		/* The memory being freed will have an BlockLink_t structure immediately
 313:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		before it. */
 314:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		puc -= xHeapStructSize;
 385              		.loc 1 314 0
 386 0012 0823     		movs	r3, #8
 387 0014 5B42     		negs	r3, r3
 388 0016 7A69     		ldr	r2, [r7, #20]
 389 0018 1344     		add	r3, r3, r2
 390 001a 7B61     		str	r3, [r7, #20]
 315:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 316:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		/* This casting is to keep the compiler from issuing warnings. */
 317:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		pxLink = ( void * ) puc;
 391              		.loc 1 317 0
 392 001c 7B69     		ldr	r3, [r7, #20]
 393 001e 3B61     		str	r3, [r7, #16]
 318:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 319:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		/* Check the block is actually allocated. */
 320:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 394              		.loc 1 320 0
 395 0020 3B69     		ldr	r3, [r7, #16]
 396 0022 5A68     		ldr	r2, [r3, #4]
 397 0024 224B     		ldr	r3, .L25
 398 0026 1B68     		ldr	r3, [r3]
 399 0028 1340     		ands	r3, r3, r2
 400 002a 002B     		cmp	r3, #0
 401 002c 0BD1     		bne	.L20
 402              	.LBB18:
 403              	.LBB19:
 404              		.loc 2 237 0 discriminator 1
 405              		.syntax unified
 406              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 407 002e 4FF05003 			mov r3, #80												
 408 0032 72B6     		cpsid i													
 409 0034 83F31188 		msr basepri, r3											
 410 0038 BFF36F8F 		isb														
 411 003c BFF34F8F 		dsb														
 412 0040 62B6     		cpsie i													
 413              	
 414              	@ 0 "" 2
 415              		.thumb
 416              		.syntax unified
 417 0042 FB60     		str	r3, [r7, #12]
 418              	.L21:
 419              	.LBE19:
 420              	.LBE18:
 421              		.loc 1 320 0 discriminator 1
 422 0044 FEE7     		b	.L21
ARM GAS  /tmp/cc41qESQ.s 			page 18


 423              	.L20:
 321:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		configASSERT( pxLink->pxNextFreeBlock == NULL );
 424              		.loc 1 321 0
 425 0046 3B69     		ldr	r3, [r7, #16]
 426 0048 1B68     		ldr	r3, [r3]
 427 004a 002B     		cmp	r3, #0
 428 004c 0BD0     		beq	.L22
 429              	.LBB20:
 430              	.LBB21:
 431              		.loc 2 237 0 discriminator 1
 432              		.syntax unified
 433              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 434 004e 4FF05003 			mov r3, #80												
 435 0052 72B6     		cpsid i													
 436 0054 83F31188 		msr basepri, r3											
 437 0058 BFF36F8F 		isb														
 438 005c BFF34F8F 		dsb														
 439 0060 62B6     		cpsie i													
 440              	
 441              	@ 0 "" 2
 442              		.thumb
 443              		.syntax unified
 444 0062 BB60     		str	r3, [r7, #8]
 445              	.L23:
 446              	.LBE21:
 447              	.LBE20:
 448              		.loc 1 321 0 discriminator 2
 449 0064 FEE7     		b	.L23
 450              	.L22:
 322:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 323:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 451              		.loc 1 323 0
 452 0066 3B69     		ldr	r3, [r7, #16]
 453 0068 5A68     		ldr	r2, [r3, #4]
 454 006a 114B     		ldr	r3, .L25
 455 006c 1B68     		ldr	r3, [r3]
 456 006e 1340     		ands	r3, r3, r2
 457 0070 002B     		cmp	r3, #0
 458 0072 19D0     		beq	.L24
 324:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		{
 325:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			if( pxLink->pxNextFreeBlock == NULL )
 459              		.loc 1 325 0
 460 0074 3B69     		ldr	r3, [r7, #16]
 461 0076 1B68     		ldr	r3, [r3]
 462 0078 002B     		cmp	r3, #0
 463 007a 15D1     		bne	.L24
 326:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			{
 327:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				/* The block is being returned to the heap - it is no longer
 328:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				allocated. */
 329:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 464              		.loc 1 329 0
 465 007c 3B69     		ldr	r3, [r7, #16]
 466 007e 5A68     		ldr	r2, [r3, #4]
 467 0080 0B4B     		ldr	r3, .L25
 468 0082 1B68     		ldr	r3, [r3]
 469 0084 DB43     		mvns	r3, r3
 470 0086 1A40     		ands	r2, r2, r3
ARM GAS  /tmp/cc41qESQ.s 			page 19


 471 0088 3B69     		ldr	r3, [r7, #16]
 472 008a 5A60     		str	r2, [r3, #4]
 330:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 331:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				vTaskSuspendAll();
 473              		.loc 1 331 0
 474 008c FFF7FEFF 		bl	vTaskSuspendAll
 332:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				{
 333:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					/* Add this block to the list of free blocks. */
 334:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					xFreeBytesRemaining += pxLink->xBlockSize;
 475              		.loc 1 334 0
 476 0090 3B69     		ldr	r3, [r7, #16]
 477 0092 5A68     		ldr	r2, [r3, #4]
 478 0094 074B     		ldr	r3, .L25+4
 479 0096 1B68     		ldr	r3, [r3]
 480 0098 1344     		add	r3, r3, r2
 481 009a 064A     		ldr	r2, .L25+4
 482 009c 1360     		str	r3, [r2]
 335:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					traceFREE( pv, pxLink->xBlockSize );
 336:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 483              		.loc 1 336 0
 484 009e 3869     		ldr	r0, [r7, #16]
 485 00a0 FFF7FEFF 		bl	prvInsertBlockIntoFreeList
 337:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				}
 338:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				( void ) xTaskResumeAll();
 486              		.loc 1 338 0
 487 00a4 FFF7FEFF 		bl	xTaskResumeAll
 488              	.L24:
 339:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			}
 340:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			else
 341:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			{
 342:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 				mtCOVERAGE_TEST_MARKER();
 343:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			}
 344:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		}
 345:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		else
 346:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		{
 347:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			mtCOVERAGE_TEST_MARKER();
 348:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		}
 349:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	}
 350:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** }
 489              		.loc 1 350 0
 490 00a8 00BF     		nop
 491 00aa 1837     		adds	r7, r7, #24
 492              	.LCFI8:
 493              		.cfi_def_cfa_offset 8
 494 00ac BD46     		mov	sp, r7
 495              	.LCFI9:
 496              		.cfi_def_cfa_register 13
 497              		@ sp needed
 498 00ae 80BD     		pop	{r7, pc}
 499              	.L26:
 500              		.align	2
 501              	.L25:
 502 00b0 00000000 		.word	xBlockAllocatedBit
 503 00b4 00000000 		.word	xFreeBytesRemaining
 504              		.cfi_endproc
 505              	.LFE144:
 507              		.section	.text.xPortGetFreeHeapSize,"ax",%progbits
ARM GAS  /tmp/cc41qESQ.s 			page 20


 508              		.align	1
 509              		.global	xPortGetFreeHeapSize
 510              		.syntax unified
 511              		.thumb
 512              		.thumb_func
 513              		.fpu fpv4-sp-d16
 515              	xPortGetFreeHeapSize:
 516              	.LFB145:
 351:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 352:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 353:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** size_t xPortGetFreeHeapSize( void )
 354:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** {
 517              		.loc 1 354 0
 518              		.cfi_startproc
 519              		@ args = 0, pretend = 0, frame = 0
 520              		@ frame_needed = 1, uses_anonymous_args = 0
 521              		@ link register save eliminated.
 522 0000 80B4     		push	{r7}
 523              	.LCFI10:
 524              		.cfi_def_cfa_offset 4
 525              		.cfi_offset 7, -4
 526 0002 00AF     		add	r7, sp, #0
 527              	.LCFI11:
 528              		.cfi_def_cfa_register 7
 355:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	return xFreeBytesRemaining;
 529              		.loc 1 355 0
 530 0004 034B     		ldr	r3, .L29
 531 0006 1B68     		ldr	r3, [r3]
 356:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** }
 532              		.loc 1 356 0
 533 0008 1846     		mov	r0, r3
 534 000a BD46     		mov	sp, r7
 535              	.LCFI12:
 536              		.cfi_def_cfa_register 13
 537              		@ sp needed
 538 000c 5DF8047B 		ldr	r7, [sp], #4
 539              	.LCFI13:
 540              		.cfi_restore 7
 541              		.cfi_def_cfa_offset 0
 542 0010 7047     		bx	lr
 543              	.L30:
 544 0012 00BF     		.align	2
 545              	.L29:
 546 0014 00000000 		.word	xFreeBytesRemaining
 547              		.cfi_endproc
 548              	.LFE145:
 550              		.section	.text.xPortGetMinimumEverFreeHeapSize,"ax",%progbits
 551              		.align	1
 552              		.global	xPortGetMinimumEverFreeHeapSize
 553              		.syntax unified
 554              		.thumb
 555              		.thumb_func
 556              		.fpu fpv4-sp-d16
 558              	xPortGetMinimumEverFreeHeapSize:
 559              	.LFB146:
 357:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 358:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
ARM GAS  /tmp/cc41qESQ.s 			page 21


 359:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** size_t xPortGetMinimumEverFreeHeapSize( void )
 360:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** {
 560              		.loc 1 360 0
 561              		.cfi_startproc
 562              		@ args = 0, pretend = 0, frame = 0
 563              		@ frame_needed = 1, uses_anonymous_args = 0
 564              		@ link register save eliminated.
 565 0000 80B4     		push	{r7}
 566              	.LCFI14:
 567              		.cfi_def_cfa_offset 4
 568              		.cfi_offset 7, -4
 569 0002 00AF     		add	r7, sp, #0
 570              	.LCFI15:
 571              		.cfi_def_cfa_register 7
 361:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	return xMinimumEverFreeBytesRemaining;
 572              		.loc 1 361 0
 573 0004 034B     		ldr	r3, .L33
 574 0006 1B68     		ldr	r3, [r3]
 362:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** }
 575              		.loc 1 362 0
 576 0008 1846     		mov	r0, r3
 577 000a BD46     		mov	sp, r7
 578              	.LCFI16:
 579              		.cfi_def_cfa_register 13
 580              		@ sp needed
 581 000c 5DF8047B 		ldr	r7, [sp], #4
 582              	.LCFI17:
 583              		.cfi_restore 7
 584              		.cfi_def_cfa_offset 0
 585 0010 7047     		bx	lr
 586              	.L34:
 587 0012 00BF     		.align	2
 588              	.L33:
 589 0014 00000000 		.word	xMinimumEverFreeBytesRemaining
 590              		.cfi_endproc
 591              	.LFE146:
 593              		.section	.text.vPortInitialiseBlocks,"ax",%progbits
 594              		.align	1
 595              		.global	vPortInitialiseBlocks
 596              		.syntax unified
 597              		.thumb
 598              		.thumb_func
 599              		.fpu fpv4-sp-d16
 601              	vPortInitialiseBlocks:
 602              	.LFB147:
 363:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 364:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 365:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** void vPortInitialiseBlocks( void )
 366:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** {
 603              		.loc 1 366 0
 604              		.cfi_startproc
 605              		@ args = 0, pretend = 0, frame = 0
 606              		@ frame_needed = 1, uses_anonymous_args = 0
 607              		@ link register save eliminated.
 608 0000 80B4     		push	{r7}
 609              	.LCFI18:
 610              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/cc41qESQ.s 			page 22


 611              		.cfi_offset 7, -4
 612 0002 00AF     		add	r7, sp, #0
 613              	.LCFI19:
 614              		.cfi_def_cfa_register 7
 367:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	/* This just exists to keep the linker quiet. */
 368:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** }
 615              		.loc 1 368 0
 616 0004 00BF     		nop
 617 0006 BD46     		mov	sp, r7
 618              	.LCFI20:
 619              		.cfi_def_cfa_register 13
 620              		@ sp needed
 621 0008 5DF8047B 		ldr	r7, [sp], #4
 622              	.LCFI21:
 623              		.cfi_restore 7
 624              		.cfi_def_cfa_offset 0
 625 000c 7047     		bx	lr
 626              		.cfi_endproc
 627              	.LFE147:
 629              		.section	.text.prvHeapInit,"ax",%progbits
 630              		.align	1
 631              		.syntax unified
 632              		.thumb
 633              		.thumb_func
 634              		.fpu fpv4-sp-d16
 636              	prvHeapInit:
 637              	.LFB148:
 369:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 370:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 371:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** static void prvHeapInit( void )
 372:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** {
 638              		.loc 1 372 0
 639              		.cfi_startproc
 640              		@ args = 0, pretend = 0, frame = 16
 641              		@ frame_needed = 1, uses_anonymous_args = 0
 642              		@ link register save eliminated.
 643 0000 80B4     		push	{r7}
 644              	.LCFI22:
 645              		.cfi_def_cfa_offset 4
 646              		.cfi_offset 7, -4
 647 0002 85B0     		sub	sp, sp, #20
 648              	.LCFI23:
 649              		.cfi_def_cfa_offset 24
 650 0004 00AF     		add	r7, sp, #0
 651              	.LCFI24:
 652              		.cfi_def_cfa_register 7
 373:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** BlockLink_t *pxFirstFreeBlock;
 374:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** uint8_t *pucAlignedHeap;
 375:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** size_t uxAddress;
 376:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 653              		.loc 1 376 0
 654 0006 4FF47053 		mov	r3, #15360
 655 000a BB60     		str	r3, [r7, #8]
 377:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 378:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	/* Ensure the heap starts on a correctly aligned boundary. */
 379:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	uxAddress = ( size_t ) ucHeap;
 656              		.loc 1 379 0
ARM GAS  /tmp/cc41qESQ.s 			page 23


 657 000c 274B     		ldr	r3, .L38
 658 000e FB60     		str	r3, [r7, #12]
 380:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 381:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 659              		.loc 1 381 0
 660 0010 FB68     		ldr	r3, [r7, #12]
 661 0012 03F00703 		and	r3, r3, #7
 662 0016 002B     		cmp	r3, #0
 663 0018 0CD0     		beq	.L37
 382:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	{
 383:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 664              		.loc 1 383 0
 665 001a FB68     		ldr	r3, [r7, #12]
 666 001c 0733     		adds	r3, r3, #7
 667 001e FB60     		str	r3, [r7, #12]
 384:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 668              		.loc 1 384 0
 669 0020 FB68     		ldr	r3, [r7, #12]
 670 0022 23F00703 		bic	r3, r3, #7
 671 0026 FB60     		str	r3, [r7, #12]
 385:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 672              		.loc 1 385 0
 673 0028 BA68     		ldr	r2, [r7, #8]
 674 002a FB68     		ldr	r3, [r7, #12]
 675 002c D31A     		subs	r3, r2, r3
 676 002e 1F4A     		ldr	r2, .L38
 677 0030 1344     		add	r3, r3, r2
 678 0032 BB60     		str	r3, [r7, #8]
 679              	.L37:
 386:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	}
 387:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 388:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	pucAlignedHeap = ( uint8_t * ) uxAddress;
 680              		.loc 1 388 0
 681 0034 FB68     		ldr	r3, [r7, #12]
 682 0036 7B60     		str	r3, [r7, #4]
 389:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 390:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	/* xStart is used to hold a pointer to the first item in the list of free
 391:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	blocks.  The void cast is used to prevent compiler warnings. */
 392:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 683              		.loc 1 392 0
 684 0038 1D4A     		ldr	r2, .L38+4
 685 003a 7B68     		ldr	r3, [r7, #4]
 686 003c 1360     		str	r3, [r2]
 393:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	xStart.xBlockSize = ( size_t ) 0;
 687              		.loc 1 393 0
 688 003e 1C4B     		ldr	r3, .L38+4
 689 0040 0022     		movs	r2, #0
 690 0042 5A60     		str	r2, [r3, #4]
 394:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	/* pxEnd is used to mark the end of the list of free blocks and is inserted
 396:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	at the end of the heap space. */
 397:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 691              		.loc 1 397 0
 692 0044 7B68     		ldr	r3, [r7, #4]
 693 0046 BA68     		ldr	r2, [r7, #8]
 694 0048 1344     		add	r3, r3, r2
 695 004a FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/cc41qESQ.s 			page 24


 398:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	uxAddress -= xHeapStructSize;
 696              		.loc 1 398 0
 697 004c 0822     		movs	r2, #8
 698 004e FB68     		ldr	r3, [r7, #12]
 699 0050 9B1A     		subs	r3, r3, r2
 700 0052 FB60     		str	r3, [r7, #12]
 399:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 701              		.loc 1 399 0
 702 0054 FB68     		ldr	r3, [r7, #12]
 703 0056 23F00703 		bic	r3, r3, #7
 704 005a FB60     		str	r3, [r7, #12]
 400:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	pxEnd = ( void * ) uxAddress;
 705              		.loc 1 400 0
 706 005c FB68     		ldr	r3, [r7, #12]
 707 005e 154A     		ldr	r2, .L38+8
 708 0060 1360     		str	r3, [r2]
 401:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	pxEnd->xBlockSize = 0;
 709              		.loc 1 401 0
 710 0062 144B     		ldr	r3, .L38+8
 711 0064 1B68     		ldr	r3, [r3]
 712 0066 0022     		movs	r2, #0
 713 0068 5A60     		str	r2, [r3, #4]
 402:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	pxEnd->pxNextFreeBlock = NULL;
 714              		.loc 1 402 0
 715 006a 124B     		ldr	r3, .L38+8
 716 006c 1B68     		ldr	r3, [r3]
 717 006e 0022     		movs	r2, #0
 718 0070 1A60     		str	r2, [r3]
 403:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 404:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	/* To start with there is a single free block that is sized to take up the
 405:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	entire heap space, minus the space taken by pxEnd. */
 406:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 719              		.loc 1 406 0
 720 0072 7B68     		ldr	r3, [r7, #4]
 721 0074 3B60     		str	r3, [r7]
 407:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 722              		.loc 1 407 0
 723 0076 3B68     		ldr	r3, [r7]
 724 0078 FA68     		ldr	r2, [r7, #12]
 725 007a D21A     		subs	r2, r2, r3
 726 007c 3B68     		ldr	r3, [r7]
 727 007e 5A60     		str	r2, [r3, #4]
 408:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 728              		.loc 1 408 0
 729 0080 0C4B     		ldr	r3, .L38+8
 730 0082 1A68     		ldr	r2, [r3]
 731 0084 3B68     		ldr	r3, [r7]
 732 0086 1A60     		str	r2, [r3]
 409:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 410:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	/* Only one block exists - and it covers the entire usable heap space. */
 411:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 733              		.loc 1 411 0
 734 0088 3B68     		ldr	r3, [r7]
 735 008a 5B68     		ldr	r3, [r3, #4]
 736 008c 0A4A     		ldr	r2, .L38+12
 737 008e 1360     		str	r3, [r2]
 412:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
ARM GAS  /tmp/cc41qESQ.s 			page 25


 738              		.loc 1 412 0
 739 0090 3B68     		ldr	r3, [r7]
 740 0092 5B68     		ldr	r3, [r3, #4]
 741 0094 094A     		ldr	r2, .L38+16
 742 0096 1360     		str	r3, [r2]
 413:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 414:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	/* Work out the position of the top bit in a size_t variable. */
 415:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 743              		.loc 1 415 0
 744 0098 094B     		ldr	r3, .L38+20
 745 009a 4FF00042 		mov	r2, #-2147483648
 746 009e 1A60     		str	r2, [r3]
 416:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** }
 747              		.loc 1 416 0
 748 00a0 00BF     		nop
 749 00a2 1437     		adds	r7, r7, #20
 750              	.LCFI25:
 751              		.cfi_def_cfa_offset 4
 752 00a4 BD46     		mov	sp, r7
 753              	.LCFI26:
 754              		.cfi_def_cfa_register 13
 755              		@ sp needed
 756 00a6 5DF8047B 		ldr	r7, [sp], #4
 757              	.LCFI27:
 758              		.cfi_restore 7
 759              		.cfi_def_cfa_offset 0
 760 00aa 7047     		bx	lr
 761              	.L39:
 762              		.align	2
 763              	.L38:
 764 00ac 00000000 		.word	ucHeap
 765 00b0 00000000 		.word	xStart
 766 00b4 00000000 		.word	pxEnd
 767 00b8 00000000 		.word	xMinimumEverFreeBytesRemaining
 768 00bc 00000000 		.word	xFreeBytesRemaining
 769 00c0 00000000 		.word	xBlockAllocatedBit
 770              		.cfi_endproc
 771              	.LFE148:
 773              		.section	.text.prvInsertBlockIntoFreeList,"ax",%progbits
 774              		.align	1
 775              		.syntax unified
 776              		.thumb
 777              		.thumb_func
 778              		.fpu fpv4-sp-d16
 780              	prvInsertBlockIntoFreeList:
 781              	.LFB149:
 417:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 418:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
 420:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** {
 782              		.loc 1 420 0
 783              		.cfi_startproc
 784              		@ args = 0, pretend = 0, frame = 16
 785              		@ frame_needed = 1, uses_anonymous_args = 0
 786              		@ link register save eliminated.
 787 0000 80B4     		push	{r7}
 788              	.LCFI28:
ARM GAS  /tmp/cc41qESQ.s 			page 26


 789              		.cfi_def_cfa_offset 4
 790              		.cfi_offset 7, -4
 791 0002 85B0     		sub	sp, sp, #20
 792              	.LCFI29:
 793              		.cfi_def_cfa_offset 24
 794 0004 00AF     		add	r7, sp, #0
 795              	.LCFI30:
 796              		.cfi_def_cfa_register 7
 797 0006 7860     		str	r0, [r7, #4]
 421:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** BlockLink_t *pxIterator;
 422:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** uint8_t *puc;
 423:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 424:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	/* Iterate through the list until a block is found that has a higher address
 425:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	than the block being inserted. */
 426:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator-
 798              		.loc 1 426 0
 799 0008 284B     		ldr	r3, .L50
 800 000a FB60     		str	r3, [r7, #12]
 801 000c 02E0     		b	.L41
 802              	.L42:
 803              		.loc 1 426 0 is_stmt 0 discriminator 3
 804 000e FB68     		ldr	r3, [r7, #12]
 805 0010 1B68     		ldr	r3, [r3]
 806 0012 FB60     		str	r3, [r7, #12]
 807              	.L41:
 808              		.loc 1 426 0 discriminator 1
 809 0014 FB68     		ldr	r3, [r7, #12]
 810 0016 1B68     		ldr	r3, [r3]
 811 0018 7A68     		ldr	r2, [r7, #4]
 812 001a 9A42     		cmp	r2, r3
 813 001c F7D8     		bhi	.L42
 427:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	{
 428:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		/* Nothing to do here, just iterate to the right position. */
 429:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	}
 430:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 431:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	/* Do the block being inserted, and the block it is being inserted after
 432:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	make a contiguous block of memory? */
 433:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	puc = ( uint8_t * ) pxIterator;
 814              		.loc 1 433 0 is_stmt 1
 815 001e FB68     		ldr	r3, [r7, #12]
 816 0020 BB60     		str	r3, [r7, #8]
 434:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 817              		.loc 1 434 0
 818 0022 FB68     		ldr	r3, [r7, #12]
 819 0024 5B68     		ldr	r3, [r3, #4]
 820 0026 BA68     		ldr	r2, [r7, #8]
 821 0028 1344     		add	r3, r3, r2
 822 002a 7A68     		ldr	r2, [r7, #4]
 823 002c 9A42     		cmp	r2, r3
 824 002e 08D1     		bne	.L43
 435:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	{
 436:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 825              		.loc 1 436 0
 826 0030 FB68     		ldr	r3, [r7, #12]
 827 0032 5A68     		ldr	r2, [r3, #4]
 828 0034 7B68     		ldr	r3, [r7, #4]
 829 0036 5B68     		ldr	r3, [r3, #4]
ARM GAS  /tmp/cc41qESQ.s 			page 27


 830 0038 1A44     		add	r2, r2, r3
 831 003a FB68     		ldr	r3, [r7, #12]
 832 003c 5A60     		str	r2, [r3, #4]
 437:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		pxBlockToInsert = pxIterator;
 833              		.loc 1 437 0
 834 003e FB68     		ldr	r3, [r7, #12]
 835 0040 7B60     		str	r3, [r7, #4]
 836              	.L43:
 438:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	}
 439:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	else
 440:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	{
 441:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		mtCOVERAGE_TEST_MARKER();
 442:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	}
 443:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 444:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	/* Do the block being inserted, and the block it is being inserted before
 445:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	make a contiguous block of memory? */
 446:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	puc = ( uint8_t * ) pxBlockToInsert;
 837              		.loc 1 446 0
 838 0042 7B68     		ldr	r3, [r7, #4]
 839 0044 BB60     		str	r3, [r7, #8]
 447:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 840              		.loc 1 447 0
 841 0046 7B68     		ldr	r3, [r7, #4]
 842 0048 5B68     		ldr	r3, [r3, #4]
 843 004a BA68     		ldr	r2, [r7, #8]
 844 004c 1A44     		add	r2, r2, r3
 845 004e FB68     		ldr	r3, [r7, #12]
 846 0050 1B68     		ldr	r3, [r3]
 847 0052 9A42     		cmp	r2, r3
 848 0054 18D1     		bne	.L44
 448:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	{
 449:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		if( pxIterator->pxNextFreeBlock != pxEnd )
 849              		.loc 1 449 0
 850 0056 FB68     		ldr	r3, [r7, #12]
 851 0058 1A68     		ldr	r2, [r3]
 852 005a 154B     		ldr	r3, .L50+4
 853 005c 1B68     		ldr	r3, [r3]
 854 005e 9A42     		cmp	r2, r3
 855 0060 0DD0     		beq	.L45
 450:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		{
 451:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			/* Form one big block from the two blocks. */
 452:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 856              		.loc 1 452 0
 857 0062 7B68     		ldr	r3, [r7, #4]
 858 0064 5A68     		ldr	r2, [r3, #4]
 859 0066 FB68     		ldr	r3, [r7, #12]
 860 0068 1B68     		ldr	r3, [r3]
 861 006a 5B68     		ldr	r3, [r3, #4]
 862 006c 1A44     		add	r2, r2, r3
 863 006e 7B68     		ldr	r3, [r7, #4]
 864 0070 5A60     		str	r2, [r3, #4]
 453:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 865              		.loc 1 453 0
 866 0072 FB68     		ldr	r3, [r7, #12]
 867 0074 1B68     		ldr	r3, [r3]
 868 0076 1A68     		ldr	r2, [r3]
 869 0078 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cc41qESQ.s 			page 28


 870 007a 1A60     		str	r2, [r3]
 871 007c 08E0     		b	.L47
 872              	.L45:
 454:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		}
 455:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		else
 456:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		{
 457:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 873              		.loc 1 457 0
 874 007e 0C4B     		ldr	r3, .L50+4
 875 0080 1A68     		ldr	r2, [r3]
 876 0082 7B68     		ldr	r3, [r7, #4]
 877 0084 1A60     		str	r2, [r3]
 878 0086 03E0     		b	.L47
 879              	.L44:
 458:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		}
 459:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	}
 460:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	else
 461:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	{
 462:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 880              		.loc 1 462 0
 881 0088 FB68     		ldr	r3, [r7, #12]
 882 008a 1A68     		ldr	r2, [r3]
 883 008c 7B68     		ldr	r3, [r7, #4]
 884 008e 1A60     		str	r2, [r3]
 885              	.L47:
 463:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	}
 464:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 
 465:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	/* If the block being inserted plugged a gab, so was merged with the block
 466:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	before and the block after, then it's pxNextFreeBlock pointer will have
 467:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	already been set, and should not be set here as that would make it point
 468:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	to itself. */
 469:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	if( pxIterator != pxBlockToInsert )
 886              		.loc 1 469 0
 887 0090 FA68     		ldr	r2, [r7, #12]
 888 0092 7B68     		ldr	r3, [r7, #4]
 889 0094 9A42     		cmp	r2, r3
 890 0096 02D0     		beq	.L49
 470:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	{
 471:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 891              		.loc 1 471 0
 892 0098 FB68     		ldr	r3, [r7, #12]
 893 009a 7A68     		ldr	r2, [r7, #4]
 894 009c 1A60     		str	r2, [r3]
 895              	.L49:
 472:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	}
 473:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	else
 474:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	{
 475:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 		mtCOVERAGE_TEST_MARKER();
 476:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** 	}
 477:Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c **** }
 896              		.loc 1 477 0
 897 009e 00BF     		nop
 898 00a0 1437     		adds	r7, r7, #20
 899              	.LCFI31:
 900              		.cfi_def_cfa_offset 4
 901 00a2 BD46     		mov	sp, r7
 902              	.LCFI32:
ARM GAS  /tmp/cc41qESQ.s 			page 29


 903              		.cfi_def_cfa_register 13
 904              		@ sp needed
 905 00a4 5DF8047B 		ldr	r7, [sp], #4
 906              	.LCFI33:
 907              		.cfi_restore 7
 908              		.cfi_def_cfa_offset 0
 909 00a8 7047     		bx	lr
 910              	.L51:
 911 00aa 00BF     		.align	2
 912              	.L50:
 913 00ac 00000000 		.word	xStart
 914 00b0 00000000 		.word	pxEnd
 915              		.cfi_endproc
 916              	.LFE149:
 918              		.text
 919              	.Letext0:
 920              		.file 3 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 921              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 922              		.file 5 "/usr/include/newlib/sys/lock.h"
 923              		.file 6 "/usr/include/newlib/sys/_types.h"
 924              		.file 7 "/usr/include/newlib/sys/reent.h"
 925              		.file 8 "/usr/include/newlib/sys/_stdint.h"
 926              		.file 9 "Drivers/CMSIS/Include/core_cm7.h"
 927              		.file 10 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
ARM GAS  /tmp/cc41qESQ.s 			page 30


DEFINED SYMBOLS
                            *ABS*:0000000000000000 heap_4.c
     /tmp/cc41qESQ.s:18     .bss.ucHeap:0000000000000000 $d
     /tmp/cc41qESQ.s:21     .bss.ucHeap:0000000000000000 ucHeap
     /tmp/cc41qESQ.s:24     .rodata.xHeapStructSize:0000000000000000 $d
     /tmp/cc41qESQ.s:27     .rodata.xHeapStructSize:0000000000000000 xHeapStructSize
     /tmp/cc41qESQ.s:30     .bss.xStart:0000000000000000 $d
     /tmp/cc41qESQ.s:33     .bss.xStart:0000000000000000 xStart
     /tmp/cc41qESQ.s:36     .bss.pxEnd:0000000000000000 $d
     /tmp/cc41qESQ.s:39     .bss.pxEnd:0000000000000000 pxEnd
     /tmp/cc41qESQ.s:42     .bss.xFreeBytesRemaining:0000000000000000 $d
     /tmp/cc41qESQ.s:45     .bss.xFreeBytesRemaining:0000000000000000 xFreeBytesRemaining
     /tmp/cc41qESQ.s:48     .bss.xMinimumEverFreeBytesRemaining:0000000000000000 $d
     /tmp/cc41qESQ.s:51     .bss.xMinimumEverFreeBytesRemaining:0000000000000000 xMinimumEverFreeBytesRemaining
     /tmp/cc41qESQ.s:54     .bss.xBlockAllocatedBit:0000000000000000 $d
     /tmp/cc41qESQ.s:57     .bss.xBlockAllocatedBit:0000000000000000 xBlockAllocatedBit
     /tmp/cc41qESQ.s:60     .text.pvPortMalloc:0000000000000000 $t
     /tmp/cc41qESQ.s:67     .text.pvPortMalloc:0000000000000000 pvPortMalloc
     /tmp/cc41qESQ.s:636    .text.prvHeapInit:0000000000000000 prvHeapInit
     /tmp/cc41qESQ.s:780    .text.prvInsertBlockIntoFreeList:0000000000000000 prvInsertBlockIntoFreeList
     /tmp/cc41qESQ.s:344    .text.pvPortMalloc:000000000000017c $d
     /tmp/cc41qESQ.s:353    .text.vPortFree:0000000000000000 $t
     /tmp/cc41qESQ.s:360    .text.vPortFree:0000000000000000 vPortFree
     /tmp/cc41qESQ.s:502    .text.vPortFree:00000000000000b0 $d
     /tmp/cc41qESQ.s:508    .text.xPortGetFreeHeapSize:0000000000000000 $t
     /tmp/cc41qESQ.s:515    .text.xPortGetFreeHeapSize:0000000000000000 xPortGetFreeHeapSize
     /tmp/cc41qESQ.s:546    .text.xPortGetFreeHeapSize:0000000000000014 $d
     /tmp/cc41qESQ.s:551    .text.xPortGetMinimumEverFreeHeapSize:0000000000000000 $t
     /tmp/cc41qESQ.s:558    .text.xPortGetMinimumEverFreeHeapSize:0000000000000000 xPortGetMinimumEverFreeHeapSize
     /tmp/cc41qESQ.s:589    .text.xPortGetMinimumEverFreeHeapSize:0000000000000014 $d
     /tmp/cc41qESQ.s:594    .text.vPortInitialiseBlocks:0000000000000000 $t
     /tmp/cc41qESQ.s:601    .text.vPortInitialiseBlocks:0000000000000000 vPortInitialiseBlocks
     /tmp/cc41qESQ.s:630    .text.prvHeapInit:0000000000000000 $t
     /tmp/cc41qESQ.s:764    .text.prvHeapInit:00000000000000ac $d
     /tmp/cc41qESQ.s:774    .text.prvInsertBlockIntoFreeList:0000000000000000 $t
     /tmp/cc41qESQ.s:913    .text.prvInsertBlockIntoFreeList:00000000000000ac $d

UNDEFINED SYMBOLS
vTaskSuspendAll
xTaskResumeAll
