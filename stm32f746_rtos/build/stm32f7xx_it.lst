ARM GAS  /tmp/ccOhTAfh.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f7xx_it.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.NMI_Handler,"ax",%progbits
  18              		.align	1
  19              		.global	NMI_Handler
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	NMI_Handler:
  26              	.LFB143:
  27              		.file 1 "Src/stm32f7xx_it.c"
   1:Src/stm32f7xx_it.c **** /**
   2:Src/stm32f7xx_it.c ****   ******************************************************************************
   3:Src/stm32f7xx_it.c ****   * @file    stm32f7xx_it.c
   4:Src/stm32f7xx_it.c ****   * @brief   Interrupt Service Routines.
   5:Src/stm32f7xx_it.c ****   ******************************************************************************
   6:Src/stm32f7xx_it.c ****   *
   7:Src/stm32f7xx_it.c ****   * COPYRIGHT(c) 2018 STMicroelectronics
   8:Src/stm32f7xx_it.c ****   *
   9:Src/stm32f7xx_it.c ****   * Redistribution and use in source and binary forms, with or without modification,
  10:Src/stm32f7xx_it.c ****   * are permitted provided that the following conditions are met:
  11:Src/stm32f7xx_it.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  12:Src/stm32f7xx_it.c ****   *      this list of conditions and the following disclaimer.
  13:Src/stm32f7xx_it.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  14:Src/stm32f7xx_it.c ****   *      this list of conditions and the following disclaimer in the documentation
  15:Src/stm32f7xx_it.c ****   *      and/or other materials provided with the distribution.
  16:Src/stm32f7xx_it.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  17:Src/stm32f7xx_it.c ****   *      may be used to endorse or promote products derived from this software
  18:Src/stm32f7xx_it.c ****   *      without specific prior written permission.
  19:Src/stm32f7xx_it.c ****   *
  20:Src/stm32f7xx_it.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:Src/stm32f7xx_it.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:Src/stm32f7xx_it.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  23:Src/stm32f7xx_it.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  24:Src/stm32f7xx_it.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  25:Src/stm32f7xx_it.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  26:Src/stm32f7xx_it.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  27:Src/stm32f7xx_it.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  28:Src/stm32f7xx_it.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  29:Src/stm32f7xx_it.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  30:Src/stm32f7xx_it.c ****   *
  31:Src/stm32f7xx_it.c ****   ******************************************************************************
ARM GAS  /tmp/ccOhTAfh.s 			page 2


  32:Src/stm32f7xx_it.c ****   */
  33:Src/stm32f7xx_it.c **** /* Includes ------------------------------------------------------------------*/
  34:Src/stm32f7xx_it.c **** #include "stm32f7xx_hal.h"
  35:Src/stm32f7xx_it.c **** #include "stm32f7xx.h"
  36:Src/stm32f7xx_it.c **** #include "stm32f7xx_it.h"
  37:Src/stm32f7xx_it.c **** #include "cmsis_os.h"
  38:Src/stm32f7xx_it.c **** 
  39:Src/stm32f7xx_it.c **** /* USER CODE BEGIN 0 */
  40:Src/stm32f7xx_it.c **** 
  41:Src/stm32f7xx_it.c **** /* USER CODE END 0 */
  42:Src/stm32f7xx_it.c **** 
  43:Src/stm32f7xx_it.c **** /* External variables --------------------------------------------------------*/
  44:Src/stm32f7xx_it.c **** extern SPI_HandleTypeDef hspi1;
  45:Src/stm32f7xx_it.c **** extern TIM_HandleTypeDef htim2;
  46:Src/stm32f7xx_it.c **** extern UART_HandleTypeDef huart4;
  47:Src/stm32f7xx_it.c **** 
  48:Src/stm32f7xx_it.c **** extern TIM_HandleTypeDef htim4;
  49:Src/stm32f7xx_it.c **** 
  50:Src/stm32f7xx_it.c **** /******************************************************************************/
  51:Src/stm32f7xx_it.c **** /*            Cortex-M7 Processor Interruption and Exception Handlers         */ 
  52:Src/stm32f7xx_it.c **** /******************************************************************************/
  53:Src/stm32f7xx_it.c **** 
  54:Src/stm32f7xx_it.c **** /**
  55:Src/stm32f7xx_it.c **** * @brief This function handles Non maskable interrupt.
  56:Src/stm32f7xx_it.c **** */
  57:Src/stm32f7xx_it.c **** void NMI_Handler(void)
  58:Src/stm32f7xx_it.c **** {
  28              		.loc 1 58 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 00AF     		add	r7, sp, #0
  38              	.LCFI1:
  39              		.cfi_def_cfa_register 7
  59:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  60:Src/stm32f7xx_it.c **** 
  61:Src/stm32f7xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  62:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  63:Src/stm32f7xx_it.c **** 
  64:Src/stm32f7xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  65:Src/stm32f7xx_it.c **** }
  40              		.loc 1 65 0
  41 0004 00BF     		nop
  42 0006 BD46     		mov	sp, r7
  43              	.LCFI2:
  44              		.cfi_def_cfa_register 13
  45              		@ sp needed
  46 0008 5DF8047B 		ldr	r7, [sp], #4
  47              	.LCFI3:
  48              		.cfi_restore 7
  49              		.cfi_def_cfa_offset 0
  50 000c 7047     		bx	lr
ARM GAS  /tmp/ccOhTAfh.s 			page 3


  51              		.cfi_endproc
  52              	.LFE143:
  54              		.section	.text.HardFault_Handler,"ax",%progbits
  55              		.align	1
  56              		.global	HardFault_Handler
  57              		.syntax unified
  58              		.thumb
  59              		.thumb_func
  60              		.fpu fpv4-sp-d16
  62              	HardFault_Handler:
  63              	.LFB144:
  66:Src/stm32f7xx_it.c **** 
  67:Src/stm32f7xx_it.c **** /**
  68:Src/stm32f7xx_it.c **** * @brief This function handles Hard fault interrupt.
  69:Src/stm32f7xx_it.c **** */
  70:Src/stm32f7xx_it.c **** void HardFault_Handler(void)
  71:Src/stm32f7xx_it.c **** {
  64              		.loc 1 71 0
  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 0
  67              		@ frame_needed = 1, uses_anonymous_args = 0
  68              		@ link register save eliminated.
  69 0000 80B4     		push	{r7}
  70              	.LCFI4:
  71              		.cfi_def_cfa_offset 4
  72              		.cfi_offset 7, -4
  73 0002 00AF     		add	r7, sp, #0
  74              	.LCFI5:
  75              		.cfi_def_cfa_register 7
  76              	.L3:
  72:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  73:Src/stm32f7xx_it.c **** 
  74:Src/stm32f7xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  75:Src/stm32f7xx_it.c ****   while (1)
  77              		.loc 1 75 0 discriminator 1
  78 0004 FEE7     		b	.L3
  79              		.cfi_endproc
  80              	.LFE144:
  82              		.section	.text.MemManage_Handler,"ax",%progbits
  83              		.align	1
  84              		.global	MemManage_Handler
  85              		.syntax unified
  86              		.thumb
  87              		.thumb_func
  88              		.fpu fpv4-sp-d16
  90              	MemManage_Handler:
  91              	.LFB145:
  76:Src/stm32f7xx_it.c ****   {
  77:Src/stm32f7xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  78:Src/stm32f7xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  79:Src/stm32f7xx_it.c ****   }
  80:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 1 */
  81:Src/stm32f7xx_it.c **** 
  82:Src/stm32f7xx_it.c ****   /* USER CODE END HardFault_IRQn 1 */
  83:Src/stm32f7xx_it.c **** }
  84:Src/stm32f7xx_it.c **** 
  85:Src/stm32f7xx_it.c **** /**
ARM GAS  /tmp/ccOhTAfh.s 			page 4


  86:Src/stm32f7xx_it.c **** * @brief This function handles Memory management fault.
  87:Src/stm32f7xx_it.c **** */
  88:Src/stm32f7xx_it.c **** void MemManage_Handler(void)
  89:Src/stm32f7xx_it.c **** {
  92              		.loc 1 89 0
  93              		.cfi_startproc
  94              		@ args = 0, pretend = 0, frame = 0
  95              		@ frame_needed = 1, uses_anonymous_args = 0
  96              		@ link register save eliminated.
  97 0000 80B4     		push	{r7}
  98              	.LCFI6:
  99              		.cfi_def_cfa_offset 4
 100              		.cfi_offset 7, -4
 101 0002 00AF     		add	r7, sp, #0
 102              	.LCFI7:
 103              		.cfi_def_cfa_register 7
 104              	.L5:
  90:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  91:Src/stm32f7xx_it.c **** 
  92:Src/stm32f7xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
  93:Src/stm32f7xx_it.c ****   while (1)
 105              		.loc 1 93 0 discriminator 1
 106 0004 FEE7     		b	.L5
 107              		.cfi_endproc
 108              	.LFE145:
 110              		.section	.text.BusFault_Handler,"ax",%progbits
 111              		.align	1
 112              		.global	BusFault_Handler
 113              		.syntax unified
 114              		.thumb
 115              		.thumb_func
 116              		.fpu fpv4-sp-d16
 118              	BusFault_Handler:
 119              	.LFB146:
  94:Src/stm32f7xx_it.c ****   {
  95:Src/stm32f7xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
  96:Src/stm32f7xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
  97:Src/stm32f7xx_it.c ****   }
  98:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 1 */
  99:Src/stm32f7xx_it.c **** 
 100:Src/stm32f7xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 1 */
 101:Src/stm32f7xx_it.c **** }
 102:Src/stm32f7xx_it.c **** 
 103:Src/stm32f7xx_it.c **** /**
 104:Src/stm32f7xx_it.c **** * @brief This function handles Pre-fetch fault, memory access fault.
 105:Src/stm32f7xx_it.c **** */
 106:Src/stm32f7xx_it.c **** void BusFault_Handler(void)
 107:Src/stm32f7xx_it.c **** {
 120              		.loc 1 107 0
 121              		.cfi_startproc
 122              		@ args = 0, pretend = 0, frame = 0
 123              		@ frame_needed = 1, uses_anonymous_args = 0
 124              		@ link register save eliminated.
 125 0000 80B4     		push	{r7}
 126              	.LCFI8:
 127              		.cfi_def_cfa_offset 4
 128              		.cfi_offset 7, -4
ARM GAS  /tmp/ccOhTAfh.s 			page 5


 129 0002 00AF     		add	r7, sp, #0
 130              	.LCFI9:
 131              		.cfi_def_cfa_register 7
 132              	.L7:
 108:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 109:Src/stm32f7xx_it.c **** 
 110:Src/stm32f7xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 111:Src/stm32f7xx_it.c ****   while (1)
 133              		.loc 1 111 0 discriminator 1
 134 0004 FEE7     		b	.L7
 135              		.cfi_endproc
 136              	.LFE146:
 138              		.section	.text.UsageFault_Handler,"ax",%progbits
 139              		.align	1
 140              		.global	UsageFault_Handler
 141              		.syntax unified
 142              		.thumb
 143              		.thumb_func
 144              		.fpu fpv4-sp-d16
 146              	UsageFault_Handler:
 147              	.LFB147:
 112:Src/stm32f7xx_it.c ****   {
 113:Src/stm32f7xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 114:Src/stm32f7xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 115:Src/stm32f7xx_it.c ****   }
 116:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 1 */
 117:Src/stm32f7xx_it.c **** 
 118:Src/stm32f7xx_it.c ****   /* USER CODE END BusFault_IRQn 1 */
 119:Src/stm32f7xx_it.c **** }
 120:Src/stm32f7xx_it.c **** 
 121:Src/stm32f7xx_it.c **** /**
 122:Src/stm32f7xx_it.c **** * @brief This function handles Undefined instruction or illegal state.
 123:Src/stm32f7xx_it.c **** */
 124:Src/stm32f7xx_it.c **** void UsageFault_Handler(void)
 125:Src/stm32f7xx_it.c **** {
 148              		.loc 1 125 0
 149              		.cfi_startproc
 150              		@ args = 0, pretend = 0, frame = 0
 151              		@ frame_needed = 1, uses_anonymous_args = 0
 152              		@ link register save eliminated.
 153 0000 80B4     		push	{r7}
 154              	.LCFI10:
 155              		.cfi_def_cfa_offset 4
 156              		.cfi_offset 7, -4
 157 0002 00AF     		add	r7, sp, #0
 158              	.LCFI11:
 159              		.cfi_def_cfa_register 7
 160              	.L9:
 126:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 127:Src/stm32f7xx_it.c **** 
 128:Src/stm32f7xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 129:Src/stm32f7xx_it.c ****   while (1)
 161              		.loc 1 129 0 discriminator 1
 162 0004 FEE7     		b	.L9
 163              		.cfi_endproc
 164              	.LFE147:
 166              		.section	.text.DebugMon_Handler,"ax",%progbits
ARM GAS  /tmp/ccOhTAfh.s 			page 6


 167              		.align	1
 168              		.global	DebugMon_Handler
 169              		.syntax unified
 170              		.thumb
 171              		.thumb_func
 172              		.fpu fpv4-sp-d16
 174              	DebugMon_Handler:
 175              	.LFB148:
 130:Src/stm32f7xx_it.c ****   {
 131:Src/stm32f7xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 132:Src/stm32f7xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 133:Src/stm32f7xx_it.c ****   }
 134:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 1 */
 135:Src/stm32f7xx_it.c **** 
 136:Src/stm32f7xx_it.c ****   /* USER CODE END UsageFault_IRQn 1 */
 137:Src/stm32f7xx_it.c **** }
 138:Src/stm32f7xx_it.c **** 
 139:Src/stm32f7xx_it.c **** /**
 140:Src/stm32f7xx_it.c **** * @brief This function handles Debug monitor.
 141:Src/stm32f7xx_it.c **** */
 142:Src/stm32f7xx_it.c **** void DebugMon_Handler(void)
 143:Src/stm32f7xx_it.c **** {
 176              		.loc 1 143 0
 177              		.cfi_startproc
 178              		@ args = 0, pretend = 0, frame = 0
 179              		@ frame_needed = 1, uses_anonymous_args = 0
 180              		@ link register save eliminated.
 181 0000 80B4     		push	{r7}
 182              	.LCFI12:
 183              		.cfi_def_cfa_offset 4
 184              		.cfi_offset 7, -4
 185 0002 00AF     		add	r7, sp, #0
 186              	.LCFI13:
 187              		.cfi_def_cfa_register 7
 144:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 145:Src/stm32f7xx_it.c **** 
 146:Src/stm32f7xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 147:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 148:Src/stm32f7xx_it.c **** 
 149:Src/stm32f7xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 150:Src/stm32f7xx_it.c **** }
 188              		.loc 1 150 0
 189 0004 00BF     		nop
 190 0006 BD46     		mov	sp, r7
 191              	.LCFI14:
 192              		.cfi_def_cfa_register 13
 193              		@ sp needed
 194 0008 5DF8047B 		ldr	r7, [sp], #4
 195              	.LCFI15:
 196              		.cfi_restore 7
 197              		.cfi_def_cfa_offset 0
 198 000c 7047     		bx	lr
 199              		.cfi_endproc
 200              	.LFE148:
 202              		.section	.text.SysTick_Handler,"ax",%progbits
 203              		.align	1
 204              		.global	SysTick_Handler
ARM GAS  /tmp/ccOhTAfh.s 			page 7


 205              		.syntax unified
 206              		.thumb
 207              		.thumb_func
 208              		.fpu fpv4-sp-d16
 210              	SysTick_Handler:
 211              	.LFB149:
 151:Src/stm32f7xx_it.c **** 
 152:Src/stm32f7xx_it.c **** /**
 153:Src/stm32f7xx_it.c **** * @brief This function handles System tick timer.
 154:Src/stm32f7xx_it.c **** */
 155:Src/stm32f7xx_it.c **** void SysTick_Handler(void)
 156:Src/stm32f7xx_it.c **** {
 212              		.loc 1 156 0
 213              		.cfi_startproc
 214              		@ args = 0, pretend = 0, frame = 0
 215              		@ frame_needed = 1, uses_anonymous_args = 0
 216 0000 80B5     		push	{r7, lr}
 217              	.LCFI16:
 218              		.cfi_def_cfa_offset 8
 219              		.cfi_offset 7, -8
 220              		.cfi_offset 14, -4
 221 0002 00AF     		add	r7, sp, #0
 222              	.LCFI17:
 223              		.cfi_def_cfa_register 7
 157:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 158:Src/stm32f7xx_it.c **** 
 159:Src/stm32f7xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 160:Src/stm32f7xx_it.c ****   osSystickHandler();
 224              		.loc 1 160 0
 225 0004 FFF7FEFF 		bl	osSystickHandler
 161:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 162:Src/stm32f7xx_it.c **** 
 163:Src/stm32f7xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 164:Src/stm32f7xx_it.c **** }
 226              		.loc 1 164 0
 227 0008 00BF     		nop
 228 000a 80BD     		pop	{r7, pc}
 229              		.cfi_endproc
 230              	.LFE149:
 232              		.section	.text.TIM2_IRQHandler,"ax",%progbits
 233              		.align	1
 234              		.global	TIM2_IRQHandler
 235              		.syntax unified
 236              		.thumb
 237              		.thumb_func
 238              		.fpu fpv4-sp-d16
 240              	TIM2_IRQHandler:
 241              	.LFB150:
 165:Src/stm32f7xx_it.c **** 
 166:Src/stm32f7xx_it.c **** /******************************************************************************/
 167:Src/stm32f7xx_it.c **** /* STM32F7xx Peripheral Interrupt Handlers                                    */
 168:Src/stm32f7xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 169:Src/stm32f7xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 170:Src/stm32f7xx_it.c **** /* please refer to the startup file (startup_stm32f7xx.s).                    */
 171:Src/stm32f7xx_it.c **** /******************************************************************************/
 172:Src/stm32f7xx_it.c **** 
 173:Src/stm32f7xx_it.c **** /**
ARM GAS  /tmp/ccOhTAfh.s 			page 8


 174:Src/stm32f7xx_it.c **** * @brief This function handles TIM2 global interrupt.
 175:Src/stm32f7xx_it.c **** */
 176:Src/stm32f7xx_it.c **** void TIM2_IRQHandler(void)
 177:Src/stm32f7xx_it.c **** {
 242              		.loc 1 177 0
 243              		.cfi_startproc
 244              		@ args = 0, pretend = 0, frame = 0
 245              		@ frame_needed = 1, uses_anonymous_args = 0
 246 0000 80B5     		push	{r7, lr}
 247              	.LCFI18:
 248              		.cfi_def_cfa_offset 8
 249              		.cfi_offset 7, -8
 250              		.cfi_offset 14, -4
 251 0002 00AF     		add	r7, sp, #0
 252              	.LCFI19:
 253              		.cfi_def_cfa_register 7
 178:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 0 */
 179:Src/stm32f7xx_it.c **** 
 180:Src/stm32f7xx_it.c ****   /* USER CODE END TIM2_IRQn 0 */
 181:Src/stm32f7xx_it.c ****   HAL_TIM_IRQHandler(&htim2);
 254              		.loc 1 181 0
 255 0004 0248     		ldr	r0, .L13
 256 0006 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 182:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 1 */
 183:Src/stm32f7xx_it.c **** 
 184:Src/stm32f7xx_it.c ****   /* USER CODE END TIM2_IRQn 1 */
 185:Src/stm32f7xx_it.c **** }
 257              		.loc 1 185 0
 258 000a 00BF     		nop
 259 000c 80BD     		pop	{r7, pc}
 260              	.L14:
 261 000e 00BF     		.align	2
 262              	.L13:
 263 0010 00000000 		.word	htim2
 264              		.cfi_endproc
 265              	.LFE150:
 267              		.section	.text.TIM4_IRQHandler,"ax",%progbits
 268              		.align	1
 269              		.global	TIM4_IRQHandler
 270              		.syntax unified
 271              		.thumb
 272              		.thumb_func
 273              		.fpu fpv4-sp-d16
 275              	TIM4_IRQHandler:
 276              	.LFB151:
 186:Src/stm32f7xx_it.c **** 
 187:Src/stm32f7xx_it.c **** /**
 188:Src/stm32f7xx_it.c **** * @brief This function handles TIM4 global interrupt.
 189:Src/stm32f7xx_it.c **** */
 190:Src/stm32f7xx_it.c **** void TIM4_IRQHandler(void)
 191:Src/stm32f7xx_it.c **** {
 277              		.loc 1 191 0
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 0
 280              		@ frame_needed = 1, uses_anonymous_args = 0
 281 0000 80B5     		push	{r7, lr}
 282              	.LCFI20:
ARM GAS  /tmp/ccOhTAfh.s 			page 9


 283              		.cfi_def_cfa_offset 8
 284              		.cfi_offset 7, -8
 285              		.cfi_offset 14, -4
 286 0002 00AF     		add	r7, sp, #0
 287              	.LCFI21:
 288              		.cfi_def_cfa_register 7
 192:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN TIM4_IRQn 0 */
 193:Src/stm32f7xx_it.c **** 
 194:Src/stm32f7xx_it.c ****   /* USER CODE END TIM4_IRQn 0 */
 195:Src/stm32f7xx_it.c ****   HAL_TIM_IRQHandler(&htim4);
 289              		.loc 1 195 0
 290 0004 0248     		ldr	r0, .L16
 291 0006 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 196:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN TIM4_IRQn 1 */
 197:Src/stm32f7xx_it.c **** 
 198:Src/stm32f7xx_it.c ****   /* USER CODE END TIM4_IRQn 1 */
 199:Src/stm32f7xx_it.c **** }
 292              		.loc 1 199 0
 293 000a 00BF     		nop
 294 000c 80BD     		pop	{r7, pc}
 295              	.L17:
 296 000e 00BF     		.align	2
 297              	.L16:
 298 0010 00000000 		.word	htim4
 299              		.cfi_endproc
 300              	.LFE151:
 302              		.text
 303              	.Letext0:
 304              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 305              		.file 3 "/usr/include/newlib/sys/lock.h"
 306              		.file 4 "/usr/include/newlib/sys/_types.h"
 307              		.file 5 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 308              		.file 6 "/usr/include/newlib/sys/reent.h"
 309              		.file 7 "/usr/include/newlib/sys/_stdint.h"
 310              		.file 8 "Drivers/CMSIS/Include/core_cm7.h"
 311              		.file 9 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 312              		.file 10 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f746xx.h"
 313              		.file 11 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 314              		.file 12 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 315              		.file 13 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_spi.h"
 316              		.file 14 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim.h"
 317              		.file 15 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_uart.h"
ARM GAS  /tmp/ccOhTAfh.s 			page 10


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f7xx_it.c
     /tmp/ccOhTAfh.s:18     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccOhTAfh.s:25     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccOhTAfh.s:55     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccOhTAfh.s:62     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccOhTAfh.s:83     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccOhTAfh.s:90     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccOhTAfh.s:111    .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccOhTAfh.s:118    .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccOhTAfh.s:139    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccOhTAfh.s:146    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccOhTAfh.s:167    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccOhTAfh.s:174    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccOhTAfh.s:203    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccOhTAfh.s:210    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccOhTAfh.s:233    .text.TIM2_IRQHandler:0000000000000000 $t
     /tmp/ccOhTAfh.s:240    .text.TIM2_IRQHandler:0000000000000000 TIM2_IRQHandler
     /tmp/ccOhTAfh.s:263    .text.TIM2_IRQHandler:0000000000000010 $d
     /tmp/ccOhTAfh.s:268    .text.TIM4_IRQHandler:0000000000000000 $t
     /tmp/ccOhTAfh.s:275    .text.TIM4_IRQHandler:0000000000000000 TIM4_IRQHandler
     /tmp/ccOhTAfh.s:298    .text.TIM4_IRQHandler:0000000000000010 $d

UNDEFINED SYMBOLS
osSystickHandler
HAL_TIM_IRQHandler
htim2
htim4
