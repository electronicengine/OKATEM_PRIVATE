ARM GAS  /tmp/ccTABCUX.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"freertos.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	gpsData,416,4
  18              		.comm	sensorValues,20,4
  19              		.comm	calibration,4,4
  20              		.comm	motor1,8,4
  21              		.comm	motor2,8,4
  22              		.comm	motor3,8,4
  23              		.comm	motor4,8,4
  24              		.comm	servo1,8,4
  25              		.comm	servo2,8,4
  26              		.comm	gpsThreadHandle,4,4
  27              		.comm	sensorThreadHandle,4,4
  28              		.comm	spiComThreadHandle,4,4
  29              		.comm	motorThreadHandle,4,4
  30              		.comm	spiMutexHandle,4,4
  31              		.comm	uartMutexHandle,4,4
  32              		.comm	memoryMutexHandle,4,4
  33              		.comm	spiSemaphoreHandle,4,4
  34              		.comm	uartSemaphoreHandle,4,4
  35              		.comm	SpiCheckData,4,4
  36              		.comm	SpiTxData,4,4
  37              		.comm	SpiRxData,4,4
  38              		.comm	EnvironmentData,4,4
  39              		.comm	ControlData,4,4
  40              		.comm	UpdateFile,4,4
  41              		.comm	SensorCalibrationNeeded,4,4
  42              		.comm	rx_buf,1,1
  43              		.section	.text.UART4_IRQHandler,"ax",%progbits
  44              		.align	1
  45              		.global	UART4_IRQHandler
  46              		.syntax unified
  47              		.thumb
  48              		.thumb_func
  49              		.fpu fpv4-sp-d16
  51              	UART4_IRQHandler:
  52              	.LFB143:
  53              		.file 1 "Src/gpsops.c"
   1:Src/gpsops.c  **** #include "gpsops.h"
   2:Src/gpsops.c  **** #include "stdlib.h"
   3:Src/gpsops.c  **** 
   4:Src/gpsops.c  **** 
   5:Src/gpsops.c  **** void UART4_IRQHandler(void)
ARM GAS  /tmp/ccTABCUX.s 			page 2


   6:Src/gpsops.c  **** {
  54              		.loc 1 6 0
  55              		.cfi_startproc
  56              		@ args = 0, pretend = 0, frame = 0
  57              		@ frame_needed = 1, uses_anonymous_args = 0
  58 0000 80B5     		push	{r7, lr}
  59              	.LCFI0:
  60              		.cfi_def_cfa_offset 8
  61              		.cfi_offset 7, -8
  62              		.cfi_offset 14, -4
  63 0002 00AF     		add	r7, sp, #0
  64              	.LCFI1:
  65              		.cfi_def_cfa_register 7
   7:Src/gpsops.c  **** 
   8:Src/gpsops.c  **** 
   9:Src/gpsops.c  ****     HAL_UART_IRQHandler(&huart4);
  66              		.loc 1 9 0
  67 0004 0548     		ldr	r0, .L2
  68 0006 FFF7FEFF 		bl	HAL_UART_IRQHandler
  10:Src/gpsops.c  **** 
  11:Src/gpsops.c  ****     xSemaphoreGiveFromISR(uartSemaphoreHandle, NULL);
  69              		.loc 1 11 0
  70 000a 054B     		ldr	r3, .L2+4
  71 000c 1B68     		ldr	r3, [r3]
  72 000e 0021     		movs	r1, #0
  73 0010 1846     		mov	r0, r3
  74 0012 FFF7FEFF 		bl	xQueueGiveFromISR
  12:Src/gpsops.c  **** 
  13:Src/gpsops.c  **** }
  75              		.loc 1 13 0
  76 0016 00BF     		nop
  77 0018 80BD     		pop	{r7, pc}
  78              	.L3:
  79 001a 00BF     		.align	2
  80              	.L2:
  81 001c 00000000 		.word	huart4
  82 0020 00000000 		.word	uartSemaphoreHandle
  83              		.cfi_endproc
  84              	.LFE143:
  86              		.section	.rodata
  87              		.align	2
  88              	.LC8:
  89 0000 6770734F 		.ascii	"gpsOps\015\012\000"
  89      70730D0A 
  89      00
  90 0009 000000   		.align	2
  91              	.LC9:
  92 000c 6770734F 		.ascii	"gpsOps Crash \015\012\000"
  92      70732043 
  92      72617368 
  92      200D0A00 
  93              		.section	.text.gpsOps,"ax",%progbits
  94              		.align	1
  95              		.global	gpsOps
  96              		.syntax unified
  97              		.thumb
  98              		.thumb_func
ARM GAS  /tmp/ccTABCUX.s 			page 3


  99              		.fpu fpv4-sp-d16
 101              	gpsOps:
 102              	.LFB144:
  14:Src/gpsops.c  **** 
  15:Src/gpsops.c  **** 
  16:Src/gpsops.c  **** 
  17:Src/gpsops.c  **** void gpsOps(void const *argument)
  18:Src/gpsops.c  **** {
 103              		.loc 1 18 0
 104              		.cfi_startproc
 105              		@ args = 0, pretend = 0, frame = 16
 106              		@ frame_needed = 1, uses_anonymous_args = 0
 107 0000 80B5     		push	{r7, lr}
 108              	.LCFI2:
 109              		.cfi_def_cfa_offset 8
 110              		.cfi_offset 7, -8
 111              		.cfi_offset 14, -4
 112 0002 84B0     		sub	sp, sp, #16
 113              	.LCFI3:
 114              		.cfi_def_cfa_offset 24
 115 0004 00AF     		add	r7, sp, #0
 116              	.LCFI4:
 117              		.cfi_def_cfa_register 7
 118 0006 7860     		str	r0, [r7, #4]
  19:Src/gpsops.c  **** 
  20:Src/gpsops.c  ****     mprintf("gpsOps\r\n");
 119              		.loc 1 20 0
 120 0008 2748     		ldr	r0, .L11
 121 000a FFF7FEFF 		bl	mprintf
  21:Src/gpsops.c  **** 
  22:Src/gpsops.c  ****     unsigned char rx_data;
  23:Src/gpsops.c  **** 
  24:Src/gpsops.c  ****     gpsInit();
 122              		.loc 1 24 0
 123 000e FFF7FEFF 		bl	gpsInit
 124              	.L10:
  25:Src/gpsops.c  **** 
  26:Src/gpsops.c  ****   while(1)
  27:Src/gpsops.c  ****   {
  28:Src/gpsops.c  **** 
  29:Src/gpsops.c  ****       if( xSemaphoreTake(uartSemaphoreHandle, 1000) == pdPASS)
 125              		.loc 1 29 0
 126 0012 264B     		ldr	r3, .L11+4
 127 0014 1868     		ldr	r0, [r3]
 128 0016 0023     		movs	r3, #0
 129 0018 4FF47A72 		mov	r2, #1000
 130 001c 0021     		movs	r1, #0
 131 001e FFF7FEFF 		bl	xQueueGenericReceive
 132 0022 0346     		mov	r3, r0
 133 0024 012B     		cmp	r3, #1
 134 0026 3AD1     		bne	.L5
  30:Src/gpsops.c  ****       {
  31:Src/gpsops.c  **** 
  32:Src/gpsops.c  **** 
  33:Src/gpsops.c  ****         if(checkGpsData() == GPS_READY)
 135              		.loc 1 33 0
 136 0028 FFF7FEFF 		bl	checkGpsData
ARM GAS  /tmp/ccTABCUX.s 			page 4


 137 002c 0346     		mov	r3, r0
 138 002e 012B     		cmp	r3, #1
 139 0030 2BD1     		bne	.L6
  34:Src/gpsops.c  ****         {
  35:Src/gpsops.c  **** 
  36:Src/gpsops.c  ****                xSemaphoreTake(spiMutexHandle, portMAX_DELAY);
 140              		.loc 1 36 0
 141 0032 1F4B     		ldr	r3, .L11+8
 142 0034 1868     		ldr	r0, [r3]
 143 0036 0023     		movs	r3, #0
 144 0038 4FF0FF32 		mov	r2, #-1
 145 003c 0021     		movs	r1, #0
 146 003e FFF7FEFF 		bl	xQueueGenericReceive
 147              	.LBB2:
  37:Src/gpsops.c  **** 
  38:Src/gpsops.c  ****                for(int i=0; i<99; i++)
 148              		.loc 1 38 0
 149 0042 0023     		movs	r3, #0
 150 0044 FB60     		str	r3, [r7, #12]
 151 0046 0FE0     		b	.L7
 152              	.L8:
  39:Src/gpsops.c  ****                    EnvironmentData -> gps_string[i] = gpsData.gprmc_body[i];
 153              		.loc 1 39 0 discriminator 3
 154 0048 1A4B     		ldr	r3, .L11+12
 155 004a 1A68     		ldr	r2, [r3]
 156 004c 1A49     		ldr	r1, .L11+16
 157 004e FB68     		ldr	r3, [r7, #12]
 158 0050 0B44     		add	r3, r3, r1
 159 0052 03F59C73 		add	r3, r3, #312
 160 0056 1B78     		ldrb	r3, [r3]
 161 0058 D9B2     		uxtb	r1, r3
 162 005a FB68     		ldr	r3, [r7, #12]
 163 005c 1344     		add	r3, r3, r2
 164 005e 0A46     		mov	r2, r1
 165 0060 1A70     		strb	r2, [r3]
  38:Src/gpsops.c  ****                    EnvironmentData -> gps_string[i] = gpsData.gprmc_body[i];
 166              		.loc 1 38 0 discriminator 3
 167 0062 FB68     		ldr	r3, [r7, #12]
 168 0064 0133     		adds	r3, r3, #1
 169 0066 FB60     		str	r3, [r7, #12]
 170              	.L7:
  38:Src/gpsops.c  ****                    EnvironmentData -> gps_string[i] = gpsData.gprmc_body[i];
 171              		.loc 1 38 0 is_stmt 0 discriminator 1
 172 0068 FB68     		ldr	r3, [r7, #12]
 173 006a 622B     		cmp	r3, #98
 174 006c ECDD     		ble	.L8
 175              	.LBE2:
  40:Src/gpsops.c  **** 
  41:Src/gpsops.c  ****                xSemaphoreGive(spiMutexHandle);
 176              		.loc 1 41 0 is_stmt 1
 177 006e 104B     		ldr	r3, .L11+8
 178 0070 1868     		ldr	r0, [r3]
 179 0072 0023     		movs	r3, #0
 180 0074 0022     		movs	r2, #0
 181 0076 0021     		movs	r1, #0
 182 0078 FFF7FEFF 		bl	xQueueGenericSend
  42:Src/gpsops.c  **** 
ARM GAS  /tmp/ccTABCUX.s 			page 5


  43:Src/gpsops.c  **** 
  44:Src/gpsops.c  **** 
  45:Src/gpsops.c  ****            HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 183              		.loc 1 45 0
 184 007c 4FF48051 		mov	r1, #4096
 185 0080 0E48     		ldr	r0, .L11+20
 186 0082 FFF7FEFF 		bl	HAL_GPIO_TogglePin
  46:Src/gpsops.c  **** 
  47:Src/gpsops.c  ****            enableGps();
 187              		.loc 1 47 0
 188 0086 FFF7FEFF 		bl	enableGps
 189              	.L6:
  48:Src/gpsops.c  **** 
  49:Src/gpsops.c  ****         }
  50:Src/gpsops.c  **** 
  51:Src/gpsops.c  **** 
  52:Src/gpsops.c  ****           receiveGpsData();
 190              		.loc 1 52 0
 191 008a FFF7FEFF 		bl	receiveGpsData
  53:Src/gpsops.c  **** 
  54:Src/gpsops.c  ****           HAL_UART_Receive_IT(&huart4, (uint8_t *)&rx_data, 1);
 192              		.loc 1 54 0
 193 008e 07F10B03 		add	r3, r7, #11
 194 0092 0122     		movs	r2, #1
 195 0094 1946     		mov	r1, r3
 196 0096 0A48     		ldr	r0, .L11+24
 197 0098 FFF7FEFF 		bl	HAL_UART_Receive_IT
 198 009c B9E7     		b	.L10
 199              	.L5:
  55:Src/gpsops.c  **** 
  56:Src/gpsops.c  **** 
  57:Src/gpsops.c  ****       }
  58:Src/gpsops.c  ****       else
  59:Src/gpsops.c  ****       {
  60:Src/gpsops.c  **** 
  61:Src/gpsops.c  ****           mprintf("gpsOps Crash \r\n");
 200              		.loc 1 61 0
 201 009e 0948     		ldr	r0, .L11+28
 202 00a0 FFF7FEFF 		bl	mprintf
  29:Src/gpsops.c  ****       {
 203              		.loc 1 29 0
 204 00a4 B5E7     		b	.L10
 205              	.L12:
 206 00a6 00BF     		.align	2
 207              	.L11:
 208 00a8 00000000 		.word	.LC8
 209 00ac 00000000 		.word	uartSemaphoreHandle
 210 00b0 00000000 		.word	spiMutexHandle
 211 00b4 00000000 		.word	EnvironmentData
 212 00b8 00000000 		.word	gpsData
 213 00bc 00040240 		.word	1073873920
 214 00c0 00000000 		.word	huart4
 215 00c4 0C000000 		.word	.LC9
 216              		.cfi_endproc
 217              	.LFE144:
 219              		.global	NextUpdateDataPackage
 220              		.section	.data.NextUpdateDataPackage,"aw",%progbits
ARM GAS  /tmp/ccTABCUX.s 			page 6


 221              		.align	2
 224              	NextUpdateDataPackage:
 225 0000 01000000 		.word	1
 226              		.global	CurrentUpdateDataPackage
 227              		.section	.data.CurrentUpdateDataPackage,"aw",%progbits
 228              		.align	2
 231              	CurrentUpdateDataPackage:
 232 0000 01000000 		.word	1
 233              		.section	.text.writeFlash,"ax",%progbits
 234              		.align	1
 235              		.global	writeFlash
 236              		.syntax unified
 237              		.thumb
 238              		.thumb_func
 239              		.fpu fpv4-sp-d16
 241              	writeFlash:
 242              	.LFB145:
 243              		.file 2 "Src/spiops.c"
   1:Src/spiops.c  **** #include "spiops.h"
   2:Src/spiops.c  **** #include "stdlib.h"
   3:Src/spiops.c  **** 
   4:Src/spiops.c  **** #define SECTOR6_ADDRESS 0x8080000
   5:Src/spiops.c  **** 
   6:Src/spiops.c  **** uint32_t NextUpdateDataPackage = 1;
   7:Src/spiops.c  **** uint32_t CurrentUpdateDataPackage = 1;
   8:Src/spiops.c  **** 
   9:Src/spiops.c  **** 
  10:Src/spiops.c  **** void writeFlash(uint8_t Data, long Address)
  11:Src/spiops.c  **** {
 244              		.loc 2 11 0
 245              		.cfi_startproc
 246              		@ args = 0, pretend = 0, frame = 8
 247              		@ frame_needed = 1, uses_anonymous_args = 0
 248 0000 90B5     		push	{r4, r7, lr}
 249              	.LCFI5:
 250              		.cfi_def_cfa_offset 12
 251              		.cfi_offset 4, -12
 252              		.cfi_offset 7, -8
 253              		.cfi_offset 14, -4
 254 0002 83B0     		sub	sp, sp, #12
 255              	.LCFI6:
 256              		.cfi_def_cfa_offset 24
 257 0004 00AF     		add	r7, sp, #0
 258              	.LCFI7:
 259              		.cfi_def_cfa_register 7
 260 0006 0346     		mov	r3, r0
 261 0008 3960     		str	r1, [r7]
 262 000a FB71     		strb	r3, [r7, #7]
  12:Src/spiops.c  **** 
  13:Src/spiops.c  ****      HAL_FLASH_Program(TYPEPROGRAM_BYTE, Address , (uint8_t) Data);
 263              		.loc 2 13 0
 264 000c 3968     		ldr	r1, [r7]
 265 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 266 0010 4FF00004 		mov	r4, #0
 267 0014 1A46     		mov	r2, r3
 268 0016 2346     		mov	r3, r4
 269 0018 0020     		movs	r0, #0
ARM GAS  /tmp/ccTABCUX.s 			page 7


 270 001a FFF7FEFF 		bl	HAL_FLASH_Program
  14:Src/spiops.c  **** 
  15:Src/spiops.c  **** }
 271              		.loc 2 15 0
 272 001e 00BF     		nop
 273 0020 0C37     		adds	r7, r7, #12
 274              	.LCFI8:
 275              		.cfi_def_cfa_offset 12
 276 0022 BD46     		mov	sp, r7
 277              	.LCFI9:
 278              		.cfi_def_cfa_register 13
 279              		@ sp needed
 280 0024 90BD     		pop	{r4, r7, pc}
 281              		.cfi_endproc
 282              	.LFE145:
 284              		.section	.text.readFlash,"ax",%progbits
 285              		.align	1
 286              		.global	readFlash
 287              		.syntax unified
 288              		.thumb
 289              		.thumb_func
 290              		.fpu fpv4-sp-d16
 292              	readFlash:
 293              	.LFB146:
  16:Src/spiops.c  **** 
  17:Src/spiops.c  **** 
  18:Src/spiops.c  **** 
  19:Src/spiops.c  **** uint8_t readFlash(int Address)
  20:Src/spiops.c  **** {
 294              		.loc 2 20 0
 295              		.cfi_startproc
 296              		@ args = 0, pretend = 0, frame = 16
 297              		@ frame_needed = 1, uses_anonymous_args = 0
 298              		@ link register save eliminated.
 299 0000 80B4     		push	{r7}
 300              	.LCFI10:
 301              		.cfi_def_cfa_offset 4
 302              		.cfi_offset 7, -4
 303 0002 85B0     		sub	sp, sp, #20
 304              	.LCFI11:
 305              		.cfi_def_cfa_offset 24
 306 0004 00AF     		add	r7, sp, #0
 307              	.LCFI12:
 308              		.cfi_def_cfa_register 7
 309 0006 7860     		str	r0, [r7, #4]
  21:Src/spiops.c  **** 
  22:Src/spiops.c  ****     uint8_t flash_data;
  23:Src/spiops.c  **** 
  24:Src/spiops.c  ****     flash_data = *(uint8_t *)Address;
 310              		.loc 2 24 0
 311 0008 7B68     		ldr	r3, [r7, #4]
 312 000a 1B78     		ldrb	r3, [r3]
 313 000c FB73     		strb	r3, [r7, #15]
  25:Src/spiops.c  **** 
  26:Src/spiops.c  ****     return flash_data;
 314              		.loc 2 26 0
 315 000e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
ARM GAS  /tmp/ccTABCUX.s 			page 8


  27:Src/spiops.c  **** 
  28:Src/spiops.c  **** }
 316              		.loc 2 28 0
 317 0010 1846     		mov	r0, r3
 318 0012 1437     		adds	r7, r7, #20
 319              	.LCFI13:
 320              		.cfi_def_cfa_offset 4
 321 0014 BD46     		mov	sp, r7
 322              	.LCFI14:
 323              		.cfi_def_cfa_register 13
 324              		@ sp needed
 325 0016 5DF8047B 		ldr	r7, [sp], #4
 326              	.LCFI15:
 327              		.cfi_restore 7
 328              		.cfi_def_cfa_offset 0
 329 001a 7047     		bx	lr
 330              		.cfi_endproc
 331              	.LFE146:
 333              		.section	.text.SPI1_IRQHandler,"ax",%progbits
 334              		.align	1
 335              		.global	SPI1_IRQHandler
 336              		.syntax unified
 337              		.thumb
 338              		.thumb_func
 339              		.fpu fpv4-sp-d16
 341              	SPI1_IRQHandler:
 342              	.LFB147:
  29:Src/spiops.c  **** 
  30:Src/spiops.c  **** 
  31:Src/spiops.c  **** 
  32:Src/spiops.c  **** void SPI1_IRQHandler(void)
  33:Src/spiops.c  **** {
 343              		.loc 2 33 0
 344              		.cfi_startproc
 345              		@ args = 0, pretend = 0, frame = 0
 346              		@ frame_needed = 1, uses_anonymous_args = 0
 347 0000 80B5     		push	{r7, lr}
 348              	.LCFI16:
 349              		.cfi_def_cfa_offset 8
 350              		.cfi_offset 7, -8
 351              		.cfi_offset 14, -4
 352 0002 00AF     		add	r7, sp, #0
 353              	.LCFI17:
 354              		.cfi_def_cfa_register 7
  34:Src/spiops.c  **** 
  35:Src/spiops.c  ****   HAL_SPI_IRQHandler(&hspi1);
 355              		.loc 2 35 0
 356 0004 0548     		ldr	r0, .L17
 357 0006 FFF7FEFF 		bl	HAL_SPI_IRQHandler
  36:Src/spiops.c  **** 
  37:Src/spiops.c  ****   xSemaphoreGiveFromISR(spiSemaphoreHandle, NULL);
 358              		.loc 2 37 0
 359 000a 054B     		ldr	r3, .L17+4
 360 000c 1B68     		ldr	r3, [r3]
 361 000e 0021     		movs	r1, #0
 362 0010 1846     		mov	r0, r3
 363 0012 FFF7FEFF 		bl	xQueueGiveFromISR
ARM GAS  /tmp/ccTABCUX.s 			page 9


  38:Src/spiops.c  **** 
  39:Src/spiops.c  **** }
 364              		.loc 2 39 0
 365 0016 00BF     		nop
 366 0018 80BD     		pop	{r7, pc}
 367              	.L18:
 368 001a 00BF     		.align	2
 369              	.L17:
 370 001c 00000000 		.word	hspi1
 371 0020 00000000 		.word	spiSemaphoreHandle
 372              		.cfi_endproc
 373              	.LFE147:
 375              		.section	.rodata
 376              		.align	2
 377              	.LC10:
 378 001c 7370694F 		.ascii	"spiOps\015\012\000"
 378      70730D0A 
 378      00
 379              		.section	.text.spiComOps,"ax",%progbits
 380              		.align	1
 381              		.global	spiComOps
 382              		.syntax unified
 383              		.thumb
 384              		.thumb_func
 385              		.fpu fpv4-sp-d16
 387              	spiComOps:
 388              	.LFB148:
  40:Src/spiops.c  **** 
  41:Src/spiops.c  **** 
  42:Src/spiops.c  **** 
  43:Src/spiops.c  **** /* spiComOps function */
  44:Src/spiops.c  **** void spiComOps(void const * argument)
  45:Src/spiops.c  **** {
 389              		.loc 2 45 0
 390              		.cfi_startproc
 391              		@ args = 0, pretend = 0, frame = 16
 392              		@ frame_needed = 1, uses_anonymous_args = 0
 393 0000 80B5     		push	{r7, lr}
 394              	.LCFI18:
 395              		.cfi_def_cfa_offset 8
 396              		.cfi_offset 7, -8
 397              		.cfi_offset 14, -4
 398 0002 84B0     		sub	sp, sp, #16
 399              	.LCFI19:
 400              		.cfi_def_cfa_offset 24
 401 0004 00AF     		add	r7, sp, #0
 402              	.LCFI20:
 403              		.cfi_def_cfa_register 7
 404 0006 7860     		str	r0, [r7, #4]
  46:Src/spiops.c  **** 
  47:Src/spiops.c  ****     HAL_SPI_StateTypeDef status;
  48:Src/spiops.c  **** 
  49:Src/spiops.c  ****     short int ret;
  50:Src/spiops.c  ****     short int update_data_available = 0;
 405              		.loc 2 50 0
 406 0008 0023     		movs	r3, #0
 407 000a FB81     		strh	r3, [r7, #14]	@ movhi
ARM GAS  /tmp/ccTABCUX.s 			page 10


  51:Src/spiops.c  ****     short int control_data_available = 0;
 408              		.loc 2 51 0
 409 000c 0023     		movs	r3, #0
 410 000e BB81     		strh	r3, [r7, #12]	@ movhi
  52:Src/spiops.c  **** 
  53:Src/spiops.c  ****     mprintf("spiOps\r\n");
 411              		.loc 2 53 0
 412 0010 4048     		ldr	r0, .L28
 413 0012 FFF7FEFF 		bl	mprintf
  54:Src/spiops.c  **** 
  55:Src/spiops.c  ****     HAL_FLASH_Unlock();
 414              		.loc 2 55 0
 415 0016 FFF7FEFF 		bl	HAL_FLASH_Unlock
  56:Src/spiops.c  ****     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAER
 416              		.loc 2 56 0
 417 001a 3F4B     		ldr	r3, .L28+4
 418 001c 3322     		movs	r2, #51
 419 001e DA60     		str	r2, [r3, #12]
  57:Src/spiops.c  ****     FLASH_Erase_Sector(FLASH_SECTOR_6, VOLTAGE_RANGE_3);
 420              		.loc 2 57 0
 421 0020 0221     		movs	r1, #2
 422 0022 0620     		movs	r0, #6
 423 0024 FFF7FEFF 		bl	FLASH_Erase_Sector
  58:Src/spiops.c  ****     FLASH_Erase_Sector(FLASH_SECTOR_7, VOLTAGE_RANGE_3);
 424              		.loc 2 58 0
 425 0028 0221     		movs	r1, #2
 426 002a 0720     		movs	r0, #7
 427 002c FFF7FEFF 		bl	FLASH_Erase_Sector
  59:Src/spiops.c  ****     HAL_FLASH_Lock();
 428              		.loc 2 59 0
 429 0030 FFF7FEFF 		bl	HAL_FLASH_Lock
  60:Src/spiops.c  **** 
  61:Src/spiops.c  **** 
  62:Src/spiops.c  ****     HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)SpiTxData, (uint8_t *)SpiRxData,  SPI_TRANSFER_SI
 430              		.loc 2 62 0
 431 0034 394B     		ldr	r3, .L28+8
 432 0036 1968     		ldr	r1, [r3]
 433 0038 394B     		ldr	r3, .L28+12
 434 003a 1A68     		ldr	r2, [r3]
 435 003c 7823     		movs	r3, #120
 436 003e 3948     		ldr	r0, .L28+16
 437 0040 FFF7FEFF 		bl	HAL_SPI_TransmitReceive_IT
 438              	.L27:
  63:Src/spiops.c  **** 
  64:Src/spiops.c  ****     while(1)
  65:Src/spiops.c  ****     {
  66:Src/spiops.c  **** 
  67:Src/spiops.c  ****         if( xSemaphoreTake(spiSemaphoreHandle, 1) == pdPASS)  // when interrupt is occured
 439              		.loc 2 67 0
 440 0044 384B     		ldr	r3, .L28+20
 441 0046 1868     		ldr	r0, [r3]
 442 0048 0023     		movs	r3, #0
 443 004a 0122     		movs	r2, #1
 444 004c 0021     		movs	r1, #0
 445 004e FFF7FEFF 		bl	xQueueGenericReceive
 446 0052 0346     		mov	r3, r0
 447 0054 012B     		cmp	r3, #1
ARM GAS  /tmp/ccTABCUX.s 			page 11


 448 0056 4BD1     		bne	.L20
  68:Src/spiops.c  ****         {
  69:Src/spiops.c  **** 
  70:Src/spiops.c  ****             status = HAL_SPI_GetState(&hspi1);
 449              		.loc 2 70 0
 450 0058 3248     		ldr	r0, .L28+16
 451 005a FFF7FEFF 		bl	HAL_SPI_GetState
 452 005e 0346     		mov	r3, r0
 453 0060 FB72     		strb	r3, [r7, #11]
  71:Src/spiops.c  **** 
  72:Src/spiops.c  ****             if(status == HAL_SPI_STATE_READY)
 454              		.loc 2 72 0
 455 0062 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 456 0064 012B     		cmp	r3, #1
 457 0066 3BD1     		bne	.L21
  73:Src/spiops.c  ****             {
  74:Src/spiops.c  **** 
  75:Src/spiops.c  ****                 ret = checkIfUpdateData();
 458              		.loc 2 75 0
 459 0068 FFF7FEFF 		bl	checkIfUpdateData
 460 006c 0346     		mov	r3, r0
 461 006e 3B81     		strh	r3, [r7, #8]	@ movhi
  76:Src/spiops.c  **** 
  77:Src/spiops.c  ****                 if(ret == HAL_OK)
 462              		.loc 2 77 0
 463 0070 B7F90830 		ldrsh	r3, [r7, #8]
 464 0074 002B     		cmp	r3, #0
 465 0076 18D1     		bne	.L22
  78:Src/spiops.c  ****                 {
  79:Src/spiops.c  **** 
  80:Src/spiops.c  ****                     ret = confirmUpdateDataAccuracy();
 466              		.loc 2 80 0
 467 0078 FFF7FEFF 		bl	confirmUpdateDataAccuracy
 468 007c 0346     		mov	r3, r0
 469 007e 3B81     		strh	r3, [r7, #8]	@ movhi
  81:Src/spiops.c  ****                     if(ret == HAL_OK)
 470              		.loc 2 81 0
 471 0080 B7F90830 		ldrsh	r3, [r7, #8]
 472 0084 002B     		cmp	r3, #0
 473 0086 01D1     		bne	.L23
  82:Src/spiops.c  ****                         update_data_available = 1;
 474              		.loc 2 82 0
 475 0088 0123     		movs	r3, #1
 476 008a FB81     		strh	r3, [r7, #14]	@ movhi
 477              	.L23:
  83:Src/spiops.c  **** 
  84:Src/spiops.c  ****                     putUpdateDataResponse();
 478              		.loc 2 84 0
 479 008c FFF7FEFF 		bl	putUpdateDataResponse
  85:Src/spiops.c  **** 
  86:Src/spiops.c  **** 
  87:Src/spiops.c  ****                     motor1.direction = STOP;
 480              		.loc 2 87 0
 481 0090 264B     		ldr	r3, .L28+24
 482 0092 0022     		movs	r2, #0
 483 0094 1A60     		str	r2, [r3]
  88:Src/spiops.c  ****                     motor2.direction = STOP;
ARM GAS  /tmp/ccTABCUX.s 			page 12


 484              		.loc 2 88 0
 485 0096 264B     		ldr	r3, .L28+28
 486 0098 0022     		movs	r2, #0
 487 009a 1A60     		str	r2, [r3]
  89:Src/spiops.c  ****                     servo1.angle = 0;
 488              		.loc 2 89 0
 489 009c 254B     		ldr	r3, .L28+32
 490 009e 0022     		movs	r2, #0
 491 00a0 1A60     		str	r2, [r3]
  90:Src/spiops.c  ****                     servo2.angle = 0;
 492              		.loc 2 90 0
 493 00a2 254B     		ldr	r3, .L28+36
 494 00a4 0022     		movs	r2, #0
 495 00a6 1A60     		str	r2, [r3]
 496 00a8 1AE0     		b	.L21
 497              	.L22:
  91:Src/spiops.c  ****                 }
  92:Src/spiops.c  ****                 else
  93:Src/spiops.c  ****                 {
  94:Src/spiops.c  ****                     ret = checkIfControlData();
 498              		.loc 2 94 0
 499 00aa FFF7FEFF 		bl	checkIfControlData
 500 00ae 0346     		mov	r3, r0
 501 00b0 3B81     		strh	r3, [r7, #8]	@ movhi
  95:Src/spiops.c  **** 
  96:Src/spiops.c  **** 
  97:Src/spiops.c  **** 
  98:Src/spiops.c  ****                     if(ret == HAL_OK)
 502              		.loc 2 98 0
 503 00b2 B7F90830 		ldrsh	r3, [r7, #8]
 504 00b6 002B     		cmp	r3, #0
 505 00b8 04D1     		bne	.L24
  99:Src/spiops.c  ****                     {
 100:Src/spiops.c  **** 
 101:Src/spiops.c  ****                         control_data_available = 1;
 506              		.loc 2 101 0
 507 00ba 0123     		movs	r3, #1
 508 00bc BB81     		strh	r3, [r7, #12]	@ movhi
 102:Src/spiops.c  **** 
 103:Src/spiops.c  ****                         putControlDataResponse();
 509              		.loc 2 103 0
 510 00be FFF7FEFF 		bl	putControlDataResponse
 511 00c2 0DE0     		b	.L21
 512              	.L24:
 104:Src/spiops.c  **** 
 105:Src/spiops.c  ****                     }
 106:Src/spiops.c  ****                     else
 107:Src/spiops.c  ****                     {
 108:Src/spiops.c  ****                         putEnvironmentData();
 513              		.loc 2 108 0
 514 00c4 FFF7FEFF 		bl	putEnvironmentData
 109:Src/spiops.c  **** 
 110:Src/spiops.c  ****                         motor1.direction = STOP;
 515              		.loc 2 110 0
 516 00c8 184B     		ldr	r3, .L28+24
 517 00ca 0022     		movs	r2, #0
 518 00cc 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccTABCUX.s 			page 13


 111:Src/spiops.c  ****                         motor2.direction = STOP;
 519              		.loc 2 111 0
 520 00ce 184B     		ldr	r3, .L28+28
 521 00d0 0022     		movs	r2, #0
 522 00d2 1A60     		str	r2, [r3]
 112:Src/spiops.c  ****                         servo1.angle = 0;
 523              		.loc 2 112 0
 524 00d4 174B     		ldr	r3, .L28+32
 525 00d6 0022     		movs	r2, #0
 526 00d8 1A60     		str	r2, [r3]
 113:Src/spiops.c  ****                         servo2.angle = 0;
 527              		.loc 2 113 0
 528 00da 174B     		ldr	r3, .L28+36
 529 00dc 0022     		movs	r2, #0
 530 00de 1A60     		str	r2, [r3]
 531              	.L21:
 114:Src/spiops.c  ****                     }
 115:Src/spiops.c  **** 
 116:Src/spiops.c  **** 
 117:Src/spiops.c  ****                 }
 118:Src/spiops.c  **** 
 119:Src/spiops.c  ****             }
 120:Src/spiops.c  **** 
 121:Src/spiops.c  ****             HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)SpiTxData, (uint8_t *)SpiRxData,  SPI_TRA
 532              		.loc 2 121 0
 533 00e0 0E4B     		ldr	r3, .L28+8
 534 00e2 1968     		ldr	r1, [r3]
 535 00e4 0E4B     		ldr	r3, .L28+12
 536 00e6 1A68     		ldr	r2, [r3]
 537 00e8 7823     		movs	r3, #120
 538 00ea 0E48     		ldr	r0, .L28+16
 539 00ec FFF7FEFF 		bl	HAL_SPI_TransmitReceive_IT
 540              	.L20:
 122:Src/spiops.c  **** 
 123:Src/spiops.c  ****         }
 124:Src/spiops.c  **** 
 125:Src/spiops.c  **** 
 126:Src/spiops.c  **** 
 127:Src/spiops.c  **** 
 128:Src/spiops.c  ****         if(update_data_available == 1)
 541              		.loc 2 128 0
 542 00f0 B7F90E30 		ldrsh	r3, [r7, #14]
 543 00f4 012B     		cmp	r3, #1
 544 00f6 04D1     		bne	.L25
 129:Src/spiops.c  ****         {
 130:Src/spiops.c  ****             processUpdateData();
 545              		.loc 2 130 0
 546 00f8 FFF7FEFF 		bl	processUpdateData
 131:Src/spiops.c  **** 
 132:Src/spiops.c  ****             update_data_available = 0;
 547              		.loc 2 132 0
 548 00fc 0023     		movs	r3, #0
 549 00fe FB81     		strh	r3, [r7, #14]	@ movhi
 550 0100 A0E7     		b	.L27
 551              	.L25:
 133:Src/spiops.c  ****         }
 134:Src/spiops.c  ****         else if(control_data_available == 1)
ARM GAS  /tmp/ccTABCUX.s 			page 14


 552              		.loc 2 134 0
 553 0102 B7F90C30 		ldrsh	r3, [r7, #12]
 554 0106 012B     		cmp	r3, #1
 555 0108 9CD1     		bne	.L27
 135:Src/spiops.c  ****         {
 136:Src/spiops.c  **** 
 137:Src/spiops.c  ****             processControlData();
 556              		.loc 2 137 0
 557 010a FFF7FEFF 		bl	processControlData
 138:Src/spiops.c  **** 
 139:Src/spiops.c  ****             control_data_available = 0;
 558              		.loc 2 139 0
 559 010e 0023     		movs	r3, #0
 560 0110 BB81     		strh	r3, [r7, #12]	@ movhi
  67:Src/spiops.c  ****         {
 561              		.loc 2 67 0
 562 0112 97E7     		b	.L27
 563              	.L29:
 564              		.align	2
 565              	.L28:
 566 0114 1C000000 		.word	.LC10
 567 0118 003C0240 		.word	1073888256
 568 011c 00000000 		.word	SpiTxData
 569 0120 00000000 		.word	SpiRxData
 570 0124 00000000 		.word	hspi1
 571 0128 00000000 		.word	spiSemaphoreHandle
 572 012c 00000000 		.word	motor1
 573 0130 00000000 		.word	motor2
 574 0134 00000000 		.word	servo1
 575 0138 00000000 		.word	servo2
 576              		.cfi_endproc
 577              	.LFE148:
 579              		.section	.text.checkIfUpdateData,"ax",%progbits
 580              		.align	1
 581              		.global	checkIfUpdateData
 582              		.syntax unified
 583              		.thumb
 584              		.thumb_func
 585              		.fpu fpv4-sp-d16
 587              	checkIfUpdateData:
 588              	.LFB149:
 140:Src/spiops.c  ****         }
 141:Src/spiops.c  **** 
 142:Src/spiops.c  **** 
 143:Src/spiops.c  **** 
 144:Src/spiops.c  **** 
 145:Src/spiops.c  ****     }
 146:Src/spiops.c  **** 
 147:Src/spiops.c  **** }
 148:Src/spiops.c  **** 
 149:Src/spiops.c  **** 
 150:Src/spiops.c  **** 
 151:Src/spiops.c  **** HAL_StatusTypeDef checkIfUpdateData()
 152:Src/spiops.c  **** {
 589              		.loc 2 152 0
 590              		.cfi_startproc
 591              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccTABCUX.s 			page 15


 592              		@ frame_needed = 1, uses_anonymous_args = 0
 593 0000 80B5     		push	{r7, lr}
 594              	.LCFI21:
 595              		.cfi_def_cfa_offset 8
 596              		.cfi_offset 7, -8
 597              		.cfi_offset 14, -4
 598 0002 00AF     		add	r7, sp, #0
 599              	.LCFI22:
 600              		.cfi_def_cfa_register 7
 153:Src/spiops.c  **** 
 154:Src/spiops.c  ****     if((SpiRxData->header & 0xff) == 'U' && ((SpiRxData->header >> 8) & 0xff) == 'P')
 601              		.loc 2 154 0
 602 0004 0D4B     		ldr	r3, .L33
 603 0006 1B68     		ldr	r3, [r3]
 604 0008 1B88     		ldrh	r3, [r3]
 605 000a DBB2     		uxtb	r3, r3
 606 000c 552B     		cmp	r3, #85
 607 000e 12D1     		bne	.L31
 608              		.loc 2 154 0 is_stmt 0 discriminator 1
 609 0010 0A4B     		ldr	r3, .L33
 610 0012 1B68     		ldr	r3, [r3]
 611 0014 1B88     		ldrh	r3, [r3]
 612 0016 1B0A     		lsrs	r3, r3, #8
 613 0018 9BB2     		uxth	r3, r3
 614 001a DBB2     		uxtb	r3, r3
 615 001c 502B     		cmp	r3, #80
 616 001e 0AD1     		bne	.L31
 155:Src/spiops.c  ****     {
 156:Src/spiops.c  **** 
 157:Src/spiops.c  ****         memcpy(UpdateFile, SpiRxData->data, SPI_DATA_SIZE);
 617              		.loc 2 157 0 is_stmt 1
 618 0020 074B     		ldr	r3, .L33+4
 619 0022 1868     		ldr	r0, [r3]
 620 0024 054B     		ldr	r3, .L33
 621 0026 1B68     		ldr	r3, [r3]
 622 0028 0233     		adds	r3, r3, #2
 623 002a 7422     		movs	r2, #116
 624 002c 1946     		mov	r1, r3
 625 002e FFF7FEFF 		bl	memcpy
 158:Src/spiops.c  **** 
 159:Src/spiops.c  ****         return HAL_OK;
 626              		.loc 2 159 0
 627 0032 0023     		movs	r3, #0
 628 0034 00E0     		b	.L32
 629              	.L31:
 160:Src/spiops.c  ****     }
 161:Src/spiops.c  ****     else
 162:Src/spiops.c  ****     {
 163:Src/spiops.c  ****         return HAL_ERROR;
 630              		.loc 2 163 0
 631 0036 0123     		movs	r3, #1
 632              	.L32:
 164:Src/spiops.c  ****     }
 165:Src/spiops.c  **** 
 166:Src/spiops.c  **** }
 633              		.loc 2 166 0
 634 0038 1846     		mov	r0, r3
ARM GAS  /tmp/ccTABCUX.s 			page 16


 635 003a 80BD     		pop	{r7, pc}
 636              	.L34:
 637              		.align	2
 638              	.L33:
 639 003c 00000000 		.word	SpiRxData
 640 0040 00000000 		.word	UpdateFile
 641              		.cfi_endproc
 642              	.LFE149:
 644              		.section	.text.checkIfControlData,"ax",%progbits
 645              		.align	1
 646              		.global	checkIfControlData
 647              		.syntax unified
 648              		.thumb
 649              		.thumb_func
 650              		.fpu fpv4-sp-d16
 652              	checkIfControlData:
 653              	.LFB150:
 167:Src/spiops.c  **** 
 168:Src/spiops.c  **** 
 169:Src/spiops.c  **** 
 170:Src/spiops.c  **** HAL_StatusTypeDef checkIfControlData()
 171:Src/spiops.c  **** {
 654              		.loc 2 171 0
 655              		.cfi_startproc
 656              		@ args = 0, pretend = 0, frame = 0
 657              		@ frame_needed = 1, uses_anonymous_args = 0
 658              		@ link register save eliminated.
 659 0000 80B4     		push	{r7}
 660              	.LCFI23:
 661              		.cfi_def_cfa_offset 4
 662              		.cfi_offset 7, -4
 663 0002 00AF     		add	r7, sp, #0
 664              	.LCFI24:
 665              		.cfi_def_cfa_register 7
 172:Src/spiops.c  **** 
 173:Src/spiops.c  ****     if((SpiRxData->header & 0xff) == 'C' && ((SpiRxData->header >> 8) & 0xff) == 'O')
 666              		.loc 2 173 0
 667 0004 0C4B     		ldr	r3, .L38
 668 0006 1B68     		ldr	r3, [r3]
 669 0008 1B88     		ldrh	r3, [r3]
 670 000a DBB2     		uxtb	r3, r3
 671 000c 432B     		cmp	r3, #67
 672 000e 0DD1     		bne	.L36
 673              		.loc 2 173 0 is_stmt 0 discriminator 1
 674 0010 094B     		ldr	r3, .L38
 675 0012 1B68     		ldr	r3, [r3]
 676 0014 1B88     		ldrh	r3, [r3]
 677 0016 1B0A     		lsrs	r3, r3, #8
 678 0018 9BB2     		uxth	r3, r3
 679 001a DBB2     		uxtb	r3, r3
 680 001c 4F2B     		cmp	r3, #79
 681 001e 05D1     		bne	.L36
 174:Src/spiops.c  ****     {
 175:Src/spiops.c  **** 
 176:Src/spiops.c  **** //        mprintf("%d\r\n", SpiRxData->data[58]);
 177:Src/spiops.c  **** 
 178:Src/spiops.c  ****         ControlData = (CONTROL_DATA_FORMAT *) SpiRxData + offsetof(SPI_TRANSFER_FORMAT, header);
ARM GAS  /tmp/ccTABCUX.s 			page 17


 682              		.loc 2 178 0 is_stmt 1
 683 0020 054B     		ldr	r3, .L38
 684 0022 1B68     		ldr	r3, [r3]
 685 0024 054A     		ldr	r2, .L38+4
 686 0026 1360     		str	r3, [r2]
 179:Src/spiops.c  **** 
 180:Src/spiops.c  **** //        memcpy(ControlData, SpiRxData->data, SPI_DATA_SIZE);
 181:Src/spiops.c  **** 
 182:Src/spiops.c  **** 
 183:Src/spiops.c  ****         return HAL_OK;
 687              		.loc 2 183 0
 688 0028 0023     		movs	r3, #0
 689 002a 00E0     		b	.L37
 690              	.L36:
 184:Src/spiops.c  **** 
 185:Src/spiops.c  ****     }
 186:Src/spiops.c  ****     else
 187:Src/spiops.c  ****     {
 188:Src/spiops.c  **** 
 189:Src/spiops.c  ****         return HAL_ERROR;
 691              		.loc 2 189 0
 692 002c 0123     		movs	r3, #1
 693              	.L37:
 190:Src/spiops.c  **** 
 191:Src/spiops.c  ****     }
 192:Src/spiops.c  **** }
 694              		.loc 2 192 0
 695 002e 1846     		mov	r0, r3
 696 0030 BD46     		mov	sp, r7
 697              	.LCFI25:
 698              		.cfi_def_cfa_register 13
 699              		@ sp needed
 700 0032 5DF8047B 		ldr	r7, [sp], #4
 701              	.LCFI26:
 702              		.cfi_restore 7
 703              		.cfi_def_cfa_offset 0
 704 0036 7047     		bx	lr
 705              	.L39:
 706              		.align	2
 707              	.L38:
 708 0038 00000000 		.word	SpiRxData
 709 003c 00000000 		.word	ControlData
 710              		.cfi_endproc
 711              	.LFE150:
 713              		.section	.text.confirmUpdateDataAccuracy,"ax",%progbits
 714              		.align	1
 715              		.global	confirmUpdateDataAccuracy
 716              		.syntax unified
 717              		.thumb
 718              		.thumb_func
 719              		.fpu fpv4-sp-d16
 721              	confirmUpdateDataAccuracy:
 722              	.LFB151:
 193:Src/spiops.c  **** 
 194:Src/spiops.c  **** HAL_StatusTypeDef confirmUpdateDataAccuracy()
 195:Src/spiops.c  **** {
 723              		.loc 2 195 0
ARM GAS  /tmp/ccTABCUX.s 			page 18


 724              		.cfi_startproc
 725              		@ args = 0, pretend = 0, frame = 16
 726              		@ frame_needed = 1, uses_anonymous_args = 0
 727              		@ link register save eliminated.
 728 0000 80B4     		push	{r7}
 729              	.LCFI27:
 730              		.cfi_def_cfa_offset 4
 731              		.cfi_offset 7, -4
 732 0002 85B0     		sub	sp, sp, #20
 733              	.LCFI28:
 734              		.cfi_def_cfa_offset 24
 735 0004 00AF     		add	r7, sp, #0
 736              	.LCFI29:
 737              		.cfi_def_cfa_register 7
 196:Src/spiops.c  **** 
 197:Src/spiops.c  **** 
 198:Src/spiops.c  ****     uint16_t checksum = 0;
 738              		.loc 2 198 0
 739 0006 0023     		movs	r3, #0
 740 0008 FB81     		strh	r3, [r7, #14]	@ movhi
 199:Src/spiops.c  ****     short int checksum_error = 0;
 741              		.loc 2 199 0
 742 000a 0023     		movs	r3, #0
 743 000c BB81     		strh	r3, [r7, #12]	@ movhi
 200:Src/spiops.c  ****     short int sequence_error = 0;
 744              		.loc 2 200 0
 745 000e 0023     		movs	r3, #0
 746 0010 7B81     		strh	r3, [r7, #10]	@ movhi
 747              	.LBB3:
 201:Src/spiops.c  **** 
 202:Src/spiops.c  ****     for(int i=0; i< SPI_ENTITY_SIZE; i++)
 748              		.loc 2 202 0
 749 0012 0023     		movs	r3, #0
 750 0014 7B60     		str	r3, [r7, #4]
 751 0016 0CE0     		b	.L41
 752              	.L42:
 203:Src/spiops.c  ****         checksum += UpdateFile->data[i];
 753              		.loc 2 203 0 discriminator 3
 754 0018 204B     		ldr	r3, .L48
 755 001a 1A68     		ldr	r2, [r3]
 756 001c 7B68     		ldr	r3, [r7, #4]
 757 001e 1344     		add	r3, r3, r2
 758 0020 0833     		adds	r3, r3, #8
 759 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 760 0024 9AB2     		uxth	r2, r3
 761 0026 FB89     		ldrh	r3, [r7, #14]	@ movhi
 762 0028 1344     		add	r3, r3, r2
 763 002a FB81     		strh	r3, [r7, #14]	@ movhi
 202:Src/spiops.c  ****         checksum += UpdateFile->data[i];
 764              		.loc 2 202 0 discriminator 3
 765 002c 7B68     		ldr	r3, [r7, #4]
 766 002e 0133     		adds	r3, r3, #1
 767 0030 7B60     		str	r3, [r7, #4]
 768              	.L41:
 202:Src/spiops.c  ****         checksum += UpdateFile->data[i];
 769              		.loc 2 202 0 is_stmt 0 discriminator 1
 770 0032 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccTABCUX.s 			page 19


 771 0034 6B2B     		cmp	r3, #107
 772 0036 EFDD     		ble	.L42
 773              	.LBE3:
 204:Src/spiops.c  **** 
 205:Src/spiops.c  ****     if(checksum != SpiRxData->checksum)
 774              		.loc 2 205 0 is_stmt 1
 775 0038 194B     		ldr	r3, .L48+4
 776 003a 1B68     		ldr	r3, [r3]
 777 003c B3F87630 		ldrh	r3, [r3, #118]
 778 0040 FA89     		ldrh	r2, [r7, #14]
 779 0042 9A42     		cmp	r2, r3
 780 0044 01D0     		beq	.L43
 206:Src/spiops.c  ****         checksum_error = 1;
 781              		.loc 2 206 0
 782 0046 0123     		movs	r3, #1
 783 0048 BB81     		strh	r3, [r7, #12]	@ movhi
 784              	.L43:
 207:Src/spiops.c  **** 
 208:Src/spiops.c  ****     if(NextUpdateDataPackage != 1 && UpdateFile->current_sequence_number != NextUpdateDataPackage)
 785              		.loc 2 208 0
 786 004a 164B     		ldr	r3, .L48+8
 787 004c 1B68     		ldr	r3, [r3]
 788 004e 012B     		cmp	r3, #1
 789 0050 09D0     		beq	.L44
 790              		.loc 2 208 0 is_stmt 0 discriminator 1
 791 0052 124B     		ldr	r3, .L48
 792 0054 1B68     		ldr	r3, [r3]
 793 0056 5A68     		ldr	r2, [r3, #4]
 794 0058 124B     		ldr	r3, .L48+8
 795 005a 1B68     		ldr	r3, [r3]
 796 005c 9A42     		cmp	r2, r3
 797 005e 02D0     		beq	.L44
 209:Src/spiops.c  ****     {
 210:Src/spiops.c  ****         sequence_error = 1;
 798              		.loc 2 210 0 is_stmt 1
 799 0060 0123     		movs	r3, #1
 800 0062 7B81     		strh	r3, [r7, #10]	@ movhi
 801 0064 09E0     		b	.L45
 802              	.L44:
 211:Src/spiops.c  ****     }
 212:Src/spiops.c  ****     else
 213:Src/spiops.c  ****     {
 214:Src/spiops.c  ****         if(checksum_error == 0)
 803              		.loc 2 214 0
 804 0066 B7F90C30 		ldrsh	r3, [r7, #12]
 805 006a 002B     		cmp	r3, #0
 806 006c 05D1     		bne	.L45
 215:Src/spiops.c  ****            NextUpdateDataPackage = UpdateFile->current_sequence_number + 1;
 807              		.loc 2 215 0
 808 006e 0B4B     		ldr	r3, .L48
 809 0070 1B68     		ldr	r3, [r3]
 810 0072 5B68     		ldr	r3, [r3, #4]
 811 0074 0133     		adds	r3, r3, #1
 812 0076 0B4A     		ldr	r2, .L48+8
 813 0078 1360     		str	r3, [r2]
 814              	.L45:
 216:Src/spiops.c  **** 
ARM GAS  /tmp/ccTABCUX.s 			page 20


 217:Src/spiops.c  ****     }
 218:Src/spiops.c  **** 
 219:Src/spiops.c  ****      if(sequence_error != 1 && checksum_error != 1)
 815              		.loc 2 219 0
 816 007a B7F90A30 		ldrsh	r3, [r7, #10]
 817 007e 012B     		cmp	r3, #1
 818 0080 05D0     		beq	.L46
 819              		.loc 2 219 0 is_stmt 0 discriminator 1
 820 0082 B7F90C30 		ldrsh	r3, [r7, #12]
 821 0086 012B     		cmp	r3, #1
 822 0088 01D0     		beq	.L46
 220:Src/spiops.c  ****          return HAL_OK;
 823              		.loc 2 220 0 is_stmt 1
 824 008a 0023     		movs	r3, #0
 825 008c 00E0     		b	.L47
 826              	.L46:
 221:Src/spiops.c  ****      else
 222:Src/spiops.c  ****          return HAL_ERROR;
 827              		.loc 2 222 0
 828 008e 0123     		movs	r3, #1
 829              	.L47:
 223:Src/spiops.c  **** 
 224:Src/spiops.c  **** 
 225:Src/spiops.c  **** 
 226:Src/spiops.c  **** }
 830              		.loc 2 226 0
 831 0090 1846     		mov	r0, r3
 832 0092 1437     		adds	r7, r7, #20
 833              	.LCFI30:
 834              		.cfi_def_cfa_offset 4
 835 0094 BD46     		mov	sp, r7
 836              	.LCFI31:
 837              		.cfi_def_cfa_register 13
 838              		@ sp needed
 839 0096 5DF8047B 		ldr	r7, [sp], #4
 840              	.LCFI32:
 841              		.cfi_restore 7
 842              		.cfi_def_cfa_offset 0
 843 009a 7047     		bx	lr
 844              	.L49:
 845              		.align	2
 846              	.L48:
 847 009c 00000000 		.word	UpdateFile
 848 00a0 00000000 		.word	SpiRxData
 849 00a4 00000000 		.word	NextUpdateDataPackage
 850              		.cfi_endproc
 851              	.LFE151:
 853              		.section	.text.putUpdateDataResponse,"ax",%progbits
 854              		.align	1
 855              		.global	putUpdateDataResponse
 856              		.syntax unified
 857              		.thumb
 858              		.thumb_func
 859              		.fpu fpv4-sp-d16
 861              	putUpdateDataResponse:
 862              	.LFB152:
 227:Src/spiops.c  **** 
ARM GAS  /tmp/ccTABCUX.s 			page 21


 228:Src/spiops.c  **** 
 229:Src/spiops.c  **** 
 230:Src/spiops.c  **** void putUpdateDataResponse()
 231:Src/spiops.c  **** {
 863              		.loc 2 231 0
 864              		.cfi_startproc
 865              		@ args = 0, pretend = 0, frame = 0
 866              		@ frame_needed = 1, uses_anonymous_args = 0
 867 0000 80B5     		push	{r7, lr}
 868              	.LCFI33:
 869              		.cfi_def_cfa_offset 8
 870              		.cfi_offset 7, -8
 871              		.cfi_offset 14, -4
 872 0002 00AF     		add	r7, sp, #0
 873              	.LCFI34:
 874              		.cfi_def_cfa_register 7
 232:Src/spiops.c  **** 
 233:Src/spiops.c  **** 
 234:Src/spiops.c  **** 
 235:Src/spiops.c  ****     xSemaphoreTake(spiMutexHandle, (TickType_t)1000);
 875              		.loc 2 235 0
 876 0004 184B     		ldr	r3, .L51
 877 0006 1868     		ldr	r0, [r3]
 878 0008 0023     		movs	r3, #0
 879 000a 4FF47A72 		mov	r2, #1000
 880 000e 0021     		movs	r1, #0
 881 0010 FFF7FEFF 		bl	xQueueGenericReceive
 236:Src/spiops.c  **** 
 237:Src/spiops.c  ****     SpiTxData->header = 'U' | 'P' << 8;
 882              		.loc 2 237 0
 883 0014 154B     		ldr	r3, .L51+4
 884 0016 1B68     		ldr	r3, [r3]
 885 0018 45F25502 		movw	r2, #20565
 886 001c 1A80     		strh	r2, [r3]	@ movhi
 238:Src/spiops.c  ****     SpiTxData->data[4] = NextUpdateDataPackage & 0xff;
 887              		.loc 2 238 0
 888 001e 144B     		ldr	r3, .L51+8
 889 0020 1A68     		ldr	r2, [r3]
 890 0022 124B     		ldr	r3, .L51+4
 891 0024 1B68     		ldr	r3, [r3]
 892 0026 D2B2     		uxtb	r2, r2
 893 0028 9A71     		strb	r2, [r3, #6]
 239:Src/spiops.c  ****     SpiTxData->data[5] = (NextUpdateDataPackage >>  8) & 0xff;
 894              		.loc 2 239 0
 895 002a 114B     		ldr	r3, .L51+8
 896 002c 1B68     		ldr	r3, [r3]
 897 002e 1A0A     		lsrs	r2, r3, #8
 898 0030 0E4B     		ldr	r3, .L51+4
 899 0032 1B68     		ldr	r3, [r3]
 900 0034 D2B2     		uxtb	r2, r2
 901 0036 DA71     		strb	r2, [r3, #7]
 240:Src/spiops.c  ****     SpiTxData->data[6] = (NextUpdateDataPackage >> 16) & 0xff;
 902              		.loc 2 240 0
 903 0038 0D4B     		ldr	r3, .L51+8
 904 003a 1B68     		ldr	r3, [r3]
 905 003c 1A0C     		lsrs	r2, r3, #16
 906 003e 0B4B     		ldr	r3, .L51+4
ARM GAS  /tmp/ccTABCUX.s 			page 22


 907 0040 1B68     		ldr	r3, [r3]
 908 0042 D2B2     		uxtb	r2, r2
 909 0044 1A72     		strb	r2, [r3, #8]
 241:Src/spiops.c  ****     SpiTxData->data[7] = (NextUpdateDataPackage >> 24) & 0xff;
 910              		.loc 2 241 0
 911 0046 0A4B     		ldr	r3, .L51+8
 912 0048 1B68     		ldr	r3, [r3]
 913 004a 1A0E     		lsrs	r2, r3, #24
 914 004c 074B     		ldr	r3, .L51+4
 915 004e 1B68     		ldr	r3, [r3]
 916 0050 D2B2     		uxtb	r2, r2
 917 0052 5A72     		strb	r2, [r3, #9]
 242:Src/spiops.c  **** 
 243:Src/spiops.c  ****     xSemaphoreGive(spiMutexHandle);
 918              		.loc 2 243 0
 919 0054 044B     		ldr	r3, .L51
 920 0056 1868     		ldr	r0, [r3]
 921 0058 0023     		movs	r3, #0
 922 005a 0022     		movs	r2, #0
 923 005c 0021     		movs	r1, #0
 924 005e FFF7FEFF 		bl	xQueueGenericSend
 244:Src/spiops.c  **** 
 245:Src/spiops.c  **** }
 925              		.loc 2 245 0
 926 0062 00BF     		nop
 927 0064 80BD     		pop	{r7, pc}
 928              	.L52:
 929 0066 00BF     		.align	2
 930              	.L51:
 931 0068 00000000 		.word	spiMutexHandle
 932 006c 00000000 		.word	SpiTxData
 933 0070 00000000 		.word	NextUpdateDataPackage
 934              		.cfi_endproc
 935              	.LFE152:
 937              		.section	.text.putControlDataResponse,"ax",%progbits
 938              		.align	1
 939              		.global	putControlDataResponse
 940              		.syntax unified
 941              		.thumb
 942              		.thumb_func
 943              		.fpu fpv4-sp-d16
 945              	putControlDataResponse:
 946              	.LFB153:
 246:Src/spiops.c  **** 
 247:Src/spiops.c  **** 
 248:Src/spiops.c  **** 
 249:Src/spiops.c  **** void putControlDataResponse()
 250:Src/spiops.c  **** {
 947              		.loc 2 250 0
 948              		.cfi_startproc
 949              		@ args = 0, pretend = 0, frame = 0
 950              		@ frame_needed = 1, uses_anonymous_args = 0
 951 0000 80B5     		push	{r7, lr}
 952              	.LCFI35:
 953              		.cfi_def_cfa_offset 8
 954              		.cfi_offset 7, -8
 955              		.cfi_offset 14, -4
ARM GAS  /tmp/ccTABCUX.s 			page 23


 956 0002 00AF     		add	r7, sp, #0
 957              	.LCFI36:
 958              		.cfi_def_cfa_register 7
 251:Src/spiops.c  **** 
 252:Src/spiops.c  ****     xSemaphoreTake(spiMutexHandle, (TickType_t)1000);
 959              		.loc 2 252 0
 960 0004 174B     		ldr	r3, .L54
 961 0006 1868     		ldr	r0, [r3]
 962 0008 0023     		movs	r3, #0
 963 000a 4FF47A72 		mov	r2, #1000
 964 000e 0021     		movs	r1, #0
 965 0010 FFF7FEFF 		bl	xQueueGenericReceive
 253:Src/spiops.c  **** 
 254:Src/spiops.c  ****     SpiTxData->header = (('E') | (('N') << 8 ));
 966              		.loc 2 254 0
 967 0014 144B     		ldr	r3, .L54+4
 968 0016 1B68     		ldr	r3, [r3]
 969 0018 44F64562 		movw	r2, #20037
 970 001c 1A80     		strh	r2, [r3]	@ movhi
 255:Src/spiops.c  ****     memcpy(&SpiTxData->data[0], (unsigned char *)EnvironmentData, SPI_DATA_SIZE);
 971              		.loc 2 255 0
 972 001e 124B     		ldr	r3, .L54+4
 973 0020 1B68     		ldr	r3, [r3]
 974 0022 981C     		adds	r0, r3, #2
 975 0024 114B     		ldr	r3, .L54+8
 976 0026 1B68     		ldr	r3, [r3]
 977 0028 7422     		movs	r2, #116
 978 002a 1946     		mov	r1, r3
 979 002c FFF7FEFF 		bl	memcpy
 256:Src/spiops.c  ****     memcpy(&SpiTxData->data[99], (unsigned char *)&EnvironmentData->sensor_data, sizeof(SENSOR_DATA
 980              		.loc 2 256 0
 981 0030 0D4B     		ldr	r3, .L54+4
 982 0032 1B68     		ldr	r3, [r3]
 983 0034 03F16500 		add	r0, r3, #101
 984 0038 0C4B     		ldr	r3, .L54+8
 985 003a 1B68     		ldr	r3, [r3]
 986 003c 6433     		adds	r3, r3, #100
 987 003e 1422     		movs	r2, #20
 988 0040 1946     		mov	r1, r3
 989 0042 FFF7FEFF 		bl	memcpy
 257:Src/spiops.c  ****     SpiTxData->checksum = (('C') | (('H') << 8 ));
 990              		.loc 2 257 0
 991 0046 084B     		ldr	r3, .L54+4
 992 0048 1B68     		ldr	r3, [r3]
 993 004a 44F64302 		movw	r2, #18499
 994 004e A3F87620 		strh	r2, [r3, #118]	@ movhi
 258:Src/spiops.c  **** 
 259:Src/spiops.c  ****     xSemaphoreGive(spiMutexHandle);
 995              		.loc 2 259 0
 996 0052 044B     		ldr	r3, .L54
 997 0054 1868     		ldr	r0, [r3]
 998 0056 0023     		movs	r3, #0
 999 0058 0022     		movs	r2, #0
 1000 005a 0021     		movs	r1, #0
 1001 005c FFF7FEFF 		bl	xQueueGenericSend
 260:Src/spiops.c  **** 
 261:Src/spiops.c  **** }
ARM GAS  /tmp/ccTABCUX.s 			page 24


 1002              		.loc 2 261 0
 1003 0060 00BF     		nop
 1004 0062 80BD     		pop	{r7, pc}
 1005              	.L55:
 1006              		.align	2
 1007              	.L54:
 1008 0064 00000000 		.word	spiMutexHandle
 1009 0068 00000000 		.word	SpiTxData
 1010 006c 00000000 		.word	EnvironmentData
 1011              		.cfi_endproc
 1012              	.LFE153:
 1014              		.section	.text.putEnvironmentData,"ax",%progbits
 1015              		.align	1
 1016              		.global	putEnvironmentData
 1017              		.syntax unified
 1018              		.thumb
 1019              		.thumb_func
 1020              		.fpu fpv4-sp-d16
 1022              	putEnvironmentData:
 1023              	.LFB154:
 262:Src/spiops.c  **** 
 263:Src/spiops.c  **** 
 264:Src/spiops.c  **** 
 265:Src/spiops.c  **** void putEnvironmentData()
 266:Src/spiops.c  **** {
 1024              		.loc 2 266 0
 1025              		.cfi_startproc
 1026              		@ args = 0, pretend = 0, frame = 0
 1027              		@ frame_needed = 1, uses_anonymous_args = 0
 1028 0000 80B5     		push	{r7, lr}
 1029              	.LCFI37:
 1030              		.cfi_def_cfa_offset 8
 1031              		.cfi_offset 7, -8
 1032              		.cfi_offset 14, -4
 1033 0002 00AF     		add	r7, sp, #0
 1034              	.LCFI38:
 1035              		.cfi_def_cfa_register 7
 267:Src/spiops.c  **** 
 268:Src/spiops.c  ****     xSemaphoreTake(spiMutexHandle, (TickType_t)1000);
 1036              		.loc 2 268 0
 1037 0004 174B     		ldr	r3, .L57
 1038 0006 1868     		ldr	r0, [r3]
 1039 0008 0023     		movs	r3, #0
 1040 000a 4FF47A72 		mov	r2, #1000
 1041 000e 0021     		movs	r1, #0
 1042 0010 FFF7FEFF 		bl	xQueueGenericReceive
 269:Src/spiops.c  **** 
 270:Src/spiops.c  ****     SpiTxData->header = (('E') | (('N') << 8 ));
 1043              		.loc 2 270 0
 1044 0014 144B     		ldr	r3, .L57+4
 1045 0016 1B68     		ldr	r3, [r3]
 1046 0018 44F64562 		movw	r2, #20037
 1047 001c 1A80     		strh	r2, [r3]	@ movhi
 271:Src/spiops.c  ****     memcpy(&SpiTxData->data[0], (unsigned char *)EnvironmentData, SPI_DATA_SIZE);
 1048              		.loc 2 271 0
 1049 001e 124B     		ldr	r3, .L57+4
 1050 0020 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccTABCUX.s 			page 25


 1051 0022 981C     		adds	r0, r3, #2
 1052 0024 114B     		ldr	r3, .L57+8
 1053 0026 1B68     		ldr	r3, [r3]
 1054 0028 7422     		movs	r2, #116
 1055 002a 1946     		mov	r1, r3
 1056 002c FFF7FEFF 		bl	memcpy
 272:Src/spiops.c  ****     memcpy(&SpiTxData->data[99], (unsigned char *)&EnvironmentData->sensor_data, sizeof(SENSOR_DATA
 1057              		.loc 2 272 0
 1058 0030 0D4B     		ldr	r3, .L57+4
 1059 0032 1B68     		ldr	r3, [r3]
 1060 0034 03F16500 		add	r0, r3, #101
 1061 0038 0C4B     		ldr	r3, .L57+8
 1062 003a 1B68     		ldr	r3, [r3]
 1063 003c 6433     		adds	r3, r3, #100
 1064 003e 1422     		movs	r2, #20
 1065 0040 1946     		mov	r1, r3
 1066 0042 FFF7FEFF 		bl	memcpy
 273:Src/spiops.c  ****     SpiTxData->checksum = (('C') | (('H') << 8 ));
 1067              		.loc 2 273 0
 1068 0046 084B     		ldr	r3, .L57+4
 1069 0048 1B68     		ldr	r3, [r3]
 1070 004a 44F64302 		movw	r2, #18499
 1071 004e A3F87620 		strh	r2, [r3, #118]	@ movhi
 274:Src/spiops.c  **** 
 275:Src/spiops.c  ****     xSemaphoreGive(spiMutexHandle);
 1072              		.loc 2 275 0
 1073 0052 044B     		ldr	r3, .L57
 1074 0054 1868     		ldr	r0, [r3]
 1075 0056 0023     		movs	r3, #0
 1076 0058 0022     		movs	r2, #0
 1077 005a 0021     		movs	r1, #0
 1078 005c FFF7FEFF 		bl	xQueueGenericSend
 276:Src/spiops.c  **** 
 277:Src/spiops.c  **** }
 1079              		.loc 2 277 0
 1080 0060 00BF     		nop
 1081 0062 80BD     		pop	{r7, pc}
 1082              	.L58:
 1083              		.align	2
 1084              	.L57:
 1085 0064 00000000 		.word	spiMutexHandle
 1086 0068 00000000 		.word	SpiTxData
 1087 006c 00000000 		.word	EnvironmentData
 1088              		.cfi_endproc
 1089              	.LFE154:
 1091              		.section	.rodata
 1092 0025 000000   		.align	2
 1093              	.LC11:
 1094 0028 77726974 		.ascii	"write error\015\012\000"
 1094      65206572 
 1094      726F720D 
 1094      0A00
 1095 0036 0000     		.align	2
 1096              	.LC12:
 1097 0038 55706461 		.ascii	"Update file uploading has been finished.\015\012\000"
 1097      74652066 
 1097      696C6520 
ARM GAS  /tmp/ccTABCUX.s 			page 26


 1097      75706C6F 
 1097      6164696E 
 1098 0063 00       		.align	2
 1099              	.LC13:
 1100 0064 52657374 		.ascii	"Restarting...\015\012\000"
 1100      61727469 
 1100      6E672E2E 
 1100      2E0D0A00 
 1101              		.section	.text.processUpdateData,"ax",%progbits
 1102              		.align	1
 1103              		.global	processUpdateData
 1104              		.syntax unified
 1105              		.thumb
 1106              		.thumb_func
 1107              		.fpu fpv4-sp-d16
 1109              	processUpdateData:
 1110              	.LFB155:
 278:Src/spiops.c  **** 
 279:Src/spiops.c  **** void processUpdateData()
 280:Src/spiops.c  **** {
 1111              		.loc 2 280 0
 1112              		.cfi_startproc
 1113              		@ args = 0, pretend = 0, frame = 16
 1114              		@ frame_needed = 1, uses_anonymous_args = 0
 1115 0000 2DE99048 		push	{r4, r7, fp, lr}
 1116              	.LCFI39:
 1117              		.cfi_def_cfa_offset 16
 1118              		.cfi_offset 4, -16
 1119              		.cfi_offset 7, -12
 1120              		.cfi_offset 11, -8
 1121              		.cfi_offset 14, -4
 1122 0004 84B0     		sub	sp, sp, #16
 1123              	.LCFI40:
 1124              		.cfi_def_cfa_offset 32
 1125 0006 00AF     		add	r7, sp, #0
 1126              	.LCFI41:
 1127              		.cfi_def_cfa_register 7
 281:Src/spiops.c  **** 
 282:Src/spiops.c  **** 
 283:Src/spiops.c  ****     HAL_StatusTypeDef flash_status;
 284:Src/spiops.c  **** 
 285:Src/spiops.c  ****     if(UpdateFile->current_sequence_number == 1)
 1128              		.loc 2 285 0
 1129 0008 644B     		ldr	r3, .L70
 1130 000a 1B68     		ldr	r3, [r3]
 1131 000c 5B68     		ldr	r3, [r3, #4]
 1132 000e 012B     		cmp	r3, #1
 1133 0010 6CD1     		bne	.L60
 1134              	.LBB4:
 286:Src/spiops.c  ****     {
 287:Src/spiops.c  **** 
 288:Src/spiops.c  ****         uint32_t total_size = SPI_ENTITY_SIZE*UpdateFile->total_sequence_number;
 1135              		.loc 2 288 0
 1136 0012 624B     		ldr	r3, .L70
 1137 0014 1B68     		ldr	r3, [r3]
 1138 0016 1B68     		ldr	r3, [r3]
 1139 0018 6C22     		movs	r2, #108
ARM GAS  /tmp/ccTABCUX.s 			page 27


 1140 001a 02FB03F3 		mul	r3, r2, r3
 1141 001e BB60     		str	r3, [r7, #8]
 289:Src/spiops.c  **** 
 290:Src/spiops.c  **** 
 291:Src/spiops.c  **** 
 292:Src/spiops.c  ****         HAL_FLASH_Unlock();
 1142              		.loc 2 292 0
 1143 0020 FFF7FEFF 		bl	HAL_FLASH_Unlock
 293:Src/spiops.c  **** 
 294:Src/spiops.c  ****         flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS, total_size & 0xff);
 1144              		.loc 2 294 0
 1145 0024 BB68     		ldr	r3, [r7, #8]
 1146 0026 9B46     		mov	fp, r3
 1147 0028 4FF0000C 		mov	ip, #0
 1148 002c 4FF0FF01 		mov	r1, #255
 1149 0030 4FF00002 		mov	r2, #0
 1150 0034 0BEA0103 		and	r3, fp, r1
 1151 0038 0CEA0204 		and	r4, ip, r2
 1152 003c 1A46     		mov	r2, r3
 1153 003e 2346     		mov	r3, r4
 1154 0040 5749     		ldr	r1, .L70+4
 1155 0042 0020     		movs	r0, #0
 1156 0044 FFF7FEFF 		bl	HAL_FLASH_Program
 1157 0048 0346     		mov	r3, r0
 1158 004a FB71     		strb	r3, [r7, #7]
 295:Src/spiops.c  **** 
 296:Src/spiops.c  ****         if(flash_status != HAL_OK)
 1159              		.loc 2 296 0
 1160 004c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1161 004e 002B     		cmp	r3, #0
 1162 0050 02D0     		beq	.L61
 297:Src/spiops.c  ****             mprintf("write error\r\n");
 1163              		.loc 2 297 0
 1164 0052 5448     		ldr	r0, .L70+8
 1165 0054 FFF7FEFF 		bl	mprintf
 1166              	.L61:
 298:Src/spiops.c  **** 
 299:Src/spiops.c  ****         flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS + 1, (total_size >> 8) &
 1167              		.loc 2 299 0
 1168 0058 BB68     		ldr	r3, [r7, #8]
 1169 005a 1B0A     		lsrs	r3, r3, #8
 1170 005c 9B46     		mov	fp, r3
 1171 005e 4FF0000C 		mov	ip, #0
 1172 0062 4FF0FF01 		mov	r1, #255
 1173 0066 4FF00002 		mov	r2, #0
 1174 006a 0BEA0103 		and	r3, fp, r1
 1175 006e 0CEA0204 		and	r4, ip, r2
 1176 0072 1A46     		mov	r2, r3
 1177 0074 2346     		mov	r3, r4
 1178 0076 4C49     		ldr	r1, .L70+12
 1179 0078 0020     		movs	r0, #0
 1180 007a FFF7FEFF 		bl	HAL_FLASH_Program
 1181 007e 0346     		mov	r3, r0
 1182 0080 FB71     		strb	r3, [r7, #7]
 300:Src/spiops.c  **** 
 301:Src/spiops.c  ****         if(flash_status != HAL_OK)
 1183              		.loc 2 301 0
ARM GAS  /tmp/ccTABCUX.s 			page 28


 1184 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1185 0084 002B     		cmp	r3, #0
 1186 0086 02D0     		beq	.L62
 302:Src/spiops.c  ****             mprintf("write error\r\n");
 1187              		.loc 2 302 0
 1188 0088 4648     		ldr	r0, .L70+8
 1189 008a FFF7FEFF 		bl	mprintf
 1190              	.L62:
 303:Src/spiops.c  **** 
 304:Src/spiops.c  ****         flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS + 2, (total_size >> 16) 
 1191              		.loc 2 304 0
 1192 008e BB68     		ldr	r3, [r7, #8]
 1193 0090 1B0C     		lsrs	r3, r3, #16
 1194 0092 9B46     		mov	fp, r3
 1195 0094 4FF0000C 		mov	ip, #0
 1196 0098 4FF0FF01 		mov	r1, #255
 1197 009c 4FF00002 		mov	r2, #0
 1198 00a0 0BEA0103 		and	r3, fp, r1
 1199 00a4 0CEA0204 		and	r4, ip, r2
 1200 00a8 1A46     		mov	r2, r3
 1201 00aa 2346     		mov	r3, r4
 1202 00ac 3F49     		ldr	r1, .L70+16
 1203 00ae 0020     		movs	r0, #0
 1204 00b0 FFF7FEFF 		bl	HAL_FLASH_Program
 1205 00b4 0346     		mov	r3, r0
 1206 00b6 FB71     		strb	r3, [r7, #7]
 305:Src/spiops.c  **** 
 306:Src/spiops.c  ****         if(flash_status != HAL_OK)
 1207              		.loc 2 306 0
 1208 00b8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1209 00ba 002B     		cmp	r3, #0
 1210 00bc 02D0     		beq	.L63
 307:Src/spiops.c  ****             mprintf("write error\r\n");
 1211              		.loc 2 307 0
 1212 00be 3948     		ldr	r0, .L70+8
 1213 00c0 FFF7FEFF 		bl	mprintf
 1214              	.L63:
 308:Src/spiops.c  **** 
 309:Src/spiops.c  ****         flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS + 3, (total_size >> 24) 
 1215              		.loc 2 309 0
 1216 00c4 BB68     		ldr	r3, [r7, #8]
 1217 00c6 1B0E     		lsrs	r3, r3, #24
 1218 00c8 4FF00004 		mov	r4, #0
 1219 00cc 1A46     		mov	r2, r3
 1220 00ce 2346     		mov	r3, r4
 1221 00d0 3749     		ldr	r1, .L70+20
 1222 00d2 0020     		movs	r0, #0
 1223 00d4 FFF7FEFF 		bl	HAL_FLASH_Program
 1224 00d8 0346     		mov	r3, r0
 1225 00da FB71     		strb	r3, [r7, #7]
 310:Src/spiops.c  **** 
 311:Src/spiops.c  ****         if(flash_status != HAL_OK)
 1226              		.loc 2 311 0
 1227 00dc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1228 00de 002B     		cmp	r3, #0
 1229 00e0 02D0     		beq	.L64
 312:Src/spiops.c  ****             mprintf("write error\r\n");
ARM GAS  /tmp/ccTABCUX.s 			page 29


 1230              		.loc 2 312 0
 1231 00e2 3048     		ldr	r0, .L70+8
 1232 00e4 FFF7FEFF 		bl	mprintf
 1233              	.L64:
 313:Src/spiops.c  **** 
 314:Src/spiops.c  ****         HAL_FLASH_Lock();
 1234              		.loc 2 314 0
 1235 00e8 FFF7FEFF 		bl	HAL_FLASH_Lock
 1236              	.L60:
 1237              	.LBE4:
 315:Src/spiops.c  **** 
 316:Src/spiops.c  ****     }
 317:Src/spiops.c  **** 
 318:Src/spiops.c  **** 
 319:Src/spiops.c  **** 
 320:Src/spiops.c  ****     HAL_FLASH_Unlock();
 1238              		.loc 2 320 0
 1239 00ec FFF7FEFF 		bl	HAL_FLASH_Unlock
 1240              	.LBB5:
 321:Src/spiops.c  **** 
 322:Src/spiops.c  ****     for(int i=0; i<SPI_ENTITY_SIZE; i++)
 1241              		.loc 2 322 0
 1242 00f0 0023     		movs	r3, #0
 1243 00f2 FB60     		str	r3, [r7, #12]
 1244 00f4 22E0     		b	.L65
 1245              	.L67:
 323:Src/spiops.c  ****     {
 324:Src/spiops.c  ****         flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, (SECTOR6_ADDRESS + i + 4) + (SPI_ENTITY_
 1246              		.loc 2 324 0
 1247 00f6 294B     		ldr	r3, .L70
 1248 00f8 1B68     		ldr	r3, [r3]
 1249 00fa 5B68     		ldr	r3, [r3, #4]
 1250 00fc 6C22     		movs	r2, #108
 1251 00fe 02FB03F2 		mul	r2, r2, r3
 1252 0102 FB68     		ldr	r3, [r7, #12]
 1253 0104 1344     		add	r3, r3, r2
 1254 0106 2B49     		ldr	r1, .L70+24
 1255 0108 1944     		add	r1, r1, r3
 1256 010a 244B     		ldr	r3, .L70
 1257 010c 1A68     		ldr	r2, [r3]
 1258 010e FB68     		ldr	r3, [r7, #12]
 1259 0110 1344     		add	r3, r3, r2
 1260 0112 0833     		adds	r3, r3, #8
 1261 0114 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1262 0116 DBB2     		uxtb	r3, r3
 1263 0118 4FF00004 		mov	r4, #0
 1264 011c 1A46     		mov	r2, r3
 1265 011e 2346     		mov	r3, r4
 1266 0120 0020     		movs	r0, #0
 1267 0122 FFF7FEFF 		bl	HAL_FLASH_Program
 1268 0126 0346     		mov	r3, r0
 1269 0128 FB71     		strb	r3, [r7, #7]
 325:Src/spiops.c  **** 
 326:Src/spiops.c  ****         if(flash_status != HAL_OK)
 1270              		.loc 2 326 0
 1271 012a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1272 012c 002B     		cmp	r3, #0
ARM GAS  /tmp/ccTABCUX.s 			page 30


 1273 012e 02D0     		beq	.L66
 327:Src/spiops.c  ****             mprintf("write error\r\n");
 1274              		.loc 2 327 0
 1275 0130 1C48     		ldr	r0, .L70+8
 1276 0132 FFF7FEFF 		bl	mprintf
 1277              	.L66:
 322:Src/spiops.c  ****     {
 1278              		.loc 2 322 0 discriminator 2
 1279 0136 FB68     		ldr	r3, [r7, #12]
 1280 0138 0133     		adds	r3, r3, #1
 1281 013a FB60     		str	r3, [r7, #12]
 1282              	.L65:
 322:Src/spiops.c  ****     {
 1283              		.loc 2 322 0 is_stmt 0 discriminator 1
 1284 013c FB68     		ldr	r3, [r7, #12]
 1285 013e 6B2B     		cmp	r3, #107
 1286 0140 D9DD     		ble	.L67
 1287              	.LBE5:
 328:Src/spiops.c  ****     }
 329:Src/spiops.c  **** 
 330:Src/spiops.c  ****     HAL_FLASH_Lock();
 1288              		.loc 2 330 0 is_stmt 1
 1289 0142 FFF7FEFF 		bl	HAL_FLASH_Lock
 331:Src/spiops.c  **** 
 332:Src/spiops.c  ****     if(UpdateFile->current_sequence_number == UpdateFile->total_sequence_number)
 1290              		.loc 2 332 0
 1291 0146 154B     		ldr	r3, .L70
 1292 0148 1B68     		ldr	r3, [r3]
 1293 014a 5A68     		ldr	r2, [r3, #4]
 1294 014c 134B     		ldr	r3, .L70
 1295 014e 1B68     		ldr	r3, [r3]
 1296 0150 1B68     		ldr	r3, [r3]
 1297 0152 9A42     		cmp	r2, r3
 1298 0154 1CD1     		bne	.L69
 333:Src/spiops.c  ****     {
 334:Src/spiops.c  **** 
 335:Src/spiops.c  **** 
 336:Src/spiops.c  ****         mprintf("Update file uploading has been finished.\r\n");
 1299              		.loc 2 336 0
 1300 0156 1848     		ldr	r0, .L70+28
 1301 0158 FFF7FEFF 		bl	mprintf
 337:Src/spiops.c  **** 
 338:Src/spiops.c  ****         mprintf("Restarting...\r\n");
 1302              		.loc 2 338 0
 1303 015c 1748     		ldr	r0, .L70+32
 1304 015e FFF7FEFF 		bl	mprintf
 339:Src/spiops.c  **** 
 340:Src/spiops.c  ****         SpiRxData->header = 0;
 1305              		.loc 2 340 0
 1306 0162 174B     		ldr	r3, .L70+36
 1307 0164 1B68     		ldr	r3, [r3]
 1308 0166 0022     		movs	r2, #0
 1309 0168 1A80     		strh	r2, [r3]	@ movhi
 341:Src/spiops.c  ****         SpiRxData->checksum = 0;
 1310              		.loc 2 341 0
 1311 016a 154B     		ldr	r3, .L70+36
 1312 016c 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccTABCUX.s 			page 31


 1313 016e 0022     		movs	r2, #0
 1314 0170 A3F87620 		strh	r2, [r3, #118]	@ movhi
 342:Src/spiops.c  ****         UpdateFile->current_sequence_number = 0;
 1315              		.loc 2 342 0
 1316 0174 094B     		ldr	r3, .L70
 1317 0176 1B68     		ldr	r3, [r3]
 1318 0178 0022     		movs	r2, #0
 1319 017a 5A60     		str	r2, [r3, #4]
 343:Src/spiops.c  ****         UpdateFile->total_sequence_number = -1;
 1320              		.loc 2 343 0
 1321 017c 074B     		ldr	r3, .L70
 1322 017e 1B68     		ldr	r3, [r3]
 1323 0180 4FF0FF32 		mov	r2, #-1
 1324 0184 1A60     		str	r2, [r3]
 344:Src/spiops.c  **** 
 345:Src/spiops.c  **** 
 346:Src/spiops.c  ****         osDelay(50);
 1325              		.loc 2 346 0
 1326 0186 3220     		movs	r0, #50
 1327 0188 FFF7FEFF 		bl	osDelay
 347:Src/spiops.c  **** 
 348:Src/spiops.c  ****         HAL_NVIC_SystemReset();
 1328              		.loc 2 348 0
 1329 018c FFF7FEFF 		bl	HAL_NVIC_SystemReset
 1330              	.L69:
 349:Src/spiops.c  **** 
 350:Src/spiops.c  **** 
 351:Src/spiops.c  ****     }
 352:Src/spiops.c  **** 
 353:Src/spiops.c  **** 
 354:Src/spiops.c  **** }
 1331              		.loc 2 354 0
 1332 0190 00BF     		nop
 1333 0192 1037     		adds	r7, r7, #16
 1334              	.LCFI42:
 1335              		.cfi_def_cfa_offset 16
 1336 0194 BD46     		mov	sp, r7
 1337              	.LCFI43:
 1338              		.cfi_def_cfa_register 13
 1339              		@ sp needed
 1340 0196 BDE89088 		pop	{r4, r7, fp, pc}
 1341              	.L71:
 1342 019a 00BF     		.align	2
 1343              	.L70:
 1344 019c 00000000 		.word	UpdateFile
 1345 01a0 00000808 		.word	134742016
 1346 01a4 28000000 		.word	.LC11
 1347 01a8 01000808 		.word	134742017
 1348 01ac 02000808 		.word	134742018
 1349 01b0 03000808 		.word	134742019
 1350 01b4 98FF0708 		.word	134741912
 1351 01b8 38000000 		.word	.LC12
 1352 01bc 64000000 		.word	.LC13
 1353 01c0 00000000 		.word	SpiRxData
 1354              		.cfi_endproc
 1355              	.LFE155:
 1357              		.section	.rodata
ARM GAS  /tmp/ccTABCUX.s 			page 32


 1358              		.align	2
 1359              	.LC14:
 1360 0074 57726974 		.ascii	"Writing data to memory\015\012\000"
 1360      696E6720 
 1360      64617461 
 1360      20746F20 
 1360      6D656D6F 
 1361 008d 000000   		.align	2
 1362              	.LC15:
 1363 0090 57726974 		.ascii	"Writing is done\015\012\000"
 1363      696E6720 
 1363      69732064 
 1363      6F6E650D 
 1363      0A00
 1364              		.section	.text.writeUpdateFileToFlash,"ax",%progbits
 1365              		.align	1
 1366              		.global	writeUpdateFileToFlash
 1367              		.syntax unified
 1368              		.thumb
 1369              		.thumb_func
 1370              		.fpu fpv4-sp-d16
 1372              	writeUpdateFileToFlash:
 1373              	.LFB156:
 355:Src/spiops.c  **** 
 356:Src/spiops.c  **** 
 357:Src/spiops.c  **** void writeUpdateFileToFlash(unsigned char *UpdateFileData)
 358:Src/spiops.c  **** {
 1374              		.loc 2 358 0
 1375              		.cfi_startproc
 1376              		@ args = 0, pretend = 0, frame = 24
 1377              		@ frame_needed = 1, uses_anonymous_args = 0
 1378 0000 2DE99048 		push	{r4, r7, fp, lr}
 1379              	.LCFI44:
 1380              		.cfi_def_cfa_offset 16
 1381              		.cfi_offset 4, -16
 1382              		.cfi_offset 7, -12
 1383              		.cfi_offset 11, -8
 1384              		.cfi_offset 14, -4
 1385 0004 86B0     		sub	sp, sp, #24
 1386              	.LCFI45:
 1387              		.cfi_def_cfa_offset 40
 1388 0006 00AF     		add	r7, sp, #0
 1389              	.LCFI46:
 1390              		.cfi_def_cfa_register 7
 1391 0008 7860     		str	r0, [r7, #4]
 359:Src/spiops.c  **** 
 360:Src/spiops.c  **** 
 361:Src/spiops.c  ****     HAL_StatusTypeDef flash_status;
 362:Src/spiops.c  ****     uint32_t total_size;
 363:Src/spiops.c  **** 
 364:Src/spiops.c  **** 
 365:Src/spiops.c  ****     mprintf("Writing data to memory\r\n");
 1392              		.loc 2 365 0
 1393 000a 5448     		ldr	r0, .L80
 1394 000c FFF7FEFF 		bl	mprintf
 366:Src/spiops.c  ****     HAL_FLASH_Unlock();
 1395              		.loc 2 366 0
ARM GAS  /tmp/ccTABCUX.s 			page 33


 1396 0010 FFF7FEFF 		bl	HAL_FLASH_Unlock
 367:Src/spiops.c  ****     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAER
 1397              		.loc 2 367 0
 1398 0014 524B     		ldr	r3, .L80+4
 1399 0016 3322     		movs	r2, #51
 1400 0018 DA60     		str	r2, [r3, #12]
 368:Src/spiops.c  ****     FLASH_Erase_Sector(FLASH_SECTOR_6, VOLTAGE_RANGE_3);
 1401              		.loc 2 368 0
 1402 001a 0221     		movs	r1, #2
 1403 001c 0620     		movs	r0, #6
 1404 001e FFF7FEFF 		bl	FLASH_Erase_Sector
 369:Src/spiops.c  **** 
 370:Src/spiops.c  **** 
 371:Src/spiops.c  ****     total_size = SPI_ENTITY_SIZE * (UpdateFile->total_sequence_number);
 1405              		.loc 2 371 0
 1406 0022 504B     		ldr	r3, .L80+8
 1407 0024 1B68     		ldr	r3, [r3]
 1408 0026 1B68     		ldr	r3, [r3]
 1409 0028 6C22     		movs	r2, #108
 1410 002a 02FB03F3 		mul	r3, r2, r3
 1411 002e 3B61     		str	r3, [r7, #16]
 372:Src/spiops.c  **** 
 373:Src/spiops.c  **** 
 374:Src/spiops.c  ****     flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS, total_size & 0xff);
 1412              		.loc 2 374 0
 1413 0030 3B69     		ldr	r3, [r7, #16]
 1414 0032 9B46     		mov	fp, r3
 1415 0034 4FF0000C 		mov	ip, #0
 1416 0038 4FF0FF01 		mov	r1, #255
 1417 003c 4FF00002 		mov	r2, #0
 1418 0040 0BEA0103 		and	r3, fp, r1
 1419 0044 0CEA0204 		and	r4, ip, r2
 1420 0048 1A46     		mov	r2, r3
 1421 004a 2346     		mov	r3, r4
 1422 004c 4649     		ldr	r1, .L80+12
 1423 004e 0020     		movs	r0, #0
 1424 0050 FFF7FEFF 		bl	HAL_FLASH_Program
 1425 0054 0346     		mov	r3, r0
 1426 0056 FB73     		strb	r3, [r7, #15]
 375:Src/spiops.c  **** 
 376:Src/spiops.c  ****     if(flash_status != HAL_OK)
 1427              		.loc 2 376 0
 1428 0058 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1429 005a 002B     		cmp	r3, #0
 1430 005c 02D0     		beq	.L73
 377:Src/spiops.c  ****         mprintf("write error\r\n");
 1431              		.loc 2 377 0
 1432 005e 4348     		ldr	r0, .L80+16
 1433 0060 FFF7FEFF 		bl	mprintf
 1434              	.L73:
 378:Src/spiops.c  **** 
 379:Src/spiops.c  ****     flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS + 1, (total_size >> 8) & 0xf
 1435              		.loc 2 379 0
 1436 0064 3B69     		ldr	r3, [r7, #16]
 1437 0066 1B0A     		lsrs	r3, r3, #8
 1438 0068 9B46     		mov	fp, r3
 1439 006a 4FF0000C 		mov	ip, #0
ARM GAS  /tmp/ccTABCUX.s 			page 34


 1440 006e 4FF0FF01 		mov	r1, #255
 1441 0072 4FF00002 		mov	r2, #0
 1442 0076 0BEA0103 		and	r3, fp, r1
 1443 007a 0CEA0204 		and	r4, ip, r2
 1444 007e 1A46     		mov	r2, r3
 1445 0080 2346     		mov	r3, r4
 1446 0082 3B49     		ldr	r1, .L80+20
 1447 0084 0020     		movs	r0, #0
 1448 0086 FFF7FEFF 		bl	HAL_FLASH_Program
 1449 008a 0346     		mov	r3, r0
 1450 008c FB73     		strb	r3, [r7, #15]
 380:Src/spiops.c  **** 
 381:Src/spiops.c  ****     if(flash_status != HAL_OK)
 1451              		.loc 2 381 0
 1452 008e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1453 0090 002B     		cmp	r3, #0
 1454 0092 02D0     		beq	.L74
 382:Src/spiops.c  ****         mprintf("write error\r\n");
 1455              		.loc 2 382 0
 1456 0094 3548     		ldr	r0, .L80+16
 1457 0096 FFF7FEFF 		bl	mprintf
 1458              	.L74:
 383:Src/spiops.c  **** 
 384:Src/spiops.c  ****     flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS + 2, (total_size >> 16) & 0x
 1459              		.loc 2 384 0
 1460 009a 3B69     		ldr	r3, [r7, #16]
 1461 009c 1B0C     		lsrs	r3, r3, #16
 1462 009e 9B46     		mov	fp, r3
 1463 00a0 4FF0000C 		mov	ip, #0
 1464 00a4 4FF0FF01 		mov	r1, #255
 1465 00a8 4FF00002 		mov	r2, #0
 1466 00ac 0BEA0103 		and	r3, fp, r1
 1467 00b0 0CEA0204 		and	r4, ip, r2
 1468 00b4 1A46     		mov	r2, r3
 1469 00b6 2346     		mov	r3, r4
 1470 00b8 2E49     		ldr	r1, .L80+24
 1471 00ba 0020     		movs	r0, #0
 1472 00bc FFF7FEFF 		bl	HAL_FLASH_Program
 1473 00c0 0346     		mov	r3, r0
 1474 00c2 FB73     		strb	r3, [r7, #15]
 385:Src/spiops.c  **** 
 386:Src/spiops.c  ****     if(flash_status != HAL_OK)
 1475              		.loc 2 386 0
 1476 00c4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1477 00c6 002B     		cmp	r3, #0
 1478 00c8 02D0     		beq	.L75
 387:Src/spiops.c  ****         mprintf("write error\r\n");
 1479              		.loc 2 387 0
 1480 00ca 2848     		ldr	r0, .L80+16
 1481 00cc FFF7FEFF 		bl	mprintf
 1482              	.L75:
 388:Src/spiops.c  **** 
 389:Src/spiops.c  ****     flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS + 3, (total_size >> 24) & 0x
 1483              		.loc 2 389 0
 1484 00d0 3B69     		ldr	r3, [r7, #16]
 1485 00d2 1B0E     		lsrs	r3, r3, #24
 1486 00d4 4FF00004 		mov	r4, #0
ARM GAS  /tmp/ccTABCUX.s 			page 35


 1487 00d8 1A46     		mov	r2, r3
 1488 00da 2346     		mov	r3, r4
 1489 00dc 2649     		ldr	r1, .L80+28
 1490 00de 0020     		movs	r0, #0
 1491 00e0 FFF7FEFF 		bl	HAL_FLASH_Program
 1492 00e4 0346     		mov	r3, r0
 1493 00e6 FB73     		strb	r3, [r7, #15]
 390:Src/spiops.c  **** 
 391:Src/spiops.c  ****     if(flash_status != HAL_OK)
 1494              		.loc 2 391 0
 1495 00e8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1496 00ea 002B     		cmp	r3, #0
 1497 00ec 02D0     		beq	.L76
 392:Src/spiops.c  ****         mprintf("write error\r\n");
 1498              		.loc 2 392 0
 1499 00ee 1F48     		ldr	r0, .L80+16
 1500 00f0 FFF7FEFF 		bl	mprintf
 1501              	.L76:
 1502              	.LBB6:
 393:Src/spiops.c  **** 
 394:Src/spiops.c  ****     for(int i=0; i<total_size; i++)
 1503              		.loc 2 394 0
 1504 00f4 0023     		movs	r3, #0
 1505 00f6 7B61     		str	r3, [r7, #20]
 1506 00f8 1AE0     		b	.L77
 1507              	.L79:
 395:Src/spiops.c  ****     {
 396:Src/spiops.c  ****         flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS + i + 4, (uint8_t)Update
 1508              		.loc 2 396 0
 1509 00fa 7A69     		ldr	r2, [r7, #20]
 1510 00fc 1F4B     		ldr	r3, .L80+32
 1511 00fe 1344     		add	r3, r3, r2
 1512 0100 1946     		mov	r1, r3
 1513 0102 7B69     		ldr	r3, [r7, #20]
 1514 0104 7A68     		ldr	r2, [r7, #4]
 1515 0106 1344     		add	r3, r3, r2
 1516 0108 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1517 010a DBB2     		uxtb	r3, r3
 1518 010c 4FF00004 		mov	r4, #0
 1519 0110 1A46     		mov	r2, r3
 1520 0112 2346     		mov	r3, r4
 1521 0114 0020     		movs	r0, #0
 1522 0116 FFF7FEFF 		bl	HAL_FLASH_Program
 1523 011a 0346     		mov	r3, r0
 1524 011c FB73     		strb	r3, [r7, #15]
 397:Src/spiops.c  **** 
 398:Src/spiops.c  ****         if(flash_status != HAL_OK)
 1525              		.loc 2 398 0
 1526 011e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1527 0120 002B     		cmp	r3, #0
 1528 0122 02D0     		beq	.L78
 399:Src/spiops.c  ****             mprintf("write error\r\n");
 1529              		.loc 2 399 0
 1530 0124 1148     		ldr	r0, .L80+16
 1531 0126 FFF7FEFF 		bl	mprintf
 1532              	.L78:
 394:Src/spiops.c  ****     {
ARM GAS  /tmp/ccTABCUX.s 			page 36


 1533              		.loc 2 394 0 discriminator 2
 1534 012a 7B69     		ldr	r3, [r7, #20]
 1535 012c 0133     		adds	r3, r3, #1
 1536 012e 7B61     		str	r3, [r7, #20]
 1537              	.L77:
 394:Src/spiops.c  ****     {
 1538              		.loc 2 394 0 is_stmt 0 discriminator 1
 1539 0130 7B69     		ldr	r3, [r7, #20]
 1540 0132 3A69     		ldr	r2, [r7, #16]
 1541 0134 9A42     		cmp	r2, r3
 1542 0136 E0D8     		bhi	.L79
 1543              	.LBE6:
 400:Src/spiops.c  ****     }
 401:Src/spiops.c  **** 
 402:Src/spiops.c  ****     HAL_FLASH_Lock();
 1544              		.loc 2 402 0 is_stmt 1
 1545 0138 FFF7FEFF 		bl	HAL_FLASH_Lock
 403:Src/spiops.c  **** 
 404:Src/spiops.c  ****     mprintf("Writing is done\r\n");
 1546              		.loc 2 404 0
 1547 013c 1048     		ldr	r0, .L80+36
 1548 013e FFF7FEFF 		bl	mprintf
 405:Src/spiops.c  **** 
 406:Src/spiops.c  ****     mprintf("Restarting...\r\n");
 1549              		.loc 2 406 0
 1550 0142 1048     		ldr	r0, .L80+40
 1551 0144 FFF7FEFF 		bl	mprintf
 407:Src/spiops.c  **** 
 408:Src/spiops.c  ****     osDelay(50);
 1552              		.loc 2 408 0
 1553 0148 3220     		movs	r0, #50
 1554 014a FFF7FEFF 		bl	osDelay
 409:Src/spiops.c  **** 
 410:Src/spiops.c  **** 
 411:Src/spiops.c  ****     HAL_NVIC_SystemReset();
 1555              		.loc 2 411 0
 1556 014e FFF7FEFF 		bl	HAL_NVIC_SystemReset
 412:Src/spiops.c  **** 
 413:Src/spiops.c  **** }
 1557              		.loc 2 413 0
 1558 0152 00BF     		nop
 1559 0154 1837     		adds	r7, r7, #24
 1560              	.LCFI47:
 1561              		.cfi_def_cfa_offset 16
 1562 0156 BD46     		mov	sp, r7
 1563              	.LCFI48:
 1564              		.cfi_def_cfa_register 13
 1565              		@ sp needed
 1566 0158 BDE89088 		pop	{r4, r7, fp, pc}
 1567              	.L81:
 1568              		.align	2
 1569              	.L80:
 1570 015c 74000000 		.word	.LC14
 1571 0160 003C0240 		.word	1073888256
 1572 0164 00000000 		.word	UpdateFile
 1573 0168 00000808 		.word	134742016
 1574 016c 28000000 		.word	.LC11
ARM GAS  /tmp/ccTABCUX.s 			page 37


 1575 0170 01000808 		.word	134742017
 1576 0174 02000808 		.word	134742018
 1577 0178 03000808 		.word	134742019
 1578 017c 04000808 		.word	134742020
 1579 0180 90000000 		.word	.LC15
 1580 0184 64000000 		.word	.LC13
 1581              		.cfi_endproc
 1582              	.LFE156:
 1584              		.section	.rodata
 1585 00a2 0000     		.align	2
 1586              	.LC16:
 1587 00a4 530D0A00 		.ascii	"S\015\012\000"
 1588              		.section	.text.processControlData,"ax",%progbits
 1589              		.align	1
 1590              		.global	processControlData
 1591              		.syntax unified
 1592              		.thumb
 1593              		.thumb_func
 1594              		.fpu fpv4-sp-d16
 1596              	processControlData:
 1597              	.LFB157:
 414:Src/spiops.c  **** 
 415:Src/spiops.c  **** 
 416:Src/spiops.c  **** 
 417:Src/spiops.c  **** void processControlData()
 418:Src/spiops.c  **** {
 1598              		.loc 2 418 0
 1599              		.cfi_startproc
 1600              		@ args = 0, pretend = 0, frame = 0
 1601              		@ frame_needed = 1, uses_anonymous_args = 0
 1602 0000 80B5     		push	{r7, lr}
 1603              	.LCFI49:
 1604              		.cfi_def_cfa_offset 8
 1605              		.cfi_offset 7, -8
 1606              		.cfi_offset 14, -4
 1607 0002 00AF     		add	r7, sp, #0
 1608              	.LCFI50:
 1609              		.cfi_def_cfa_register 7
 419:Src/spiops.c  **** 
 420:Src/spiops.c  **** 
 421:Src/spiops.c  ****     motor1.direction = ControlData -> step_motor1_direction;
 1610              		.loc 2 421 0
 1611 0004 1E4B     		ldr	r3, .L85
 1612 0006 1B68     		ldr	r3, [r3]
 1613 0008 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1614 000c 1A46     		mov	r2, r3
 1615 000e 1D4B     		ldr	r3, .L85+4
 1616 0010 1A60     		str	r2, [r3]
 422:Src/spiops.c  ****     motor1.speed = ControlData -> step_motor1_speed;
 1617              		.loc 2 422 0
 1618 0012 1B4B     		ldr	r3, .L85
 1619 0014 1B68     		ldr	r3, [r3]
 1620 0016 93F84230 		ldrb	r3, [r3, #66]	@ zero_extendqisi2
 1621 001a 1A46     		mov	r2, r3
 1622 001c 194B     		ldr	r3, .L85+4
 1623 001e 5A60     		str	r2, [r3, #4]
 423:Src/spiops.c  **** 
ARM GAS  /tmp/ccTABCUX.s 			page 38


 424:Src/spiops.c  **** 
 425:Src/spiops.c  ****     motor2.direction = ControlData -> step_motor2_direction;;
 1624              		.loc 2 425 0
 1625 0020 174B     		ldr	r3, .L85
 1626 0022 1B68     		ldr	r3, [r3]
 1627 0024 93F83D30 		ldrb	r3, [r3, #61]	@ zero_extendqisi2
 1628 0028 1A46     		mov	r2, r3
 1629 002a 174B     		ldr	r3, .L85+8
 1630 002c 1A60     		str	r2, [r3]
 426:Src/spiops.c  ****     motor2.speed = ControlData -> step_motor2_speed;
 1631              		.loc 2 426 0
 1632 002e 144B     		ldr	r3, .L85
 1633 0030 1B68     		ldr	r3, [r3]
 1634 0032 93F84330 		ldrb	r3, [r3, #67]	@ zero_extendqisi2
 1635 0036 1A46     		mov	r2, r3
 1636 0038 134B     		ldr	r3, .L85+8
 1637 003a 5A60     		str	r2, [r3, #4]
 427:Src/spiops.c  **** 
 428:Src/spiops.c  **** 
 429:Src/spiops.c  **** //    if(ControlData -> servo_motor1_degree != 0)
 430:Src/spiops.c  ****     servo1.angle = ControlData -> servo_motor1_degree;
 1638              		.loc 2 430 0
 1639 003c 104B     		ldr	r3, .L85
 1640 003e 1B68     		ldr	r3, [r3]
 1641 0040 93F84630 		ldrb	r3, [r3, #70]	@ zero_extendqisi2
 1642 0044 1A46     		mov	r2, r3
 1643 0046 114B     		ldr	r3, .L85+12
 1644 0048 1A60     		str	r2, [r3]
 431:Src/spiops.c  **** 
 432:Src/spiops.c  **** 
 433:Src/spiops.c  **** //    if(ControlData -> servo_motor2_degree != 0)
 434:Src/spiops.c  ****     servo2.angle = ControlData -> servo_motor2_degree;
 1645              		.loc 2 434 0
 1646 004a 0D4B     		ldr	r3, .L85
 1647 004c 1B68     		ldr	r3, [r3]
 1648 004e 93F84730 		ldrb	r3, [r3, #71]	@ zero_extendqisi2
 1649 0052 1A46     		mov	r2, r3
 1650 0054 0E4B     		ldr	r3, .L85+16
 1651 0056 1A60     		str	r2, [r3]
 435:Src/spiops.c  **** 
 436:Src/spiops.c  **** 
 437:Src/spiops.c  ****     if(ControlData -> calibrate_sensor == 1)
 1652              		.loc 2 437 0
 1653 0058 094B     		ldr	r3, .L85
 1654 005a 1B68     		ldr	r3, [r3]
 1655 005c 93F84830 		ldrb	r3, [r3, #72]	@ zero_extendqisi2
 1656 0060 012B     		cmp	r3, #1
 1657 0062 0BD1     		bne	.L84
 438:Src/spiops.c  ****     {
 439:Src/spiops.c  ****         mprintf("S\r\n");
 1658              		.loc 2 439 0
 1659 0064 0B48     		ldr	r0, .L85+20
 1660 0066 FFF7FEFF 		bl	mprintf
 440:Src/spiops.c  **** 
 441:Src/spiops.c  ****         calibration.available = 1;
 1661              		.loc 2 441 0
 1662 006a 0B4B     		ldr	r3, .L85+24
ARM GAS  /tmp/ccTABCUX.s 			page 39


 1663 006c 0122     		movs	r2, #1
 1664 006e 1A60     		str	r2, [r3]
 442:Src/spiops.c  **** 
 443:Src/spiops.c  ****         motor1.direction = STOP;
 1665              		.loc 2 443 0
 1666 0070 044B     		ldr	r3, .L85+4
 1667 0072 0022     		movs	r2, #0
 1668 0074 1A60     		str	r2, [r3]
 444:Src/spiops.c  ****         motor2.direction = STOP;
 1669              		.loc 2 444 0
 1670 0076 044B     		ldr	r3, .L85+8
 1671 0078 0022     		movs	r2, #0
 1672 007a 1A60     		str	r2, [r3]
 1673              	.L84:
 445:Src/spiops.c  **** 
 446:Src/spiops.c  ****     }
 447:Src/spiops.c  **** 
 448:Src/spiops.c  **** 
 449:Src/spiops.c  **** 
 450:Src/spiops.c  **** 
 451:Src/spiops.c  **** }
 1674              		.loc 2 451 0
 1675 007c 00BF     		nop
 1676 007e 80BD     		pop	{r7, pc}
 1677              	.L86:
 1678              		.align	2
 1679              	.L85:
 1680 0080 00000000 		.word	ControlData
 1681 0084 00000000 		.word	motor1
 1682 0088 00000000 		.word	motor2
 1683 008c 00000000 		.word	servo1
 1684 0090 00000000 		.word	servo2
 1685 0094 A4000000 		.word	.LC16
 1686 0098 00000000 		.word	calibration
 1687              		.cfi_endproc
 1688              	.LFE157:
 1690              		.section	.rodata
 1691              		.align	2
 1692              	.LC17:
 1693 00a8 73656E73 		.ascii	"sensorOps\015\012\000"
 1693      6F724F70 
 1693      730D0A00 
 1694              		.align	2
 1695              	.LC18:
 1696 00b4 53656E73 		.ascii	"Sensor Calibration Started. \015\012\000"
 1696      6F722043 
 1696      616C6962 
 1696      72617469 
 1696      6F6E2053 
 1697              		.section	.text.sensorOps,"ax",%progbits
 1698              		.align	1
 1699              		.global	sensorOps
 1700              		.syntax unified
 1701              		.thumb
 1702              		.thumb_func
 1703              		.fpu fpv4-sp-d16
 1705              	sensorOps:
ARM GAS  /tmp/ccTABCUX.s 			page 40


 1706              	.LFB158:
 1707              		.file 3 "Src/sensorops.c"
   1:Src/sensorops.c **** #include "sensorops.h"
   2:Src/sensorops.c **** 
   3:Src/sensorops.c **** 
   4:Src/sensorops.c **** /* sensorOps function */
   5:Src/sensorops.c **** void sensorOps(void const * argument)
   6:Src/sensorops.c **** {
 1708              		.loc 3 6 0
 1709              		.cfi_startproc
 1710              		@ args = 0, pretend = 0, frame = 8
 1711              		@ frame_needed = 1, uses_anonymous_args = 0
 1712 0000 80B5     		push	{r7, lr}
 1713              	.LCFI51:
 1714              		.cfi_def_cfa_offset 8
 1715              		.cfi_offset 7, -8
 1716              		.cfi_offset 14, -4
 1717 0002 82B0     		sub	sp, sp, #8
 1718              	.LCFI52:
 1719              		.cfi_def_cfa_offset 16
 1720 0004 00AF     		add	r7, sp, #0
 1721              	.LCFI53:
 1722              		.cfi_def_cfa_register 7
 1723 0006 7860     		str	r0, [r7, #4]
   7:Src/sensorops.c **** 
   8:Src/sensorops.c ****   mprintf("sensorOps\r\n");
 1724              		.loc 3 8 0
 1725 0008 1D48     		ldr	r0, .L91
 1726 000a FFF7FEFF 		bl	mprintf
 1727              	.L90:
   9:Src/sensorops.c **** 
  10:Src/sensorops.c **** //  sensorInit();
  11:Src/sensorops.c **** 
  12:Src/sensorops.c **** 
  13:Src/sensorops.c ****   while(1)
  14:Src/sensorops.c ****   {
  15:Src/sensorops.c **** 
  16:Src/sensorops.c **** 
  17:Src/sensorops.c ****       if(calibration.available == 1)
 1728              		.loc 3 17 0
 1729 000e 1D4B     		ldr	r3, .L91+4
 1730 0010 1B68     		ldr	r3, [r3]
 1731 0012 012B     		cmp	r3, #1
 1732 0014 08D1     		bne	.L88
  18:Src/sensorops.c ****       {
  19:Src/sensorops.c ****           mprintf("Sensor Calibration Started. \r\n");
 1733              		.loc 3 19 0
 1734 0016 1C48     		ldr	r0, .L91+8
 1735 0018 FFF7FEFF 		bl	mprintf
  20:Src/sensorops.c **** 
  21:Src/sensorops.c ****           calibration.available  = 0;
 1736              		.loc 3 21 0
 1737 001c 194B     		ldr	r3, .L91+4
 1738 001e 0022     		movs	r2, #0
 1739 0020 1A60     		str	r2, [r3]
  22:Src/sensorops.c ****           calibrateCompass();
 1740              		.loc 3 22 0
ARM GAS  /tmp/ccTABCUX.s 			page 41


 1741 0022 FFF7FEFF 		bl	calibrateCompass
 1742 0026 F2E7     		b	.L90
 1743              	.L88:
  23:Src/sensorops.c ****       }
  24:Src/sensorops.c ****       else
  25:Src/sensorops.c ****       {
  26:Src/sensorops.c **** 
  27:Src/sensorops.c ****           readAllSensors();
 1744              		.loc 3 27 0
 1745 0028 FFF7FEFF 		bl	readAllSensors
  28:Src/sensorops.c **** 
  29:Src/sensorops.c **** 
  30:Src/sensorops.c ****           xSemaphoreTake(spiMutexHandle, portMAX_DELAY);
 1746              		.loc 3 30 0
 1747 002c 174B     		ldr	r3, .L91+12
 1748 002e 1868     		ldr	r0, [r3]
 1749 0030 0023     		movs	r3, #0
 1750 0032 4FF0FF32 		mov	r2, #-1
 1751 0036 0021     		movs	r1, #0
 1752 0038 FFF7FEFF 		bl	xQueueGenericReceive
  31:Src/sensorops.c **** 
  32:Src/sensorops.c ****           EnvironmentData -> sensor_data.temperature = sensorValues.temperature;
 1753              		.loc 3 32 0
 1754 003c 144B     		ldr	r3, .L91+16
 1755 003e 9A68     		ldr	r2, [r3, #8]
 1756 0040 144B     		ldr	r3, .L91+20
 1757 0042 1B68     		ldr	r3, [r3]
 1758 0044 5A66     		str	r2, [r3, #100]
  33:Src/sensorops.c ****           EnvironmentData -> sensor_data.pressure = sensorValues.pressure;
 1759              		.loc 3 33 0
 1760 0046 124B     		ldr	r3, .L91+16
 1761 0048 1A68     		ldr	r2, [r3]
 1762 004a 124B     		ldr	r3, .L91+20
 1763 004c 1B68     		ldr	r3, [r3]
 1764 004e DA66     		str	r2, [r3, #108]
  34:Src/sensorops.c ****           EnvironmentData -> sensor_data.altitude = sensorValues.altitude;
 1765              		.loc 3 34 0
 1766 0050 0F4B     		ldr	r3, .L91+16
 1767 0052 5A68     		ldr	r2, [r3, #4]
 1768 0054 0F4B     		ldr	r3, .L91+20
 1769 0056 1B68     		ldr	r3, [r3]
 1770 0058 1A67     		str	r2, [r3, #112]
  35:Src/sensorops.c ****           EnvironmentData -> sensor_data.wheather_condition = sensorValues.wheather_condition;
 1771              		.loc 3 35 0
 1772 005a 0E4B     		ldr	r3, .L91+20
 1773 005c 1B68     		ldr	r3, [r3]
 1774 005e 0C4A     		ldr	r2, .L91+16
 1775 0060 127B     		ldrb	r2, [r2, #12]	@ zero_extendqisi2
 1776 0062 83F87420 		strb	r2, [r3, #116]
  36:Src/sensorops.c ****           EnvironmentData -> sensor_data.compass_degree = sensorValues.compass_degree;
 1777              		.loc 3 36 0
 1778 0066 0A4B     		ldr	r3, .L91+16
 1779 0068 1A69     		ldr	r2, [r3, #16]
 1780 006a 0A4B     		ldr	r3, .L91+20
 1781 006c 1B68     		ldr	r3, [r3]
 1782 006e 9A66     		str	r2, [r3, #104]
  37:Src/sensorops.c **** 
ARM GAS  /tmp/ccTABCUX.s 			page 42


  38:Src/sensorops.c ****           xSemaphoreGive(spiMutexHandle);
 1783              		.loc 3 38 0
 1784 0070 064B     		ldr	r3, .L91+12
 1785 0072 1868     		ldr	r0, [r3]
 1786 0074 0023     		movs	r3, #0
 1787 0076 0022     		movs	r2, #0
 1788 0078 0021     		movs	r1, #0
 1789 007a FFF7FEFF 		bl	xQueueGenericSend
  17:Src/sensorops.c ****       {
 1790              		.loc 3 17 0
 1791 007e C6E7     		b	.L90
 1792              	.L92:
 1793              		.align	2
 1794              	.L91:
 1795 0080 A8000000 		.word	.LC17
 1796 0084 00000000 		.word	calibration
 1797 0088 B4000000 		.word	.LC18
 1798 008c 00000000 		.word	spiMutexHandle
 1799 0090 00000000 		.word	sensorValues
 1800 0094 00000000 		.word	EnvironmentData
 1801              		.cfi_endproc
 1802              	.LFE158:
 1804              		.section	.rodata
 1805 00d3 00       		.align	2
 1806              	.LC19:
 1807 00d4 6D6F746F 		.ascii	"motorOps\015\012\000"
 1807      724F7073 
 1807      0D0A00
 1808              		.global	__aeabi_i2d
 1809              		.global	__aeabi_dmul
 1810              		.global	__aeabi_dadd
 1811              		.global	__aeabi_d2iz
 1812              		.section	.text.motorOps,"ax",%progbits
 1813              		.align	1
 1814              		.global	motorOps
 1815              		.syntax unified
 1816              		.thumb
 1817              		.thumb_func
 1818              		.fpu fpv4-sp-d16
 1820              	motorOps:
 1821              	.LFB159:
 1822              		.file 4 "Src/motorops.c"
   1:Src/motorops.c **** #include "motorops.h"
   2:Src/motorops.c **** #include "main.h"
   3:Src/motorops.c **** 
   4:Src/motorops.c **** 
   5:Src/motorops.c **** 
   6:Src/motorops.c **** void motorOps(void const * argument)
   7:Src/motorops.c **** {
 1823              		.loc 4 7 0
 1824              		.cfi_startproc
 1825              		@ args = 0, pretend = 0, frame = 56
 1826              		@ frame_needed = 1, uses_anonymous_args = 0
 1827 0000 90B5     		push	{r4, r7, lr}
 1828              	.LCFI54:
 1829              		.cfi_def_cfa_offset 12
 1830              		.cfi_offset 4, -12
ARM GAS  /tmp/ccTABCUX.s 			page 43


 1831              		.cfi_offset 7, -8
 1832              		.cfi_offset 14, -4
 1833 0002 8FB0     		sub	sp, sp, #60
 1834              	.LCFI55:
 1835              		.cfi_def_cfa_offset 72
 1836 0004 00AF     		add	r7, sp, #0
 1837              	.LCFI56:
 1838              		.cfi_def_cfa_register 7
 1839 0006 7860     		str	r0, [r7, #4]
   8:Src/motorops.c **** 
   9:Src/motorops.c ****     int counter1 = 0;
 1840              		.loc 4 9 0
 1841 0008 0023     		movs	r3, #0
 1842 000a 7B63     		str	r3, [r7, #52]
  10:Src/motorops.c ****     int counter2 = 0;
 1843              		.loc 4 10 0
 1844 000c 0023     		movs	r3, #0
 1845 000e 3B63     		str	r3, [r7, #48]
  11:Src/motorops.c **** 
  12:Src/motorops.c ****     int servo2_degree = 0;
 1846              		.loc 4 12 0
 1847 0010 0023     		movs	r3, #0
 1848 0012 FB62     		str	r3, [r7, #44]
  13:Src/motorops.c ****     int servo1_degree = 0;
 1849              		.loc 4 13 0
 1850 0014 0023     		movs	r3, #0
 1851 0016 BB62     		str	r3, [r7, #40]
  14:Src/motorops.c **** 
  15:Src/motorops.c ****     int speed = 0;
 1852              		.loc 4 15 0
 1853 0018 0023     		movs	r3, #0
 1854 001a 7B62     		str	r3, [r7, #36]
  16:Src/motorops.c ****     int pwm = 80;
 1855              		.loc 4 16 0
 1856 001c 5023     		movs	r3, #80
 1857 001e 3B62     		str	r3, [r7, #32]
  17:Src/motorops.c **** 
  18:Src/motorops.c **** 
  19:Src/motorops.c ****     int step_motor1_last_direction;
  20:Src/motorops.c ****     int step_motor2_last_direction;
  21:Src/motorops.c ****     int step_motor1_break;
  22:Src/motorops.c ****     int step_motor2_break;
  23:Src/motorops.c **** 
  24:Src/motorops.c ****     short int offside_step1;
  25:Src/motorops.c ****     short int offside_step2;
  26:Src/motorops.c ****     short int offside_available_step1 = 0;
 1858              		.loc 4 26 0
 1859 0020 0023     		movs	r3, #0
 1860 0022 FB83     		strh	r3, [r7, #30]	@ movhi
  27:Src/motorops.c ****     short int offside_available_step2 = 0;
 1861              		.loc 4 27 0
 1862 0024 0023     		movs	r3, #0
 1863 0026 BB83     		strh	r3, [r7, #28]	@ movhi
  28:Src/motorops.c **** 
  29:Src/motorops.c **** 
  30:Src/motorops.c ****     mprintf("motorOps\r\n");
 1864              		.loc 4 30 0
ARM GAS  /tmp/ccTABCUX.s 			page 44


 1865 0028 5F48     		ldr	r0, .L107+8
 1866 002a FFF7FEFF 		bl	mprintf
 1867              	.L106:
  31:Src/motorops.c **** //    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  32:Src/motorops.c **** 
  33:Src/motorops.c ****     while(1)
  34:Src/motorops.c ****     {
  35:Src/motorops.c **** 
  36:Src/motorops.c ****         step_motor1_break = HAL_GPIO_ReadPin(STEP1_BREAK_GPIO_Port, STEP1_BREAK_Pin);
 1868              		.loc 4 36 0
 1869 002e 4FF40041 		mov	r1, #32768
 1870 0032 5E48     		ldr	r0, .L107+12
 1871 0034 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1872 0038 0346     		mov	r3, r0
 1873 003a BB61     		str	r3, [r7, #24]
  37:Src/motorops.c ****         step_motor2_break = HAL_GPIO_ReadPin(STEP2_BREAK_GPIO_Port, STEP2_BREAK_Pin);
 1874              		.loc 4 37 0
 1875 003c 0221     		movs	r1, #2
 1876 003e 5C48     		ldr	r0, .L107+16
 1877 0040 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1878 0044 0346     		mov	r3, r0
 1879 0046 7B61     		str	r3, [r7, #20]
  38:Src/motorops.c **** 
  39:Src/motorops.c **** //        if(!step_motor1_break && !offside_available_step1)
  40:Src/motorops.c **** //        {
  41:Src/motorops.c **** //            offside_step1 == step_motor1_last_direction;
  42:Src/motorops.c **** //            offside_available_step1 = 1;
  43:Src/motorops.c **** 
  44:Src/motorops.c **** //        }else if(step_motor1_break)
  45:Src/motorops.c **** //        {
  46:Src/motorops.c **** //            offside_step1 = 0;
  47:Src/motorops.c **** //            offside_available_step1 = 0;
  48:Src/motorops.c **** //        }
  49:Src/motorops.c **** 
  50:Src/motorops.c **** 
  51:Src/motorops.c **** //        if(!step_motor2_break && !offside_available_step2)
  52:Src/motorops.c **** //        {
  53:Src/motorops.c **** //            offside_step2 == step_motor2_last_direction;
  54:Src/motorops.c **** //            offside_available_step2 = 1;
  55:Src/motorops.c **** 
  56:Src/motorops.c **** //        }else if(step_motor2_break)
  57:Src/motorops.c **** //        {
  58:Src/motorops.c **** //            offside_step2 = 0;
  59:Src/motorops.c **** //            offside_available_step2 = 0;
  60:Src/motorops.c **** //        }
  61:Src/motorops.c **** 
  62:Src/motorops.c ****         if(motor1.direction == FORWARD)
 1880              		.loc 4 62 0
 1881 0048 5A4B     		ldr	r3, .L107+20
 1882 004a 1B68     		ldr	r3, [r3]
 1883 004c 012B     		cmp	r3, #1
 1884 004e 08D1     		bne	.L94
  63:Src/motorops.c ****         {
  64:Src/motorops.c **** //            if(offside_step1 != FORWARD)
  65:Src/motorops.c **** //            {
  66:Src/motorops.c ****                 motor1Drive(FORWARD);
 1885              		.loc 4 66 0
ARM GAS  /tmp/ccTABCUX.s 			page 45


 1886 0050 0120     		movs	r0, #1
 1887 0052 FFF7FEFF 		bl	motor1Drive
  67:Src/motorops.c ****                 speed = motor1.speed;
 1888              		.loc 4 67 0
 1889 0056 574B     		ldr	r3, .L107+20
 1890 0058 5B68     		ldr	r3, [r3, #4]
 1891 005a 7B62     		str	r3, [r7, #36]
  68:Src/motorops.c **** //            }
  69:Src/motorops.c ****              step_motor1_last_direction = FORWARD;
 1892              		.loc 4 69 0
 1893 005c 0123     		movs	r3, #1
 1894 005e 3B61     		str	r3, [r7, #16]
 1895 0060 0FE0     		b	.L95
 1896              	.L94:
  70:Src/motorops.c **** 
  71:Src/motorops.c ****         }
  72:Src/motorops.c ****         else if(motor1.direction == BACKWARD)
 1897              		.loc 4 72 0
 1898 0062 544B     		ldr	r3, .L107+20
 1899 0064 1B68     		ldr	r3, [r3]
 1900 0066 022B     		cmp	r3, #2
 1901 0068 08D1     		bne	.L96
  73:Src/motorops.c ****         {
  74:Src/motorops.c **** //            if(offside_step1 == BACKWARD)
  75:Src/motorops.c **** //            {
  76:Src/motorops.c ****                 motor1Drive(BACKWARD);
 1902              		.loc 4 76 0
 1903 006a 0220     		movs	r0, #2
 1904 006c FFF7FEFF 		bl	motor1Drive
  77:Src/motorops.c ****                 speed = motor1.speed;
 1905              		.loc 4 77 0
 1906 0070 504B     		ldr	r3, .L107+20
 1907 0072 5B68     		ldr	r3, [r3, #4]
 1908 0074 7B62     		str	r3, [r7, #36]
  78:Src/motorops.c **** //            }
  79:Src/motorops.c ****             step_motor1_last_direction = BACKWARD;
 1909              		.loc 4 79 0
 1910 0076 0223     		movs	r3, #2
 1911 0078 3B61     		str	r3, [r7, #16]
 1912 007a 02E0     		b	.L95
 1913              	.L96:
  80:Src/motorops.c ****         }
  81:Src/motorops.c ****         else
  82:Src/motorops.c ****         {
  83:Src/motorops.c ****             motor1Drive(STOP);
 1914              		.loc 4 83 0
 1915 007c 0020     		movs	r0, #0
 1916 007e FFF7FEFF 		bl	motor1Drive
 1917              	.L95:
  84:Src/motorops.c ****         }
  85:Src/motorops.c **** 
  86:Src/motorops.c **** 
  87:Src/motorops.c ****         if(motor2.direction == FORWARD )
 1918              		.loc 4 87 0
 1919 0082 4D4B     		ldr	r3, .L107+24
 1920 0084 1B68     		ldr	r3, [r3]
 1921 0086 012B     		cmp	r3, #1
ARM GAS  /tmp/ccTABCUX.s 			page 46


 1922 0088 08D1     		bne	.L97
  88:Src/motorops.c ****         {
  89:Src/motorops.c **** //            if(offside_step2 != FORWARD)
  90:Src/motorops.c **** //            {
  91:Src/motorops.c ****                 motor2Drive(FORWARD);
 1923              		.loc 4 91 0
 1924 008a 0120     		movs	r0, #1
 1925 008c FFF7FEFF 		bl	motor2Drive
  92:Src/motorops.c ****                 speed = motor1.speed;
 1926              		.loc 4 92 0
 1927 0090 484B     		ldr	r3, .L107+20
 1928 0092 5B68     		ldr	r3, [r3, #4]
 1929 0094 7B62     		str	r3, [r7, #36]
  93:Src/motorops.c **** //            }
  94:Src/motorops.c ****             step_motor2_last_direction = FORWARD;
 1930              		.loc 4 94 0
 1931 0096 0123     		movs	r3, #1
 1932 0098 FB60     		str	r3, [r7, #12]
 1933 009a 0FE0     		b	.L98
 1934              	.L97:
  95:Src/motorops.c ****         }
  96:Src/motorops.c ****         else if(motor2.direction == BACKWARD)
 1935              		.loc 4 96 0
 1936 009c 464B     		ldr	r3, .L107+24
 1937 009e 1B68     		ldr	r3, [r3]
 1938 00a0 022B     		cmp	r3, #2
 1939 00a2 08D1     		bne	.L99
  97:Src/motorops.c ****         {
  98:Src/motorops.c **** //            if(offside_step2 != BACKWARD)
  99:Src/motorops.c **** //            {
 100:Src/motorops.c ****                 motor2Drive(BACKWARD);
 1940              		.loc 4 100 0
 1941 00a4 0220     		movs	r0, #2
 1942 00a6 FFF7FEFF 		bl	motor2Drive
 101:Src/motorops.c ****                 speed = motor1.speed;
 1943              		.loc 4 101 0
 1944 00aa 424B     		ldr	r3, .L107+20
 1945 00ac 5B68     		ldr	r3, [r3, #4]
 1946 00ae 7B62     		str	r3, [r7, #36]
 102:Src/motorops.c **** //            }
 103:Src/motorops.c ****             step_motor2_last_direction = BACKWARD;
 1947              		.loc 4 103 0
 1948 00b0 0223     		movs	r3, #2
 1949 00b2 FB60     		str	r3, [r7, #12]
 1950 00b4 02E0     		b	.L98
 1951              	.L99:
 104:Src/motorops.c ****         }
 105:Src/motorops.c ****         else
 106:Src/motorops.c ****         {
 107:Src/motorops.c ****             motor2Drive(STOP);
 1952              		.loc 4 107 0
 1953 00b6 0020     		movs	r0, #0
 1954 00b8 FFF7FEFF 		bl	motor2Drive
 1955              	.L98:
 108:Src/motorops.c ****         }
 109:Src/motorops.c **** 
 110:Src/motorops.c **** 
ARM GAS  /tmp/ccTABCUX.s 			page 47


 111:Src/motorops.c **** 
 112:Src/motorops.c ****         if(servo2.angle != 0)
 1956              		.loc 4 112 0
 1957 00bc 3F4B     		ldr	r3, .L107+28
 1958 00be 1B68     		ldr	r3, [r3]
 1959 00c0 002B     		cmp	r3, #0
 1960 00c2 0AD0     		beq	.L100
 113:Src/motorops.c ****         {
 114:Src/motorops.c ****            HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 1961              		.loc 4 114 0
 1962 00c4 0421     		movs	r1, #4
 1963 00c6 3E48     		ldr	r0, .L107+32
 1964 00c8 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 115:Src/motorops.c **** 
 116:Src/motorops.c ****            servo2_degree = servo2.angle;
 1965              		.loc 4 116 0
 1966 00cc 3B4B     		ldr	r3, .L107+28
 1967 00ce 1B68     		ldr	r3, [r3]
 1968 00d0 FB62     		str	r3, [r7, #44]
 117:Src/motorops.c **** 
 118:Src/motorops.c ****            counter2 = 0;
 1969              		.loc 4 118 0
 1970 00d2 0023     		movs	r3, #0
 1971 00d4 3B63     		str	r3, [r7, #48]
 119:Src/motorops.c ****            speed = 1;
 1972              		.loc 4 119 0
 1973 00d6 0123     		movs	r3, #1
 1974 00d8 7B62     		str	r3, [r7, #36]
 1975              	.L100:
 120:Src/motorops.c ****         }
 121:Src/motorops.c **** 
 122:Src/motorops.c ****         if(counter2 <= 100)
 1976              		.loc 4 122 0
 1977 00da 3B6B     		ldr	r3, [r7, #48]
 1978 00dc 642B     		cmp	r3, #100
 1979 00de 1EDC     		bgt	.L101
 123:Src/motorops.c ****         {
 124:Src/motorops.c ****           counter2 ++;
 1980              		.loc 4 124 0
 1981 00e0 3B6B     		ldr	r3, [r7, #48]
 1982 00e2 0133     		adds	r3, r3, #1
 1983 00e4 3B63     		str	r3, [r7, #48]
 125:Src/motorops.c ****           __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, (int)((double)(servo2_degree)*((double)(215-6
 1984              		.loc 4 125 0
 1985 00e6 F86A     		ldr	r0, [r7, #44]
 1986 00e8 FFF7FEFF 		bl	__aeabi_i2d
 1987              	.LVL0:
 1988 00ec 2CA3     		adr	r3, .L107
 1989 00ee D3E90023 		ldrd	r2, [r3]
 1990 00f2 FFF7FEFF 		bl	__aeabi_dmul
 1991              	.LVL1:
 1992 00f6 0346     		mov	r3, r0
 1993 00f8 0C46     		mov	r4, r1
 1994 00fa 1846     		mov	r0, r3
 1995 00fc 2146     		mov	r1, r4
 1996 00fe 4FF00002 		mov	r2, #0
 1997 0102 304B     		ldr	r3, .L107+36
ARM GAS  /tmp/ccTABCUX.s 			page 48


 1998 0104 FFF7FEFF 		bl	__aeabi_dadd
 1999              	.LVL2:
 2000 0108 0346     		mov	r3, r0
 2001 010a 0C46     		mov	r4, r1
 2002 010c 1846     		mov	r0, r3
 2003 010e 2146     		mov	r1, r4
 2004 0110 FFF7FEFF 		bl	__aeabi_d2iz
 2005              	.LVL3:
 2006 0114 0246     		mov	r2, r0
 2007 0116 2A4B     		ldr	r3, .L107+32
 2008 0118 1B68     		ldr	r3, [r3]
 2009 011a 9A63     		str	r2, [r3, #56]
 2010 011c 03E0     		b	.L102
 2011              	.L101:
 126:Src/motorops.c ****         }
 127:Src/motorops.c ****         else
 128:Src/motorops.c ****         {
 129:Src/motorops.c ****            HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 2012              		.loc 4 129 0
 2013 011e 0421     		movs	r1, #4
 2014 0120 2748     		ldr	r0, .L107+32
 2015 0122 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 2016              	.L102:
 130:Src/motorops.c ****         }
 131:Src/motorops.c **** 
 132:Src/motorops.c **** 
 133:Src/motorops.c ****         if(servo1.angle != 0)
 2017              		.loc 4 133 0
 2018 0126 284B     		ldr	r3, .L107+40
 2019 0128 1B68     		ldr	r3, [r3]
 2020 012a 002B     		cmp	r3, #0
 2021 012c 0AD0     		beq	.L103
 134:Src/motorops.c ****         {
 135:Src/motorops.c ****            HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 2022              		.loc 4 135 0
 2023 012e 0021     		movs	r1, #0
 2024 0130 2348     		ldr	r0, .L107+32
 2025 0132 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 136:Src/motorops.c **** 
 137:Src/motorops.c ****            servo1_degree = servo1.angle;
 2026              		.loc 4 137 0
 2027 0136 244B     		ldr	r3, .L107+40
 2028 0138 1B68     		ldr	r3, [r3]
 2029 013a BB62     		str	r3, [r7, #40]
 138:Src/motorops.c **** 
 139:Src/motorops.c ****            counter1 = 0;
 2030              		.loc 4 139 0
 2031 013c 0023     		movs	r3, #0
 2032 013e 7B63     		str	r3, [r7, #52]
 140:Src/motorops.c ****            speed = 1;
 2033              		.loc 4 140 0
 2034 0140 0123     		movs	r3, #1
 2035 0142 7B62     		str	r3, [r7, #36]
 2036              	.L103:
 141:Src/motorops.c ****         }
 142:Src/motorops.c **** 
 143:Src/motorops.c **** 
ARM GAS  /tmp/ccTABCUX.s 			page 49


 144:Src/motorops.c **** 
 145:Src/motorops.c ****         if(counter1 <= 100)
 2037              		.loc 4 145 0
 2038 0144 7B6B     		ldr	r3, [r7, #52]
 2039 0146 642B     		cmp	r3, #100
 2040 0148 1EDC     		bgt	.L104
 146:Src/motorops.c ****         {
 147:Src/motorops.c ****           counter1 ++;
 2041              		.loc 4 147 0
 2042 014a 7B6B     		ldr	r3, [r7, #52]
 2043 014c 0133     		adds	r3, r3, #1
 2044 014e 7B63     		str	r3, [r7, #52]
 148:Src/motorops.c ****           __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, (int)((double)(servo1_degree)*((double)(215-6
 2045              		.loc 4 148 0
 2046 0150 B86A     		ldr	r0, [r7, #40]
 2047 0152 FFF7FEFF 		bl	__aeabi_i2d
 2048              	.LVL4:
 2049 0156 12A3     		adr	r3, .L107
 2050 0158 D3E90023 		ldrd	r2, [r3]
 2051 015c FFF7FEFF 		bl	__aeabi_dmul
 2052              	.LVL5:
 2053 0160 0346     		mov	r3, r0
 2054 0162 0C46     		mov	r4, r1
 2055 0164 1846     		mov	r0, r3
 2056 0166 2146     		mov	r1, r4
 2057 0168 4FF00002 		mov	r2, #0
 2058 016c 154B     		ldr	r3, .L107+36
 2059 016e FFF7FEFF 		bl	__aeabi_dadd
 2060              	.LVL6:
 2061 0172 0346     		mov	r3, r0
 2062 0174 0C46     		mov	r4, r1
 2063 0176 1846     		mov	r0, r3
 2064 0178 2146     		mov	r1, r4
 2065 017a FFF7FEFF 		bl	__aeabi_d2iz
 2066              	.LVL7:
 2067 017e 0246     		mov	r2, r0
 2068 0180 0F4B     		ldr	r3, .L107+32
 2069 0182 1B68     		ldr	r3, [r3]
 2070 0184 5A63     		str	r2, [r3, #52]
 2071 0186 03E0     		b	.L105
 2072              	.L104:
 149:Src/motorops.c ****         }
 150:Src/motorops.c ****         else
 151:Src/motorops.c ****         {
 152:Src/motorops.c ****            HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 2073              		.loc 4 152 0
 2074 0188 0021     		movs	r1, #0
 2075 018a 0D48     		ldr	r0, .L107+32
 2076 018c FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 2077              	.L105:
 153:Src/motorops.c ****         }
 154:Src/motorops.c **** 
 155:Src/motorops.c ****         osDelay(2 + speed);
 2078              		.loc 4 155 0
 2079 0190 7B6A     		ldr	r3, [r7, #36]
 2080 0192 0233     		adds	r3, r3, #2
 2081 0194 1846     		mov	r0, r3
ARM GAS  /tmp/ccTABCUX.s 			page 50


 2082 0196 FFF7FEFF 		bl	osDelay
  36:Src/motorops.c ****         step_motor2_break = HAL_GPIO_ReadPin(STEP2_BREAK_GPIO_Port, STEP2_BREAK_Pin);
 2083              		.loc 4 36 0
 2084 019a 48E7     		b	.L106
 2085              	.L108:
 2086 019c AFF30080 		.align	3
 2087              	.L107:
 2088 01a0 89888888 		.word	2290649225
 2089 01a4 8888F03F 		.word	1072728200
 2090 01a8 D4000000 		.word	.LC19
 2091 01ac 00100240 		.word	1073876992
 2092 01b0 00080240 		.word	1073874944
 2093 01b4 00000000 		.word	motor1
 2094 01b8 00000000 		.word	motor2
 2095 01bc 00000000 		.word	servo2
 2096 01c0 00000000 		.word	htim3
 2097 01c4 00004E40 		.word	1078853632
 2098 01c8 00000000 		.word	servo1
 2099              		.cfi_endproc
 2100              	.LFE159:
 2102              		.section	.text.vprint,"ax",%progbits
 2103              		.align	1
 2104              		.global	vprint
 2105              		.syntax unified
 2106              		.thumb
 2107              		.thumb_func
 2108              		.fpu fpv4-sp-d16
 2110              	vprint:
 2111              	.LFB160:
 2112              		.file 5 "Src/freertos.c"
   1:Src/freertos.c **** /**
   2:Src/freertos.c ****   ******************************************************************************
   3:Src/freertos.c ****   * File Name          : freertos.c
   4:Src/freertos.c ****   * Description        : Code for freertos applications
   5:Src/freertos.c ****   ******************************************************************************
   6:Src/freertos.c ****   * This notice applies to any and all portions of this file
   7:Src/freertos.c ****   * that are not between comment pairs USER CODE BEGIN and
   8:Src/freertos.c ****   * USER CODE END. Other portions of this file, whether 
   9:Src/freertos.c ****   * inserted by the user or by software development tools
  10:Src/freertos.c ****   * are owned by their respective copyright owners.
  11:Src/freertos.c ****   *
  12:Src/freertos.c ****   * Copyright (c) 2018 STMicroelectronics International N.V. 
  13:Src/freertos.c ****   * All rights reserved.
  14:Src/freertos.c ****   *
  15:Src/freertos.c ****   * Redistribution and use in source and binary forms, with or without 
  16:Src/freertos.c ****   * modification, are permitted, provided that the following conditions are met:
  17:Src/freertos.c ****   *
  18:Src/freertos.c ****   * 1. Redistribution of source code must retain the above copyright notice, 
  19:Src/freertos.c ****   *    this list of conditions and the following disclaimer.
  20:Src/freertos.c ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  21:Src/freertos.c ****   *    this list of conditions and the following disclaimer in the documentation
  22:Src/freertos.c ****   *    and/or other materials provided with the distribution.
  23:Src/freertos.c ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  24:Src/freertos.c ****   *    contributors to this software may be used to endorse or promote products 
  25:Src/freertos.c ****   *    derived from this software without specific written permission.
  26:Src/freertos.c ****   * 4. This software, including modifications and/or derivative works of this 
  27:Src/freertos.c ****   *    software, must execute solely and exclusively on microcontroller or
ARM GAS  /tmp/ccTABCUX.s 			page 51


  28:Src/freertos.c ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  29:Src/freertos.c ****   * 5. Redistribution and use of this software other than as permitted under 
  30:Src/freertos.c ****   *    this license is void and will automatically terminate your rights under 
  31:Src/freertos.c ****   *    this license. 
  32:Src/freertos.c ****   *
  33:Src/freertos.c ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  34:Src/freertos.c ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  35:Src/freertos.c ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  36:Src/freertos.c ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  37:Src/freertos.c ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  38:Src/freertos.c ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  39:Src/freertos.c ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  40:Src/freertos.c ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  41:Src/freertos.c ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  42:Src/freertos.c ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  43:Src/freertos.c ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  44:Src/freertos.c ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  45:Src/freertos.c ****   *
  46:Src/freertos.c ****   ******************************************************************************
  47:Src/freertos.c ****   */
  48:Src/freertos.c **** 
  49:Src/freertos.c **** /* Includes ------------------------------------------------------------------*/
  50:Src/freertos.c **** #include "freertos.h"
  51:Src/freertos.c **** 
  52:Src/freertos.c **** #include "gpsops.c"
  53:Src/freertos.c **** #include "spiops.c"
  54:Src/freertos.c **** #include "sensorops.c"
  55:Src/freertos.c **** #include "motorops.c"
  56:Src/freertos.c **** 
  57:Src/freertos.c **** #include <stdlib.h>
  58:Src/freertos.c **** 
  59:Src/freertos.c **** 
  60:Src/freertos.c **** 
  61:Src/freertos.c **** void vprint(const char *fmt, va_list argp)
  62:Src/freertos.c **** {
 2113              		.loc 5 62 0
 2114              		.cfi_startproc
 2115              		@ args = 0, pretend = 0, frame = 160
 2116              		@ frame_needed = 1, uses_anonymous_args = 0
 2117 0000 80B5     		push	{r7, lr}
 2118              	.LCFI57:
 2119              		.cfi_def_cfa_offset 8
 2120              		.cfi_offset 7, -8
 2121              		.cfi_offset 14, -4
 2122 0002 A8B0     		sub	sp, sp, #160
 2123              	.LCFI58:
 2124              		.cfi_def_cfa_offset 168
 2125 0004 00AF     		add	r7, sp, #0
 2126              	.LCFI59:
 2127              		.cfi_def_cfa_register 7
 2128 0006 7860     		str	r0, [r7, #4]
 2129 0008 3960     		str	r1, [r7]
  63:Src/freertos.c ****     char string[150];
  64:Src/freertos.c **** 
  65:Src/freertos.c ****     if(0 < vsprintf(string,fmt,argp)) // build string
 2130              		.loc 5 65 0
 2131 000a 07F10803 		add	r3, r7, #8
ARM GAS  /tmp/ccTABCUX.s 			page 52


 2132 000e 3A68     		ldr	r2, [r7]
 2133 0010 7968     		ldr	r1, [r7, #4]
 2134 0012 1846     		mov	r0, r3
 2135 0014 FFF7FEFF 		bl	vsprintf
 2136 0018 0346     		mov	r3, r0
 2137 001a 002B     		cmp	r3, #0
 2138 001c 0DDD     		ble	.L111
  66:Src/freertos.c ****        HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via 
 2139              		.loc 5 66 0
 2140 001e 07F10803 		add	r3, r7, #8
 2141 0022 1846     		mov	r0, r3
 2142 0024 FFF7FEFF 		bl	strlen
 2143 0028 0346     		mov	r3, r0
 2144 002a 9AB2     		uxth	r2, r3
 2145 002c 07F10801 		add	r1, r7, #8
 2146 0030 6FF07F43 		mvn	r3, #-16777216
 2147 0034 0348     		ldr	r0, .L112
 2148 0036 FFF7FEFF 		bl	HAL_UART_Transmit
 2149              	.L111:
  67:Src/freertos.c **** 
  68:Src/freertos.c **** }
 2150              		.loc 5 68 0
 2151 003a 00BF     		nop
 2152 003c A037     		adds	r7, r7, #160
 2153              	.LCFI60:
 2154              		.cfi_def_cfa_offset 8
 2155 003e BD46     		mov	sp, r7
 2156              	.LCFI61:
 2157              		.cfi_def_cfa_register 13
 2158              		@ sp needed
 2159 0040 80BD     		pop	{r7, pc}
 2160              	.L113:
 2161 0042 00BF     		.align	2
 2162              	.L112:
 2163 0044 00000000 		.word	huart1
 2164              		.cfi_endproc
 2165              	.LFE160:
 2167              		.section	.text.mprintf,"ax",%progbits
 2168              		.align	1
 2169              		.global	mprintf
 2170              		.syntax unified
 2171              		.thumb
 2172              		.thumb_func
 2173              		.fpu fpv4-sp-d16
 2175              	mprintf:
 2176              	.LFB161:
  69:Src/freertos.c **** 
  70:Src/freertos.c **** 
  71:Src/freertos.c **** 
  72:Src/freertos.c **** void mprintf(const char *fmt, ...) // custom printf() function
  73:Src/freertos.c **** {
 2177              		.loc 5 73 0
 2178              		.cfi_startproc
 2179              		@ args = 4, pretend = 16, frame = 8
 2180              		@ frame_needed = 1, uses_anonymous_args = 1
 2181 0000 0FB4     		push	{r0, r1, r2, r3}
 2182              	.LCFI62:
ARM GAS  /tmp/ccTABCUX.s 			page 53


 2183              		.cfi_def_cfa_offset 16
 2184              		.cfi_offset 0, -16
 2185              		.cfi_offset 1, -12
 2186              		.cfi_offset 2, -8
 2187              		.cfi_offset 3, -4
 2188 0002 80B5     		push	{r7, lr}
 2189              	.LCFI63:
 2190              		.cfi_def_cfa_offset 24
 2191              		.cfi_offset 7, -24
 2192              		.cfi_offset 14, -20
 2193 0004 82B0     		sub	sp, sp, #8
 2194              	.LCFI64:
 2195              		.cfi_def_cfa_offset 32
 2196 0006 00AF     		add	r7, sp, #0
 2197              	.LCFI65:
 2198              		.cfi_def_cfa_register 7
  74:Src/freertos.c **** 
  75:Src/freertos.c ****     xSemaphoreTake(uartMutexHandle, 100);
 2199              		.loc 5 75 0
 2200 0008 0D4B     		ldr	r3, .L115
 2201 000a 1868     		ldr	r0, [r3]
 2202 000c 0023     		movs	r3, #0
 2203 000e 6422     		movs	r2, #100
 2204 0010 0021     		movs	r1, #0
 2205 0012 FFF7FEFF 		bl	xQueueGenericReceive
  76:Src/freertos.c ****     va_list argp;
  77:Src/freertos.c ****     va_start(argp, fmt);
 2206              		.loc 5 77 0
 2207 0016 07F11403 		add	r3, r7, #20
 2208 001a 7B60     		str	r3, [r7, #4]
  78:Src/freertos.c ****     vprint(fmt, argp);
 2209              		.loc 5 78 0
 2210 001c 7968     		ldr	r1, [r7, #4]
 2211 001e 3869     		ldr	r0, [r7, #16]
 2212 0020 FFF7FEFF 		bl	vprint
  79:Src/freertos.c ****     va_end(argp);
  80:Src/freertos.c ****     xSemaphoreGive(uartMutexHandle);
 2213              		.loc 5 80 0
 2214 0024 064B     		ldr	r3, .L115
 2215 0026 1868     		ldr	r0, [r3]
 2216 0028 0023     		movs	r3, #0
 2217 002a 0022     		movs	r2, #0
 2218 002c 0021     		movs	r1, #0
 2219 002e FFF7FEFF 		bl	xQueueGenericSend
  81:Src/freertos.c **** 
  82:Src/freertos.c **** }
 2220              		.loc 5 82 0
 2221 0032 00BF     		nop
 2222 0034 0837     		adds	r7, r7, #8
 2223              	.LCFI66:
 2224              		.cfi_def_cfa_offset 24
 2225 0036 BD46     		mov	sp, r7
 2226              	.LCFI67:
 2227              		.cfi_def_cfa_register 13
 2228              		@ sp needed
 2229 0038 BDE88040 		pop	{r7, lr}
 2230              	.LCFI68:
ARM GAS  /tmp/ccTABCUX.s 			page 54


 2231              		.cfi_restore 14
 2232              		.cfi_restore 7
 2233              		.cfi_def_cfa_offset 16
 2234 003c 04B0     		add	sp, sp, #16
 2235              	.LCFI69:
 2236              		.cfi_restore 3
 2237              		.cfi_restore 2
 2238              		.cfi_restore 1
 2239              		.cfi_restore 0
 2240              		.cfi_def_cfa_offset 0
 2241 003e 7047     		bx	lr
 2242              	.L116:
 2243              		.align	2
 2244              	.L115:
 2245 0040 00000000 		.word	uartMutexHandle
 2246              		.cfi_endproc
 2247              	.LFE161:
 2249              		.section	.rodata
 2250 00df 00       		.align	2
 2251              	.LC0:
 2252 00e0 67707354 		.ascii	"gpsThread\000"
 2252      68726561 
 2252      6400
 2253 00ea 0000     		.align	2
 2254              	.LC20:
 2255 00ec E0000000 		.word	.LC0
 2256 00f0 00000000 		.word	gpsOps
 2257 00f4 0000     		.short	0
 2258 00f6 0000     		.space	2
 2259 00f8 00000000 		.word	0
 2260 00fc 00040000 		.word	1024
 2261              		.align	2
 2262              	.LC2:
 2263 0100 73656E73 		.ascii	"sensorThread\000"
 2263      6F725468 
 2263      72656164 
 2263      00
 2264 010d 000000   		.align	2
 2265              	.LC21:
 2266 0110 00010000 		.word	.LC2
 2267 0114 00000000 		.word	sensorOps
 2268 0118 FFFF     		.short	-1
 2269 011a 0000     		.space	2
 2270 011c 00000000 		.word	0
 2271 0120 00020000 		.word	512
 2272              		.align	2
 2273              	.LC4:
 2274 0124 73706943 		.ascii	"spiComThread\000"
 2274      6F6D5468 
 2274      72656164 
 2274      00
 2275 0131 000000   		.align	2
 2276              	.LC22:
 2277 0134 24010000 		.word	.LC4
 2278 0138 00000000 		.word	spiComOps
 2279 013c 0100     		.short	1
 2280 013e 0000     		.space	2
ARM GAS  /tmp/ccTABCUX.s 			page 55


 2281 0140 00000000 		.word	0
 2282 0144 00040000 		.word	1024
 2283              		.align	2
 2284              	.LC6:
 2285 0148 6D6F746F 		.ascii	"motorThread\000"
 2285      72546872 
 2285      65616400 
 2286              		.align	2
 2287              	.LC23:
 2288 0154 48010000 		.word	.LC6
 2289 0158 00000000 		.word	motorOps
 2290 015c 0000     		.short	0
 2291 015e 0000     		.space	2
 2292 0160 00000000 		.word	0
 2293 0164 00020000 		.word	512
 2294              		.section	.text.MX_FREERTOS_Init,"ax",%progbits
 2295              		.align	1
 2296              		.global	MX_FREERTOS_Init
 2297              		.syntax unified
 2298              		.thumb
 2299              		.thumb_func
 2300              		.fpu fpv4-sp-d16
 2302              	MX_FREERTOS_Init:
 2303              	.LFB162:
  83:Src/freertos.c **** 
  84:Src/freertos.c **** 
  85:Src/freertos.c **** 
  86:Src/freertos.c **** void MX_FREERTOS_Init(void)
  87:Src/freertos.c **** {
 2304              		.loc 5 87 0
 2305              		.cfi_startproc
 2306              		@ args = 0, pretend = 0, frame = 104
 2307              		@ frame_needed = 1, uses_anonymous_args = 0
 2308 0000 B0B5     		push	{r4, r5, r7, lr}
 2309              	.LCFI70:
 2310              		.cfi_def_cfa_offset 16
 2311              		.cfi_offset 4, -16
 2312              		.cfi_offset 5, -12
 2313              		.cfi_offset 7, -8
 2314              		.cfi_offset 14, -4
 2315 0002 9AB0     		sub	sp, sp, #104
 2316              	.LCFI71:
 2317              		.cfi_def_cfa_offset 120
 2318 0004 00AF     		add	r7, sp, #0
 2319              	.LCFI72:
 2320              		.cfi_def_cfa_register 7
  88:Src/freertos.c **** 
  89:Src/freertos.c **** 
  90:Src/freertos.c ****   osMutexDef(spiMutex);
 2321              		.loc 5 90 0
 2322 0006 0023     		movs	r3, #0
 2323 0008 7B66     		str	r3, [r7, #100]
  91:Src/freertos.c ****   spiMutexHandle = osMutexCreate(osMutex(spiMutex));
 2324              		.loc 5 91 0
 2325 000a 07F16403 		add	r3, r7, #100
 2326 000e 1846     		mov	r0, r3
 2327 0010 FFF7FEFF 		bl	osMutexCreate
ARM GAS  /tmp/ccTABCUX.s 			page 56


 2328 0014 0246     		mov	r2, r0
 2329 0016 514B     		ldr	r3, .L118
 2330 0018 1A60     		str	r2, [r3]
  92:Src/freertos.c **** 
  93:Src/freertos.c ****   osMutexDef(uartMutex);
 2331              		.loc 5 93 0
 2332 001a 0023     		movs	r3, #0
 2333 001c 3B66     		str	r3, [r7, #96]
  94:Src/freertos.c ****   uartMutexHandle = osMutexCreate(osMutex(uartMutex));
 2334              		.loc 5 94 0
 2335 001e 07F16003 		add	r3, r7, #96
 2336 0022 1846     		mov	r0, r3
 2337 0024 FFF7FEFF 		bl	osMutexCreate
 2338 0028 0246     		mov	r2, r0
 2339 002a 4D4B     		ldr	r3, .L118+4
 2340 002c 1A60     		str	r2, [r3]
  95:Src/freertos.c **** 
  96:Src/freertos.c ****   osMutexDef(memoryMutex);
 2341              		.loc 5 96 0
 2342 002e 0023     		movs	r3, #0
 2343 0030 FB65     		str	r3, [r7, #92]
  97:Src/freertos.c ****   memoryMutexHandle = osMutexCreate(osMutex(memoryMutex));
 2344              		.loc 5 97 0
 2345 0032 07F15C03 		add	r3, r7, #92
 2346 0036 1846     		mov	r0, r3
 2347 0038 FFF7FEFF 		bl	osMutexCreate
 2348 003c 0246     		mov	r2, r0
 2349 003e 494B     		ldr	r3, .L118+8
 2350 0040 1A60     		str	r2, [r3]
  98:Src/freertos.c **** 
  99:Src/freertos.c ****   osSemaphoreDef(uartSemaphore);
 2351              		.loc 5 99 0
 2352 0042 0023     		movs	r3, #0
 2353 0044 BB65     		str	r3, [r7, #88]
 100:Src/freertos.c ****   uartSemaphoreHandle = osSemaphoreCreate(osSemaphore(uartSemaphore), 1);
 2354              		.loc 5 100 0
 2355 0046 07F15803 		add	r3, r7, #88
 2356 004a 0121     		movs	r1, #1
 2357 004c 1846     		mov	r0, r3
 2358 004e FFF7FEFF 		bl	osSemaphoreCreate
 2359 0052 0246     		mov	r2, r0
 2360 0054 444B     		ldr	r3, .L118+12
 2361 0056 1A60     		str	r2, [r3]
 101:Src/freertos.c **** 
 102:Src/freertos.c ****   /* definition and creation of spiSemaphore */
 103:Src/freertos.c ****   osSemaphoreDef(spiSemaphore);
 2362              		.loc 5 103 0
 2363 0058 0023     		movs	r3, #0
 2364 005a 7B65     		str	r3, [r7, #84]
 104:Src/freertos.c ****   spiSemaphoreHandle = osSemaphoreCreate(osSemaphore(spiSemaphore), 1);
 2365              		.loc 5 104 0
 2366 005c 07F15403 		add	r3, r7, #84
 2367 0060 0121     		movs	r1, #1
 2368 0062 1846     		mov	r0, r3
 2369 0064 FFF7FEFF 		bl	osSemaphoreCreate
 2370 0068 0246     		mov	r2, r0
 2371 006a 404B     		ldr	r3, .L118+16
ARM GAS  /tmp/ccTABCUX.s 			page 57


 2372 006c 1A60     		str	r2, [r3]
 105:Src/freertos.c **** 
 106:Src/freertos.c ****   /* definition and creation of gpsThread */
 107:Src/freertos.c ****   osThreadDef(gpsThread, gpsOps, osPriorityNormal, 0, 1024);
 2373              		.loc 5 107 0
 2374 006e 404B     		ldr	r3, .L118+20
 2375 0070 07F14004 		add	r4, r7, #64
 2376 0074 1D46     		mov	r5, r3
 2377 0076 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2378 0078 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2379 007a 2B68     		ldr	r3, [r5]
 2380 007c 2360     		str	r3, [r4]
 108:Src/freertos.c ****   gpsThreadHandle = osThreadCreate(osThread(gpsThread), NULL);
 2381              		.loc 5 108 0
 2382 007e 07F14003 		add	r3, r7, #64
 2383 0082 0021     		movs	r1, #0
 2384 0084 1846     		mov	r0, r3
 2385 0086 FFF7FEFF 		bl	osThreadCreate
 2386 008a 0246     		mov	r2, r0
 2387 008c 394B     		ldr	r3, .L118+24
 2388 008e 1A60     		str	r2, [r3]
 109:Src/freertos.c **** 
 110:Src/freertos.c ****   /* definition and creation of sensorThread */
 111:Src/freertos.c ****   osThreadDef(sensorThread, sensorOps, osPriorityBelowNormal, 0, 512);
 2389              		.loc 5 111 0
 2390 0090 394B     		ldr	r3, .L118+28
 2391 0092 07F12C04 		add	r4, r7, #44
 2392 0096 1D46     		mov	r5, r3
 2393 0098 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2394 009a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2395 009c 2B68     		ldr	r3, [r5]
 2396 009e 2360     		str	r3, [r4]
 112:Src/freertos.c ****   sensorThreadHandle = osThreadCreate(osThread(sensorThread), NULL);
 2397              		.loc 5 112 0
 2398 00a0 07F12C03 		add	r3, r7, #44
 2399 00a4 0021     		movs	r1, #0
 2400 00a6 1846     		mov	r0, r3
 2401 00a8 FFF7FEFF 		bl	osThreadCreate
 2402 00ac 0246     		mov	r2, r0
 2403 00ae 334B     		ldr	r3, .L118+32
 2404 00b0 1A60     		str	r2, [r3]
 113:Src/freertos.c **** 
 114:Src/freertos.c ****   /* definition and creation of spiComThread */
 115:Src/freertos.c ****   osThreadDef(spiComThread, spiComOps, osPriorityAboveNormal, 0, 1024);
 2405              		.loc 5 115 0
 2406 00b2 334B     		ldr	r3, .L118+36
 2407 00b4 07F11804 		add	r4, r7, #24
 2408 00b8 1D46     		mov	r5, r3
 2409 00ba 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2410 00bc 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2411 00be 2B68     		ldr	r3, [r5]
 2412 00c0 2360     		str	r3, [r4]
 116:Src/freertos.c ****   spiComThreadHandle = osThreadCreate(osThread(spiComThread), NULL);
 2413              		.loc 5 116 0
 2414 00c2 07F11803 		add	r3, r7, #24
 2415 00c6 0021     		movs	r1, #0
 2416 00c8 1846     		mov	r0, r3
ARM GAS  /tmp/ccTABCUX.s 			page 58


 2417 00ca FFF7FEFF 		bl	osThreadCreate
 2418 00ce 0246     		mov	r2, r0
 2419 00d0 2C4B     		ldr	r3, .L118+40
 2420 00d2 1A60     		str	r2, [r3]
 117:Src/freertos.c **** 
 118:Src/freertos.c ****   osThreadDef(motorThread, motorOps, osPriorityNormal, 0, 512);
 2421              		.loc 5 118 0
 2422 00d4 2C4B     		ldr	r3, .L118+44
 2423 00d6 3C1D     		adds	r4, r7, #4
 2424 00d8 1D46     		mov	r5, r3
 2425 00da 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2426 00dc 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2427 00de 2B68     		ldr	r3, [r5]
 2428 00e0 2360     		str	r3, [r4]
 119:Src/freertos.c ****   motorThreadHandle = osThreadCreate(osThread(motorThread), NULL);
 2429              		.loc 5 119 0
 2430 00e2 3B1D     		adds	r3, r7, #4
 2431 00e4 0021     		movs	r1, #0
 2432 00e6 1846     		mov	r0, r3
 2433 00e8 FFF7FEFF 		bl	osThreadCreate
 2434 00ec 0246     		mov	r2, r0
 2435 00ee 274B     		ldr	r3, .L118+48
 2436 00f0 1A60     		str	r2, [r3]
 120:Src/freertos.c **** 
 121:Src/freertos.c **** 
 122:Src/freertos.c ****   EnvironmentData = malloc(sizeof(ENVIRONMENT_DATA_FORMAT));
 2437              		.loc 5 122 0
 2438 00f2 7820     		movs	r0, #120
 2439 00f4 FFF7FEFF 		bl	malloc
 2440 00f8 0346     		mov	r3, r0
 2441 00fa 1A46     		mov	r2, r3
 2442 00fc 244B     		ldr	r3, .L118+52
 2443 00fe 1A60     		str	r2, [r3]
 123:Src/freertos.c ****   ControlData = malloc(sizeof(CONTROL_DATA_FORMAT));
 2444              		.loc 5 123 0
 2445 0100 7820     		movs	r0, #120
 2446 0102 FFF7FEFF 		bl	malloc
 2447 0106 0346     		mov	r3, r0
 2448 0108 1A46     		mov	r2, r3
 2449 010a 224B     		ldr	r3, .L118+56
 2450 010c 1A60     		str	r2, [r3]
 124:Src/freertos.c ****   UpdateFile = malloc(sizeof(UPDATE_FILE_FORMAT));
 2451              		.loc 5 124 0
 2452 010e 7420     		movs	r0, #116
 2453 0110 FFF7FEFF 		bl	malloc
 2454 0114 0346     		mov	r3, r0
 2455 0116 1A46     		mov	r2, r3
 2456 0118 1F4B     		ldr	r3, .L118+60
 2457 011a 1A60     		str	r2, [r3]
 125:Src/freertos.c **** 
 126:Src/freertos.c ****   SpiRxData = malloc(sizeof(SPI_TRANSFER_FORMAT));
 2458              		.loc 5 126 0
 2459 011c 7820     		movs	r0, #120
 2460 011e FFF7FEFF 		bl	malloc
 2461 0122 0346     		mov	r3, r0
 2462 0124 1A46     		mov	r2, r3
 2463 0126 1D4B     		ldr	r3, .L118+64
ARM GAS  /tmp/ccTABCUX.s 			page 59


 2464 0128 1A60     		str	r2, [r3]
 127:Src/freertos.c **** 
 128:Src/freertos.c ****   SpiTxData = malloc(sizeof(SPI_TRANSFER_FORMAT));
 2465              		.loc 5 128 0
 2466 012a 7820     		movs	r0, #120
 2467 012c FFF7FEFF 		bl	malloc
 2468 0130 0346     		mov	r3, r0
 2469 0132 1A46     		mov	r2, r3
 2470 0134 1A4B     		ldr	r3, .L118+68
 2471 0136 1A60     		str	r2, [r3]
 129:Src/freertos.c ****   SpiCheckData = malloc(sizeof(SPI_TRANSFER_FORMAT));
 2472              		.loc 5 129 0
 2473 0138 7820     		movs	r0, #120
 2474 013a FFF7FEFF 		bl	malloc
 2475 013e 0346     		mov	r3, r0
 2476 0140 1A46     		mov	r2, r3
 2477 0142 184B     		ldr	r3, .L118+72
 2478 0144 1A60     		str	r2, [r3]
 130:Src/freertos.c **** 
 131:Src/freertos.c ****   SensorCalibrationNeeded = malloc(sizeof(int));
 2479              		.loc 5 131 0
 2480 0146 0420     		movs	r0, #4
 2481 0148 FFF7FEFF 		bl	malloc
 2482 014c 0346     		mov	r3, r0
 2483 014e 1A46     		mov	r2, r3
 2484 0150 154B     		ldr	r3, .L118+76
 2485 0152 1A60     		str	r2, [r3]
 132:Src/freertos.c **** 
 133:Src/freertos.c **** }
 2486              		.loc 5 133 0
 2487 0154 00BF     		nop
 2488 0156 6837     		adds	r7, r7, #104
 2489              	.LCFI73:
 2490              		.cfi_def_cfa_offset 16
 2491 0158 BD46     		mov	sp, r7
 2492              	.LCFI74:
 2493              		.cfi_def_cfa_register 13
 2494              		@ sp needed
 2495 015a B0BD     		pop	{r4, r5, r7, pc}
 2496              	.L119:
 2497              		.align	2
 2498              	.L118:
 2499 015c 00000000 		.word	spiMutexHandle
 2500 0160 00000000 		.word	uartMutexHandle
 2501 0164 00000000 		.word	memoryMutexHandle
 2502 0168 00000000 		.word	uartSemaphoreHandle
 2503 016c 00000000 		.word	spiSemaphoreHandle
 2504 0170 EC000000 		.word	.LC20
 2505 0174 00000000 		.word	gpsThreadHandle
 2506 0178 10010000 		.word	.LC21
 2507 017c 00000000 		.word	sensorThreadHandle
 2508 0180 34010000 		.word	.LC22
 2509 0184 00000000 		.word	spiComThreadHandle
 2510 0188 54010000 		.word	.LC23
 2511 018c 00000000 		.word	motorThreadHandle
 2512 0190 00000000 		.word	EnvironmentData
 2513 0194 00000000 		.word	ControlData
ARM GAS  /tmp/ccTABCUX.s 			page 60


 2514 0198 00000000 		.word	UpdateFile
 2515 019c 00000000 		.word	SpiRxData
 2516 01a0 00000000 		.word	SpiTxData
 2517 01a4 00000000 		.word	SpiCheckData
 2518 01a8 00000000 		.word	SensorCalibrationNeeded
 2519              		.cfi_endproc
 2520              	.LFE162:
 2522              		.text
 2523              	.Letext0:
 2524              		.file 6 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stdarg.h"
 2525              		.file 7 "/usr/include/newlib/machine/_default_types.h"
 2526              		.file 8 "/usr/include/newlib/sys/lock.h"
 2527              		.file 9 "/usr/include/newlib/sys/_types.h"
 2528              		.file 10 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 2529              		.file 11 "/usr/include/newlib/sys/reent.h"
 2530              		.file 12 "<built-in>"
 2531              		.file 13 "/usr/include/newlib/sys/_stdint.h"
 2532              		.file 14 "Inc/main.h"
 2533              		.file 15 "Drivers/CMSIS/Include/core_cm7.h"
 2534              		.file 16 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 2535              		.file 17 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f746xx.h"
 2536              		.file 18 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 2537              		.file 19 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 2538              		.file 20 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_spi.h"
 2539              		.file 21 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim.h"
 2540              		.file 22 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_uart.h"
 2541              		.file 23 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h"
 2542              		.file 24 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 2543              		.file 25 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 2544              		.file 26 "Middlewares/Third_Party/FreeRTOS/Source/include/semphr.h"
 2545              		.file 27 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 2546              		.file 28 "Inc/gps.h"
 2547              		.file 29 "Inc/sensor.h"
 2548              		.file 30 "Inc/motor.h"
 2549              		.file 31 "Inc/usart.h"
 2550              		.file 32 "Inc/spi.h"
 2551              		.file 33 "Inc/tim.h"
 2552              		.file 34 "Inc/freertos.h"
ARM GAS  /tmp/ccTABCUX.s 			page 61


DEFINED SYMBOLS
                            *ABS*:0000000000000000 freertos.c
                            *COM*:00000000000001a0 gpsData
                            *COM*:0000000000000014 sensorValues
                            *COM*:0000000000000004 calibration
                            *COM*:0000000000000008 motor1
                            *COM*:0000000000000008 motor2
                            *COM*:0000000000000008 motor3
                            *COM*:0000000000000008 motor4
                            *COM*:0000000000000008 servo1
                            *COM*:0000000000000008 servo2
                            *COM*:0000000000000004 gpsThreadHandle
                            *COM*:0000000000000004 sensorThreadHandle
                            *COM*:0000000000000004 spiComThreadHandle
                            *COM*:0000000000000004 motorThreadHandle
                            *COM*:0000000000000004 spiMutexHandle
                            *COM*:0000000000000004 uartMutexHandle
                            *COM*:0000000000000004 memoryMutexHandle
                            *COM*:0000000000000004 spiSemaphoreHandle
                            *COM*:0000000000000004 uartSemaphoreHandle
                            *COM*:0000000000000004 SpiCheckData
                            *COM*:0000000000000004 SpiTxData
                            *COM*:0000000000000004 SpiRxData
                            *COM*:0000000000000004 EnvironmentData
                            *COM*:0000000000000004 ControlData
                            *COM*:0000000000000004 UpdateFile
                            *COM*:0000000000000004 SensorCalibrationNeeded
                            *COM*:0000000000000001 rx_buf
     /tmp/ccTABCUX.s:44     .text.UART4_IRQHandler:0000000000000000 $t
     /tmp/ccTABCUX.s:51     .text.UART4_IRQHandler:0000000000000000 UART4_IRQHandler
     /tmp/ccTABCUX.s:81     .text.UART4_IRQHandler:000000000000001c $d
     /tmp/ccTABCUX.s:87     .rodata:0000000000000000 $d
     /tmp/ccTABCUX.s:94     .text.gpsOps:0000000000000000 $t
     /tmp/ccTABCUX.s:101    .text.gpsOps:0000000000000000 gpsOps
     /tmp/ccTABCUX.s:2175   .text.mprintf:0000000000000000 mprintf
     /tmp/ccTABCUX.s:208    .text.gpsOps:00000000000000a8 $d
     /tmp/ccTABCUX.s:224    .data.NextUpdateDataPackage:0000000000000000 NextUpdateDataPackage
     /tmp/ccTABCUX.s:221    .data.NextUpdateDataPackage:0000000000000000 $d
     /tmp/ccTABCUX.s:231    .data.CurrentUpdateDataPackage:0000000000000000 CurrentUpdateDataPackage
     /tmp/ccTABCUX.s:228    .data.CurrentUpdateDataPackage:0000000000000000 $d
     /tmp/ccTABCUX.s:234    .text.writeFlash:0000000000000000 $t
     /tmp/ccTABCUX.s:241    .text.writeFlash:0000000000000000 writeFlash
     /tmp/ccTABCUX.s:285    .text.readFlash:0000000000000000 $t
     /tmp/ccTABCUX.s:292    .text.readFlash:0000000000000000 readFlash
     /tmp/ccTABCUX.s:334    .text.SPI1_IRQHandler:0000000000000000 $t
     /tmp/ccTABCUX.s:341    .text.SPI1_IRQHandler:0000000000000000 SPI1_IRQHandler
     /tmp/ccTABCUX.s:370    .text.SPI1_IRQHandler:000000000000001c $d
     /tmp/ccTABCUX.s:380    .text.spiComOps:0000000000000000 $t
     /tmp/ccTABCUX.s:387    .text.spiComOps:0000000000000000 spiComOps
     /tmp/ccTABCUX.s:587    .text.checkIfUpdateData:0000000000000000 checkIfUpdateData
     /tmp/ccTABCUX.s:721    .text.confirmUpdateDataAccuracy:0000000000000000 confirmUpdateDataAccuracy
     /tmp/ccTABCUX.s:861    .text.putUpdateDataResponse:0000000000000000 putUpdateDataResponse
     /tmp/ccTABCUX.s:652    .text.checkIfControlData:0000000000000000 checkIfControlData
     /tmp/ccTABCUX.s:945    .text.putControlDataResponse:0000000000000000 putControlDataResponse
     /tmp/ccTABCUX.s:1022   .text.putEnvironmentData:0000000000000000 putEnvironmentData
     /tmp/ccTABCUX.s:1109   .text.processUpdateData:0000000000000000 processUpdateData
     /tmp/ccTABCUX.s:1596   .text.processControlData:0000000000000000 processControlData
ARM GAS  /tmp/ccTABCUX.s 			page 62


     /tmp/ccTABCUX.s:566    .text.spiComOps:0000000000000114 $d
     /tmp/ccTABCUX.s:580    .text.checkIfUpdateData:0000000000000000 $t
     /tmp/ccTABCUX.s:639    .text.checkIfUpdateData:000000000000003c $d
     /tmp/ccTABCUX.s:645    .text.checkIfControlData:0000000000000000 $t
     /tmp/ccTABCUX.s:708    .text.checkIfControlData:0000000000000038 $d
     /tmp/ccTABCUX.s:714    .text.confirmUpdateDataAccuracy:0000000000000000 $t
     /tmp/ccTABCUX.s:847    .text.confirmUpdateDataAccuracy:000000000000009c $d
     /tmp/ccTABCUX.s:854    .text.putUpdateDataResponse:0000000000000000 $t
     /tmp/ccTABCUX.s:931    .text.putUpdateDataResponse:0000000000000068 $d
     /tmp/ccTABCUX.s:938    .text.putControlDataResponse:0000000000000000 $t
     /tmp/ccTABCUX.s:1008   .text.putControlDataResponse:0000000000000064 $d
     /tmp/ccTABCUX.s:1015   .text.putEnvironmentData:0000000000000000 $t
     /tmp/ccTABCUX.s:1085   .text.putEnvironmentData:0000000000000064 $d
     /tmp/ccTABCUX.s:1102   .text.processUpdateData:0000000000000000 $t
     /tmp/ccTABCUX.s:1344   .text.processUpdateData:000000000000019c $d
     /tmp/ccTABCUX.s:1365   .text.writeUpdateFileToFlash:0000000000000000 $t
     /tmp/ccTABCUX.s:1372   .text.writeUpdateFileToFlash:0000000000000000 writeUpdateFileToFlash
     /tmp/ccTABCUX.s:1570   .text.writeUpdateFileToFlash:000000000000015c $d
     /tmp/ccTABCUX.s:1589   .text.processControlData:0000000000000000 $t
     /tmp/ccTABCUX.s:1680   .text.processControlData:0000000000000080 $d
     /tmp/ccTABCUX.s:1698   .text.sensorOps:0000000000000000 $t
     /tmp/ccTABCUX.s:1705   .text.sensorOps:0000000000000000 sensorOps
     /tmp/ccTABCUX.s:1795   .text.sensorOps:0000000000000080 $d
     /tmp/ccTABCUX.s:1813   .text.motorOps:0000000000000000 $t
     /tmp/ccTABCUX.s:1820   .text.motorOps:0000000000000000 motorOps
     /tmp/ccTABCUX.s:2088   .text.motorOps:00000000000001a0 $d
     /tmp/ccTABCUX.s:2103   .text.vprint:0000000000000000 $t
     /tmp/ccTABCUX.s:2110   .text.vprint:0000000000000000 vprint
     /tmp/ccTABCUX.s:2163   .text.vprint:0000000000000044 $d
     /tmp/ccTABCUX.s:2168   .text.mprintf:0000000000000000 $t
     /tmp/ccTABCUX.s:2245   .text.mprintf:0000000000000040 $d
     /tmp/ccTABCUX.s:2295   .text.MX_FREERTOS_Init:0000000000000000 $t
     /tmp/ccTABCUX.s:2302   .text.MX_FREERTOS_Init:0000000000000000 MX_FREERTOS_Init
     /tmp/ccTABCUX.s:2499   .text.MX_FREERTOS_Init:000000000000015c $d

UNDEFINED SYMBOLS
HAL_UART_IRQHandler
xQueueGiveFromISR
huart4
gpsInit
xQueueGenericReceive
checkGpsData
xQueueGenericSend
HAL_GPIO_TogglePin
enableGps
receiveGpsData
HAL_UART_Receive_IT
HAL_FLASH_Program
HAL_SPI_IRQHandler
hspi1
HAL_FLASH_Unlock
FLASH_Erase_Sector
HAL_FLASH_Lock
HAL_SPI_TransmitReceive_IT
HAL_SPI_GetState
memcpy
osDelay
ARM GAS  /tmp/ccTABCUX.s 			page 63


HAL_NVIC_SystemReset
calibrateCompass
readAllSensors
__aeabi_i2d
__aeabi_dmul
__aeabi_dadd
__aeabi_d2iz
HAL_GPIO_ReadPin
motor1Drive
motor2Drive
HAL_TIM_PWM_Start
HAL_TIM_PWM_Stop
htim3
vsprintf
strlen
HAL_UART_Transmit
huart1
osMutexCreate
osSemaphoreCreate
osThreadCreate
malloc
