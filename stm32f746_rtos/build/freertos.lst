ARM GAS  /tmp/ccTbVEza.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"freertos.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	gpsData,416,4
  18              		.comm	sensorValues,20,4
  19              		.comm	motor1,8,4
  20              		.comm	motor2,8,4
  21              		.comm	motor3,8,4
  22              		.comm	motor4,8,4
  23              		.comm	gpsThreadHandle,4,4
  24              		.comm	sensorThreadHandle,4,4
  25              		.comm	spiComThreadHandle,4,4
  26              		.comm	motorThreadHandle,4,4
  27              		.comm	spiMutexHandle,4,4
  28              		.comm	uartMutexHandle,4,4
  29              		.comm	memoryMutexHandle,4,4
  30              		.comm	spiSemaphoreHandle,4,4
  31              		.comm	uartSemaphoreHandle,4,4
  32              		.comm	SpiCheckData,4,4
  33              		.comm	SpiTxData,4,4
  34              		.comm	SpiRxData,4,4
  35              		.comm	EnvironmentData,4,4
  36              		.comm	ControlData,4,4
  37              		.comm	UpdateFile,4,4
  38              		.comm	rx_buf,1,1
  39              		.section	.text.UART4_IRQHandler,"ax",%progbits
  40              		.align	1
  41              		.global	UART4_IRQHandler
  42              		.syntax unified
  43              		.thumb
  44              		.thumb_func
  45              		.fpu fpv4-sp-d16
  47              	UART4_IRQHandler:
  48              	.LFB141:
  49              		.file 1 "Src/gpsops.c"
   1:Src/gpsops.c  **** #include "gpsops.h"
   2:Src/gpsops.c  **** #include "stdlib.h"
   3:Src/gpsops.c  **** 
   4:Src/gpsops.c  **** 
   5:Src/gpsops.c  **** void UART4_IRQHandler(void)
   6:Src/gpsops.c  **** {
  50              		.loc 1 6 0
  51              		.cfi_startproc
  52              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccTbVEza.s 			page 2


  53              		@ frame_needed = 1, uses_anonymous_args = 0
  54 0000 80B5     		push	{r7, lr}
  55              	.LCFI0:
  56              		.cfi_def_cfa_offset 8
  57              		.cfi_offset 7, -8
  58              		.cfi_offset 14, -4
  59 0002 00AF     		add	r7, sp, #0
  60              	.LCFI1:
  61              		.cfi_def_cfa_register 7
   7:Src/gpsops.c  **** 
   8:Src/gpsops.c  **** 
   9:Src/gpsops.c  ****     HAL_UART_IRQHandler(&huart4);
  62              		.loc 1 9 0
  63 0004 0548     		ldr	r0, .L2
  64 0006 FFF7FEFF 		bl	HAL_UART_IRQHandler
  10:Src/gpsops.c  **** 
  11:Src/gpsops.c  ****     xSemaphoreGiveFromISR(uartSemaphoreHandle, NULL);
  65              		.loc 1 11 0
  66 000a 054B     		ldr	r3, .L2+4
  67 000c 1B68     		ldr	r3, [r3]
  68 000e 0021     		movs	r1, #0
  69 0010 1846     		mov	r0, r3
  70 0012 FFF7FEFF 		bl	xQueueGiveFromISR
  12:Src/gpsops.c  **** 
  13:Src/gpsops.c  **** }
  71              		.loc 1 13 0
  72 0016 00BF     		nop
  73 0018 80BD     		pop	{r7, pc}
  74              	.L3:
  75 001a 00BF     		.align	2
  76              	.L2:
  77 001c 00000000 		.word	huart4
  78 0020 00000000 		.word	uartSemaphoreHandle
  79              		.cfi_endproc
  80              	.LFE141:
  82              		.section	.rodata
  83              		.align	2
  84              	.LC8:
  85 0000 6770734F 		.ascii	"gpsOps\015\012\000"
  85      70730D0A 
  85      00
  86 0009 000000   		.align	2
  87              	.LC9:
  88 000c 6770734F 		.ascii	"gpsOps Crash \015\012\000"
  88      70732043 
  88      72617368 
  88      200D0A00 
  89              		.section	.text.gpsOps,"ax",%progbits
  90              		.align	1
  91              		.global	gpsOps
  92              		.syntax unified
  93              		.thumb
  94              		.thumb_func
  95              		.fpu fpv4-sp-d16
  97              	gpsOps:
  98              	.LFB142:
  14:Src/gpsops.c  **** 
ARM GAS  /tmp/ccTbVEza.s 			page 3


  15:Src/gpsops.c  **** 
  16:Src/gpsops.c  **** 
  17:Src/gpsops.c  **** void gpsOps(void const *argument)
  18:Src/gpsops.c  **** {
  99              		.loc 1 18 0
 100              		.cfi_startproc
 101              		@ args = 0, pretend = 0, frame = 16
 102              		@ frame_needed = 1, uses_anonymous_args = 0
 103 0000 80B5     		push	{r7, lr}
 104              	.LCFI2:
 105              		.cfi_def_cfa_offset 8
 106              		.cfi_offset 7, -8
 107              		.cfi_offset 14, -4
 108 0002 84B0     		sub	sp, sp, #16
 109              	.LCFI3:
 110              		.cfi_def_cfa_offset 24
 111 0004 00AF     		add	r7, sp, #0
 112              	.LCFI4:
 113              		.cfi_def_cfa_register 7
 114 0006 7860     		str	r0, [r7, #4]
  19:Src/gpsops.c  **** 
  20:Src/gpsops.c  ****     mprintf("gpsOps\r\n");
 115              		.loc 1 20 0
 116 0008 2748     		ldr	r0, .L11
 117 000a FFF7FEFF 		bl	mprintf
  21:Src/gpsops.c  **** 
  22:Src/gpsops.c  ****     unsigned char rx_data;
  23:Src/gpsops.c  **** 
  24:Src/gpsops.c  ****     gpsInit();
 118              		.loc 1 24 0
 119 000e FFF7FEFF 		bl	gpsInit
 120              	.L10:
  25:Src/gpsops.c  **** 
  26:Src/gpsops.c  ****   while(1)
  27:Src/gpsops.c  ****   {
  28:Src/gpsops.c  **** 
  29:Src/gpsops.c  ****       if( xSemaphoreTake(uartSemaphoreHandle, 1000) == pdPASS)
 121              		.loc 1 29 0
 122 0012 264B     		ldr	r3, .L11+4
 123 0014 1868     		ldr	r0, [r3]
 124 0016 0023     		movs	r3, #0
 125 0018 4FF47A72 		mov	r2, #1000
 126 001c 0021     		movs	r1, #0
 127 001e FFF7FEFF 		bl	xQueueGenericReceive
 128 0022 0346     		mov	r3, r0
 129 0024 012B     		cmp	r3, #1
 130 0026 3AD1     		bne	.L5
  30:Src/gpsops.c  ****       {
  31:Src/gpsops.c  **** 
  32:Src/gpsops.c  **** 
  33:Src/gpsops.c  ****         if(checkGpsData() == GPS_READY)
 131              		.loc 1 33 0
 132 0028 FFF7FEFF 		bl	checkGpsData
 133 002c 0346     		mov	r3, r0
 134 002e 012B     		cmp	r3, #1
 135 0030 2BD1     		bne	.L6
  34:Src/gpsops.c  ****         {
ARM GAS  /tmp/ccTbVEza.s 			page 4


  35:Src/gpsops.c  **** 
  36:Src/gpsops.c  ****                xSemaphoreTake(spiMutexHandle, portMAX_DELAY);
 136              		.loc 1 36 0
 137 0032 1F4B     		ldr	r3, .L11+8
 138 0034 1868     		ldr	r0, [r3]
 139 0036 0023     		movs	r3, #0
 140 0038 4FF0FF32 		mov	r2, #-1
 141 003c 0021     		movs	r1, #0
 142 003e FFF7FEFF 		bl	xQueueGenericReceive
 143              	.LBB2:
  37:Src/gpsops.c  **** 
  38:Src/gpsops.c  ****                for(int i=0; i<99; i++)
 144              		.loc 1 38 0
 145 0042 0023     		movs	r3, #0
 146 0044 FB60     		str	r3, [r7, #12]
 147 0046 0FE0     		b	.L7
 148              	.L8:
  39:Src/gpsops.c  ****                    EnvironmentData -> gps_string[i] = gpsData.gprmc_body[i];
 149              		.loc 1 39 0 discriminator 3
 150 0048 1A4B     		ldr	r3, .L11+12
 151 004a 1A68     		ldr	r2, [r3]
 152 004c 1A49     		ldr	r1, .L11+16
 153 004e FB68     		ldr	r3, [r7, #12]
 154 0050 0B44     		add	r3, r3, r1
 155 0052 03F59C73 		add	r3, r3, #312
 156 0056 1B78     		ldrb	r3, [r3]
 157 0058 D9B2     		uxtb	r1, r3
 158 005a FB68     		ldr	r3, [r7, #12]
 159 005c 1344     		add	r3, r3, r2
 160 005e 0A46     		mov	r2, r1
 161 0060 1A70     		strb	r2, [r3]
  38:Src/gpsops.c  ****                    EnvironmentData -> gps_string[i] = gpsData.gprmc_body[i];
 162              		.loc 1 38 0 discriminator 3
 163 0062 FB68     		ldr	r3, [r7, #12]
 164 0064 0133     		adds	r3, r3, #1
 165 0066 FB60     		str	r3, [r7, #12]
 166              	.L7:
  38:Src/gpsops.c  ****                    EnvironmentData -> gps_string[i] = gpsData.gprmc_body[i];
 167              		.loc 1 38 0 is_stmt 0 discriminator 1
 168 0068 FB68     		ldr	r3, [r7, #12]
 169 006a 622B     		cmp	r3, #98
 170 006c ECDD     		ble	.L8
 171              	.LBE2:
  40:Src/gpsops.c  **** 
  41:Src/gpsops.c  ****                xSemaphoreGive(spiMutexHandle);
 172              		.loc 1 41 0 is_stmt 1
 173 006e 104B     		ldr	r3, .L11+8
 174 0070 1868     		ldr	r0, [r3]
 175 0072 0023     		movs	r3, #0
 176 0074 0022     		movs	r2, #0
 177 0076 0021     		movs	r1, #0
 178 0078 FFF7FEFF 		bl	xQueueGenericSend
  42:Src/gpsops.c  **** 
  43:Src/gpsops.c  **** 
  44:Src/gpsops.c  **** 
  45:Src/gpsops.c  ****            HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 179              		.loc 1 45 0
ARM GAS  /tmp/ccTbVEza.s 			page 5


 180 007c 4FF48051 		mov	r1, #4096
 181 0080 0E48     		ldr	r0, .L11+20
 182 0082 FFF7FEFF 		bl	HAL_GPIO_TogglePin
  46:Src/gpsops.c  **** 
  47:Src/gpsops.c  ****            enableGps();
 183              		.loc 1 47 0
 184 0086 FFF7FEFF 		bl	enableGps
 185              	.L6:
  48:Src/gpsops.c  **** 
  49:Src/gpsops.c  ****         }
  50:Src/gpsops.c  **** 
  51:Src/gpsops.c  **** 
  52:Src/gpsops.c  ****           receiveGpsData();
 186              		.loc 1 52 0
 187 008a FFF7FEFF 		bl	receiveGpsData
  53:Src/gpsops.c  **** 
  54:Src/gpsops.c  ****           HAL_UART_Receive_IT(&huart4, (uint8_t *)&rx_data, 1);
 188              		.loc 1 54 0
 189 008e 07F10B03 		add	r3, r7, #11
 190 0092 0122     		movs	r2, #1
 191 0094 1946     		mov	r1, r3
 192 0096 0A48     		ldr	r0, .L11+24
 193 0098 FFF7FEFF 		bl	HAL_UART_Receive_IT
 194 009c B9E7     		b	.L10
 195              	.L5:
  55:Src/gpsops.c  **** 
  56:Src/gpsops.c  **** 
  57:Src/gpsops.c  ****       }
  58:Src/gpsops.c  ****       else
  59:Src/gpsops.c  ****       {
  60:Src/gpsops.c  **** 
  61:Src/gpsops.c  ****           mprintf("gpsOps Crash \r\n");
 196              		.loc 1 61 0
 197 009e 0948     		ldr	r0, .L11+28
 198 00a0 FFF7FEFF 		bl	mprintf
  29:Src/gpsops.c  ****       {
 199              		.loc 1 29 0
 200 00a4 B5E7     		b	.L10
 201              	.L12:
 202 00a6 00BF     		.align	2
 203              	.L11:
 204 00a8 00000000 		.word	.LC8
 205 00ac 00000000 		.word	uartSemaphoreHandle
 206 00b0 00000000 		.word	spiMutexHandle
 207 00b4 00000000 		.word	EnvironmentData
 208 00b8 00000000 		.word	gpsData
 209 00bc 00040240 		.word	1073873920
 210 00c0 00000000 		.word	huart4
 211 00c4 0C000000 		.word	.LC9
 212              		.cfi_endproc
 213              	.LFE142:
 215              		.section	.text.writeFlash,"ax",%progbits
 216              		.align	1
 217              		.global	writeFlash
 218              		.syntax unified
 219              		.thumb
 220              		.thumb_func
ARM GAS  /tmp/ccTbVEza.s 			page 6


 221              		.fpu fpv4-sp-d16
 223              	writeFlash:
 224              	.LFB143:
 225              		.file 2 "Src/spiops.c"
   1:Src/spiops.c  **** #include "spiops.h"
   2:Src/spiops.c  **** #include "stdlib.h"
   3:Src/spiops.c  **** 
   4:Src/spiops.c  **** #define SECTOR6_ADDRESS 0x8080000
   5:Src/spiops.c  **** 
   6:Src/spiops.c  **** 
   7:Src/spiops.c  **** void writeFlash(uint8_t Data, long Address)
   8:Src/spiops.c  **** {
 226              		.loc 2 8 0
 227              		.cfi_startproc
 228              		@ args = 0, pretend = 0, frame = 8
 229              		@ frame_needed = 1, uses_anonymous_args = 0
 230 0000 90B5     		push	{r4, r7, lr}
 231              	.LCFI5:
 232              		.cfi_def_cfa_offset 12
 233              		.cfi_offset 4, -12
 234              		.cfi_offset 7, -8
 235              		.cfi_offset 14, -4
 236 0002 83B0     		sub	sp, sp, #12
 237              	.LCFI6:
 238              		.cfi_def_cfa_offset 24
 239 0004 00AF     		add	r7, sp, #0
 240              	.LCFI7:
 241              		.cfi_def_cfa_register 7
 242 0006 0346     		mov	r3, r0
 243 0008 3960     		str	r1, [r7]
 244 000a FB71     		strb	r3, [r7, #7]
   9:Src/spiops.c  **** 
  10:Src/spiops.c  **** 
  11:Src/spiops.c  ****      HAL_FLASH_Program(TYPEPROGRAM_BYTE, Address , (uint8_t) Data);
 245              		.loc 2 11 0
 246 000c 3968     		ldr	r1, [r7]
 247 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 248 0010 4FF00004 		mov	r4, #0
 249 0014 1A46     		mov	r2, r3
 250 0016 2346     		mov	r3, r4
 251 0018 0020     		movs	r0, #0
 252 001a FFF7FEFF 		bl	HAL_FLASH_Program
  12:Src/spiops.c  **** 
  13:Src/spiops.c  **** }
 253              		.loc 2 13 0
 254 001e 00BF     		nop
 255 0020 0C37     		adds	r7, r7, #12
 256              	.LCFI8:
 257              		.cfi_def_cfa_offset 12
 258 0022 BD46     		mov	sp, r7
 259              	.LCFI9:
 260              		.cfi_def_cfa_register 13
 261              		@ sp needed
 262 0024 90BD     		pop	{r4, r7, pc}
 263              		.cfi_endproc
 264              	.LFE143:
 266              		.section	.text.readFlash,"ax",%progbits
ARM GAS  /tmp/ccTbVEza.s 			page 7


 267              		.align	1
 268              		.global	readFlash
 269              		.syntax unified
 270              		.thumb
 271              		.thumb_func
 272              		.fpu fpv4-sp-d16
 274              	readFlash:
 275              	.LFB144:
  14:Src/spiops.c  **** 
  15:Src/spiops.c  **** 
  16:Src/spiops.c  **** 
  17:Src/spiops.c  **** uint8_t readFlash(int Address)
  18:Src/spiops.c  **** {
 276              		.loc 2 18 0
 277              		.cfi_startproc
 278              		@ args = 0, pretend = 0, frame = 16
 279              		@ frame_needed = 1, uses_anonymous_args = 0
 280              		@ link register save eliminated.
 281 0000 80B4     		push	{r7}
 282              	.LCFI10:
 283              		.cfi_def_cfa_offset 4
 284              		.cfi_offset 7, -4
 285 0002 85B0     		sub	sp, sp, #20
 286              	.LCFI11:
 287              		.cfi_def_cfa_offset 24
 288 0004 00AF     		add	r7, sp, #0
 289              	.LCFI12:
 290              		.cfi_def_cfa_register 7
 291 0006 7860     		str	r0, [r7, #4]
  19:Src/spiops.c  **** 
  20:Src/spiops.c  ****     uint8_t flash_data;
  21:Src/spiops.c  **** 
  22:Src/spiops.c  ****     flash_data = *(uint8_t *)Address;
 292              		.loc 2 22 0
 293 0008 7B68     		ldr	r3, [r7, #4]
 294 000a 1B78     		ldrb	r3, [r3]
 295 000c FB73     		strb	r3, [r7, #15]
  23:Src/spiops.c  **** 
  24:Src/spiops.c  ****     return flash_data;
 296              		.loc 2 24 0
 297 000e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
  25:Src/spiops.c  **** 
  26:Src/spiops.c  **** }
 298              		.loc 2 26 0
 299 0010 1846     		mov	r0, r3
 300 0012 1437     		adds	r7, r7, #20
 301              	.LCFI13:
 302              		.cfi_def_cfa_offset 4
 303 0014 BD46     		mov	sp, r7
 304              	.LCFI14:
 305              		.cfi_def_cfa_register 13
 306              		@ sp needed
 307 0016 5DF8047B 		ldr	r7, [sp], #4
 308              	.LCFI15:
 309              		.cfi_restore 7
 310              		.cfi_def_cfa_offset 0
 311 001a 7047     		bx	lr
ARM GAS  /tmp/ccTbVEza.s 			page 8


 312              		.cfi_endproc
 313              	.LFE144:
 315              		.section	.text.SPI1_IRQHandler,"ax",%progbits
 316              		.align	1
 317              		.global	SPI1_IRQHandler
 318              		.syntax unified
 319              		.thumb
 320              		.thumb_func
 321              		.fpu fpv4-sp-d16
 323              	SPI1_IRQHandler:
 324              	.LFB145:
  27:Src/spiops.c  **** 
  28:Src/spiops.c  **** 
  29:Src/spiops.c  **** 
  30:Src/spiops.c  **** void SPI1_IRQHandler(void)
  31:Src/spiops.c  **** {
 325              		.loc 2 31 0
 326              		.cfi_startproc
 327              		@ args = 0, pretend = 0, frame = 0
 328              		@ frame_needed = 1, uses_anonymous_args = 0
 329 0000 80B5     		push	{r7, lr}
 330              	.LCFI16:
 331              		.cfi_def_cfa_offset 8
 332              		.cfi_offset 7, -8
 333              		.cfi_offset 14, -4
 334 0002 00AF     		add	r7, sp, #0
 335              	.LCFI17:
 336              		.cfi_def_cfa_register 7
  32:Src/spiops.c  **** 
  33:Src/spiops.c  ****   HAL_SPI_IRQHandler(&hspi1);
 337              		.loc 2 33 0
 338 0004 0548     		ldr	r0, .L17
 339 0006 FFF7FEFF 		bl	HAL_SPI_IRQHandler
  34:Src/spiops.c  **** 
  35:Src/spiops.c  ****   xSemaphoreGiveFromISR(spiSemaphoreHandle, NULL);
 340              		.loc 2 35 0
 341 000a 054B     		ldr	r3, .L17+4
 342 000c 1B68     		ldr	r3, [r3]
 343 000e 0021     		movs	r1, #0
 344 0010 1846     		mov	r0, r3
 345 0012 FFF7FEFF 		bl	xQueueGiveFromISR
  36:Src/spiops.c  **** 
  37:Src/spiops.c  **** }
 346              		.loc 2 37 0
 347 0016 00BF     		nop
 348 0018 80BD     		pop	{r7, pc}
 349              	.L18:
 350 001a 00BF     		.align	2
 351              	.L17:
 352 001c 00000000 		.word	hspi1
 353 0020 00000000 		.word	spiSemaphoreHandle
 354              		.cfi_endproc
 355              	.LFE145:
 357              		.section	.rodata
 358              		.align	2
 359              	.LC10:
 360 001c 7370694F 		.ascii	"spiOps\015\012\000"
ARM GAS  /tmp/ccTbVEza.s 			page 9


 360      70730D0A 
 360      00
 361 0025 000000   		.align	2
 362              	.LC11:
 363 0028 57726974 		.ascii	"Writing data to memory\015\012\000"
 363      696E6720 
 363      64617461 
 363      20746F20 
 363      6D656D6F 
 364 0041 000000   		.align	2
 365              	.LC12:
 366 0044 77726974 		.ascii	"write error\015\012\000"
 366      65206572 
 366      726F720D 
 366      0A00
 367 0052 0000     		.align	2
 368              	.LC13:
 369 0054 57726974 		.ascii	"Writing is done\015\012\000"
 369      696E6720 
 369      69732064 
 369      6F6E650D 
 369      0A00
 370 0066 0000     		.align	2
 371              	.LC14:
 372 0068 52657374 		.ascii	"Restarting...\015\012\000"
 372      61727469 
 372      6E672E2E 
 372      2E0D0A00 
 373              		.section	.text.spiComOps,"ax",%progbits
 374              		.align	1
 375              		.global	spiComOps
 376              		.syntax unified
 377              		.thumb
 378              		.thumb_func
 379              		.fpu fpv4-sp-d16
 381              	spiComOps:
 382              	.LFB146:
  38:Src/spiops.c  **** 
  39:Src/spiops.c  **** 
  40:Src/spiops.c  **** 
  41:Src/spiops.c  **** /* spiComOps function */
  42:Src/spiops.c  **** void spiComOps(void const * argument)
  43:Src/spiops.c  **** {
 383              		.loc 2 43 0
 384              		.cfi_startproc
 385              		@ args = 0, pretend = 0, frame = 56
 386              		@ frame_needed = 1, uses_anonymous_args = 0
 387 0000 90B5     		push	{r4, r7, lr}
 388              	.LCFI18:
 389              		.cfi_def_cfa_offset 12
 390              		.cfi_offset 4, -12
 391              		.cfi_offset 7, -8
 392              		.cfi_offset 14, -4
 393 0002 8FB0     		sub	sp, sp, #60
 394              	.LCFI19:
 395              		.cfi_def_cfa_offset 72
 396 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccTbVEza.s 			page 10


 397              	.LCFI20:
 398              		.cfi_def_cfa_register 7
 399 0006 7860     		str	r0, [r7, #4]
  44:Src/spiops.c  **** 
  45:Src/spiops.c  ****     HAL_StatusTypeDef flash_status;
  46:Src/spiops.c  ****     HAL_SPI_StateTypeDef status;
  47:Src/spiops.c  ****     int checksum;
  48:Src/spiops.c  ****     uint32_t total_size;
  49:Src/spiops.c  **** 
  50:Src/spiops.c  ****     unsigned char * update_file;
  51:Src/spiops.c  **** 
  52:Src/spiops.c  ****     int package_count = 0;
 400              		.loc 2 52 0
 401 0008 0023     		movs	r3, #0
 402 000a FB62     		str	r3, [r7, #44]
  53:Src/spiops.c  ****     uint32_t next_package_sequence = 1;
 403              		.loc 2 53 0
 404 000c 0123     		movs	r3, #1
 405 000e BB62     		str	r3, [r7, #40]
  54:Src/spiops.c  ****     int missing_package_error = 0;
 406              		.loc 2 54 0
 407 0010 0023     		movs	r3, #0
 408 0012 7B61     		str	r3, [r7, #20]
  55:Src/spiops.c  **** 
  56:Src/spiops.c  ****     short int checksum_error = 0;
 409              		.loc 2 56 0
 410 0014 0023     		movs	r3, #0
 411 0016 FB84     		strh	r3, [r7, #38]	@ movhi
  57:Src/spiops.c  ****     short int sequence_error = 0;
 412              		.loc 2 57 0
 413 0018 0023     		movs	r3, #0
 414 001a 7B82     		strh	r3, [r7, #18]	@ movhi
  58:Src/spiops.c  **** 
  59:Src/spiops.c  ****     mprintf("spiOps\r\n");
 415              		.loc 2 59 0
 416 001c 6A48     		ldr	r0, .L48
 417 001e FFF7FEFF 		bl	mprintf
  60:Src/spiops.c  **** 
  61:Src/spiops.c  **** 
  62:Src/spiops.c  ****     HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)SpiTxData, (uint8_t *)SpiRxData,  SPI_TRANSFER_SI
 418              		.loc 2 62 0
 419 0022 6A4B     		ldr	r3, .L48+4
 420 0024 1968     		ldr	r1, [r3]
 421 0026 6A4B     		ldr	r3, .L48+8
 422 0028 1A68     		ldr	r2, [r3]
 423 002a 7823     		movs	r3, #120
 424 002c 6948     		ldr	r0, .L48+12
 425 002e FFF7FEFF 		bl	HAL_SPI_TransmitReceive_IT
 426              	.L47:
  63:Src/spiops.c  **** 
  64:Src/spiops.c  ****     while(1)
  65:Src/spiops.c  ****     {
  66:Src/spiops.c  ****         if( xSemaphoreTake(spiSemaphoreHandle, 1) == pdPASS)
 427              		.loc 2 66 0
 428 0032 694B     		ldr	r3, .L48+16
 429 0034 1868     		ldr	r0, [r3]
 430 0036 0023     		movs	r3, #0
ARM GAS  /tmp/ccTbVEza.s 			page 11


 431 0038 0122     		movs	r2, #1
 432 003a 0021     		movs	r1, #0
 433 003c FFF7FEFF 		bl	xQueueGenericReceive
 434 0040 0346     		mov	r3, r0
 435 0042 012B     		cmp	r3, #1
 436 0044 F5D1     		bne	.L47
  67:Src/spiops.c  ****         {
  68:Src/spiops.c  **** 
  69:Src/spiops.c  ****             status = HAL_SPI_GetState(&hspi1);
 437              		.loc 2 69 0
 438 0046 6348     		ldr	r0, .L48+12
 439 0048 FFF7FEFF 		bl	HAL_SPI_GetState
 440 004c 0346     		mov	r3, r0
 441 004e 7B74     		strb	r3, [r7, #17]
  70:Src/spiops.c  **** 
  71:Src/spiops.c  ****             if(status == HAL_SPI_STATE_READY)
 442              		.loc 2 71 0
 443 0050 7B7C     		ldrb	r3, [r7, #17]	@ zero_extendqisi2
 444 0052 012B     		cmp	r3, #1
 445 0054 40F09581 		bne	.L21
  72:Src/spiops.c  ****             {
  73:Src/spiops.c  **** 
  74:Src/spiops.c  ****                 if((SpiRxData->header & 0xff) == 'U' && ((SpiRxData->header >> 8) & 0xff) == 'P')
 446              		.loc 2 74 0
 447 0058 5D4B     		ldr	r3, .L48+8
 448 005a 1B68     		ldr	r3, [r3]
 449 005c 1B88     		ldrh	r3, [r3]
 450 005e DBB2     		uxtb	r3, r3
 451 0060 552B     		cmp	r3, #85
 452 0062 40F07C81 		bne	.L22
 453              		.loc 2 74 0 is_stmt 0 discriminator 1
 454 0066 5A4B     		ldr	r3, .L48+8
 455 0068 1B68     		ldr	r3, [r3]
 456 006a 1B88     		ldrh	r3, [r3]
 457 006c 1B0A     		lsrs	r3, r3, #8
 458 006e 9BB2     		uxth	r3, r3
 459 0070 DBB2     		uxtb	r3, r3
 460 0072 502B     		cmp	r3, #80
 461 0074 40F07381 		bne	.L22
  75:Src/spiops.c  ****                 {
  76:Src/spiops.c  **** 
  77:Src/spiops.c  ****                     package_count++;
 462              		.loc 2 77 0 is_stmt 1
 463 0078 FB6A     		ldr	r3, [r7, #44]
 464 007a 0133     		adds	r3, r3, #1
 465 007c FB62     		str	r3, [r7, #44]
  78:Src/spiops.c  **** 
  79:Src/spiops.c  ****                     UpdateFile->total_sequence_number = (SpiRxData->data[0]);
 466              		.loc 2 79 0
 467 007e 574B     		ldr	r3, .L48+20
 468 0080 1B68     		ldr	r3, [r3]
 469 0082 534A     		ldr	r2, .L48+8
 470 0084 1268     		ldr	r2, [r2]
 471 0086 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 472 0088 1A60     		str	r2, [r3]
  80:Src/spiops.c  ****                     UpdateFile->total_sequence_number |= (SpiRxData->data[1] << 8);
 473              		.loc 2 80 0
ARM GAS  /tmp/ccTbVEza.s 			page 12


 474 008a 544B     		ldr	r3, .L48+20
 475 008c 1B68     		ldr	r3, [r3]
 476 008e 534A     		ldr	r2, .L48+20
 477 0090 1268     		ldr	r2, [r2]
 478 0092 1268     		ldr	r2, [r2]
 479 0094 4E49     		ldr	r1, .L48+8
 480 0096 0968     		ldr	r1, [r1]
 481 0098 C978     		ldrb	r1, [r1, #3]	@ zero_extendqisi2
 482 009a 0902     		lsls	r1, r1, #8
 483 009c 0A43     		orrs	r2, r2, r1
 484 009e 1A60     		str	r2, [r3]
  81:Src/spiops.c  ****                     UpdateFile->total_sequence_number |= (SpiRxData->data[2] << 16);
 485              		.loc 2 81 0
 486 00a0 4E4B     		ldr	r3, .L48+20
 487 00a2 1B68     		ldr	r3, [r3]
 488 00a4 4D4A     		ldr	r2, .L48+20
 489 00a6 1268     		ldr	r2, [r2]
 490 00a8 1268     		ldr	r2, [r2]
 491 00aa 4949     		ldr	r1, .L48+8
 492 00ac 0968     		ldr	r1, [r1]
 493 00ae 0979     		ldrb	r1, [r1, #4]	@ zero_extendqisi2
 494 00b0 0904     		lsls	r1, r1, #16
 495 00b2 0A43     		orrs	r2, r2, r1
 496 00b4 1A60     		str	r2, [r3]
  82:Src/spiops.c  ****                     UpdateFile->total_sequence_number |= (SpiRxData->data[3] << 24);
 497              		.loc 2 82 0
 498 00b6 494B     		ldr	r3, .L48+20
 499 00b8 1B68     		ldr	r3, [r3]
 500 00ba 484A     		ldr	r2, .L48+20
 501 00bc 1268     		ldr	r2, [r2]
 502 00be 1268     		ldr	r2, [r2]
 503 00c0 4349     		ldr	r1, .L48+8
 504 00c2 0968     		ldr	r1, [r1]
 505 00c4 4979     		ldrb	r1, [r1, #5]	@ zero_extendqisi2
 506 00c6 0906     		lsls	r1, r1, #24
 507 00c8 0A43     		orrs	r2, r2, r1
 508 00ca 1A60     		str	r2, [r3]
  83:Src/spiops.c  **** 
  84:Src/spiops.c  ****                     UpdateFile->current_sequence_number = (SpiRxData->data[4]);
 509              		.loc 2 84 0
 510 00cc 434B     		ldr	r3, .L48+20
 511 00ce 1B68     		ldr	r3, [r3]
 512 00d0 3F4A     		ldr	r2, .L48+8
 513 00d2 1268     		ldr	r2, [r2]
 514 00d4 9279     		ldrb	r2, [r2, #6]	@ zero_extendqisi2
 515 00d6 5A60     		str	r2, [r3, #4]
  85:Src/spiops.c  ****                     UpdateFile->current_sequence_number |= (SpiRxData->data[5] << 8);
 516              		.loc 2 85 0
 517 00d8 404B     		ldr	r3, .L48+20
 518 00da 1B68     		ldr	r3, [r3]
 519 00dc 3F4A     		ldr	r2, .L48+20
 520 00de 1268     		ldr	r2, [r2]
 521 00e0 5268     		ldr	r2, [r2, #4]
 522 00e2 3B49     		ldr	r1, .L48+8
 523 00e4 0968     		ldr	r1, [r1]
 524 00e6 C979     		ldrb	r1, [r1, #7]	@ zero_extendqisi2
 525 00e8 0902     		lsls	r1, r1, #8
ARM GAS  /tmp/ccTbVEza.s 			page 13


 526 00ea 0A43     		orrs	r2, r2, r1
 527 00ec 5A60     		str	r2, [r3, #4]
  86:Src/spiops.c  ****                     UpdateFile->current_sequence_number |= (SpiRxData->data[6] << 16);
 528              		.loc 2 86 0
 529 00ee 3B4B     		ldr	r3, .L48+20
 530 00f0 1B68     		ldr	r3, [r3]
 531 00f2 3A4A     		ldr	r2, .L48+20
 532 00f4 1268     		ldr	r2, [r2]
 533 00f6 5268     		ldr	r2, [r2, #4]
 534 00f8 3549     		ldr	r1, .L48+8
 535 00fa 0968     		ldr	r1, [r1]
 536 00fc 097A     		ldrb	r1, [r1, #8]	@ zero_extendqisi2
 537 00fe 0904     		lsls	r1, r1, #16
 538 0100 0A43     		orrs	r2, r2, r1
 539 0102 5A60     		str	r2, [r3, #4]
  87:Src/spiops.c  ****                     UpdateFile->current_sequence_number |= (SpiRxData->data[7] << 24);
 540              		.loc 2 87 0
 541 0104 354B     		ldr	r3, .L48+20
 542 0106 1B68     		ldr	r3, [r3]
 543 0108 344A     		ldr	r2, .L48+20
 544 010a 1268     		ldr	r2, [r2]
 545 010c 5268     		ldr	r2, [r2, #4]
 546 010e 3049     		ldr	r1, .L48+8
 547 0110 0968     		ldr	r1, [r1]
 548 0112 497A     		ldrb	r1, [r1, #9]	@ zero_extendqisi2
 549 0114 0906     		lsls	r1, r1, #24
 550 0116 0A43     		orrs	r2, r2, r1
 551 0118 5A60     		str	r2, [r3, #4]
  88:Src/spiops.c  **** 
  89:Src/spiops.c  ****                     checksum = 0;
 552              		.loc 2 89 0
 553 011a 0023     		movs	r3, #0
 554 011c 7B63     		str	r3, [r7, #52]
 555              	.LBB3:
  90:Src/spiops.c  **** 
  91:Src/spiops.c  **** 
  92:Src/spiops.c  ****                     for(int i=0; i<SPI_ENTITY_SIZE; i++)
 556              		.loc 2 92 0
 557 011e 0023     		movs	r3, #0
 558 0120 3B62     		str	r3, [r7, #32]
 559 0122 0CE0     		b	.L23
 560              	.L24:
  93:Src/spiops.c  ****                        checksum += SpiRxData->data[8 + i];
 561              		.loc 2 93 0 discriminator 3
 562 0124 2A4B     		ldr	r3, .L48+8
 563 0126 1A68     		ldr	r2, [r3]
 564 0128 3B6A     		ldr	r3, [r7, #32]
 565 012a 0833     		adds	r3, r3, #8
 566 012c 1344     		add	r3, r3, r2
 567 012e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 568 0130 1A46     		mov	r2, r3
 569 0132 7B6B     		ldr	r3, [r7, #52]
 570 0134 1344     		add	r3, r3, r2
 571 0136 7B63     		str	r3, [r7, #52]
  92:Src/spiops.c  ****                        checksum += SpiRxData->data[8 + i];
 572              		.loc 2 92 0 discriminator 3
 573 0138 3B6A     		ldr	r3, [r7, #32]
ARM GAS  /tmp/ccTbVEza.s 			page 14


 574 013a 0133     		adds	r3, r3, #1
 575 013c 3B62     		str	r3, [r7, #32]
 576              	.L23:
  92:Src/spiops.c  ****                        checksum += SpiRxData->data[8 + i];
 577              		.loc 2 92 0 is_stmt 0 discriminator 1
 578 013e 3B6A     		ldr	r3, [r7, #32]
 579 0140 6B2B     		cmp	r3, #107
 580 0142 EFDD     		ble	.L24
 581              	.LBE3:
  94:Src/spiops.c  **** 
  95:Src/spiops.c  ****                     if(checksum != SpiRxData->checksum)
 582              		.loc 2 95 0 is_stmt 1
 583 0144 224B     		ldr	r3, .L48+8
 584 0146 1B68     		ldr	r3, [r3]
 585 0148 B3F87630 		ldrh	r3, [r3, #118]
 586 014c 1A46     		mov	r2, r3
 587 014e 7B6B     		ldr	r3, [r7, #52]
 588 0150 9A42     		cmp	r2, r3
 589 0152 01D0     		beq	.L25
  96:Src/spiops.c  ****                        checksum_error = 1;
 590              		.loc 2 96 0
 591 0154 0123     		movs	r3, #1
 592 0156 FB84     		strh	r3, [r7, #38]	@ movhi
 593              	.L25:
  97:Src/spiops.c  **** 
  98:Src/spiops.c  ****                     if(UpdateFile->current_sequence_number == 1)
 594              		.loc 2 98 0
 595 0158 204B     		ldr	r3, .L48+20
 596 015a 1B68     		ldr	r3, [r3]
 597 015c 5B68     		ldr	r3, [r3, #4]
 598 015e 012B     		cmp	r3, #1
 599 0160 0AD1     		bne	.L26
  99:Src/spiops.c  ****                     {
 100:Src/spiops.c  ****                         update_file = malloc(UpdateFile->total_sequence_number*SPI_ENTITY_SIZE);
 600              		.loc 2 100 0
 601 0162 1E4B     		ldr	r3, .L48+20
 602 0164 1B68     		ldr	r3, [r3]
 603 0166 1B68     		ldr	r3, [r3]
 604 0168 6C22     		movs	r2, #108
 605 016a 02FB03F3 		mul	r3, r2, r3
 606 016e 1846     		mov	r0, r3
 607 0170 FFF7FEFF 		bl	malloc
 608 0174 0346     		mov	r3, r0
 609 0176 3B63     		str	r3, [r7, #48]
 610              	.L26:
 611              	.LBB4:
 101:Src/spiops.c  ****                     }
 102:Src/spiops.c  **** 
 103:Src/spiops.c  ****                     for(int i=0;i<SPI_ENTITY_SIZE; i++)
 612              		.loc 2 103 0
 613 0178 0023     		movs	r3, #0
 614 017a FB61     		str	r3, [r7, #28]
 615 017c 14E0     		b	.L27
 616              	.L28:
 104:Src/spiops.c  ****                     {
 105:Src/spiops.c  ****                         update_file[i + (SPI_ENTITY_SIZE * (UpdateFile->current_sequence_number - 1
 617              		.loc 2 105 0 discriminator 3
ARM GAS  /tmp/ccTbVEza.s 			page 15


 618 017e 174B     		ldr	r3, .L48+20
 619 0180 1B68     		ldr	r3, [r3]
 620 0182 5B68     		ldr	r3, [r3, #4]
 621 0184 6C22     		movs	r2, #108
 622 0186 02FB03F2 		mul	r2, r2, r3
 623 018a FB69     		ldr	r3, [r7, #28]
 624 018c 1344     		add	r3, r3, r2
 625 018e 6C3B     		subs	r3, r3, #108
 626 0190 3A6B     		ldr	r2, [r7, #48]
 627 0192 1344     		add	r3, r3, r2
 628 0194 0E4A     		ldr	r2, .L48+8
 629 0196 1168     		ldr	r1, [r2]
 630 0198 FA69     		ldr	r2, [r7, #28]
 631 019a 0832     		adds	r2, r2, #8
 632 019c 0A44     		add	r2, r2, r1
 633 019e 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 634 01a0 1A70     		strb	r2, [r3]
 103:Src/spiops.c  ****                     {
 635              		.loc 2 103 0 discriminator 3
 636 01a2 FB69     		ldr	r3, [r7, #28]
 637 01a4 0133     		adds	r3, r3, #1
 638 01a6 FB61     		str	r3, [r7, #28]
 639              	.L27:
 103:Src/spiops.c  ****                     {
 640              		.loc 2 103 0 is_stmt 0 discriminator 1
 641 01a8 FB69     		ldr	r3, [r7, #28]
 642 01aa 6B2B     		cmp	r3, #107
 643 01ac E7DD     		ble	.L28
 644              	.LBE4:
 106:Src/spiops.c  ****                     }
 107:Src/spiops.c  **** 
 108:Src/spiops.c  ****                     if(next_package_sequence != 1 && UpdateFile->current_sequence_number != next_pa
 645              		.loc 2 108 0 is_stmt 1
 646 01ae BB6A     		ldr	r3, [r7, #40]
 647 01b0 012B     		cmp	r3, #1
 648 01b2 15D0     		beq	.L29
 649              		.loc 2 108 0 is_stmt 0 discriminator 1
 650 01b4 094B     		ldr	r3, .L48+20
 651 01b6 1B68     		ldr	r3, [r3]
 652 01b8 5A68     		ldr	r2, [r3, #4]
 653 01ba BB6A     		ldr	r3, [r7, #40]
 654 01bc 9A42     		cmp	r2, r3
 655 01be 0FD0     		beq	.L29
 109:Src/spiops.c  ****                     {
 110:Src/spiops.c  ****                         sequence_error = 1;
 656              		.loc 2 110 0 is_stmt 1
 657 01c0 0123     		movs	r3, #1
 658 01c2 7B82     		strh	r3, [r7, #18]	@ movhi
 659 01c4 15E0     		b	.L30
 660              	.L49:
 661 01c6 00BF     		.align	2
 662              	.L48:
 663 01c8 1C000000 		.word	.LC10
 664 01cc 00000000 		.word	SpiTxData
 665 01d0 00000000 		.word	SpiRxData
 666 01d4 00000000 		.word	hspi1
 667 01d8 00000000 		.word	spiSemaphoreHandle
ARM GAS  /tmp/ccTbVEza.s 			page 16


 668 01dc 00000000 		.word	UpdateFile
 669              	.L29:
 111:Src/spiops.c  ****                     }
 112:Src/spiops.c  ****                     else
 113:Src/spiops.c  ****                     {
 114:Src/spiops.c  ****                         if(checksum_error == 0)
 670              		.loc 2 114 0
 671 01e0 B7F92630 		ldrsh	r3, [r7, #38]
 672 01e4 002B     		cmp	r3, #0
 673 01e6 04D1     		bne	.L30
 115:Src/spiops.c  ****                         {
 116:Src/spiops.c  ****                             next_package_sequence = UpdateFile->current_sequence_number + 1;
 674              		.loc 2 116 0
 675 01e8 A74B     		ldr	r3, .L50
 676 01ea 1B68     		ldr	r3, [r3]
 677 01ec 5B68     		ldr	r3, [r3, #4]
 678 01ee 0133     		adds	r3, r3, #1
 679 01f0 BB62     		str	r3, [r7, #40]
 680              	.L30:
 117:Src/spiops.c  ****                         }
 118:Src/spiops.c  **** 
 119:Src/spiops.c  ****                     }
 120:Src/spiops.c  **** 
 121:Src/spiops.c  **** 
 122:Src/spiops.c  ****                     if(UpdateFile->current_sequence_number == UpdateFile->total_sequence_number)
 681              		.loc 2 122 0
 682 01f2 A54B     		ldr	r3, .L50
 683 01f4 1B68     		ldr	r3, [r3]
 684 01f6 5A68     		ldr	r2, [r3, #4]
 685 01f8 A34B     		ldr	r3, .L50
 686 01fa 1B68     		ldr	r3, [r3]
 687 01fc 1B68     		ldr	r3, [r3]
 688 01fe 9A42     		cmp	r2, r3
 689 0200 40F0BF80 		bne	.L21
 123:Src/spiops.c  ****                     {
 124:Src/spiops.c  **** 
 125:Src/spiops.c  ****                         if(package_count != UpdateFile->total_sequence_number)
 690              		.loc 2 125 0
 691 0204 A04B     		ldr	r3, .L50
 692 0206 1B68     		ldr	r3, [r3]
 693 0208 1A68     		ldr	r2, [r3]
 694 020a FB6A     		ldr	r3, [r7, #44]
 695 020c 9A42     		cmp	r2, r3
 696 020e 01D0     		beq	.L32
 126:Src/spiops.c  ****                             missing_package_error = 1;
 697              		.loc 2 126 0
 698 0210 0123     		movs	r3, #1
 699 0212 7B61     		str	r3, [r7, #20]
 700              	.L32:
 127:Src/spiops.c  **** 
 128:Src/spiops.c  **** 
 129:Src/spiops.c  ****                         mprintf("Writing data to memory\r\n");
 701              		.loc 2 129 0
 702 0214 9D48     		ldr	r0, .L50+4
 703 0216 FFF7FEFF 		bl	mprintf
 130:Src/spiops.c  ****                         HAL_FLASH_Unlock();
 704              		.loc 2 130 0
ARM GAS  /tmp/ccTbVEza.s 			page 17


 705 021a FFF7FEFF 		bl	HAL_FLASH_Unlock
 131:Src/spiops.c  ****                         __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPER
 706              		.loc 2 131 0
 707 021e 9C4B     		ldr	r3, .L50+8
 708 0220 3322     		movs	r2, #51
 709 0222 DA60     		str	r2, [r3, #12]
 132:Src/spiops.c  ****                         FLASH_Erase_Sector(FLASH_SECTOR_6, VOLTAGE_RANGE_3);
 710              		.loc 2 132 0
 711 0224 0221     		movs	r1, #2
 712 0226 0620     		movs	r0, #6
 713 0228 FFF7FEFF 		bl	FLASH_Erase_Sector
 133:Src/spiops.c  **** 
 134:Src/spiops.c  **** 
 135:Src/spiops.c  ****                         total_size = SPI_ENTITY_SIZE * UpdateFile->total_sequence_number;
 714              		.loc 2 135 0
 715 022c 964B     		ldr	r3, .L50
 716 022e 1B68     		ldr	r3, [r3]
 717 0230 1B68     		ldr	r3, [r3]
 718 0232 6C22     		movs	r2, #108
 719 0234 02FB03F3 		mul	r3, r2, r3
 720 0238 FB60     		str	r3, [r7, #12]
 136:Src/spiops.c  **** 
 137:Src/spiops.c  **** 
 138:Src/spiops.c  ****                         flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS, total_s
 721              		.loc 2 138 0
 722 023a FB68     		ldr	r3, [r7, #12]
 723 023c 4FF00004 		mov	r4, #0
 724 0240 4FF0FF01 		mov	r1, #255
 725 0244 4FF00002 		mov	r2, #0
 726 0248 03EA0103 		and	r3, r3, r1
 727 024c 04EA0204 		and	r4, r4, r2
 728 0250 1A46     		mov	r2, r3
 729 0252 2346     		mov	r3, r4
 730 0254 8F49     		ldr	r1, .L50+12
 731 0256 0020     		movs	r0, #0
 732 0258 FFF7FEFF 		bl	HAL_FLASH_Program
 733 025c 0346     		mov	r3, r0
 734 025e FB72     		strb	r3, [r7, #11]
 139:Src/spiops.c  **** 
 140:Src/spiops.c  ****                         if(flash_status != HAL_OK)
 735              		.loc 2 140 0
 736 0260 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 737 0262 002B     		cmp	r3, #0
 738 0264 02D0     		beq	.L33
 141:Src/spiops.c  ****                             mprintf("write error\r\n");
 739              		.loc 2 141 0
 740 0266 8C48     		ldr	r0, .L50+16
 741 0268 FFF7FEFF 		bl	mprintf
 742              	.L33:
 142:Src/spiops.c  **** 
 143:Src/spiops.c  ****                         flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS + 1, (to
 743              		.loc 2 143 0
 744 026c FB68     		ldr	r3, [r7, #12]
 745 026e 1B0A     		lsrs	r3, r3, #8
 746 0270 4FF00004 		mov	r4, #0
 747 0274 4FF0FF01 		mov	r1, #255
 748 0278 4FF00002 		mov	r2, #0
ARM GAS  /tmp/ccTbVEza.s 			page 18


 749 027c 03EA0103 		and	r3, r3, r1
 750 0280 04EA0204 		and	r4, r4, r2
 751 0284 1A46     		mov	r2, r3
 752 0286 2346     		mov	r3, r4
 753 0288 8449     		ldr	r1, .L50+20
 754 028a 0020     		movs	r0, #0
 755 028c FFF7FEFF 		bl	HAL_FLASH_Program
 756 0290 0346     		mov	r3, r0
 757 0292 FB72     		strb	r3, [r7, #11]
 144:Src/spiops.c  **** 
 145:Src/spiops.c  ****                         if(flash_status != HAL_OK)
 758              		.loc 2 145 0
 759 0294 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 760 0296 002B     		cmp	r3, #0
 761 0298 02D0     		beq	.L34
 146:Src/spiops.c  ****                             mprintf("write error\r\n");
 762              		.loc 2 146 0
 763 029a 7F48     		ldr	r0, .L50+16
 764 029c FFF7FEFF 		bl	mprintf
 765              	.L34:
 147:Src/spiops.c  **** 
 148:Src/spiops.c  ****                         flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS + 2, (to
 766              		.loc 2 148 0
 767 02a0 FB68     		ldr	r3, [r7, #12]
 768 02a2 1B0C     		lsrs	r3, r3, #16
 769 02a4 4FF00004 		mov	r4, #0
 770 02a8 4FF0FF01 		mov	r1, #255
 771 02ac 4FF00002 		mov	r2, #0
 772 02b0 03EA0103 		and	r3, r3, r1
 773 02b4 04EA0204 		and	r4, r4, r2
 774 02b8 1A46     		mov	r2, r3
 775 02ba 2346     		mov	r3, r4
 776 02bc 7849     		ldr	r1, .L50+24
 777 02be 0020     		movs	r0, #0
 778 02c0 FFF7FEFF 		bl	HAL_FLASH_Program
 779 02c4 0346     		mov	r3, r0
 780 02c6 FB72     		strb	r3, [r7, #11]
 149:Src/spiops.c  **** 
 150:Src/spiops.c  ****                         if(flash_status != HAL_OK)
 781              		.loc 2 150 0
 782 02c8 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 783 02ca 002B     		cmp	r3, #0
 784 02cc 02D0     		beq	.L35
 151:Src/spiops.c  ****                             mprintf("write error\r\n");
 785              		.loc 2 151 0
 786 02ce 7248     		ldr	r0, .L50+16
 787 02d0 FFF7FEFF 		bl	mprintf
 788              	.L35:
 152:Src/spiops.c  **** 
 153:Src/spiops.c  ****                         flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS + 3, (to
 789              		.loc 2 153 0
 790 02d4 FB68     		ldr	r3, [r7, #12]
 791 02d6 1B0E     		lsrs	r3, r3, #24
 792 02d8 4FF00004 		mov	r4, #0
 793 02dc 1A46     		mov	r2, r3
 794 02de 2346     		mov	r3, r4
 795 02e0 7049     		ldr	r1, .L50+28
ARM GAS  /tmp/ccTbVEza.s 			page 19


 796 02e2 0020     		movs	r0, #0
 797 02e4 FFF7FEFF 		bl	HAL_FLASH_Program
 798 02e8 0346     		mov	r3, r0
 799 02ea FB72     		strb	r3, [r7, #11]
 154:Src/spiops.c  **** 
 155:Src/spiops.c  ****                         if(flash_status != HAL_OK)
 800              		.loc 2 155 0
 801 02ec FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 802 02ee 002B     		cmp	r3, #0
 803 02f0 02D0     		beq	.L36
 156:Src/spiops.c  ****                             mprintf("write error\r\n");
 804              		.loc 2 156 0
 805 02f2 6948     		ldr	r0, .L50+16
 806 02f4 FFF7FEFF 		bl	mprintf
 807              	.L36:
 808              	.LBB5:
 157:Src/spiops.c  **** 
 158:Src/spiops.c  ****                         for(int i=0; i<total_size; i++)
 809              		.loc 2 158 0
 810 02f8 0023     		movs	r3, #0
 811 02fa BB61     		str	r3, [r7, #24]
 812 02fc 1AE0     		b	.L37
 813              	.L39:
 159:Src/spiops.c  ****                         {
 160:Src/spiops.c  ****                             flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS + i 
 814              		.loc 2 160 0
 815 02fe BA69     		ldr	r2, [r7, #24]
 816 0300 694B     		ldr	r3, .L50+32
 817 0302 1344     		add	r3, r3, r2
 818 0304 1946     		mov	r1, r3
 819 0306 BB69     		ldr	r3, [r7, #24]
 820 0308 3A6B     		ldr	r2, [r7, #48]
 821 030a 1344     		add	r3, r3, r2
 822 030c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 823 030e DBB2     		uxtb	r3, r3
 824 0310 4FF00004 		mov	r4, #0
 825 0314 1A46     		mov	r2, r3
 826 0316 2346     		mov	r3, r4
 827 0318 0020     		movs	r0, #0
 828 031a FFF7FEFF 		bl	HAL_FLASH_Program
 829 031e 0346     		mov	r3, r0
 830 0320 FB72     		strb	r3, [r7, #11]
 161:Src/spiops.c  **** 
 162:Src/spiops.c  ****                             if(flash_status != HAL_OK)
 831              		.loc 2 162 0
 832 0322 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 833 0324 002B     		cmp	r3, #0
 834 0326 02D0     		beq	.L38
 163:Src/spiops.c  ****                                 mprintf("write error\r\n");
 835              		.loc 2 163 0
 836 0328 5B48     		ldr	r0, .L50+16
 837 032a FFF7FEFF 		bl	mprintf
 838              	.L38:
 158:Src/spiops.c  ****                         {
 839              		.loc 2 158 0 discriminator 2
 840 032e BB69     		ldr	r3, [r7, #24]
 841 0330 0133     		adds	r3, r3, #1
ARM GAS  /tmp/ccTbVEza.s 			page 20


 842 0332 BB61     		str	r3, [r7, #24]
 843              	.L37:
 158:Src/spiops.c  ****                         {
 844              		.loc 2 158 0 is_stmt 0 discriminator 1
 845 0334 BA69     		ldr	r2, [r7, #24]
 846 0336 FB68     		ldr	r3, [r7, #12]
 847 0338 9A42     		cmp	r2, r3
 848 033a E0D3     		bcc	.L39
 849              	.LBE5:
 164:Src/spiops.c  ****                         }
 165:Src/spiops.c  **** 
 166:Src/spiops.c  ****                         HAL_FLASH_Lock();
 850              		.loc 2 166 0 is_stmt 1
 851 033c FFF7FEFF 		bl	HAL_FLASH_Lock
 167:Src/spiops.c  **** 
 168:Src/spiops.c  ****                         mprintf("Writing is done\r\n");
 852              		.loc 2 168 0
 853 0340 5A48     		ldr	r0, .L50+36
 854 0342 FFF7FEFF 		bl	mprintf
 169:Src/spiops.c  **** 
 170:Src/spiops.c  ****                         mprintf("Restarting...\r\n");
 855              		.loc 2 170 0
 856 0346 5A48     		ldr	r0, .L50+40
 857 0348 FFF7FEFF 		bl	mprintf
 171:Src/spiops.c  **** 
 172:Src/spiops.c  ****                         osDelay(50);
 858              		.loc 2 172 0
 859 034c 3220     		movs	r0, #50
 860 034e FFF7FEFF 		bl	osDelay
 173:Src/spiops.c  **** 
 174:Src/spiops.c  ****                         free(update_file);
 861              		.loc 2 174 0
 862 0352 386B     		ldr	r0, [r7, #48]
 863 0354 FFF7FEFF 		bl	free
 175:Src/spiops.c  **** 
 176:Src/spiops.c  ****                         HAL_NVIC_SystemReset();
 864              		.loc 2 176 0
 865 0358 FFF7FEFF 		bl	HAL_NVIC_SystemReset
 122:Src/spiops.c  ****                     {
 866              		.loc 2 122 0
 867 035c 11E0     		b	.L21
 868              	.L22:
 177:Src/spiops.c  **** 
 178:Src/spiops.c  **** 
 179:Src/spiops.c  **** 
 180:Src/spiops.c  ****                     }
 181:Src/spiops.c  **** 
 182:Src/spiops.c  **** 
 183:Src/spiops.c  **** 
 184:Src/spiops.c  **** //                    SpiRxData->header = 0;
 185:Src/spiops.c  **** 
 186:Src/spiops.c  **** 
 187:Src/spiops.c  ****                 }else if((SpiRxData->header & 0xff) == 'C' && ((SpiRxData->header >> 8) & 0xff) == 
 869              		.loc 2 187 0
 870 035e 554B     		ldr	r3, .L50+44
 871 0360 1B68     		ldr	r3, [r3]
 872 0362 1B88     		ldrh	r3, [r3]
ARM GAS  /tmp/ccTbVEza.s 			page 21


 873 0364 DBB2     		uxtb	r3, r3
 874 0366 432B     		cmp	r3, #67
 875 0368 0BD1     		bne	.L21
 876              		.loc 2 187 0 is_stmt 0 discriminator 1
 877 036a 524B     		ldr	r3, .L50+44
 878 036c 1B68     		ldr	r3, [r3]
 879 036e 1B88     		ldrh	r3, [r3]
 880 0370 1B0A     		lsrs	r3, r3, #8
 881 0372 9BB2     		uxth	r3, r3
 882 0374 DBB2     		uxtb	r3, r3
 883 0376 4F2B     		cmp	r3, #79
 884 0378 03D1     		bne	.L21
 188:Src/spiops.c  ****                 {
 189:Src/spiops.c  ****                     ControlData = (CONTROL_DATA_FORMAT *)SpiRxData + offsetof(SPI_TRANSFER_FORMAT, 
 885              		.loc 2 189 0 is_stmt 1
 886 037a 4E4B     		ldr	r3, .L50+44
 887 037c 1B68     		ldr	r3, [r3]
 888 037e 4E4A     		ldr	r2, .L50+48
 889 0380 1360     		str	r3, [r2]
 890              	.L21:
 190:Src/spiops.c  **** 
 191:Src/spiops.c  **** //                    SpiRxData->header = 0;
 192:Src/spiops.c  **** 
 193:Src/spiops.c  ****                 }
 194:Src/spiops.c  **** 
 195:Src/spiops.c  **** 
 196:Src/spiops.c  **** //                SpiRxData->header = 0;
 197:Src/spiops.c  **** 
 198:Src/spiops.c  ****             }
 199:Src/spiops.c  **** 
 200:Src/spiops.c  **** 
 201:Src/spiops.c  ****             xSemaphoreTake(spiMutexHandle, portMAX_DELAY);
 891              		.loc 2 201 0
 892 0382 4E4B     		ldr	r3, .L50+52
 893 0384 1868     		ldr	r0, [r3]
 894 0386 0023     		movs	r3, #0
 895 0388 4FF0FF32 		mov	r2, #-1
 896 038c 0021     		movs	r1, #0
 897 038e FFF7FEFF 		bl	xQueueGenericReceive
 202:Src/spiops.c  **** 
 203:Src/spiops.c  ****             if((SpiRxData->header & 0xff) == 'U' && ((SpiRxData->header >> 8) & 0xff) == 'P')
 898              		.loc 2 203 0
 899 0392 484B     		ldr	r3, .L50+44
 900 0394 1B68     		ldr	r3, [r3]
 901 0396 1B88     		ldrh	r3, [r3]
 902 0398 DBB2     		uxtb	r3, r3
 903 039a 552B     		cmp	r3, #85
 904 039c 24D1     		bne	.L40
 905              		.loc 2 203 0 is_stmt 0 discriminator 1
 906 039e 454B     		ldr	r3, .L50+44
 907 03a0 1B68     		ldr	r3, [r3]
 908 03a2 1B88     		ldrh	r3, [r3]
 909 03a4 1B0A     		lsrs	r3, r3, #8
 910 03a6 9BB2     		uxth	r3, r3
 911 03a8 DBB2     		uxtb	r3, r3
 912 03aa 502B     		cmp	r3, #80
 913 03ac 1CD1     		bne	.L40
ARM GAS  /tmp/ccTbVEza.s 			page 22


 204:Src/spiops.c  ****             {
 205:Src/spiops.c  **** 
 206:Src/spiops.c  ****                     SpiTxData->header = 'U' | 'P' << 8;
 914              		.loc 2 206 0 is_stmt 1
 915 03ae 444B     		ldr	r3, .L50+56
 916 03b0 1B68     		ldr	r3, [r3]
 917 03b2 45F25502 		movw	r2, #20565
 918 03b6 1A80     		strh	r2, [r3]	@ movhi
 207:Src/spiops.c  ****                     SpiTxData->data[0] = next_package_sequence & 0xff;
 919              		.loc 2 207 0
 920 03b8 414B     		ldr	r3, .L50+56
 921 03ba 1B68     		ldr	r3, [r3]
 922 03bc BA6A     		ldr	r2, [r7, #40]
 923 03be D2B2     		uxtb	r2, r2
 924 03c0 9A70     		strb	r2, [r3, #2]
 208:Src/spiops.c  ****                     SpiTxData->data[1] = (next_package_sequence >>  8) & 0xff;
 925              		.loc 2 208 0
 926 03c2 3F4B     		ldr	r3, .L50+56
 927 03c4 1B68     		ldr	r3, [r3]
 928 03c6 BA6A     		ldr	r2, [r7, #40]
 929 03c8 120A     		lsrs	r2, r2, #8
 930 03ca D2B2     		uxtb	r2, r2
 931 03cc DA70     		strb	r2, [r3, #3]
 209:Src/spiops.c  ****                     SpiTxData->data[2] = (next_package_sequence >> 16) & 0xff;
 932              		.loc 2 209 0
 933 03ce 3C4B     		ldr	r3, .L50+56
 934 03d0 1B68     		ldr	r3, [r3]
 935 03d2 BA6A     		ldr	r2, [r7, #40]
 936 03d4 120C     		lsrs	r2, r2, #16
 937 03d6 D2B2     		uxtb	r2, r2
 938 03d8 1A71     		strb	r2, [r3, #4]
 210:Src/spiops.c  ****                     SpiTxData->data[3] = (next_package_sequence >> 24) & 0xff;
 939              		.loc 2 210 0
 940 03da 394B     		ldr	r3, .L50+56
 941 03dc 1B68     		ldr	r3, [r3]
 942 03de BA6A     		ldr	r2, [r7, #40]
 943 03e0 120E     		lsrs	r2, r2, #24
 944 03e2 D2B2     		uxtb	r2, r2
 945 03e4 5A71     		strb	r2, [r3, #5]
 946 03e6 1EE0     		b	.L41
 947              	.L40:
 211:Src/spiops.c  **** 
 212:Src/spiops.c  ****             }
 213:Src/spiops.c  ****             else
 214:Src/spiops.c  ****             {
 215:Src/spiops.c  **** 
 216:Src/spiops.c  ****                 SpiTxData->header = (('E') | (('N') << 8 ));
 948              		.loc 2 216 0
 949 03e8 354B     		ldr	r3, .L50+56
 950 03ea 1B68     		ldr	r3, [r3]
 951 03ec 44F64562 		movw	r2, #20037
 952 03f0 1A80     		strh	r2, [r3]	@ movhi
 217:Src/spiops.c  ****                 memcpy(&SpiTxData->data[0], (unsigned char *)EnvironmentData, SPI_DATA_SIZE);
 953              		.loc 2 217 0
 954 03f2 334B     		ldr	r3, .L50+56
 955 03f4 1B68     		ldr	r3, [r3]
 956 03f6 981C     		adds	r0, r3, #2
ARM GAS  /tmp/ccTbVEza.s 			page 23


 957 03f8 324B     		ldr	r3, .L50+60
 958 03fa 1B68     		ldr	r3, [r3]
 959 03fc 7422     		movs	r2, #116
 960 03fe 1946     		mov	r1, r3
 961 0400 FFF7FEFF 		bl	memcpy
 218:Src/spiops.c  ****                 memcpy(&SpiTxData->data[99], (unsigned char *)&EnvironmentData->sensor_data, sizeof
 962              		.loc 2 218 0
 963 0404 2E4B     		ldr	r3, .L50+56
 964 0406 1B68     		ldr	r3, [r3]
 965 0408 03F16500 		add	r0, r3, #101
 966 040c 2D4B     		ldr	r3, .L50+60
 967 040e 1B68     		ldr	r3, [r3]
 968 0410 6433     		adds	r3, r3, #100
 969 0412 1422     		movs	r2, #20
 970 0414 1946     		mov	r1, r3
 971 0416 FFF7FEFF 		bl	memcpy
 219:Src/spiops.c  ****                 SpiTxData->checksum = (('C') | (('H') << 8 ));
 972              		.loc 2 219 0
 973 041a 294B     		ldr	r3, .L50+56
 974 041c 1B68     		ldr	r3, [r3]
 975 041e 44F64302 		movw	r2, #18499
 976 0422 A3F87620 		strh	r2, [r3, #118]	@ movhi
 977              	.L41:
 220:Src/spiops.c  **** 
 221:Src/spiops.c  ****             }
 222:Src/spiops.c  **** 
 223:Src/spiops.c  ****             xSemaphoreGive(spiMutexHandle);
 978              		.loc 2 223 0
 979 0426 254B     		ldr	r3, .L50+52
 980 0428 1868     		ldr	r0, [r3]
 981 042a 0023     		movs	r3, #0
 982 042c 0022     		movs	r2, #0
 983 042e 0021     		movs	r1, #0
 984 0430 FFF7FEFF 		bl	xQueueGenericSend
 224:Src/spiops.c  **** 
 225:Src/spiops.c  **** 
 226:Src/spiops.c  ****             HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)SpiTxData, (uint8_t *)SpiRxData,  SPI_TRA
 985              		.loc 2 226 0
 986 0434 224B     		ldr	r3, .L50+56
 987 0436 1968     		ldr	r1, [r3]
 988 0438 1E4B     		ldr	r3, .L50+44
 989 043a 1A68     		ldr	r2, [r3]
 990 043c 7823     		movs	r3, #120
 991 043e 2248     		ldr	r0, .L50+64
 992 0440 FFF7FEFF 		bl	HAL_SPI_TransmitReceive_IT
 227:Src/spiops.c  **** 
 228:Src/spiops.c  **** 
 229:Src/spiops.c  **** 
 230:Src/spiops.c  **** 
 231:Src/spiops.c  ****             if(ControlData -> step_motor1_direction == FORWARD)
 993              		.loc 2 231 0
 994 0444 1C4B     		ldr	r3, .L50+48
 995 0446 1B68     		ldr	r3, [r3]
 996 0448 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 997 044c 012B     		cmp	r3, #1
 998 044e 0AD1     		bne	.L42
 232:Src/spiops.c  ****             {
ARM GAS  /tmp/ccTbVEza.s 			page 24


 233:Src/spiops.c  ****                 motor1.direction = FORWARD;
 999              		.loc 2 233 0
 1000 0450 1E4B     		ldr	r3, .L50+68
 1001 0452 0122     		movs	r2, #1
 1002 0454 1A60     		str	r2, [r3]
 234:Src/spiops.c  ****                 motor1.speed = ControlData -> step_motor1_speed;
 1003              		.loc 2 234 0
 1004 0456 184B     		ldr	r3, .L50+48
 1005 0458 1B68     		ldr	r3, [r3]
 1006 045a 93F84230 		ldrb	r3, [r3, #66]	@ zero_extendqisi2
 1007 045e 1A46     		mov	r2, r3
 1008 0460 1A4B     		ldr	r3, .L50+68
 1009 0462 5A60     		str	r2, [r3, #4]
 1010 0464 37E0     		b	.L43
 1011              	.L42:
 235:Src/spiops.c  ****             }
 236:Src/spiops.c  ****             else if(ControlData -> step_motor1_direction == BACKWARD)
 1012              		.loc 2 236 0
 1013 0466 144B     		ldr	r3, .L50+48
 1014 0468 1B68     		ldr	r3, [r3]
 1015 046a 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1016 046e 022B     		cmp	r3, #2
 1017 0470 2ED1     		bne	.L44
 237:Src/spiops.c  ****             {
 238:Src/spiops.c  ****                 motor1.direction = BACKWARD;
 1018              		.loc 2 238 0
 1019 0472 164B     		ldr	r3, .L50+68
 1020 0474 0222     		movs	r2, #2
 1021 0476 1A60     		str	r2, [r3]
 239:Src/spiops.c  ****                 motor1.speed = ControlData -> step_motor1_speed;
 1022              		.loc 2 239 0
 1023 0478 0F4B     		ldr	r3, .L50+48
 1024 047a 1B68     		ldr	r3, [r3]
 1025 047c 93F84230 		ldrb	r3, [r3, #66]	@ zero_extendqisi2
 1026 0480 1A46     		mov	r2, r3
 1027 0482 124B     		ldr	r3, .L50+68
 1028 0484 5A60     		str	r2, [r3, #4]
 1029 0486 26E0     		b	.L43
 1030              	.L51:
 1031              		.align	2
 1032              	.L50:
 1033 0488 00000000 		.word	UpdateFile
 1034 048c 28000000 		.word	.LC11
 1035 0490 003C0240 		.word	1073888256
 1036 0494 00000808 		.word	134742016
 1037 0498 44000000 		.word	.LC12
 1038 049c 01000808 		.word	134742017
 1039 04a0 02000808 		.word	134742018
 1040 04a4 03000808 		.word	134742019
 1041 04a8 04000808 		.word	134742020
 1042 04ac 54000000 		.word	.LC13
 1043 04b0 68000000 		.word	.LC14
 1044 04b4 00000000 		.word	SpiRxData
 1045 04b8 00000000 		.word	ControlData
 1046 04bc 00000000 		.word	spiMutexHandle
 1047 04c0 00000000 		.word	SpiTxData
 1048 04c4 00000000 		.word	EnvironmentData
ARM GAS  /tmp/ccTbVEza.s 			page 25


 1049 04c8 00000000 		.word	hspi1
 1050 04cc 00000000 		.word	motor1
 1051              	.L44:
 240:Src/spiops.c  ****             }
 241:Src/spiops.c  ****             else
 242:Src/spiops.c  ****             {
 243:Src/spiops.c  ****                 motor1.direction = STOP;
 1052              		.loc 2 243 0
 1053 04d0 144B     		ldr	r3, .L52
 1054 04d2 0022     		movs	r2, #0
 1055 04d4 1A60     		str	r2, [r3]
 1056              	.L43:
 244:Src/spiops.c  ****             }
 245:Src/spiops.c  **** 
 246:Src/spiops.c  ****             if(ControlData -> step_motor2_direction == FORWARD)
 1057              		.loc 2 246 0
 1058 04d6 144B     		ldr	r3, .L52+4
 1059 04d8 1B68     		ldr	r3, [r3]
 1060 04da 93F83D30 		ldrb	r3, [r3, #61]	@ zero_extendqisi2
 1061 04de 012B     		cmp	r3, #1
 1062 04e0 0AD1     		bne	.L45
 247:Src/spiops.c  ****             {
 248:Src/spiops.c  ****                 motor2.direction = FORWARD;
 1063              		.loc 2 248 0
 1064 04e2 124B     		ldr	r3, .L52+8
 1065 04e4 0122     		movs	r2, #1
 1066 04e6 1A60     		str	r2, [r3]
 249:Src/spiops.c  ****                 motor1.speed = ControlData -> step_motor2_speed;
 1067              		.loc 2 249 0
 1068 04e8 0F4B     		ldr	r3, .L52+4
 1069 04ea 1B68     		ldr	r3, [r3]
 1070 04ec 93F84330 		ldrb	r3, [r3, #67]	@ zero_extendqisi2
 1071 04f0 1A46     		mov	r2, r3
 1072 04f2 0C4B     		ldr	r3, .L52
 1073 04f4 5A60     		str	r2, [r3, #4]
 1074 04f6 9CE5     		b	.L47
 1075              	.L45:
 250:Src/spiops.c  ****             }
 251:Src/spiops.c  ****             else if(ControlData -> step_motor2_direction == BACKWARD)
 1076              		.loc 2 251 0
 1077 04f8 0B4B     		ldr	r3, .L52+4
 1078 04fa 1B68     		ldr	r3, [r3]
 1079 04fc 93F83D30 		ldrb	r3, [r3, #61]	@ zero_extendqisi2
 1080 0500 022B     		cmp	r3, #2
 1081 0502 0AD1     		bne	.L46
 252:Src/spiops.c  ****             {
 253:Src/spiops.c  ****                 motor2.direction = BACKWARD;
 1082              		.loc 2 253 0
 1083 0504 094B     		ldr	r3, .L52+8
 1084 0506 0222     		movs	r2, #2
 1085 0508 1A60     		str	r2, [r3]
 254:Src/spiops.c  ****                 motor1.speed = ControlData -> step_motor2_speed;
 1086              		.loc 2 254 0
 1087 050a 074B     		ldr	r3, .L52+4
 1088 050c 1B68     		ldr	r3, [r3]
 1089 050e 93F84330 		ldrb	r3, [r3, #67]	@ zero_extendqisi2
 1090 0512 1A46     		mov	r2, r3
ARM GAS  /tmp/ccTbVEza.s 			page 26


 1091 0514 034B     		ldr	r3, .L52
 1092 0516 5A60     		str	r2, [r3, #4]
 1093 0518 8BE5     		b	.L47
 1094              	.L46:
 255:Src/spiops.c  ****             }
 256:Src/spiops.c  ****             else
 257:Src/spiops.c  ****             {
 258:Src/spiops.c  ****                 motor2.direction = STOP;
 1095              		.loc 2 258 0
 1096 051a 044B     		ldr	r3, .L52+8
 1097 051c 0022     		movs	r2, #0
 1098 051e 1A60     		str	r2, [r3]
  66:Src/spiops.c  ****         {
 1099              		.loc 2 66 0
 1100 0520 87E5     		b	.L47
 1101              	.L53:
 1102 0522 00BF     		.align	2
 1103              	.L52:
 1104 0524 00000000 		.word	motor1
 1105 0528 00000000 		.word	ControlData
 1106 052c 00000000 		.word	motor2
 1107              		.cfi_endproc
 1108              	.LFE146:
 1110              		.section	.rodata
 1111              		.align	2
 1112              	.LC15:
 1113 0078 73656E73 		.ascii	"sensorOps\015\012\000"
 1113      6F724F70 
 1113      730D0A00 
 1114              		.section	.text.sensorOps,"ax",%progbits
 1115              		.align	1
 1116              		.global	sensorOps
 1117              		.syntax unified
 1118              		.thumb
 1119              		.thumb_func
 1120              		.fpu fpv4-sp-d16
 1122              	sensorOps:
 1123              	.LFB147:
 1124              		.file 3 "Src/sensorops.c"
   1:Src/sensorops.c **** #include "sensorops.h"
   2:Src/sensorops.c **** 
   3:Src/sensorops.c **** 
   4:Src/sensorops.c **** /* sensorOps function */
   5:Src/sensorops.c **** void sensorOps(void const * argument)
   6:Src/sensorops.c **** {
 1125              		.loc 3 6 0
 1126              		.cfi_startproc
 1127              		@ args = 0, pretend = 0, frame = 8
 1128              		@ frame_needed = 1, uses_anonymous_args = 0
 1129 0000 80B5     		push	{r7, lr}
 1130              	.LCFI21:
 1131              		.cfi_def_cfa_offset 8
 1132              		.cfi_offset 7, -8
 1133              		.cfi_offset 14, -4
 1134 0002 82B0     		sub	sp, sp, #8
 1135              	.LCFI22:
 1136              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccTbVEza.s 			page 27


 1137 0004 00AF     		add	r7, sp, #0
 1138              	.LCFI23:
 1139              		.cfi_def_cfa_register 7
 1140 0006 7860     		str	r0, [r7, #4]
   7:Src/sensorops.c **** 
   8:Src/sensorops.c ****   mprintf("sensorOps\r\n");
 1141              		.loc 3 8 0
 1142 0008 1A48     		ldr	r0, .L56
 1143 000a FFF7FEFF 		bl	mprintf
   9:Src/sensorops.c **** 
  10:Src/sensorops.c ****   sensorInit();
 1144              		.loc 3 10 0
 1145 000e FFF7FEFF 		bl	sensorInit
  11:Src/sensorops.c **** 
  12:Src/sensorops.c ****   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 1146              		.loc 3 12 0
 1147 0012 0021     		movs	r1, #0
 1148 0014 1848     		ldr	r0, .L56+4
 1149 0016 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1150              	.L55:
  13:Src/sensorops.c **** 
  14:Src/sensorops.c **** 
  15:Src/sensorops.c **** 
  16:Src/sensorops.c **** 
  17:Src/sensorops.c **** //  calibrateCompass();
  18:Src/sensorops.c **** 
  19:Src/sensorops.c ****   while(1)
  20:Src/sensorops.c ****   {
  21:Src/sensorops.c ****       readAllSensors();
 1151              		.loc 3 21 0 discriminator 1
 1152 001a FFF7FEFF 		bl	readAllSensors
  22:Src/sensorops.c **** 
  23:Src/sensorops.c **** 
  24:Src/sensorops.c ****       xSemaphoreTake(spiMutexHandle, portMAX_DELAY);
 1153              		.loc 3 24 0 discriminator 1
 1154 001e 174B     		ldr	r3, .L56+8
 1155 0020 1868     		ldr	r0, [r3]
 1156 0022 0023     		movs	r3, #0
 1157 0024 4FF0FF32 		mov	r2, #-1
 1158 0028 0021     		movs	r1, #0
 1159 002a FFF7FEFF 		bl	xQueueGenericReceive
  25:Src/sensorops.c **** 
  26:Src/sensorops.c ****       EnvironmentData -> sensor_data.temperature = sensorValues.temperature;
 1160              		.loc 3 26 0 discriminator 1
 1161 002e 144B     		ldr	r3, .L56+12
 1162 0030 1B68     		ldr	r3, [r3]
 1163 0032 144A     		ldr	r2, .L56+16
 1164 0034 9268     		ldr	r2, [r2, #8]
 1165 0036 5A66     		str	r2, [r3, #100]
  27:Src/sensorops.c ****       EnvironmentData -> sensor_data.pressure = sensorValues.pressure;
 1166              		.loc 3 27 0 discriminator 1
 1167 0038 114B     		ldr	r3, .L56+12
 1168 003a 1B68     		ldr	r3, [r3]
 1169 003c 114A     		ldr	r2, .L56+16
 1170 003e 1268     		ldr	r2, [r2]
 1171 0040 DA66     		str	r2, [r3, #108]
  28:Src/sensorops.c ****       EnvironmentData -> sensor_data.altitude = sensorValues.altitude;
ARM GAS  /tmp/ccTbVEza.s 			page 28


 1172              		.loc 3 28 0 discriminator 1
 1173 0042 0F4B     		ldr	r3, .L56+12
 1174 0044 1B68     		ldr	r3, [r3]
 1175 0046 0F4A     		ldr	r2, .L56+16
 1176 0048 5268     		ldr	r2, [r2, #4]
 1177 004a 1A67     		str	r2, [r3, #112]
  29:Src/sensorops.c ****       EnvironmentData -> sensor_data.wheather_condition = sensorValues.wheather_condition;
 1178              		.loc 3 29 0 discriminator 1
 1179 004c 0C4B     		ldr	r3, .L56+12
 1180 004e 1B68     		ldr	r3, [r3]
 1181 0050 0C4A     		ldr	r2, .L56+16
 1182 0052 127B     		ldrb	r2, [r2, #12]	@ zero_extendqisi2
 1183 0054 83F87420 		strb	r2, [r3, #116]
  30:Src/sensorops.c ****       EnvironmentData -> sensor_data.compass_degree = sensorValues.compass_degree;
 1184              		.loc 3 30 0 discriminator 1
 1185 0058 094B     		ldr	r3, .L56+12
 1186 005a 1B68     		ldr	r3, [r3]
 1187 005c 094A     		ldr	r2, .L56+16
 1188 005e 1269     		ldr	r2, [r2, #16]
 1189 0060 9A66     		str	r2, [r3, #104]
  31:Src/sensorops.c **** 
  32:Src/sensorops.c ****       xSemaphoreGive(spiMutexHandle);
 1190              		.loc 3 32 0 discriminator 1
 1191 0062 064B     		ldr	r3, .L56+8
 1192 0064 1868     		ldr	r0, [r3]
 1193 0066 0023     		movs	r3, #0
 1194 0068 0022     		movs	r2, #0
 1195 006a 0021     		movs	r1, #0
 1196 006c FFF7FEFF 		bl	xQueueGenericSend
  21:Src/sensorops.c **** 
 1197              		.loc 3 21 0 discriminator 1
 1198 0070 D3E7     		b	.L55
 1199              	.L57:
 1200 0072 00BF     		.align	2
 1201              	.L56:
 1202 0074 78000000 		.word	.LC15
 1203 0078 00000000 		.word	htim3
 1204 007c 00000000 		.word	spiMutexHandle
 1205 0080 00000000 		.word	EnvironmentData
 1206 0084 00000000 		.word	sensorValues
 1207              		.cfi_endproc
 1208              	.LFE147:
 1210              		.section	.rodata
 1211              		.align	2
 1212              	.LC16:
 1213 0084 6D6F746F 		.ascii	"motorOps\015\012\000"
 1213      724F7073 
 1213      0D0A00
 1214              		.section	.text.motorOps,"ax",%progbits
 1215              		.align	1
 1216              		.global	motorOps
 1217              		.syntax unified
 1218              		.thumb
 1219              		.thumb_func
 1220              		.fpu fpv4-sp-d16
 1222              	motorOps:
 1223              	.LFB148:
ARM GAS  /tmp/ccTbVEza.s 			page 29


 1224              		.file 4 "Src/motorops.c"
   1:Src/motorops.c **** #include "motorops.h"
   2:Src/motorops.c **** 
   3:Src/motorops.c **** 
   4:Src/motorops.c **** 
   5:Src/motorops.c **** void motorOps(void const * argument)
   6:Src/motorops.c **** {
 1225              		.loc 4 6 0
 1226              		.cfi_startproc
 1227              		@ args = 0, pretend = 0, frame = 16
 1228              		@ frame_needed = 1, uses_anonymous_args = 0
 1229 0000 80B5     		push	{r7, lr}
 1230              	.LCFI24:
 1231              		.cfi_def_cfa_offset 8
 1232              		.cfi_offset 7, -8
 1233              		.cfi_offset 14, -4
 1234 0002 84B0     		sub	sp, sp, #16
 1235              	.LCFI25:
 1236              		.cfi_def_cfa_offset 24
 1237 0004 00AF     		add	r7, sp, #0
 1238              	.LCFI26:
 1239              		.cfi_def_cfa_register 7
 1240 0006 7860     		str	r0, [r7, #4]
   7:Src/motorops.c **** 
   8:Src/motorops.c ****     int pwm = 45;
 1241              		.loc 4 8 0
 1242 0008 2D23     		movs	r3, #45
 1243 000a FB60     		str	r3, [r7, #12]
   9:Src/motorops.c **** 
  10:Src/motorops.c ****     mprintf("motorOps\r\n");
 1244              		.loc 4 10 0
 1245 000c 1A48     		ldr	r0, .L64
 1246 000e FFF7FEFF 		bl	mprintf
  11:Src/motorops.c **** 
  12:Src/motorops.c **** 
  13:Src/motorops.c **** 
  14:Src/motorops.c ****     __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, pwm);
 1247              		.loc 4 14 0
 1248 0012 1A4B     		ldr	r3, .L64+4
 1249 0014 1B68     		ldr	r3, [r3]
 1250 0016 FA68     		ldr	r2, [r7, #12]
 1251 0018 5A63     		str	r2, [r3, #52]
  15:Src/motorops.c ****     pwm++;
 1252              		.loc 4 15 0
 1253 001a FB68     		ldr	r3, [r7, #12]
 1254 001c 0133     		adds	r3, r3, #1
 1255 001e FB60     		str	r3, [r7, #12]
  16:Src/motorops.c ****     osDelay(100);
 1256              		.loc 4 16 0
 1257 0020 6420     		movs	r0, #100
 1258 0022 FFF7FEFF 		bl	osDelay
  17:Src/motorops.c **** 
  18:Src/motorops.c ****     if(pwm == 153)
 1259              		.loc 4 18 0
 1260 0026 FB68     		ldr	r3, [r7, #12]
 1261 0028 992B     		cmp	r3, #153
 1262 002a 01D1     		bne	.L59
ARM GAS  /tmp/ccTbVEza.s 			page 30


  19:Src/motorops.c ****       pwm = 45;
 1263              		.loc 4 19 0
 1264 002c 2D23     		movs	r3, #45
 1265 002e FB60     		str	r3, [r7, #12]
 1266              	.L59:
  20:Src/motorops.c **** 
  21:Src/motorops.c **** 
  22:Src/motorops.c ****     while(1)
  23:Src/motorops.c ****     {
  24:Src/motorops.c **** 
  25:Src/motorops.c **** 
  26:Src/motorops.c **** 
  27:Src/motorops.c ****       if(motor1.direction == FORWARD)
 1267              		.loc 4 27 0
 1268 0030 134B     		ldr	r3, .L64+8
 1269 0032 1B68     		ldr	r3, [r3]
 1270 0034 012B     		cmp	r3, #1
 1271 0036 02D1     		bne	.L60
  28:Src/motorops.c ****       {
  29:Src/motorops.c ****         motor1Drive(FORWARD);
 1272              		.loc 4 29 0
 1273 0038 0120     		movs	r0, #1
 1274 003a FFF7FEFF 		bl	motor1Drive
 1275              	.L60:
  30:Src/motorops.c ****       }
  31:Src/motorops.c **** 
  32:Src/motorops.c ****       if(motor1.direction == BACKWARD)
 1276              		.loc 4 32 0
 1277 003e 104B     		ldr	r3, .L64+8
 1278 0040 1B68     		ldr	r3, [r3]
 1279 0042 022B     		cmp	r3, #2
 1280 0044 02D1     		bne	.L61
  33:Src/motorops.c ****       {
  34:Src/motorops.c ****         motor1Drive(BACKWARD);
 1281              		.loc 4 34 0
 1282 0046 0220     		movs	r0, #2
 1283 0048 FFF7FEFF 		bl	motor1Drive
 1284              	.L61:
  35:Src/motorops.c ****       }
  36:Src/motorops.c **** 
  37:Src/motorops.c ****       if(motor2.direction == FORWARD)
 1285              		.loc 4 37 0
 1286 004c 0D4B     		ldr	r3, .L64+12
 1287 004e 1B68     		ldr	r3, [r3]
 1288 0050 012B     		cmp	r3, #1
 1289 0052 02D1     		bne	.L62
  38:Src/motorops.c ****       {
  39:Src/motorops.c ****         motor2Drive(FORWARD);
 1290              		.loc 4 39 0
 1291 0054 0120     		movs	r0, #1
 1292 0056 FFF7FEFF 		bl	motor2Drive
 1293              	.L62:
  40:Src/motorops.c ****       }
  41:Src/motorops.c **** 
  42:Src/motorops.c ****       if(motor2.direction == BACKWARD)
 1294              		.loc 4 42 0
 1295 005a 0A4B     		ldr	r3, .L64+12
ARM GAS  /tmp/ccTbVEza.s 			page 31


 1296 005c 1B68     		ldr	r3, [r3]
 1297 005e 022B     		cmp	r3, #2
 1298 0060 02D1     		bne	.L63
  43:Src/motorops.c ****       {
  44:Src/motorops.c ****         motor2Drive(BACKWARD);
 1299              		.loc 4 44 0
 1300 0062 0220     		movs	r0, #2
 1301 0064 FFF7FEFF 		bl	motor2Drive
 1302              	.L63:
  45:Src/motorops.c ****       }
  46:Src/motorops.c **** 
  47:Src/motorops.c ****       osDelay(2 + motor1.speed);
 1303              		.loc 4 47 0
 1304 0068 054B     		ldr	r3, .L64+8
 1305 006a 5B68     		ldr	r3, [r3, #4]
 1306 006c 0233     		adds	r3, r3, #2
 1307 006e 1846     		mov	r0, r3
 1308 0070 FFF7FEFF 		bl	osDelay
  27:Src/motorops.c ****       {
 1309              		.loc 4 27 0
 1310 0074 DCE7     		b	.L59
 1311              	.L65:
 1312 0076 00BF     		.align	2
 1313              	.L64:
 1314 0078 84000000 		.word	.LC16
 1315 007c 00000000 		.word	htim3
 1316 0080 00000000 		.word	motor1
 1317 0084 00000000 		.word	motor2
 1318              		.cfi_endproc
 1319              	.LFE148:
 1321              		.section	.text.vprint,"ax",%progbits
 1322              		.align	1
 1323              		.global	vprint
 1324              		.syntax unified
 1325              		.thumb
 1326              		.thumb_func
 1327              		.fpu fpv4-sp-d16
 1329              	vprint:
 1330              	.LFB149:
 1331              		.file 5 "Src/freertos.c"
   1:Src/freertos.c **** /**
   2:Src/freertos.c ****   ******************************************************************************
   3:Src/freertos.c ****   * File Name          : freertos.c
   4:Src/freertos.c ****   * Description        : Code for freertos applications
   5:Src/freertos.c ****   ******************************************************************************
   6:Src/freertos.c ****   * This notice applies to any and all portions of this file
   7:Src/freertos.c ****   * that are not between comment pairs USER CODE BEGIN and
   8:Src/freertos.c ****   * USER CODE END. Other portions of this file, whether 
   9:Src/freertos.c ****   * inserted by the user or by software development tools
  10:Src/freertos.c ****   * are owned by their respective copyright owners.
  11:Src/freertos.c ****   *
  12:Src/freertos.c ****   * Copyright (c) 2018 STMicroelectronics International N.V. 
  13:Src/freertos.c ****   * All rights reserved.
  14:Src/freertos.c ****   *
  15:Src/freertos.c ****   * Redistribution and use in source and binary forms, with or without 
  16:Src/freertos.c ****   * modification, are permitted, provided that the following conditions are met:
  17:Src/freertos.c ****   *
ARM GAS  /tmp/ccTbVEza.s 			page 32


  18:Src/freertos.c ****   * 1. Redistribution of source code must retain the above copyright notice, 
  19:Src/freertos.c ****   *    this list of conditions and the following disclaimer.
  20:Src/freertos.c ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  21:Src/freertos.c ****   *    this list of conditions and the following disclaimer in the documentation
  22:Src/freertos.c ****   *    and/or other materials provided with the distribution.
  23:Src/freertos.c ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  24:Src/freertos.c ****   *    contributors to this software may be used to endorse or promote products 
  25:Src/freertos.c ****   *    derived from this software without specific written permission.
  26:Src/freertos.c ****   * 4. This software, including modifications and/or derivative works of this 
  27:Src/freertos.c ****   *    software, must execute solely and exclusively on microcontroller or
  28:Src/freertos.c ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  29:Src/freertos.c ****   * 5. Redistribution and use of this software other than as permitted under 
  30:Src/freertos.c ****   *    this license is void and will automatically terminate your rights under 
  31:Src/freertos.c ****   *    this license. 
  32:Src/freertos.c ****   *
  33:Src/freertos.c ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  34:Src/freertos.c ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  35:Src/freertos.c ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  36:Src/freertos.c ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  37:Src/freertos.c ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  38:Src/freertos.c ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  39:Src/freertos.c ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  40:Src/freertos.c ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  41:Src/freertos.c ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  42:Src/freertos.c ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  43:Src/freertos.c ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  44:Src/freertos.c ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  45:Src/freertos.c ****   *
  46:Src/freertos.c ****   ******************************************************************************
  47:Src/freertos.c ****   */
  48:Src/freertos.c **** 
  49:Src/freertos.c **** /* Includes ------------------------------------------------------------------*/
  50:Src/freertos.c **** #include "freertos.h"
  51:Src/freertos.c **** 
  52:Src/freertos.c **** #include "gpsops.c"
  53:Src/freertos.c **** #include "spiops.c"
  54:Src/freertos.c **** #include "sensorops.c"
  55:Src/freertos.c **** #include "motorops.c"
  56:Src/freertos.c **** 
  57:Src/freertos.c **** #include <stdlib.h>
  58:Src/freertos.c **** 
  59:Src/freertos.c **** 
  60:Src/freertos.c **** 
  61:Src/freertos.c **** void vprint(const char *fmt, va_list argp)
  62:Src/freertos.c **** {
 1332              		.loc 5 62 0
 1333              		.cfi_startproc
 1334              		@ args = 0, pretend = 0, frame = 160
 1335              		@ frame_needed = 1, uses_anonymous_args = 0
 1336 0000 80B5     		push	{r7, lr}
 1337              	.LCFI27:
 1338              		.cfi_def_cfa_offset 8
 1339              		.cfi_offset 7, -8
 1340              		.cfi_offset 14, -4
 1341 0002 A8B0     		sub	sp, sp, #160
 1342              	.LCFI28:
 1343              		.cfi_def_cfa_offset 168
ARM GAS  /tmp/ccTbVEza.s 			page 33


 1344 0004 00AF     		add	r7, sp, #0
 1345              	.LCFI29:
 1346              		.cfi_def_cfa_register 7
 1347 0006 7860     		str	r0, [r7, #4]
 1348 0008 3960     		str	r1, [r7]
  63:Src/freertos.c ****     char string[150];
  64:Src/freertos.c **** 
  65:Src/freertos.c ****     if(0 < vsprintf(string,fmt,argp)) // build string
 1349              		.loc 5 65 0
 1350 000a 07F10803 		add	r3, r7, #8
 1351 000e 3A68     		ldr	r2, [r7]
 1352 0010 7968     		ldr	r1, [r7, #4]
 1353 0012 1846     		mov	r0, r3
 1354 0014 FFF7FEFF 		bl	vsprintf
 1355 0018 0346     		mov	r3, r0
 1356 001a 002B     		cmp	r3, #0
 1357 001c 0DDD     		ble	.L68
  66:Src/freertos.c ****        HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via 
 1358              		.loc 5 66 0
 1359 001e 07F10803 		add	r3, r7, #8
 1360 0022 1846     		mov	r0, r3
 1361 0024 FFF7FEFF 		bl	strlen
 1362 0028 0346     		mov	r3, r0
 1363 002a 9AB2     		uxth	r2, r3
 1364 002c 07F10801 		add	r1, r7, #8
 1365 0030 6FF07F43 		mvn	r3, #-16777216
 1366 0034 0348     		ldr	r0, .L69
 1367 0036 FFF7FEFF 		bl	HAL_UART_Transmit
 1368              	.L68:
  67:Src/freertos.c **** 
  68:Src/freertos.c **** }
 1369              		.loc 5 68 0
 1370 003a 00BF     		nop
 1371 003c A037     		adds	r7, r7, #160
 1372              	.LCFI30:
 1373              		.cfi_def_cfa_offset 8
 1374 003e BD46     		mov	sp, r7
 1375              	.LCFI31:
 1376              		.cfi_def_cfa_register 13
 1377              		@ sp needed
 1378 0040 80BD     		pop	{r7, pc}
 1379              	.L70:
 1380 0042 00BF     		.align	2
 1381              	.L69:
 1382 0044 00000000 		.word	huart1
 1383              		.cfi_endproc
 1384              	.LFE149:
 1386              		.section	.text.mprintf,"ax",%progbits
 1387              		.align	1
 1388              		.global	mprintf
 1389              		.syntax unified
 1390              		.thumb
 1391              		.thumb_func
 1392              		.fpu fpv4-sp-d16
 1394              	mprintf:
 1395              	.LFB150:
  69:Src/freertos.c **** 
ARM GAS  /tmp/ccTbVEza.s 			page 34


  70:Src/freertos.c **** 
  71:Src/freertos.c **** 
  72:Src/freertos.c **** void mprintf(const char *fmt, ...) // custom printf() function
  73:Src/freertos.c **** {
 1396              		.loc 5 73 0
 1397              		.cfi_startproc
 1398              		@ args = 4, pretend = 16, frame = 8
 1399              		@ frame_needed = 1, uses_anonymous_args = 1
 1400 0000 0FB4     		push	{r0, r1, r2, r3}
 1401              	.LCFI32:
 1402              		.cfi_def_cfa_offset 16
 1403              		.cfi_offset 0, -16
 1404              		.cfi_offset 1, -12
 1405              		.cfi_offset 2, -8
 1406              		.cfi_offset 3, -4
 1407 0002 80B5     		push	{r7, lr}
 1408              	.LCFI33:
 1409              		.cfi_def_cfa_offset 24
 1410              		.cfi_offset 7, -24
 1411              		.cfi_offset 14, -20
 1412 0004 82B0     		sub	sp, sp, #8
 1413              	.LCFI34:
 1414              		.cfi_def_cfa_offset 32
 1415 0006 00AF     		add	r7, sp, #0
 1416              	.LCFI35:
 1417              		.cfi_def_cfa_register 7
  74:Src/freertos.c **** 
  75:Src/freertos.c ****     xSemaphoreTake(uartMutexHandle, 100);
 1418              		.loc 5 75 0
 1419 0008 0D4B     		ldr	r3, .L72
 1420 000a 1868     		ldr	r0, [r3]
 1421 000c 0023     		movs	r3, #0
 1422 000e 6422     		movs	r2, #100
 1423 0010 0021     		movs	r1, #0
 1424 0012 FFF7FEFF 		bl	xQueueGenericReceive
  76:Src/freertos.c ****     va_list argp;
  77:Src/freertos.c ****     va_start(argp, fmt);
 1425              		.loc 5 77 0
 1426 0016 07F11403 		add	r3, r7, #20
 1427 001a 7B60     		str	r3, [r7, #4]
  78:Src/freertos.c ****     vprint(fmt, argp);
 1428              		.loc 5 78 0
 1429 001c 7968     		ldr	r1, [r7, #4]
 1430 001e 3869     		ldr	r0, [r7, #16]
 1431 0020 FFF7FEFF 		bl	vprint
  79:Src/freertos.c ****     va_end(argp);
  80:Src/freertos.c ****     xSemaphoreGive(uartMutexHandle);
 1432              		.loc 5 80 0
 1433 0024 064B     		ldr	r3, .L72
 1434 0026 1868     		ldr	r0, [r3]
 1435 0028 0023     		movs	r3, #0
 1436 002a 0022     		movs	r2, #0
 1437 002c 0021     		movs	r1, #0
 1438 002e FFF7FEFF 		bl	xQueueGenericSend
  81:Src/freertos.c **** 
  82:Src/freertos.c **** }
 1439              		.loc 5 82 0
ARM GAS  /tmp/ccTbVEza.s 			page 35


 1440 0032 00BF     		nop
 1441 0034 0837     		adds	r7, r7, #8
 1442              	.LCFI36:
 1443              		.cfi_def_cfa_offset 24
 1444 0036 BD46     		mov	sp, r7
 1445              	.LCFI37:
 1446              		.cfi_def_cfa_register 13
 1447              		@ sp needed
 1448 0038 BDE88040 		pop	{r7, lr}
 1449              	.LCFI38:
 1450              		.cfi_restore 14
 1451              		.cfi_restore 7
 1452              		.cfi_def_cfa_offset 16
 1453 003c 04B0     		add	sp, sp, #16
 1454              	.LCFI39:
 1455              		.cfi_restore 3
 1456              		.cfi_restore 2
 1457              		.cfi_restore 1
 1458              		.cfi_restore 0
 1459              		.cfi_def_cfa_offset 0
 1460 003e 7047     		bx	lr
 1461              	.L73:
 1462              		.align	2
 1463              	.L72:
 1464 0040 00000000 		.word	uartMutexHandle
 1465              		.cfi_endproc
 1466              	.LFE150:
 1468              		.section	.rodata
 1469 008f 00       		.align	2
 1470              	.LC0:
 1471 0090 67707354 		.ascii	"gpsThread\000"
 1471      68726561 
 1471      6400
 1472 009a 0000     		.align	2
 1473              	.LC17:
 1474 009c 90000000 		.word	.LC0
 1475 00a0 00000000 		.word	gpsOps
 1476 00a4 0000     		.short	0
 1477 00a6 0000     		.space	2
 1478 00a8 00000000 		.word	0
 1479 00ac 00040000 		.word	1024
 1480              		.align	2
 1481              	.LC2:
 1482 00b0 73656E73 		.ascii	"sensorThread\000"
 1482      6F725468 
 1482      72656164 
 1482      00
 1483 00bd 000000   		.align	2
 1484              	.LC18:
 1485 00c0 B0000000 		.word	.LC2
 1486 00c4 00000000 		.word	sensorOps
 1487 00c8 FFFF     		.short	-1
 1488 00ca 0000     		.space	2
 1489 00cc 00000000 		.word	0
 1490 00d0 00020000 		.word	512
 1491              		.align	2
 1492              	.LC4:
ARM GAS  /tmp/ccTbVEza.s 			page 36


 1493 00d4 73706943 		.ascii	"spiComThread\000"
 1493      6F6D5468 
 1493      72656164 
 1493      00
 1494 00e1 000000   		.align	2
 1495              	.LC19:
 1496 00e4 D4000000 		.word	.LC4
 1497 00e8 00000000 		.word	spiComOps
 1498 00ec 0100     		.short	1
 1499 00ee 0000     		.space	2
 1500 00f0 00000000 		.word	0
 1501 00f4 00040000 		.word	1024
 1502              		.align	2
 1503              	.LC6:
 1504 00f8 6D6F746F 		.ascii	"motorThread\000"
 1504      72546872 
 1504      65616400 
 1505              		.align	2
 1506              	.LC20:
 1507 0104 F8000000 		.word	.LC6
 1508 0108 00000000 		.word	motorOps
 1509 010c 0000     		.short	0
 1510 010e 0000     		.space	2
 1511 0110 00000000 		.word	0
 1512 0114 00020000 		.word	512
 1513              		.section	.text.MX_FREERTOS_Init,"ax",%progbits
 1514              		.align	1
 1515              		.global	MX_FREERTOS_Init
 1516              		.syntax unified
 1517              		.thumb
 1518              		.thumb_func
 1519              		.fpu fpv4-sp-d16
 1521              	MX_FREERTOS_Init:
 1522              	.LFB151:
  83:Src/freertos.c **** 
  84:Src/freertos.c **** 
  85:Src/freertos.c **** 
  86:Src/freertos.c **** void MX_FREERTOS_Init(void)
  87:Src/freertos.c **** {
 1523              		.loc 5 87 0
 1524              		.cfi_startproc
 1525              		@ args = 0, pretend = 0, frame = 104
 1526              		@ frame_needed = 1, uses_anonymous_args = 0
 1527 0000 B0B5     		push	{r4, r5, r7, lr}
 1528              	.LCFI40:
 1529              		.cfi_def_cfa_offset 16
 1530              		.cfi_offset 4, -16
 1531              		.cfi_offset 5, -12
 1532              		.cfi_offset 7, -8
 1533              		.cfi_offset 14, -4
 1534 0002 9AB0     		sub	sp, sp, #104
 1535              	.LCFI41:
 1536              		.cfi_def_cfa_offset 120
 1537 0004 00AF     		add	r7, sp, #0
 1538              	.LCFI42:
 1539              		.cfi_def_cfa_register 7
  88:Src/freertos.c **** 
ARM GAS  /tmp/ccTbVEza.s 			page 37


  89:Src/freertos.c **** 
  90:Src/freertos.c ****   osMutexDef(spiMutex);
 1540              		.loc 5 90 0
 1541 0006 0023     		movs	r3, #0
 1542 0008 7B66     		str	r3, [r7, #100]
  91:Src/freertos.c ****   spiMutexHandle = osMutexCreate(osMutex(spiMutex));
 1543              		.loc 5 91 0
 1544 000a 07F16403 		add	r3, r7, #100
 1545 000e 1846     		mov	r0, r3
 1546 0010 FFF7FEFF 		bl	osMutexCreate
 1547 0014 0246     		mov	r2, r0
 1548 0016 4E4B     		ldr	r3, .L75
 1549 0018 1A60     		str	r2, [r3]
  92:Src/freertos.c **** 
  93:Src/freertos.c ****   osMutexDef(uartMutex);
 1550              		.loc 5 93 0
 1551 001a 0023     		movs	r3, #0
 1552 001c 3B66     		str	r3, [r7, #96]
  94:Src/freertos.c ****   uartMutexHandle = osMutexCreate(osMutex(uartMutex));
 1553              		.loc 5 94 0
 1554 001e 07F16003 		add	r3, r7, #96
 1555 0022 1846     		mov	r0, r3
 1556 0024 FFF7FEFF 		bl	osMutexCreate
 1557 0028 0246     		mov	r2, r0
 1558 002a 4A4B     		ldr	r3, .L75+4
 1559 002c 1A60     		str	r2, [r3]
  95:Src/freertos.c **** 
  96:Src/freertos.c ****   osMutexDef(memoryMutex);
 1560              		.loc 5 96 0
 1561 002e 0023     		movs	r3, #0
 1562 0030 FB65     		str	r3, [r7, #92]
  97:Src/freertos.c ****   memoryMutexHandle = osMutexCreate(osMutex(memoryMutex));
 1563              		.loc 5 97 0
 1564 0032 07F15C03 		add	r3, r7, #92
 1565 0036 1846     		mov	r0, r3
 1566 0038 FFF7FEFF 		bl	osMutexCreate
 1567 003c 0246     		mov	r2, r0
 1568 003e 464B     		ldr	r3, .L75+8
 1569 0040 1A60     		str	r2, [r3]
  98:Src/freertos.c **** 
  99:Src/freertos.c ****   osSemaphoreDef(uartSemaphore);
 1570              		.loc 5 99 0
 1571 0042 0023     		movs	r3, #0
 1572 0044 BB65     		str	r3, [r7, #88]
 100:Src/freertos.c ****   uartSemaphoreHandle = osSemaphoreCreate(osSemaphore(uartSemaphore), 1);
 1573              		.loc 5 100 0
 1574 0046 07F15803 		add	r3, r7, #88
 1575 004a 0121     		movs	r1, #1
 1576 004c 1846     		mov	r0, r3
 1577 004e FFF7FEFF 		bl	osSemaphoreCreate
 1578 0052 0246     		mov	r2, r0
 1579 0054 414B     		ldr	r3, .L75+12
 1580 0056 1A60     		str	r2, [r3]
 101:Src/freertos.c **** 
 102:Src/freertos.c ****   /* definition and creation of spiSemaphore */
 103:Src/freertos.c ****   osSemaphoreDef(spiSemaphore);
 1581              		.loc 5 103 0
ARM GAS  /tmp/ccTbVEza.s 			page 38


 1582 0058 0023     		movs	r3, #0
 1583 005a 7B65     		str	r3, [r7, #84]
 104:Src/freertos.c ****   spiSemaphoreHandle = osSemaphoreCreate(osSemaphore(spiSemaphore), 1);
 1584              		.loc 5 104 0
 1585 005c 07F15403 		add	r3, r7, #84
 1586 0060 0121     		movs	r1, #1
 1587 0062 1846     		mov	r0, r3
 1588 0064 FFF7FEFF 		bl	osSemaphoreCreate
 1589 0068 0246     		mov	r2, r0
 1590 006a 3D4B     		ldr	r3, .L75+16
 1591 006c 1A60     		str	r2, [r3]
 105:Src/freertos.c **** 
 106:Src/freertos.c ****   /* definition and creation of gpsThread */
 107:Src/freertos.c ****   osThreadDef(gpsThread, gpsOps, osPriorityNormal, 0, 1024);
 1592              		.loc 5 107 0
 1593 006e 3D4B     		ldr	r3, .L75+20
 1594 0070 07F14004 		add	r4, r7, #64
 1595 0074 1D46     		mov	r5, r3
 1596 0076 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1597 0078 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1598 007a 2B68     		ldr	r3, [r5]
 1599 007c 2360     		str	r3, [r4]
 108:Src/freertos.c ****   gpsThreadHandle = osThreadCreate(osThread(gpsThread), NULL);
 1600              		.loc 5 108 0
 1601 007e 07F14003 		add	r3, r7, #64
 1602 0082 0021     		movs	r1, #0
 1603 0084 1846     		mov	r0, r3
 1604 0086 FFF7FEFF 		bl	osThreadCreate
 1605 008a 0246     		mov	r2, r0
 1606 008c 364B     		ldr	r3, .L75+24
 1607 008e 1A60     		str	r2, [r3]
 109:Src/freertos.c **** 
 110:Src/freertos.c ****   /* definition and creation of sensorThread */
 111:Src/freertos.c ****   osThreadDef(sensorThread, sensorOps, osPriorityBelowNormal, 0, 512);
 1608              		.loc 5 111 0
 1609 0090 364B     		ldr	r3, .L75+28
 1610 0092 07F12C04 		add	r4, r7, #44
 1611 0096 1D46     		mov	r5, r3
 1612 0098 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1613 009a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1614 009c 2B68     		ldr	r3, [r5]
 1615 009e 2360     		str	r3, [r4]
 112:Src/freertos.c ****   sensorThreadHandle = osThreadCreate(osThread(sensorThread), NULL);
 1616              		.loc 5 112 0
 1617 00a0 07F12C03 		add	r3, r7, #44
 1618 00a4 0021     		movs	r1, #0
 1619 00a6 1846     		mov	r0, r3
 1620 00a8 FFF7FEFF 		bl	osThreadCreate
 1621 00ac 0246     		mov	r2, r0
 1622 00ae 304B     		ldr	r3, .L75+32
 1623 00b0 1A60     		str	r2, [r3]
 113:Src/freertos.c **** 
 114:Src/freertos.c ****   /* definition and creation of spiComThread */
 115:Src/freertos.c ****   osThreadDef(spiComThread, spiComOps, osPriorityAboveNormal, 0, 1024);
 1624              		.loc 5 115 0
 1625 00b2 304B     		ldr	r3, .L75+36
 1626 00b4 07F11804 		add	r4, r7, #24
ARM GAS  /tmp/ccTbVEza.s 			page 39


 1627 00b8 1D46     		mov	r5, r3
 1628 00ba 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1629 00bc 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1630 00be 2B68     		ldr	r3, [r5]
 1631 00c0 2360     		str	r3, [r4]
 116:Src/freertos.c ****   spiComThreadHandle = osThreadCreate(osThread(spiComThread), NULL);
 1632              		.loc 5 116 0
 1633 00c2 07F11803 		add	r3, r7, #24
 1634 00c6 0021     		movs	r1, #0
 1635 00c8 1846     		mov	r0, r3
 1636 00ca FFF7FEFF 		bl	osThreadCreate
 1637 00ce 0246     		mov	r2, r0
 1638 00d0 294B     		ldr	r3, .L75+40
 1639 00d2 1A60     		str	r2, [r3]
 117:Src/freertos.c **** 
 118:Src/freertos.c ****   osThreadDef(motorThread, motorOps, osPriorityNormal, 0, 512);
 1640              		.loc 5 118 0
 1641 00d4 294B     		ldr	r3, .L75+44
 1642 00d6 3C1D     		adds	r4, r7, #4
 1643 00d8 1D46     		mov	r5, r3
 1644 00da 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1645 00dc 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1646 00de 2B68     		ldr	r3, [r5]
 1647 00e0 2360     		str	r3, [r4]
 119:Src/freertos.c ****   motorThreadHandle = osThreadCreate(osThread(motorThread), NULL);
 1648              		.loc 5 119 0
 1649 00e2 3B1D     		adds	r3, r7, #4
 1650 00e4 0021     		movs	r1, #0
 1651 00e6 1846     		mov	r0, r3
 1652 00e8 FFF7FEFF 		bl	osThreadCreate
 1653 00ec 0246     		mov	r2, r0
 1654 00ee 244B     		ldr	r3, .L75+48
 1655 00f0 1A60     		str	r2, [r3]
 120:Src/freertos.c **** 
 121:Src/freertos.c **** 
 122:Src/freertos.c ****   EnvironmentData = malloc(sizeof(ENVIRONMENT_DATA_FORMAT));
 1656              		.loc 5 122 0
 1657 00f2 7820     		movs	r0, #120
 1658 00f4 FFF7FEFF 		bl	malloc
 1659 00f8 0346     		mov	r3, r0
 1660 00fa 1A46     		mov	r2, r3
 1661 00fc 214B     		ldr	r3, .L75+52
 1662 00fe 1A60     		str	r2, [r3]
 123:Src/freertos.c ****   ControlData = malloc(sizeof(CONTROL_DATA_FORMAT));
 1663              		.loc 5 123 0
 1664 0100 7820     		movs	r0, #120
 1665 0102 FFF7FEFF 		bl	malloc
 1666 0106 0346     		mov	r3, r0
 1667 0108 1A46     		mov	r2, r3
 1668 010a 1F4B     		ldr	r3, .L75+56
 1669 010c 1A60     		str	r2, [r3]
 124:Src/freertos.c ****   UpdateFile = malloc(sizeof(UPDATE_FILE_FORMAT));
 1670              		.loc 5 124 0
 1671 010e 7420     		movs	r0, #116
 1672 0110 FFF7FEFF 		bl	malloc
 1673 0114 0346     		mov	r3, r0
 1674 0116 1A46     		mov	r2, r3
ARM GAS  /tmp/ccTbVEza.s 			page 40


 1675 0118 1C4B     		ldr	r3, .L75+60
 1676 011a 1A60     		str	r2, [r3]
 125:Src/freertos.c **** 
 126:Src/freertos.c ****   SpiRxData = malloc(sizeof(SPI_TRANSFER_FORMAT));
 1677              		.loc 5 126 0
 1678 011c 7820     		movs	r0, #120
 1679 011e FFF7FEFF 		bl	malloc
 1680 0122 0346     		mov	r3, r0
 1681 0124 1A46     		mov	r2, r3
 1682 0126 1A4B     		ldr	r3, .L75+64
 1683 0128 1A60     		str	r2, [r3]
 127:Src/freertos.c **** 
 128:Src/freertos.c ****   SpiTxData = malloc(sizeof(SPI_TRANSFER_FORMAT));
 1684              		.loc 5 128 0
 1685 012a 7820     		movs	r0, #120
 1686 012c FFF7FEFF 		bl	malloc
 1687 0130 0346     		mov	r3, r0
 1688 0132 1A46     		mov	r2, r3
 1689 0134 174B     		ldr	r3, .L75+68
 1690 0136 1A60     		str	r2, [r3]
 129:Src/freertos.c ****   SpiCheckData = malloc(sizeof(SPI_TRANSFER_FORMAT));
 1691              		.loc 5 129 0
 1692 0138 7820     		movs	r0, #120
 1693 013a FFF7FEFF 		bl	malloc
 1694 013e 0346     		mov	r3, r0
 1695 0140 1A46     		mov	r2, r3
 1696 0142 154B     		ldr	r3, .L75+72
 1697 0144 1A60     		str	r2, [r3]
 130:Src/freertos.c **** 
 131:Src/freertos.c **** 
 132:Src/freertos.c **** }
 1698              		.loc 5 132 0
 1699 0146 00BF     		nop
 1700 0148 6837     		adds	r7, r7, #104
 1701              	.LCFI43:
 1702              		.cfi_def_cfa_offset 16
 1703 014a BD46     		mov	sp, r7
 1704              	.LCFI44:
 1705              		.cfi_def_cfa_register 13
 1706              		@ sp needed
 1707 014c B0BD     		pop	{r4, r5, r7, pc}
 1708              	.L76:
 1709 014e 00BF     		.align	2
 1710              	.L75:
 1711 0150 00000000 		.word	spiMutexHandle
 1712 0154 00000000 		.word	uartMutexHandle
 1713 0158 00000000 		.word	memoryMutexHandle
 1714 015c 00000000 		.word	uartSemaphoreHandle
 1715 0160 00000000 		.word	spiSemaphoreHandle
 1716 0164 9C000000 		.word	.LC17
 1717 0168 00000000 		.word	gpsThreadHandle
 1718 016c C0000000 		.word	.LC18
 1719 0170 00000000 		.word	sensorThreadHandle
 1720 0174 E4000000 		.word	.LC19
 1721 0178 00000000 		.word	spiComThreadHandle
 1722 017c 04010000 		.word	.LC20
 1723 0180 00000000 		.word	motorThreadHandle
ARM GAS  /tmp/ccTbVEza.s 			page 41


 1724 0184 00000000 		.word	EnvironmentData
 1725 0188 00000000 		.word	ControlData
 1726 018c 00000000 		.word	UpdateFile
 1727 0190 00000000 		.word	SpiRxData
 1728 0194 00000000 		.word	SpiTxData
 1729 0198 00000000 		.word	SpiCheckData
 1730              		.cfi_endproc
 1731              	.LFE151:
 1733              		.text
 1734              	.Letext0:
 1735              		.file 6 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stdarg.h"
 1736              		.file 7 "/usr/include/newlib/machine/_default_types.h"
 1737              		.file 8 "/usr/include/newlib/sys/lock.h"
 1738              		.file 9 "/usr/include/newlib/sys/_types.h"
 1739              		.file 10 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 1740              		.file 11 "/usr/include/newlib/sys/reent.h"
 1741              		.file 12 "<built-in>"
 1742              		.file 13 "/usr/include/newlib/sys/_stdint.h"
 1743              		.file 14 "Inc/main.h"
 1744              		.file 15 "Drivers/CMSIS/Include/core_cm7.h"
 1745              		.file 16 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 1746              		.file 17 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f746xx.h"
 1747              		.file 18 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 1748              		.file 19 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 1749              		.file 20 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_spi.h"
 1750              		.file 21 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim.h"
 1751              		.file 22 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_uart.h"
 1752              		.file 23 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h"
 1753              		.file 24 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 1754              		.file 25 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 1755              		.file 26 "Middlewares/Third_Party/FreeRTOS/Source/include/semphr.h"
 1756              		.file 27 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 1757              		.file 28 "Inc/gps.h"
 1758              		.file 29 "Inc/sensor.h"
 1759              		.file 30 "Inc/motor.h"
 1760              		.file 31 "Inc/usart.h"
 1761              		.file 32 "Inc/spi.h"
 1762              		.file 33 "Inc/tim.h"
 1763              		.file 34 "Inc/freertos.h"
ARM GAS  /tmp/ccTbVEza.s 			page 42


DEFINED SYMBOLS
                            *ABS*:0000000000000000 freertos.c
                            *COM*:00000000000001a0 gpsData
                            *COM*:0000000000000014 sensorValues
                            *COM*:0000000000000008 motor1
                            *COM*:0000000000000008 motor2
                            *COM*:0000000000000008 motor3
                            *COM*:0000000000000008 motor4
                            *COM*:0000000000000004 gpsThreadHandle
                            *COM*:0000000000000004 sensorThreadHandle
                            *COM*:0000000000000004 spiComThreadHandle
                            *COM*:0000000000000004 motorThreadHandle
                            *COM*:0000000000000004 spiMutexHandle
                            *COM*:0000000000000004 uartMutexHandle
                            *COM*:0000000000000004 memoryMutexHandle
                            *COM*:0000000000000004 spiSemaphoreHandle
                            *COM*:0000000000000004 uartSemaphoreHandle
                            *COM*:0000000000000004 SpiCheckData
                            *COM*:0000000000000004 SpiTxData
                            *COM*:0000000000000004 SpiRxData
                            *COM*:0000000000000004 EnvironmentData
                            *COM*:0000000000000004 ControlData
                            *COM*:0000000000000004 UpdateFile
                            *COM*:0000000000000001 rx_buf
     /tmp/ccTbVEza.s:40     .text.UART4_IRQHandler:0000000000000000 $t
     /tmp/ccTbVEza.s:47     .text.UART4_IRQHandler:0000000000000000 UART4_IRQHandler
     /tmp/ccTbVEza.s:77     .text.UART4_IRQHandler:000000000000001c $d
     /tmp/ccTbVEza.s:83     .rodata:0000000000000000 $d
     /tmp/ccTbVEza.s:90     .text.gpsOps:0000000000000000 $t
     /tmp/ccTbVEza.s:97     .text.gpsOps:0000000000000000 gpsOps
     /tmp/ccTbVEza.s:1394   .text.mprintf:0000000000000000 mprintf
     /tmp/ccTbVEza.s:204    .text.gpsOps:00000000000000a8 $d
     /tmp/ccTbVEza.s:216    .text.writeFlash:0000000000000000 $t
     /tmp/ccTbVEza.s:223    .text.writeFlash:0000000000000000 writeFlash
     /tmp/ccTbVEza.s:267    .text.readFlash:0000000000000000 $t
     /tmp/ccTbVEza.s:274    .text.readFlash:0000000000000000 readFlash
     /tmp/ccTbVEza.s:316    .text.SPI1_IRQHandler:0000000000000000 $t
     /tmp/ccTbVEza.s:323    .text.SPI1_IRQHandler:0000000000000000 SPI1_IRQHandler
     /tmp/ccTbVEza.s:352    .text.SPI1_IRQHandler:000000000000001c $d
     /tmp/ccTbVEza.s:374    .text.spiComOps:0000000000000000 $t
     /tmp/ccTbVEza.s:381    .text.spiComOps:0000000000000000 spiComOps
     /tmp/ccTbVEza.s:663    .text.spiComOps:00000000000001c8 $d
     /tmp/ccTbVEza.s:671    .text.spiComOps:00000000000001e0 $t
     /tmp/ccTbVEza.s:1033   .text.spiComOps:0000000000000488 $d
     /tmp/ccTbVEza.s:1053   .text.spiComOps:00000000000004d0 $t
     /tmp/ccTbVEza.s:1104   .text.spiComOps:0000000000000524 $d
     /tmp/ccTbVEza.s:1115   .text.sensorOps:0000000000000000 $t
     /tmp/ccTbVEza.s:1122   .text.sensorOps:0000000000000000 sensorOps
     /tmp/ccTbVEza.s:1202   .text.sensorOps:0000000000000074 $d
     /tmp/ccTbVEza.s:1215   .text.motorOps:0000000000000000 $t
     /tmp/ccTbVEza.s:1222   .text.motorOps:0000000000000000 motorOps
     /tmp/ccTbVEza.s:1314   .text.motorOps:0000000000000078 $d
     /tmp/ccTbVEza.s:1322   .text.vprint:0000000000000000 $t
     /tmp/ccTbVEza.s:1329   .text.vprint:0000000000000000 vprint
     /tmp/ccTbVEza.s:1382   .text.vprint:0000000000000044 $d
     /tmp/ccTbVEza.s:1387   .text.mprintf:0000000000000000 $t
     /tmp/ccTbVEza.s:1464   .text.mprintf:0000000000000040 $d
ARM GAS  /tmp/ccTbVEza.s 			page 43


     /tmp/ccTbVEza.s:1514   .text.MX_FREERTOS_Init:0000000000000000 $t
     /tmp/ccTbVEza.s:1521   .text.MX_FREERTOS_Init:0000000000000000 MX_FREERTOS_Init
     /tmp/ccTbVEza.s:1711   .text.MX_FREERTOS_Init:0000000000000150 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_UART_IRQHandler
xQueueGiveFromISR
huart4
gpsInit
xQueueGenericReceive
checkGpsData
xQueueGenericSend
HAL_GPIO_TogglePin
enableGps
receiveGpsData
HAL_UART_Receive_IT
HAL_FLASH_Program
HAL_SPI_IRQHandler
hspi1
HAL_SPI_TransmitReceive_IT
HAL_SPI_GetState
malloc
HAL_FLASH_Unlock
FLASH_Erase_Sector
HAL_FLASH_Lock
osDelay
free
HAL_NVIC_SystemReset
memcpy
sensorInit
HAL_TIM_PWM_Start
readAllSensors
htim3
motor1Drive
motor2Drive
vsprintf
strlen
HAL_UART_Transmit
huart1
osMutexCreate
osSemaphoreCreate
osThreadCreate
