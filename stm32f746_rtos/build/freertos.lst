ARM GAS  /tmp/ccImugAR.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"freertos.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	gpsData,416,4
  18              		.comm	sensorValues,20,4
  19              		.comm	motor1,8,4
  20              		.comm	motor2,8,4
  21              		.comm	motor3,8,4
  22              		.comm	motor4,8,4
  23              		.comm	gpsThreadHandle,4,4
  24              		.comm	sensorThreadHandle,4,4
  25              		.comm	spiComThreadHandle,4,4
  26              		.comm	motorThreadHandle,4,4
  27              		.comm	spiMutexHandle,4,4
  28              		.comm	uartMutexHandle,4,4
  29              		.comm	memoryMutexHandle,4,4
  30              		.comm	spiSemaphoreHandle,4,4
  31              		.comm	uartSemaphoreHandle,4,4
  32              		.comm	SpiCheckData,4,4
  33              		.comm	SpiTxData,4,4
  34              		.comm	SpiRxData,4,4
  35              		.comm	EnvironmentData,4,4
  36              		.comm	ControlData,4,4
  37              		.comm	UpdateFile,4,4
  38              		.comm	rx_buf,1,1
  39              		.section	.text.UART4_IRQHandler,"ax",%progbits
  40              		.align	1
  41              		.global	UART4_IRQHandler
  42              		.syntax unified
  43              		.thumb
  44              		.thumb_func
  45              		.fpu fpv4-sp-d16
  47              	UART4_IRQHandler:
  48              	.LFB141:
  49              		.file 1 "Src/gpsops.c"
   1:Src/gpsops.c  **** #include "gpsops.h"
   2:Src/gpsops.c  **** #include "stdlib.h"
   3:Src/gpsops.c  **** 
   4:Src/gpsops.c  **** 
   5:Src/gpsops.c  **** void UART4_IRQHandler(void)
   6:Src/gpsops.c  **** {
  50              		.loc 1 6 0
  51              		.cfi_startproc
  52              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccImugAR.s 			page 2


  53              		@ frame_needed = 1, uses_anonymous_args = 0
  54 0000 80B5     		push	{r7, lr}
  55              	.LCFI0:
  56              		.cfi_def_cfa_offset 8
  57              		.cfi_offset 7, -8
  58              		.cfi_offset 14, -4
  59 0002 00AF     		add	r7, sp, #0
  60              	.LCFI1:
  61              		.cfi_def_cfa_register 7
   7:Src/gpsops.c  **** 
   8:Src/gpsops.c  **** 
   9:Src/gpsops.c  ****     HAL_UART_IRQHandler(&huart4);
  62              		.loc 1 9 0
  63 0004 0548     		ldr	r0, .L2
  64 0006 FFF7FEFF 		bl	HAL_UART_IRQHandler
  10:Src/gpsops.c  **** 
  11:Src/gpsops.c  ****     xSemaphoreGiveFromISR(uartSemaphoreHandle, NULL);
  65              		.loc 1 11 0
  66 000a 054B     		ldr	r3, .L2+4
  67 000c 1B68     		ldr	r3, [r3]
  68 000e 0021     		movs	r1, #0
  69 0010 1846     		mov	r0, r3
  70 0012 FFF7FEFF 		bl	xQueueGiveFromISR
  12:Src/gpsops.c  **** 
  13:Src/gpsops.c  **** }
  71              		.loc 1 13 0
  72 0016 00BF     		nop
  73 0018 80BD     		pop	{r7, pc}
  74              	.L3:
  75 001a 00BF     		.align	2
  76              	.L2:
  77 001c 00000000 		.word	huart4
  78 0020 00000000 		.word	uartSemaphoreHandle
  79              		.cfi_endproc
  80              	.LFE141:
  82              		.section	.rodata
  83              		.align	2
  84              	.LC8:
  85 0000 6770734F 		.ascii	"gpsOps\015\012\000"
  85      70730D0A 
  85      00
  86 0009 000000   		.align	2
  87              	.LC9:
  88 000c 6770734F 		.ascii	"gpsOps Crash \015\012\000"
  88      70732043 
  88      72617368 
  88      200D0A00 
  89              		.section	.text.gpsOps,"ax",%progbits
  90              		.align	1
  91              		.global	gpsOps
  92              		.syntax unified
  93              		.thumb
  94              		.thumb_func
  95              		.fpu fpv4-sp-d16
  97              	gpsOps:
  98              	.LFB142:
  14:Src/gpsops.c  **** 
ARM GAS  /tmp/ccImugAR.s 			page 3


  15:Src/gpsops.c  **** 
  16:Src/gpsops.c  **** 
  17:Src/gpsops.c  **** void gpsOps(void const *argument)
  18:Src/gpsops.c  **** {
  99              		.loc 1 18 0
 100              		.cfi_startproc
 101              		@ args = 0, pretend = 0, frame = 16
 102              		@ frame_needed = 1, uses_anonymous_args = 0
 103 0000 80B5     		push	{r7, lr}
 104              	.LCFI2:
 105              		.cfi_def_cfa_offset 8
 106              		.cfi_offset 7, -8
 107              		.cfi_offset 14, -4
 108 0002 84B0     		sub	sp, sp, #16
 109              	.LCFI3:
 110              		.cfi_def_cfa_offset 24
 111 0004 00AF     		add	r7, sp, #0
 112              	.LCFI4:
 113              		.cfi_def_cfa_register 7
 114 0006 7860     		str	r0, [r7, #4]
  19:Src/gpsops.c  **** 
  20:Src/gpsops.c  ****     mprintf("gpsOps\r\n");
 115              		.loc 1 20 0
 116 0008 2748     		ldr	r0, .L11
 117 000a FFF7FEFF 		bl	mprintf
  21:Src/gpsops.c  **** 
  22:Src/gpsops.c  ****     unsigned char rx_data;
  23:Src/gpsops.c  **** 
  24:Src/gpsops.c  ****     gpsInit();
 118              		.loc 1 24 0
 119 000e FFF7FEFF 		bl	gpsInit
 120              	.L10:
  25:Src/gpsops.c  **** 
  26:Src/gpsops.c  ****   while(1)
  27:Src/gpsops.c  ****   {
  28:Src/gpsops.c  **** 
  29:Src/gpsops.c  ****       if( xSemaphoreTake(uartSemaphoreHandle, 1000) == pdPASS)
 121              		.loc 1 29 0
 122 0012 264B     		ldr	r3, .L11+4
 123 0014 1868     		ldr	r0, [r3]
 124 0016 0023     		movs	r3, #0
 125 0018 4FF47A72 		mov	r2, #1000
 126 001c 0021     		movs	r1, #0
 127 001e FFF7FEFF 		bl	xQueueGenericReceive
 128 0022 0346     		mov	r3, r0
 129 0024 012B     		cmp	r3, #1
 130 0026 3AD1     		bne	.L5
  30:Src/gpsops.c  ****       {
  31:Src/gpsops.c  **** 
  32:Src/gpsops.c  **** 
  33:Src/gpsops.c  ****         if(checkGpsData() == GPS_READY)
 131              		.loc 1 33 0
 132 0028 FFF7FEFF 		bl	checkGpsData
 133 002c 0346     		mov	r3, r0
 134 002e 012B     		cmp	r3, #1
 135 0030 2BD1     		bne	.L6
  34:Src/gpsops.c  ****         {
ARM GAS  /tmp/ccImugAR.s 			page 4


  35:Src/gpsops.c  **** 
  36:Src/gpsops.c  ****                xSemaphoreTake(spiMutexHandle, portMAX_DELAY);
 136              		.loc 1 36 0
 137 0032 1F4B     		ldr	r3, .L11+8
 138 0034 1868     		ldr	r0, [r3]
 139 0036 0023     		movs	r3, #0
 140 0038 4FF0FF32 		mov	r2, #-1
 141 003c 0021     		movs	r1, #0
 142 003e FFF7FEFF 		bl	xQueueGenericReceive
 143              	.LBB2:
  37:Src/gpsops.c  **** 
  38:Src/gpsops.c  ****                for(int i=0; i<99; i++)
 144              		.loc 1 38 0
 145 0042 0023     		movs	r3, #0
 146 0044 FB60     		str	r3, [r7, #12]
 147 0046 0FE0     		b	.L7
 148              	.L8:
  39:Src/gpsops.c  ****                    EnvironmentData -> gps_string[i] = gpsData.gprmc_body[i];
 149              		.loc 1 39 0 discriminator 3
 150 0048 1A4B     		ldr	r3, .L11+12
 151 004a 1A68     		ldr	r2, [r3]
 152 004c 1A49     		ldr	r1, .L11+16
 153 004e FB68     		ldr	r3, [r7, #12]
 154 0050 0B44     		add	r3, r3, r1
 155 0052 03F59C73 		add	r3, r3, #312
 156 0056 1B78     		ldrb	r3, [r3]
 157 0058 D9B2     		uxtb	r1, r3
 158 005a FB68     		ldr	r3, [r7, #12]
 159 005c 1344     		add	r3, r3, r2
 160 005e 0A46     		mov	r2, r1
 161 0060 1A70     		strb	r2, [r3]
  38:Src/gpsops.c  ****                    EnvironmentData -> gps_string[i] = gpsData.gprmc_body[i];
 162              		.loc 1 38 0 discriminator 3
 163 0062 FB68     		ldr	r3, [r7, #12]
 164 0064 0133     		adds	r3, r3, #1
 165 0066 FB60     		str	r3, [r7, #12]
 166              	.L7:
  38:Src/gpsops.c  ****                    EnvironmentData -> gps_string[i] = gpsData.gprmc_body[i];
 167              		.loc 1 38 0 is_stmt 0 discriminator 1
 168 0068 FB68     		ldr	r3, [r7, #12]
 169 006a 622B     		cmp	r3, #98
 170 006c ECDD     		ble	.L8
 171              	.LBE2:
  40:Src/gpsops.c  **** 
  41:Src/gpsops.c  ****                xSemaphoreGive(spiMutexHandle);
 172              		.loc 1 41 0 is_stmt 1
 173 006e 104B     		ldr	r3, .L11+8
 174 0070 1868     		ldr	r0, [r3]
 175 0072 0023     		movs	r3, #0
 176 0074 0022     		movs	r2, #0
 177 0076 0021     		movs	r1, #0
 178 0078 FFF7FEFF 		bl	xQueueGenericSend
  42:Src/gpsops.c  **** 
  43:Src/gpsops.c  **** 
  44:Src/gpsops.c  **** 
  45:Src/gpsops.c  ****            HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 179              		.loc 1 45 0
ARM GAS  /tmp/ccImugAR.s 			page 5


 180 007c 4FF48051 		mov	r1, #4096
 181 0080 0E48     		ldr	r0, .L11+20
 182 0082 FFF7FEFF 		bl	HAL_GPIO_TogglePin
  46:Src/gpsops.c  **** 
  47:Src/gpsops.c  ****            enableGps();
 183              		.loc 1 47 0
 184 0086 FFF7FEFF 		bl	enableGps
 185              	.L6:
  48:Src/gpsops.c  **** 
  49:Src/gpsops.c  ****         }
  50:Src/gpsops.c  **** 
  51:Src/gpsops.c  **** 
  52:Src/gpsops.c  ****           receiveGpsData();
 186              		.loc 1 52 0
 187 008a FFF7FEFF 		bl	receiveGpsData
  53:Src/gpsops.c  **** 
  54:Src/gpsops.c  ****           HAL_UART_Receive_IT(&huart4, (uint8_t *)&rx_data, 1);
 188              		.loc 1 54 0
 189 008e 07F10B03 		add	r3, r7, #11
 190 0092 0122     		movs	r2, #1
 191 0094 1946     		mov	r1, r3
 192 0096 0A48     		ldr	r0, .L11+24
 193 0098 FFF7FEFF 		bl	HAL_UART_Receive_IT
 194 009c B9E7     		b	.L10
 195              	.L5:
  55:Src/gpsops.c  **** 
  56:Src/gpsops.c  **** 
  57:Src/gpsops.c  ****       }
  58:Src/gpsops.c  ****       else
  59:Src/gpsops.c  ****       {
  60:Src/gpsops.c  **** 
  61:Src/gpsops.c  ****           mprintf("gpsOps Crash \r\n");
 196              		.loc 1 61 0
 197 009e 0948     		ldr	r0, .L11+28
 198 00a0 FFF7FEFF 		bl	mprintf
  29:Src/gpsops.c  ****       {
 199              		.loc 1 29 0
 200 00a4 B5E7     		b	.L10
 201              	.L12:
 202 00a6 00BF     		.align	2
 203              	.L11:
 204 00a8 00000000 		.word	.LC8
 205 00ac 00000000 		.word	uartSemaphoreHandle
 206 00b0 00000000 		.word	spiMutexHandle
 207 00b4 00000000 		.word	EnvironmentData
 208 00b8 00000000 		.word	gpsData
 209 00bc 00040240 		.word	1073873920
 210 00c0 00000000 		.word	huart4
 211 00c4 0C000000 		.word	.LC9
 212              		.cfi_endproc
 213              	.LFE142:
 215              		.global	NextUpdateDataPackage
 216              		.section	.data.NextUpdateDataPackage,"aw",%progbits
 217              		.align	2
 220              	NextUpdateDataPackage:
 221 0000 01000000 		.word	1
 222              		.global	CurrentUpdateDataPackage
ARM GAS  /tmp/ccImugAR.s 			page 6


 223              		.section	.data.CurrentUpdateDataPackage,"aw",%progbits
 224              		.align	2
 227              	CurrentUpdateDataPackage:
 228 0000 01000000 		.word	1
 229              		.global	UpdateIsDone
 230              		.section	.bss.UpdateIsDone,"aw",%nobits
 233              	UpdateIsDone:
 234 0000 00       		.space	1
 235              		.section	.text.writeFlash,"ax",%progbits
 236              		.align	1
 237              		.global	writeFlash
 238              		.syntax unified
 239              		.thumb
 240              		.thumb_func
 241              		.fpu fpv4-sp-d16
 243              	writeFlash:
 244              	.LFB143:
 245              		.file 2 "Src/spiops.c"
   1:Src/spiops.c  **** #include "spiops.h"
   2:Src/spiops.c  **** #include "stdlib.h"
   3:Src/spiops.c  **** 
   4:Src/spiops.c  **** #define SECTOR6_ADDRESS 0x8080000
   5:Src/spiops.c  **** 
   6:Src/spiops.c  **** uint32_t NextUpdateDataPackage = 1;
   7:Src/spiops.c  **** uint32_t CurrentUpdateDataPackage = 1;
   8:Src/spiops.c  **** unsigned char UpdateIsDone = 0;
   9:Src/spiops.c  **** 
  10:Src/spiops.c  **** 
  11:Src/spiops.c  **** void writeFlash(uint8_t Data, long Address)
  12:Src/spiops.c  **** {
 246              		.loc 2 12 0
 247              		.cfi_startproc
 248              		@ args = 0, pretend = 0, frame = 8
 249              		@ frame_needed = 1, uses_anonymous_args = 0
 250 0000 90B5     		push	{r4, r7, lr}
 251              	.LCFI5:
 252              		.cfi_def_cfa_offset 12
 253              		.cfi_offset 4, -12
 254              		.cfi_offset 7, -8
 255              		.cfi_offset 14, -4
 256 0002 83B0     		sub	sp, sp, #12
 257              	.LCFI6:
 258              		.cfi_def_cfa_offset 24
 259 0004 00AF     		add	r7, sp, #0
 260              	.LCFI7:
 261              		.cfi_def_cfa_register 7
 262 0006 0346     		mov	r3, r0
 263 0008 3960     		str	r1, [r7]
 264 000a FB71     		strb	r3, [r7, #7]
  13:Src/spiops.c  **** 
  14:Src/spiops.c  ****      HAL_FLASH_Program(TYPEPROGRAM_BYTE, Address , (uint8_t) Data);
 265              		.loc 2 14 0
 266 000c 3968     		ldr	r1, [r7]
 267 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 268 0010 4FF00004 		mov	r4, #0
 269 0014 1A46     		mov	r2, r3
 270 0016 2346     		mov	r3, r4
ARM GAS  /tmp/ccImugAR.s 			page 7


 271 0018 0020     		movs	r0, #0
 272 001a FFF7FEFF 		bl	HAL_FLASH_Program
  15:Src/spiops.c  **** 
  16:Src/spiops.c  **** }
 273              		.loc 2 16 0
 274 001e 00BF     		nop
 275 0020 0C37     		adds	r7, r7, #12
 276              	.LCFI8:
 277              		.cfi_def_cfa_offset 12
 278 0022 BD46     		mov	sp, r7
 279              	.LCFI9:
 280              		.cfi_def_cfa_register 13
 281              		@ sp needed
 282 0024 90BD     		pop	{r4, r7, pc}
 283              		.cfi_endproc
 284              	.LFE143:
 286              		.section	.text.readFlash,"ax",%progbits
 287              		.align	1
 288              		.global	readFlash
 289              		.syntax unified
 290              		.thumb
 291              		.thumb_func
 292              		.fpu fpv4-sp-d16
 294              	readFlash:
 295              	.LFB144:
  17:Src/spiops.c  **** 
  18:Src/spiops.c  **** 
  19:Src/spiops.c  **** 
  20:Src/spiops.c  **** uint8_t readFlash(int Address)
  21:Src/spiops.c  **** {
 296              		.loc 2 21 0
 297              		.cfi_startproc
 298              		@ args = 0, pretend = 0, frame = 16
 299              		@ frame_needed = 1, uses_anonymous_args = 0
 300              		@ link register save eliminated.
 301 0000 80B4     		push	{r7}
 302              	.LCFI10:
 303              		.cfi_def_cfa_offset 4
 304              		.cfi_offset 7, -4
 305 0002 85B0     		sub	sp, sp, #20
 306              	.LCFI11:
 307              		.cfi_def_cfa_offset 24
 308 0004 00AF     		add	r7, sp, #0
 309              	.LCFI12:
 310              		.cfi_def_cfa_register 7
 311 0006 7860     		str	r0, [r7, #4]
  22:Src/spiops.c  **** 
  23:Src/spiops.c  ****     uint8_t flash_data;
  24:Src/spiops.c  **** 
  25:Src/spiops.c  ****     flash_data = *(uint8_t *)Address;
 312              		.loc 2 25 0
 313 0008 7B68     		ldr	r3, [r7, #4]
 314 000a 1B78     		ldrb	r3, [r3]
 315 000c FB73     		strb	r3, [r7, #15]
  26:Src/spiops.c  **** 
  27:Src/spiops.c  ****     return flash_data;
 316              		.loc 2 27 0
ARM GAS  /tmp/ccImugAR.s 			page 8


 317 000e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
  28:Src/spiops.c  **** 
  29:Src/spiops.c  **** }
 318              		.loc 2 29 0
 319 0010 1846     		mov	r0, r3
 320 0012 1437     		adds	r7, r7, #20
 321              	.LCFI13:
 322              		.cfi_def_cfa_offset 4
 323 0014 BD46     		mov	sp, r7
 324              	.LCFI14:
 325              		.cfi_def_cfa_register 13
 326              		@ sp needed
 327 0016 5DF8047B 		ldr	r7, [sp], #4
 328              	.LCFI15:
 329              		.cfi_restore 7
 330              		.cfi_def_cfa_offset 0
 331 001a 7047     		bx	lr
 332              		.cfi_endproc
 333              	.LFE144:
 335              		.section	.text.SPI1_IRQHandler,"ax",%progbits
 336              		.align	1
 337              		.global	SPI1_IRQHandler
 338              		.syntax unified
 339              		.thumb
 340              		.thumb_func
 341              		.fpu fpv4-sp-d16
 343              	SPI1_IRQHandler:
 344              	.LFB145:
  30:Src/spiops.c  **** 
  31:Src/spiops.c  **** 
  32:Src/spiops.c  **** 
  33:Src/spiops.c  **** void SPI1_IRQHandler(void)
  34:Src/spiops.c  **** {
 345              		.loc 2 34 0
 346              		.cfi_startproc
 347              		@ args = 0, pretend = 0, frame = 0
 348              		@ frame_needed = 1, uses_anonymous_args = 0
 349 0000 80B5     		push	{r7, lr}
 350              	.LCFI16:
 351              		.cfi_def_cfa_offset 8
 352              		.cfi_offset 7, -8
 353              		.cfi_offset 14, -4
 354 0002 00AF     		add	r7, sp, #0
 355              	.LCFI17:
 356              		.cfi_def_cfa_register 7
  35:Src/spiops.c  **** 
  36:Src/spiops.c  ****   HAL_SPI_IRQHandler(&hspi1);
 357              		.loc 2 36 0
 358 0004 0548     		ldr	r0, .L17
 359 0006 FFF7FEFF 		bl	HAL_SPI_IRQHandler
  37:Src/spiops.c  **** 
  38:Src/spiops.c  ****   xSemaphoreGiveFromISR(spiSemaphoreHandle, NULL);
 360              		.loc 2 38 0
 361 000a 054B     		ldr	r3, .L17+4
 362 000c 1B68     		ldr	r3, [r3]
 363 000e 0021     		movs	r1, #0
 364 0010 1846     		mov	r0, r3
ARM GAS  /tmp/ccImugAR.s 			page 9


 365 0012 FFF7FEFF 		bl	xQueueGiveFromISR
  39:Src/spiops.c  **** 
  40:Src/spiops.c  **** }
 366              		.loc 2 40 0
 367 0016 00BF     		nop
 368 0018 80BD     		pop	{r7, pc}
 369              	.L18:
 370 001a 00BF     		.align	2
 371              	.L17:
 372 001c 00000000 		.word	hspi1
 373 0020 00000000 		.word	spiSemaphoreHandle
 374              		.cfi_endproc
 375              	.LFE145:
 377              		.section	.rodata
 378              		.align	2
 379              	.LC10:
 380 001c 7370694F 		.ascii	"spiOps\015\012\000"
 380      70730D0A 
 380      00
 381 0025 000000   		.align	2
 382              	.LC11:
 383 0028 55706461 		.ascii	"Update file uploading has been finished.\015\012\000"
 383      74652066 
 383      696C6520 
 383      75706C6F 
 383      6164696E 
 384 0053 00       		.align	2
 385              	.LC12:
 386 0054 52657374 		.ascii	"Restarting...\015\012\000"
 386      61727469 
 386      6E672E2E 
 386      2E0D0A00 
 387              		.section	.text.spiComOps,"ax",%progbits
 388              		.align	1
 389              		.global	spiComOps
 390              		.syntax unified
 391              		.thumb
 392              		.thumb_func
 393              		.fpu fpv4-sp-d16
 395              	spiComOps:
 396              	.LFB146:
  41:Src/spiops.c  **** 
  42:Src/spiops.c  **** 
  43:Src/spiops.c  **** 
  44:Src/spiops.c  **** /* spiComOps function */
  45:Src/spiops.c  **** void spiComOps(void const * argument)
  46:Src/spiops.c  **** {
 397              		.loc 2 46 0
 398              		.cfi_startproc
 399              		@ args = 0, pretend = 0, frame = 16
 400              		@ frame_needed = 1, uses_anonymous_args = 0
 401 0000 80B5     		push	{r7, lr}
 402              	.LCFI18:
 403              		.cfi_def_cfa_offset 8
 404              		.cfi_offset 7, -8
 405              		.cfi_offset 14, -4
 406 0002 84B0     		sub	sp, sp, #16
ARM GAS  /tmp/ccImugAR.s 			page 10


 407              	.LCFI19:
 408              		.cfi_def_cfa_offset 24
 409 0004 00AF     		add	r7, sp, #0
 410              	.LCFI20:
 411              		.cfi_def_cfa_register 7
 412 0006 7860     		str	r0, [r7, #4]
  47:Src/spiops.c  **** 
  48:Src/spiops.c  ****     HAL_SPI_StateTypeDef status;
  49:Src/spiops.c  **** 
  50:Src/spiops.c  ****     short int ret;
  51:Src/spiops.c  ****     short int update_data_available = 0;
 413              		.loc 2 51 0
 414 0008 0023     		movs	r3, #0
 415 000a FB81     		strh	r3, [r7, #14]	@ movhi
  52:Src/spiops.c  ****     short int control_data_available = 0;
 416              		.loc 2 52 0
 417 000c 0023     		movs	r3, #0
 418 000e BB81     		strh	r3, [r7, #12]	@ movhi
  53:Src/spiops.c  **** 
  54:Src/spiops.c  ****     mprintf("spiOps\r\n");
 419              		.loc 2 54 0
 420 0010 4648     		ldr	r0, .L28
 421 0012 FFF7FEFF 		bl	mprintf
  55:Src/spiops.c  **** 
  56:Src/spiops.c  ****     HAL_FLASH_Unlock();
 422              		.loc 2 56 0
 423 0016 FFF7FEFF 		bl	HAL_FLASH_Unlock
  57:Src/spiops.c  ****     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAER
 424              		.loc 2 57 0
 425 001a 454B     		ldr	r3, .L28+4
 426 001c 3322     		movs	r2, #51
 427 001e DA60     		str	r2, [r3, #12]
  58:Src/spiops.c  ****     FLASH_Erase_Sector(FLASH_SECTOR_6, VOLTAGE_RANGE_3);
 428              		.loc 2 58 0
 429 0020 0221     		movs	r1, #2
 430 0022 0620     		movs	r0, #6
 431 0024 FFF7FEFF 		bl	FLASH_Erase_Sector
  59:Src/spiops.c  ****     FLASH_Erase_Sector(FLASH_SECTOR_7, VOLTAGE_RANGE_3);
 432              		.loc 2 59 0
 433 0028 0221     		movs	r1, #2
 434 002a 0720     		movs	r0, #7
 435 002c FFF7FEFF 		bl	FLASH_Erase_Sector
  60:Src/spiops.c  ****     HAL_FLASH_Lock();
 436              		.loc 2 60 0
 437 0030 FFF7FEFF 		bl	HAL_FLASH_Lock
  61:Src/spiops.c  **** 
  62:Src/spiops.c  **** 
  63:Src/spiops.c  ****     HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)SpiTxData, (uint8_t *)SpiRxData,  SPI_TRANSFER_SI
 438              		.loc 2 63 0
 439 0034 3F4B     		ldr	r3, .L28+8
 440 0036 1968     		ldr	r1, [r3]
 441 0038 3F4B     		ldr	r3, .L28+12
 442 003a 1A68     		ldr	r2, [r3]
 443 003c 7823     		movs	r3, #120
 444 003e 3F48     		ldr	r0, .L28+16
 445 0040 FFF7FEFF 		bl	HAL_SPI_TransmitReceive_IT
 446              	.L27:
ARM GAS  /tmp/ccImugAR.s 			page 11


  64:Src/spiops.c  **** 
  65:Src/spiops.c  ****     while(1)
  66:Src/spiops.c  ****     {
  67:Src/spiops.c  **** 
  68:Src/spiops.c  ****         if( xSemaphoreTake(spiSemaphoreHandle, 1) == pdPASS)  // when interrupt is occured
 447              		.loc 2 68 0
 448 0044 3E4B     		ldr	r3, .L28+20
 449 0046 1868     		ldr	r0, [r3]
 450 0048 0023     		movs	r3, #0
 451 004a 0122     		movs	r2, #1
 452 004c 0021     		movs	r1, #0
 453 004e FFF7FEFF 		bl	xQueueGenericReceive
 454 0052 0346     		mov	r3, r0
 455 0054 012B     		cmp	r3, #1
 456 0056 57D1     		bne	.L20
  69:Src/spiops.c  ****         {
  70:Src/spiops.c  **** 
  71:Src/spiops.c  ****             status = HAL_SPI_GetState(&hspi1);
 457              		.loc 2 71 0
 458 0058 3848     		ldr	r0, .L28+16
 459 005a FFF7FEFF 		bl	HAL_SPI_GetState
 460 005e 0346     		mov	r3, r0
 461 0060 FB72     		strb	r3, [r7, #11]
  72:Src/spiops.c  **** 
  73:Src/spiops.c  ****             if(status == HAL_SPI_STATE_READY)
 462              		.loc 2 73 0
 463 0062 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 464 0064 012B     		cmp	r3, #1
 465 0066 23D1     		bne	.L21
  74:Src/spiops.c  ****             {
  75:Src/spiops.c  **** 
  76:Src/spiops.c  ****                 ret = checkIfUpdateData();
 466              		.loc 2 76 0
 467 0068 FFF7FEFF 		bl	checkIfUpdateData
 468 006c 0346     		mov	r3, r0
 469 006e 3B81     		strh	r3, [r7, #8]	@ movhi
  77:Src/spiops.c  **** 
  78:Src/spiops.c  ****                 if(ret == HAL_OK)
 470              		.loc 2 78 0
 471 0070 B7F90830 		ldrsh	r3, [r7, #8]
 472 0074 002B     		cmp	r3, #0
 473 0076 0CD1     		bne	.L22
  79:Src/spiops.c  ****                 {
  80:Src/spiops.c  **** 
  81:Src/spiops.c  ****                     ret = confirmUpdateDataAccuracy();
 474              		.loc 2 81 0
 475 0078 FFF7FEFF 		bl	confirmUpdateDataAccuracy
 476 007c 0346     		mov	r3, r0
 477 007e 3B81     		strh	r3, [r7, #8]	@ movhi
  82:Src/spiops.c  ****                     if(ret == HAL_OK)
 478              		.loc 2 82 0
 479 0080 B7F90830 		ldrsh	r3, [r7, #8]
 480 0084 002B     		cmp	r3, #0
 481 0086 01D1     		bne	.L23
  83:Src/spiops.c  ****                         update_data_available = 1;
 482              		.loc 2 83 0
 483 0088 0123     		movs	r3, #1
ARM GAS  /tmp/ccImugAR.s 			page 12


 484 008a FB81     		strh	r3, [r7, #14]	@ movhi
 485              	.L23:
  84:Src/spiops.c  **** 
  85:Src/spiops.c  ****                     putUpdateDataResponse();
 486              		.loc 2 85 0
 487 008c FFF7FEFF 		bl	putUpdateDataResponse
 488 0090 0EE0     		b	.L21
 489              	.L22:
  86:Src/spiops.c  ****                 }
  87:Src/spiops.c  ****                 else
  88:Src/spiops.c  ****                 {
  89:Src/spiops.c  ****                     ret = checkIfControlData();
 490              		.loc 2 89 0
 491 0092 FFF7FEFF 		bl	checkIfControlData
 492 0096 0346     		mov	r3, r0
 493 0098 3B81     		strh	r3, [r7, #8]	@ movhi
  90:Src/spiops.c  **** 
  91:Src/spiops.c  ****                     if(ret == HAL_OK)
 494              		.loc 2 91 0
 495 009a B7F90830 		ldrsh	r3, [r7, #8]
 496 009e 002B     		cmp	r3, #0
 497 00a0 04D1     		bne	.L24
  92:Src/spiops.c  ****                     {
  93:Src/spiops.c  ****                         control_data_available = 1;
 498              		.loc 2 93 0
 499 00a2 0123     		movs	r3, #1
 500 00a4 BB81     		strh	r3, [r7, #12]	@ movhi
  94:Src/spiops.c  **** 
  95:Src/spiops.c  ****                         putControlDataResponse();
 501              		.loc 2 95 0
 502 00a6 FFF7FEFF 		bl	putControlDataResponse
 503 00aa 01E0     		b	.L21
 504              	.L24:
  96:Src/spiops.c  **** 
  97:Src/spiops.c  ****                     }
  98:Src/spiops.c  ****                     else
  99:Src/spiops.c  ****                     {
 100:Src/spiops.c  ****                         putEnvironmentData();
 505              		.loc 2 100 0
 506 00ac FFF7FEFF 		bl	putEnvironmentData
 507              	.L21:
 101:Src/spiops.c  ****                     }
 102:Src/spiops.c  ****                 }
 103:Src/spiops.c  **** 
 104:Src/spiops.c  ****             }
 105:Src/spiops.c  **** 
 106:Src/spiops.c  ****             HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)SpiTxData, (uint8_t *)SpiRxData,  SPI_TRA
 508              		.loc 2 106 0
 509 00b0 204B     		ldr	r3, .L28+8
 510 00b2 1968     		ldr	r1, [r3]
 511 00b4 204B     		ldr	r3, .L28+12
 512 00b6 1A68     		ldr	r2, [r3]
 513 00b8 7823     		movs	r3, #120
 514 00ba 2048     		ldr	r0, .L28+16
 515 00bc FFF7FEFF 		bl	HAL_SPI_TransmitReceive_IT
 107:Src/spiops.c  **** 
 108:Src/spiops.c  ****             if(UpdateIsDone == 1)
ARM GAS  /tmp/ccImugAR.s 			page 13


 516              		.loc 2 108 0
 517 00c0 204B     		ldr	r3, .L28+24
 518 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 519 00c4 012B     		cmp	r3, #1
 520 00c6 1FD1     		bne	.L20
 109:Src/spiops.c  ****             {
 110:Src/spiops.c  **** 
 111:Src/spiops.c  ****                 UpdateIsDone = 0;
 521              		.loc 2 111 0
 522 00c8 1E4B     		ldr	r3, .L28+24
 523 00ca 0022     		movs	r2, #0
 524 00cc 1A70     		strb	r2, [r3]
 112:Src/spiops.c  **** 
 113:Src/spiops.c  ****                 mprintf("Update file uploading has been finished.\r\n");
 525              		.loc 2 113 0
 526 00ce 1E48     		ldr	r0, .L28+28
 527 00d0 FFF7FEFF 		bl	mprintf
 114:Src/spiops.c  **** 
 115:Src/spiops.c  ****                 mprintf("Restarting...\r\n");
 528              		.loc 2 115 0
 529 00d4 1D48     		ldr	r0, .L28+32
 530 00d6 FFF7FEFF 		bl	mprintf
 116:Src/spiops.c  **** 
 117:Src/spiops.c  ****                 SpiRxData->header = 0;
 531              		.loc 2 117 0
 532 00da 174B     		ldr	r3, .L28+12
 533 00dc 1B68     		ldr	r3, [r3]
 534 00de 0022     		movs	r2, #0
 535 00e0 1A80     		strh	r2, [r3]	@ movhi
 118:Src/spiops.c  ****                 SpiRxData->checksum = 0;
 536              		.loc 2 118 0
 537 00e2 154B     		ldr	r3, .L28+12
 538 00e4 1B68     		ldr	r3, [r3]
 539 00e6 0022     		movs	r2, #0
 540 00e8 A3F87620 		strh	r2, [r3, #118]	@ movhi
 119:Src/spiops.c  ****                 UpdateFile->current_sequence_number = 0;
 541              		.loc 2 119 0
 542 00ec 184B     		ldr	r3, .L28+36
 543 00ee 1B68     		ldr	r3, [r3]
 544 00f0 0022     		movs	r2, #0
 545 00f2 5A60     		str	r2, [r3, #4]
 120:Src/spiops.c  ****                 UpdateFile->total_sequence_number = -1;
 546              		.loc 2 120 0
 547 00f4 164B     		ldr	r3, .L28+36
 548 00f6 1B68     		ldr	r3, [r3]
 549 00f8 4FF0FF32 		mov	r2, #-1
 550 00fc 1A60     		str	r2, [r3]
 121:Src/spiops.c  **** 
 122:Src/spiops.c  **** 
 123:Src/spiops.c  ****                 osDelay(50);
 551              		.loc 2 123 0
 552 00fe 3220     		movs	r0, #50
 553 0100 FFF7FEFF 		bl	osDelay
 124:Src/spiops.c  **** 
 125:Src/spiops.c  ****                 HAL_NVIC_SystemReset();
 554              		.loc 2 125 0
 555 0104 FFF7FEFF 		bl	HAL_NVIC_SystemReset
ARM GAS  /tmp/ccImugAR.s 			page 14


 556              	.L20:
 126:Src/spiops.c  **** 
 127:Src/spiops.c  ****             }
 128:Src/spiops.c  ****         }
 129:Src/spiops.c  **** 
 130:Src/spiops.c  **** 
 131:Src/spiops.c  **** 
 132:Src/spiops.c  **** 
 133:Src/spiops.c  ****         if(update_data_available == 1)
 557              		.loc 2 133 0
 558 0108 B7F90E30 		ldrsh	r3, [r7, #14]
 559 010c 012B     		cmp	r3, #1
 560 010e 04D1     		bne	.L25
 134:Src/spiops.c  ****         {
 135:Src/spiops.c  ****             processUpdateData();
 561              		.loc 2 135 0
 562 0110 FFF7FEFF 		bl	processUpdateData
 136:Src/spiops.c  **** 
 137:Src/spiops.c  ****             update_data_available = 0;
 563              		.loc 2 137 0
 564 0114 0023     		movs	r3, #0
 565 0116 FB81     		strh	r3, [r7, #14]	@ movhi
 566 0118 94E7     		b	.L27
 567              	.L25:
 138:Src/spiops.c  ****         }
 139:Src/spiops.c  ****         else if(control_data_available == 1)
 568              		.loc 2 139 0
 569 011a B7F90C30 		ldrsh	r3, [r7, #12]
 570 011e 012B     		cmp	r3, #1
 571 0120 90D1     		bne	.L27
 140:Src/spiops.c  ****         {
 141:Src/spiops.c  ****             processControlData();
 572              		.loc 2 141 0
 573 0122 FFF7FEFF 		bl	processControlData
 142:Src/spiops.c  **** 
 143:Src/spiops.c  ****             control_data_available = 0;
 574              		.loc 2 143 0
 575 0126 0023     		movs	r3, #0
 576 0128 BB81     		strh	r3, [r7, #12]	@ movhi
  68:Src/spiops.c  ****         {
 577              		.loc 2 68 0
 578 012a 8BE7     		b	.L27
 579              	.L29:
 580              		.align	2
 581              	.L28:
 582 012c 1C000000 		.word	.LC10
 583 0130 003C0240 		.word	1073888256
 584 0134 00000000 		.word	SpiTxData
 585 0138 00000000 		.word	SpiRxData
 586 013c 00000000 		.word	hspi1
 587 0140 00000000 		.word	spiSemaphoreHandle
 588 0144 00000000 		.word	UpdateIsDone
 589 0148 28000000 		.word	.LC11
 590 014c 54000000 		.word	.LC12
 591 0150 00000000 		.word	UpdateFile
 592              		.cfi_endproc
 593              	.LFE146:
ARM GAS  /tmp/ccImugAR.s 			page 15


 595              		.section	.text.checkIfUpdateData,"ax",%progbits
 596              		.align	1
 597              		.global	checkIfUpdateData
 598              		.syntax unified
 599              		.thumb
 600              		.thumb_func
 601              		.fpu fpv4-sp-d16
 603              	checkIfUpdateData:
 604              	.LFB147:
 144:Src/spiops.c  ****         }
 145:Src/spiops.c  **** 
 146:Src/spiops.c  **** 
 147:Src/spiops.c  **** 
 148:Src/spiops.c  **** 
 149:Src/spiops.c  ****     }
 150:Src/spiops.c  **** 
 151:Src/spiops.c  **** }
 152:Src/spiops.c  **** 
 153:Src/spiops.c  **** 
 154:Src/spiops.c  **** 
 155:Src/spiops.c  **** HAL_StatusTypeDef checkIfUpdateData()
 156:Src/spiops.c  **** {
 605              		.loc 2 156 0
 606              		.cfi_startproc
 607              		@ args = 0, pretend = 0, frame = 0
 608              		@ frame_needed = 1, uses_anonymous_args = 0
 609 0000 80B5     		push	{r7, lr}
 610              	.LCFI21:
 611              		.cfi_def_cfa_offset 8
 612              		.cfi_offset 7, -8
 613              		.cfi_offset 14, -4
 614 0002 00AF     		add	r7, sp, #0
 615              	.LCFI22:
 616              		.cfi_def_cfa_register 7
 157:Src/spiops.c  **** 
 158:Src/spiops.c  ****     if((SpiRxData->header & 0xff) == 'U' && ((SpiRxData->header >> 8) & 0xff) == 'P')
 617              		.loc 2 158 0
 618 0004 0D4B     		ldr	r3, .L33
 619 0006 1B68     		ldr	r3, [r3]
 620 0008 1B88     		ldrh	r3, [r3]
 621 000a DBB2     		uxtb	r3, r3
 622 000c 552B     		cmp	r3, #85
 623 000e 12D1     		bne	.L31
 624              		.loc 2 158 0 is_stmt 0 discriminator 1
 625 0010 0A4B     		ldr	r3, .L33
 626 0012 1B68     		ldr	r3, [r3]
 627 0014 1B88     		ldrh	r3, [r3]
 628 0016 1B0A     		lsrs	r3, r3, #8
 629 0018 9BB2     		uxth	r3, r3
 630 001a DBB2     		uxtb	r3, r3
 631 001c 502B     		cmp	r3, #80
 632 001e 0AD1     		bne	.L31
 159:Src/spiops.c  ****     {
 160:Src/spiops.c  **** 
 161:Src/spiops.c  ****         memcpy(UpdateFile, SpiRxData->data, SPI_DATA_SIZE);
 633              		.loc 2 161 0 is_stmt 1
 634 0020 074B     		ldr	r3, .L33+4
ARM GAS  /tmp/ccImugAR.s 			page 16


 635 0022 1868     		ldr	r0, [r3]
 636 0024 054B     		ldr	r3, .L33
 637 0026 1B68     		ldr	r3, [r3]
 638 0028 0233     		adds	r3, r3, #2
 639 002a 7422     		movs	r2, #116
 640 002c 1946     		mov	r1, r3
 641 002e FFF7FEFF 		bl	memcpy
 162:Src/spiops.c  **** 
 163:Src/spiops.c  ****         return HAL_OK;
 642              		.loc 2 163 0
 643 0032 0023     		movs	r3, #0
 644 0034 00E0     		b	.L32
 645              	.L31:
 164:Src/spiops.c  ****     }
 165:Src/spiops.c  ****     else
 166:Src/spiops.c  ****     {
 167:Src/spiops.c  ****         return HAL_ERROR;
 646              		.loc 2 167 0
 647 0036 0123     		movs	r3, #1
 648              	.L32:
 168:Src/spiops.c  ****     }
 169:Src/spiops.c  **** 
 170:Src/spiops.c  **** }
 649              		.loc 2 170 0
 650 0038 1846     		mov	r0, r3
 651 003a 80BD     		pop	{r7, pc}
 652              	.L34:
 653              		.align	2
 654              	.L33:
 655 003c 00000000 		.word	SpiRxData
 656 0040 00000000 		.word	UpdateFile
 657              		.cfi_endproc
 658              	.LFE147:
 660              		.section	.text.checkIfControlData,"ax",%progbits
 661              		.align	1
 662              		.global	checkIfControlData
 663              		.syntax unified
 664              		.thumb
 665              		.thumb_func
 666              		.fpu fpv4-sp-d16
 668              	checkIfControlData:
 669              	.LFB148:
 171:Src/spiops.c  **** 
 172:Src/spiops.c  **** 
 173:Src/spiops.c  **** 
 174:Src/spiops.c  **** HAL_StatusTypeDef checkIfControlData()
 175:Src/spiops.c  **** {
 670              		.loc 2 175 0
 671              		.cfi_startproc
 672              		@ args = 0, pretend = 0, frame = 0
 673              		@ frame_needed = 1, uses_anonymous_args = 0
 674 0000 80B5     		push	{r7, lr}
 675              	.LCFI23:
 676              		.cfi_def_cfa_offset 8
 677              		.cfi_offset 7, -8
 678              		.cfi_offset 14, -4
 679 0002 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccImugAR.s 			page 17


 680              	.LCFI24:
 681              		.cfi_def_cfa_register 7
 176:Src/spiops.c  **** 
 177:Src/spiops.c  ****     if((SpiRxData->header & 0xff) == 'C' && ((SpiRxData->header >> 8) & 0xff) == 'O')
 682              		.loc 2 177 0
 683 0004 0D4B     		ldr	r3, .L38
 684 0006 1B68     		ldr	r3, [r3]
 685 0008 1B88     		ldrh	r3, [r3]
 686 000a DBB2     		uxtb	r3, r3
 687 000c 432B     		cmp	r3, #67
 688 000e 12D1     		bne	.L36
 689              		.loc 2 177 0 is_stmt 0 discriminator 1
 690 0010 0A4B     		ldr	r3, .L38
 691 0012 1B68     		ldr	r3, [r3]
 692 0014 1B88     		ldrh	r3, [r3]
 693 0016 1B0A     		lsrs	r3, r3, #8
 694 0018 9BB2     		uxth	r3, r3
 695 001a DBB2     		uxtb	r3, r3
 696 001c 4F2B     		cmp	r3, #79
 697 001e 0AD1     		bne	.L36
 178:Src/spiops.c  ****     {
 179:Src/spiops.c  **** 
 180:Src/spiops.c  ****         memcpy(ControlData, SpiRxData->data, SPI_DATA_SIZE);
 698              		.loc 2 180 0 is_stmt 1
 699 0020 074B     		ldr	r3, .L38+4
 700 0022 1868     		ldr	r0, [r3]
 701 0024 054B     		ldr	r3, .L38
 702 0026 1B68     		ldr	r3, [r3]
 703 0028 0233     		adds	r3, r3, #2
 704 002a 7422     		movs	r2, #116
 705 002c 1946     		mov	r1, r3
 706 002e FFF7FEFF 		bl	memcpy
 181:Src/spiops.c  **** 
 182:Src/spiops.c  ****         return HAL_OK;
 707              		.loc 2 182 0
 708 0032 0023     		movs	r3, #0
 709 0034 00E0     		b	.L37
 710              	.L36:
 183:Src/spiops.c  **** 
 184:Src/spiops.c  ****     }
 185:Src/spiops.c  ****     else
 186:Src/spiops.c  ****     {
 187:Src/spiops.c  **** 
 188:Src/spiops.c  ****         return HAL_ERROR;
 711              		.loc 2 188 0
 712 0036 0123     		movs	r3, #1
 713              	.L37:
 189:Src/spiops.c  **** 
 190:Src/spiops.c  ****     }
 191:Src/spiops.c  **** }
 714              		.loc 2 191 0
 715 0038 1846     		mov	r0, r3
 716 003a 80BD     		pop	{r7, pc}
 717              	.L39:
 718              		.align	2
 719              	.L38:
 720 003c 00000000 		.word	SpiRxData
ARM GAS  /tmp/ccImugAR.s 			page 18


 721 0040 00000000 		.word	ControlData
 722              		.cfi_endproc
 723              	.LFE148:
 725              		.section	.text.confirmUpdateDataAccuracy,"ax",%progbits
 726              		.align	1
 727              		.global	confirmUpdateDataAccuracy
 728              		.syntax unified
 729              		.thumb
 730              		.thumb_func
 731              		.fpu fpv4-sp-d16
 733              	confirmUpdateDataAccuracy:
 734              	.LFB149:
 192:Src/spiops.c  **** 
 193:Src/spiops.c  **** HAL_StatusTypeDef confirmUpdateDataAccuracy()
 194:Src/spiops.c  **** {
 735              		.loc 2 194 0
 736              		.cfi_startproc
 737              		@ args = 0, pretend = 0, frame = 16
 738              		@ frame_needed = 1, uses_anonymous_args = 0
 739              		@ link register save eliminated.
 740 0000 80B4     		push	{r7}
 741              	.LCFI25:
 742              		.cfi_def_cfa_offset 4
 743              		.cfi_offset 7, -4
 744 0002 85B0     		sub	sp, sp, #20
 745              	.LCFI26:
 746              		.cfi_def_cfa_offset 24
 747 0004 00AF     		add	r7, sp, #0
 748              	.LCFI27:
 749              		.cfi_def_cfa_register 7
 195:Src/spiops.c  **** 
 196:Src/spiops.c  **** 
 197:Src/spiops.c  ****     uint16_t checksum = 0;
 750              		.loc 2 197 0
 751 0006 0023     		movs	r3, #0
 752 0008 FB81     		strh	r3, [r7, #14]	@ movhi
 198:Src/spiops.c  ****     short int checksum_error = 0;
 753              		.loc 2 198 0
 754 000a 0023     		movs	r3, #0
 755 000c BB81     		strh	r3, [r7, #12]	@ movhi
 199:Src/spiops.c  ****     short int sequence_error = 0;
 756              		.loc 2 199 0
 757 000e 0023     		movs	r3, #0
 758 0010 7B81     		strh	r3, [r7, #10]	@ movhi
 759              	.LBB3:
 200:Src/spiops.c  **** 
 201:Src/spiops.c  ****     for(int i=0; i< SPI_ENTITY_SIZE; i++)
 760              		.loc 2 201 0
 761 0012 0023     		movs	r3, #0
 762 0014 7B60     		str	r3, [r7, #4]
 763 0016 0CE0     		b	.L41
 764              	.L42:
 202:Src/spiops.c  ****         checksum += UpdateFile->data[i];
 765              		.loc 2 202 0 discriminator 3
 766 0018 204B     		ldr	r3, .L48
 767 001a 1A68     		ldr	r2, [r3]
 768 001c 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccImugAR.s 			page 19


 769 001e 1344     		add	r3, r3, r2
 770 0020 0833     		adds	r3, r3, #8
 771 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 772 0024 9AB2     		uxth	r2, r3
 773 0026 FB89     		ldrh	r3, [r7, #14]	@ movhi
 774 0028 1344     		add	r3, r3, r2
 775 002a FB81     		strh	r3, [r7, #14]	@ movhi
 201:Src/spiops.c  ****         checksum += UpdateFile->data[i];
 776              		.loc 2 201 0 discriminator 3
 777 002c 7B68     		ldr	r3, [r7, #4]
 778 002e 0133     		adds	r3, r3, #1
 779 0030 7B60     		str	r3, [r7, #4]
 780              	.L41:
 201:Src/spiops.c  ****         checksum += UpdateFile->data[i];
 781              		.loc 2 201 0 is_stmt 0 discriminator 1
 782 0032 7B68     		ldr	r3, [r7, #4]
 783 0034 6B2B     		cmp	r3, #107
 784 0036 EFDD     		ble	.L42
 785              	.LBE3:
 203:Src/spiops.c  **** 
 204:Src/spiops.c  ****     if(checksum != SpiRxData->checksum)
 786              		.loc 2 204 0 is_stmt 1
 787 0038 194B     		ldr	r3, .L48+4
 788 003a 1B68     		ldr	r3, [r3]
 789 003c B3F87630 		ldrh	r3, [r3, #118]
 790 0040 FA89     		ldrh	r2, [r7, #14]
 791 0042 9A42     		cmp	r2, r3
 792 0044 01D0     		beq	.L43
 205:Src/spiops.c  ****         checksum_error = 1;
 793              		.loc 2 205 0
 794 0046 0123     		movs	r3, #1
 795 0048 BB81     		strh	r3, [r7, #12]	@ movhi
 796              	.L43:
 206:Src/spiops.c  **** 
 207:Src/spiops.c  ****     if(NextUpdateDataPackage != 1 && UpdateFile->current_sequence_number != NextUpdateDataPackage)
 797              		.loc 2 207 0
 798 004a 164B     		ldr	r3, .L48+8
 799 004c 1B68     		ldr	r3, [r3]
 800 004e 012B     		cmp	r3, #1
 801 0050 09D0     		beq	.L44
 802              		.loc 2 207 0 is_stmt 0 discriminator 1
 803 0052 124B     		ldr	r3, .L48
 804 0054 1B68     		ldr	r3, [r3]
 805 0056 5A68     		ldr	r2, [r3, #4]
 806 0058 124B     		ldr	r3, .L48+8
 807 005a 1B68     		ldr	r3, [r3]
 808 005c 9A42     		cmp	r2, r3
 809 005e 02D0     		beq	.L44
 208:Src/spiops.c  ****     {
 209:Src/spiops.c  ****         sequence_error = 1;
 810              		.loc 2 209 0 is_stmt 1
 811 0060 0123     		movs	r3, #1
 812 0062 7B81     		strh	r3, [r7, #10]	@ movhi
 813 0064 09E0     		b	.L45
 814              	.L44:
 210:Src/spiops.c  ****     }
 211:Src/spiops.c  ****     else
ARM GAS  /tmp/ccImugAR.s 			page 20


 212:Src/spiops.c  ****     {
 213:Src/spiops.c  ****         if(checksum_error == 0)
 815              		.loc 2 213 0
 816 0066 B7F90C30 		ldrsh	r3, [r7, #12]
 817 006a 002B     		cmp	r3, #0
 818 006c 05D1     		bne	.L45
 214:Src/spiops.c  ****            NextUpdateDataPackage = UpdateFile->current_sequence_number + 1;
 819              		.loc 2 214 0
 820 006e 0B4B     		ldr	r3, .L48
 821 0070 1B68     		ldr	r3, [r3]
 822 0072 5B68     		ldr	r3, [r3, #4]
 823 0074 0133     		adds	r3, r3, #1
 824 0076 0B4A     		ldr	r2, .L48+8
 825 0078 1360     		str	r3, [r2]
 826              	.L45:
 215:Src/spiops.c  **** 
 216:Src/spiops.c  ****     }
 217:Src/spiops.c  **** 
 218:Src/spiops.c  ****      if(sequence_error != 1 && checksum_error != 1)
 827              		.loc 2 218 0
 828 007a B7F90A30 		ldrsh	r3, [r7, #10]
 829 007e 012B     		cmp	r3, #1
 830 0080 05D0     		beq	.L46
 831              		.loc 2 218 0 is_stmt 0 discriminator 1
 832 0082 B7F90C30 		ldrsh	r3, [r7, #12]
 833 0086 012B     		cmp	r3, #1
 834 0088 01D0     		beq	.L46
 219:Src/spiops.c  ****          return HAL_OK;
 835              		.loc 2 219 0 is_stmt 1
 836 008a 0023     		movs	r3, #0
 837 008c 00E0     		b	.L47
 838              	.L46:
 220:Src/spiops.c  ****      else
 221:Src/spiops.c  ****          return HAL_ERROR;
 839              		.loc 2 221 0
 840 008e 0123     		movs	r3, #1
 841              	.L47:
 222:Src/spiops.c  **** 
 223:Src/spiops.c  **** 
 224:Src/spiops.c  **** 
 225:Src/spiops.c  **** }
 842              		.loc 2 225 0
 843 0090 1846     		mov	r0, r3
 844 0092 1437     		adds	r7, r7, #20
 845              	.LCFI28:
 846              		.cfi_def_cfa_offset 4
 847 0094 BD46     		mov	sp, r7
 848              	.LCFI29:
 849              		.cfi_def_cfa_register 13
 850              		@ sp needed
 851 0096 5DF8047B 		ldr	r7, [sp], #4
 852              	.LCFI30:
 853              		.cfi_restore 7
 854              		.cfi_def_cfa_offset 0
 855 009a 7047     		bx	lr
 856              	.L49:
 857              		.align	2
ARM GAS  /tmp/ccImugAR.s 			page 21


 858              	.L48:
 859 009c 00000000 		.word	UpdateFile
 860 00a0 00000000 		.word	SpiRxData
 861 00a4 00000000 		.word	NextUpdateDataPackage
 862              		.cfi_endproc
 863              	.LFE149:
 865              		.section	.text.putUpdateDataResponse,"ax",%progbits
 866              		.align	1
 867              		.global	putUpdateDataResponse
 868              		.syntax unified
 869              		.thumb
 870              		.thumb_func
 871              		.fpu fpv4-sp-d16
 873              	putUpdateDataResponse:
 874              	.LFB150:
 226:Src/spiops.c  **** 
 227:Src/spiops.c  **** 
 228:Src/spiops.c  **** 
 229:Src/spiops.c  **** void putUpdateDataResponse()
 230:Src/spiops.c  **** {
 875              		.loc 2 230 0
 876              		.cfi_startproc
 877              		@ args = 0, pretend = 0, frame = 0
 878              		@ frame_needed = 1, uses_anonymous_args = 0
 879 0000 80B5     		push	{r7, lr}
 880              	.LCFI31:
 881              		.cfi_def_cfa_offset 8
 882              		.cfi_offset 7, -8
 883              		.cfi_offset 14, -4
 884 0002 00AF     		add	r7, sp, #0
 885              	.LCFI32:
 886              		.cfi_def_cfa_register 7
 231:Src/spiops.c  **** 
 232:Src/spiops.c  **** 
 233:Src/spiops.c  **** 
 234:Src/spiops.c  ****     xSemaphoreTake(spiMutexHandle, (TickType_t)1000);
 887              		.loc 2 234 0
 888 0004 184B     		ldr	r3, .L51
 889 0006 1868     		ldr	r0, [r3]
 890 0008 0023     		movs	r3, #0
 891 000a 4FF47A72 		mov	r2, #1000
 892 000e 0021     		movs	r1, #0
 893 0010 FFF7FEFF 		bl	xQueueGenericReceive
 235:Src/spiops.c  **** 
 236:Src/spiops.c  ****     SpiTxData->header = 'U' | 'P' << 8;
 894              		.loc 2 236 0
 895 0014 154B     		ldr	r3, .L51+4
 896 0016 1B68     		ldr	r3, [r3]
 897 0018 45F25502 		movw	r2, #20565
 898 001c 1A80     		strh	r2, [r3]	@ movhi
 237:Src/spiops.c  ****     SpiTxData->data[4] = NextUpdateDataPackage & 0xff;
 899              		.loc 2 237 0
 900 001e 134B     		ldr	r3, .L51+4
 901 0020 1B68     		ldr	r3, [r3]
 902 0022 134A     		ldr	r2, .L51+8
 903 0024 1268     		ldr	r2, [r2]
 904 0026 D2B2     		uxtb	r2, r2
ARM GAS  /tmp/ccImugAR.s 			page 22


 905 0028 9A71     		strb	r2, [r3, #6]
 238:Src/spiops.c  ****     SpiTxData->data[5] = (NextUpdateDataPackage >>  8) & 0xff;
 906              		.loc 2 238 0
 907 002a 104B     		ldr	r3, .L51+4
 908 002c 1B68     		ldr	r3, [r3]
 909 002e 104A     		ldr	r2, .L51+8
 910 0030 1268     		ldr	r2, [r2]
 911 0032 120A     		lsrs	r2, r2, #8
 912 0034 D2B2     		uxtb	r2, r2
 913 0036 DA71     		strb	r2, [r3, #7]
 239:Src/spiops.c  ****     SpiTxData->data[6] = (NextUpdateDataPackage >> 16) & 0xff;
 914              		.loc 2 239 0
 915 0038 0C4B     		ldr	r3, .L51+4
 916 003a 1B68     		ldr	r3, [r3]
 917 003c 0C4A     		ldr	r2, .L51+8
 918 003e 1268     		ldr	r2, [r2]
 919 0040 120C     		lsrs	r2, r2, #16
 920 0042 D2B2     		uxtb	r2, r2
 921 0044 1A72     		strb	r2, [r3, #8]
 240:Src/spiops.c  ****     SpiTxData->data[7] = (NextUpdateDataPackage >> 24) & 0xff;
 922              		.loc 2 240 0
 923 0046 094B     		ldr	r3, .L51+4
 924 0048 1B68     		ldr	r3, [r3]
 925 004a 094A     		ldr	r2, .L51+8
 926 004c 1268     		ldr	r2, [r2]
 927 004e 120E     		lsrs	r2, r2, #24
 928 0050 D2B2     		uxtb	r2, r2
 929 0052 5A72     		strb	r2, [r3, #9]
 241:Src/spiops.c  **** 
 242:Src/spiops.c  ****     xSemaphoreGive(spiMutexHandle);
 930              		.loc 2 242 0
 931 0054 044B     		ldr	r3, .L51
 932 0056 1868     		ldr	r0, [r3]
 933 0058 0023     		movs	r3, #0
 934 005a 0022     		movs	r2, #0
 935 005c 0021     		movs	r1, #0
 936 005e FFF7FEFF 		bl	xQueueGenericSend
 243:Src/spiops.c  **** 
 244:Src/spiops.c  **** }
 937              		.loc 2 244 0
 938 0062 00BF     		nop
 939 0064 80BD     		pop	{r7, pc}
 940              	.L52:
 941 0066 00BF     		.align	2
 942              	.L51:
 943 0068 00000000 		.word	spiMutexHandle
 944 006c 00000000 		.word	SpiTxData
 945 0070 00000000 		.word	NextUpdateDataPackage
 946              		.cfi_endproc
 947              	.LFE150:
 949              		.section	.text.putControlDataResponse,"ax",%progbits
 950              		.align	1
 951              		.global	putControlDataResponse
 952              		.syntax unified
 953              		.thumb
 954              		.thumb_func
 955              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccImugAR.s 			page 23


 957              	putControlDataResponse:
 958              	.LFB151:
 245:Src/spiops.c  **** 
 246:Src/spiops.c  **** 
 247:Src/spiops.c  **** 
 248:Src/spiops.c  **** void putControlDataResponse()
 249:Src/spiops.c  **** {
 959              		.loc 2 249 0
 960              		.cfi_startproc
 961              		@ args = 0, pretend = 0, frame = 0
 962              		@ frame_needed = 1, uses_anonymous_args = 0
 963 0000 80B5     		push	{r7, lr}
 964              	.LCFI33:
 965              		.cfi_def_cfa_offset 8
 966              		.cfi_offset 7, -8
 967              		.cfi_offset 14, -4
 968 0002 00AF     		add	r7, sp, #0
 969              	.LCFI34:
 970              		.cfi_def_cfa_register 7
 250:Src/spiops.c  **** 
 251:Src/spiops.c  ****     xSemaphoreTake(spiMutexHandle, (TickType_t)1000);
 971              		.loc 2 251 0
 972 0004 174B     		ldr	r3, .L54
 973 0006 1868     		ldr	r0, [r3]
 974 0008 0023     		movs	r3, #0
 975 000a 4FF47A72 		mov	r2, #1000
 976 000e 0021     		movs	r1, #0
 977 0010 FFF7FEFF 		bl	xQueueGenericReceive
 252:Src/spiops.c  **** 
 253:Src/spiops.c  ****     SpiTxData->header = (('E') | (('N') << 8 ));
 978              		.loc 2 253 0
 979 0014 144B     		ldr	r3, .L54+4
 980 0016 1B68     		ldr	r3, [r3]
 981 0018 44F64562 		movw	r2, #20037
 982 001c 1A80     		strh	r2, [r3]	@ movhi
 254:Src/spiops.c  ****     memcpy(&SpiTxData->data[0], (unsigned char *)EnvironmentData, SPI_DATA_SIZE);
 983              		.loc 2 254 0
 984 001e 124B     		ldr	r3, .L54+4
 985 0020 1B68     		ldr	r3, [r3]
 986 0022 981C     		adds	r0, r3, #2
 987 0024 114B     		ldr	r3, .L54+8
 988 0026 1B68     		ldr	r3, [r3]
 989 0028 7422     		movs	r2, #116
 990 002a 1946     		mov	r1, r3
 991 002c FFF7FEFF 		bl	memcpy
 255:Src/spiops.c  ****     memcpy(&SpiTxData->data[99], (unsigned char *)&EnvironmentData->sensor_data, sizeof(SENSOR_DATA
 992              		.loc 2 255 0
 993 0030 0D4B     		ldr	r3, .L54+4
 994 0032 1B68     		ldr	r3, [r3]
 995 0034 03F16500 		add	r0, r3, #101
 996 0038 0C4B     		ldr	r3, .L54+8
 997 003a 1B68     		ldr	r3, [r3]
 998 003c 6433     		adds	r3, r3, #100
 999 003e 1422     		movs	r2, #20
 1000 0040 1946     		mov	r1, r3
 1001 0042 FFF7FEFF 		bl	memcpy
 256:Src/spiops.c  ****     SpiTxData->checksum = (('C') | (('H') << 8 ));
ARM GAS  /tmp/ccImugAR.s 			page 24


 1002              		.loc 2 256 0
 1003 0046 084B     		ldr	r3, .L54+4
 1004 0048 1B68     		ldr	r3, [r3]
 1005 004a 44F64302 		movw	r2, #18499
 1006 004e A3F87620 		strh	r2, [r3, #118]	@ movhi
 257:Src/spiops.c  **** 
 258:Src/spiops.c  ****     xSemaphoreGive(spiMutexHandle);
 1007              		.loc 2 258 0
 1008 0052 044B     		ldr	r3, .L54
 1009 0054 1868     		ldr	r0, [r3]
 1010 0056 0023     		movs	r3, #0
 1011 0058 0022     		movs	r2, #0
 1012 005a 0021     		movs	r1, #0
 1013 005c FFF7FEFF 		bl	xQueueGenericSend
 259:Src/spiops.c  **** 
 260:Src/spiops.c  **** }
 1014              		.loc 2 260 0
 1015 0060 00BF     		nop
 1016 0062 80BD     		pop	{r7, pc}
 1017              	.L55:
 1018              		.align	2
 1019              	.L54:
 1020 0064 00000000 		.word	spiMutexHandle
 1021 0068 00000000 		.word	SpiTxData
 1022 006c 00000000 		.word	EnvironmentData
 1023              		.cfi_endproc
 1024              	.LFE151:
 1026              		.section	.text.putEnvironmentData,"ax",%progbits
 1027              		.align	1
 1028              		.global	putEnvironmentData
 1029              		.syntax unified
 1030              		.thumb
 1031              		.thumb_func
 1032              		.fpu fpv4-sp-d16
 1034              	putEnvironmentData:
 1035              	.LFB152:
 261:Src/spiops.c  **** 
 262:Src/spiops.c  **** 
 263:Src/spiops.c  **** 
 264:Src/spiops.c  **** void putEnvironmentData()
 265:Src/spiops.c  **** {
 1036              		.loc 2 265 0
 1037              		.cfi_startproc
 1038              		@ args = 0, pretend = 0, frame = 0
 1039              		@ frame_needed = 1, uses_anonymous_args = 0
 1040 0000 80B5     		push	{r7, lr}
 1041              	.LCFI35:
 1042              		.cfi_def_cfa_offset 8
 1043              		.cfi_offset 7, -8
 1044              		.cfi_offset 14, -4
 1045 0002 00AF     		add	r7, sp, #0
 1046              	.LCFI36:
 1047              		.cfi_def_cfa_register 7
 266:Src/spiops.c  **** 
 267:Src/spiops.c  ****     xSemaphoreTake(spiMutexHandle, (TickType_t)1000);
 1048              		.loc 2 267 0
 1049 0004 174B     		ldr	r3, .L57
ARM GAS  /tmp/ccImugAR.s 			page 25


 1050 0006 1868     		ldr	r0, [r3]
 1051 0008 0023     		movs	r3, #0
 1052 000a 4FF47A72 		mov	r2, #1000
 1053 000e 0021     		movs	r1, #0
 1054 0010 FFF7FEFF 		bl	xQueueGenericReceive
 268:Src/spiops.c  **** 
 269:Src/spiops.c  ****     SpiTxData->header = (('E') | (('N') << 8 ));
 1055              		.loc 2 269 0
 1056 0014 144B     		ldr	r3, .L57+4
 1057 0016 1B68     		ldr	r3, [r3]
 1058 0018 44F64562 		movw	r2, #20037
 1059 001c 1A80     		strh	r2, [r3]	@ movhi
 270:Src/spiops.c  ****     memcpy(&SpiTxData->data[0], (unsigned char *)EnvironmentData, SPI_DATA_SIZE);
 1060              		.loc 2 270 0
 1061 001e 124B     		ldr	r3, .L57+4
 1062 0020 1B68     		ldr	r3, [r3]
 1063 0022 981C     		adds	r0, r3, #2
 1064 0024 114B     		ldr	r3, .L57+8
 1065 0026 1B68     		ldr	r3, [r3]
 1066 0028 7422     		movs	r2, #116
 1067 002a 1946     		mov	r1, r3
 1068 002c FFF7FEFF 		bl	memcpy
 271:Src/spiops.c  ****     memcpy(&SpiTxData->data[99], (unsigned char *)&EnvironmentData->sensor_data, sizeof(SENSOR_DATA
 1069              		.loc 2 271 0
 1070 0030 0D4B     		ldr	r3, .L57+4
 1071 0032 1B68     		ldr	r3, [r3]
 1072 0034 03F16500 		add	r0, r3, #101
 1073 0038 0C4B     		ldr	r3, .L57+8
 1074 003a 1B68     		ldr	r3, [r3]
 1075 003c 6433     		adds	r3, r3, #100
 1076 003e 1422     		movs	r2, #20
 1077 0040 1946     		mov	r1, r3
 1078 0042 FFF7FEFF 		bl	memcpy
 272:Src/spiops.c  ****     SpiTxData->checksum = (('C') | (('H') << 8 ));
 1079              		.loc 2 272 0
 1080 0046 084B     		ldr	r3, .L57+4
 1081 0048 1B68     		ldr	r3, [r3]
 1082 004a 44F64302 		movw	r2, #18499
 1083 004e A3F87620 		strh	r2, [r3, #118]	@ movhi
 273:Src/spiops.c  **** 
 274:Src/spiops.c  ****     xSemaphoreGive(spiMutexHandle);
 1084              		.loc 2 274 0
 1085 0052 044B     		ldr	r3, .L57
 1086 0054 1868     		ldr	r0, [r3]
 1087 0056 0023     		movs	r3, #0
 1088 0058 0022     		movs	r2, #0
 1089 005a 0021     		movs	r1, #0
 1090 005c FFF7FEFF 		bl	xQueueGenericSend
 275:Src/spiops.c  **** 
 276:Src/spiops.c  **** }
 1091              		.loc 2 276 0
 1092 0060 00BF     		nop
 1093 0062 80BD     		pop	{r7, pc}
 1094              	.L58:
 1095              		.align	2
 1096              	.L57:
 1097 0064 00000000 		.word	spiMutexHandle
ARM GAS  /tmp/ccImugAR.s 			page 26


 1098 0068 00000000 		.word	SpiTxData
 1099 006c 00000000 		.word	EnvironmentData
 1100              		.cfi_endproc
 1101              	.LFE152:
 1103              		.section	.rodata
 1104              		.align	2
 1105              	.LC13:
 1106 0064 77726974 		.ascii	"write error\015\012\000"
 1106      65206572 
 1106      726F720D 
 1106      0A00
 1107              		.section	.text.processUpdateData,"ax",%progbits
 1108              		.align	1
 1109              		.global	processUpdateData
 1110              		.syntax unified
 1111              		.thumb
 1112              		.thumb_func
 1113              		.fpu fpv4-sp-d16
 1115              	processUpdateData:
 1116              	.LFB153:
 277:Src/spiops.c  **** 
 278:Src/spiops.c  **** void processUpdateData()
 279:Src/spiops.c  **** {
 1117              		.loc 2 279 0
 1118              		.cfi_startproc
 1119              		@ args = 0, pretend = 0, frame = 16
 1120              		@ frame_needed = 1, uses_anonymous_args = 0
 1121 0000 90B5     		push	{r4, r7, lr}
 1122              	.LCFI37:
 1123              		.cfi_def_cfa_offset 12
 1124              		.cfi_offset 4, -12
 1125              		.cfi_offset 7, -8
 1126              		.cfi_offset 14, -4
 1127 0002 85B0     		sub	sp, sp, #20
 1128              	.LCFI38:
 1129              		.cfi_def_cfa_offset 32
 1130 0004 00AF     		add	r7, sp, #0
 1131              	.LCFI39:
 1132              		.cfi_def_cfa_register 7
 280:Src/spiops.c  **** 
 281:Src/spiops.c  **** 
 282:Src/spiops.c  ****     HAL_StatusTypeDef flash_status;
 283:Src/spiops.c  **** 
 284:Src/spiops.c  ****     if(UpdateFile->current_sequence_number == 1)
 1133              		.loc 2 284 0
 1134 0006 554B     		ldr	r3, .L70
 1135 0008 1B68     		ldr	r3, [r3]
 1136 000a 5B68     		ldr	r3, [r3, #4]
 1137 000c 012B     		cmp	r3, #1
 1138 000e 69D1     		bne	.L60
 1139              	.LBB4:
 285:Src/spiops.c  ****     {
 286:Src/spiops.c  **** 
 287:Src/spiops.c  ****         uint32_t total_size = SPI_ENTITY_SIZE*UpdateFile->total_sequence_number;
 1140              		.loc 2 287 0
 1141 0010 524B     		ldr	r3, .L70
 1142 0012 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccImugAR.s 			page 27


 1143 0014 1B68     		ldr	r3, [r3]
 1144 0016 6C22     		movs	r2, #108
 1145 0018 02FB03F3 		mul	r3, r2, r3
 1146 001c BB60     		str	r3, [r7, #8]
 288:Src/spiops.c  **** 
 289:Src/spiops.c  **** 
 290:Src/spiops.c  **** 
 291:Src/spiops.c  ****         HAL_FLASH_Unlock();
 1147              		.loc 2 291 0
 1148 001e FFF7FEFF 		bl	HAL_FLASH_Unlock
 292:Src/spiops.c  **** 
 293:Src/spiops.c  ****         flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS, total_size & 0xff);
 1149              		.loc 2 293 0
 1150 0022 BB68     		ldr	r3, [r7, #8]
 1151 0024 4FF00004 		mov	r4, #0
 1152 0028 4FF0FF01 		mov	r1, #255
 1153 002c 4FF00002 		mov	r2, #0
 1154 0030 03EA0103 		and	r3, r3, r1
 1155 0034 04EA0204 		and	r4, r4, r2
 1156 0038 1A46     		mov	r2, r3
 1157 003a 2346     		mov	r3, r4
 1158 003c 4849     		ldr	r1, .L70+4
 1159 003e 0020     		movs	r0, #0
 1160 0040 FFF7FEFF 		bl	HAL_FLASH_Program
 1161 0044 0346     		mov	r3, r0
 1162 0046 FB71     		strb	r3, [r7, #7]
 294:Src/spiops.c  **** 
 295:Src/spiops.c  ****         if(flash_status != HAL_OK)
 1163              		.loc 2 295 0
 1164 0048 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1165 004a 002B     		cmp	r3, #0
 1166 004c 02D0     		beq	.L61
 296:Src/spiops.c  ****             mprintf("write error\r\n");
 1167              		.loc 2 296 0
 1168 004e 4548     		ldr	r0, .L70+8
 1169 0050 FFF7FEFF 		bl	mprintf
 1170              	.L61:
 297:Src/spiops.c  **** 
 298:Src/spiops.c  ****         flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS + 1, (total_size >> 8) &
 1171              		.loc 2 298 0
 1172 0054 BB68     		ldr	r3, [r7, #8]
 1173 0056 1B0A     		lsrs	r3, r3, #8
 1174 0058 4FF00004 		mov	r4, #0
 1175 005c 4FF0FF01 		mov	r1, #255
 1176 0060 4FF00002 		mov	r2, #0
 1177 0064 03EA0103 		and	r3, r3, r1
 1178 0068 04EA0204 		and	r4, r4, r2
 1179 006c 1A46     		mov	r2, r3
 1180 006e 2346     		mov	r3, r4
 1181 0070 3D49     		ldr	r1, .L70+12
 1182 0072 0020     		movs	r0, #0
 1183 0074 FFF7FEFF 		bl	HAL_FLASH_Program
 1184 0078 0346     		mov	r3, r0
 1185 007a FB71     		strb	r3, [r7, #7]
 299:Src/spiops.c  **** 
 300:Src/spiops.c  ****         if(flash_status != HAL_OK)
 1186              		.loc 2 300 0
ARM GAS  /tmp/ccImugAR.s 			page 28


 1187 007c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1188 007e 002B     		cmp	r3, #0
 1189 0080 02D0     		beq	.L62
 301:Src/spiops.c  ****             mprintf("write error\r\n");
 1190              		.loc 2 301 0
 1191 0082 3848     		ldr	r0, .L70+8
 1192 0084 FFF7FEFF 		bl	mprintf
 1193              	.L62:
 302:Src/spiops.c  **** 
 303:Src/spiops.c  ****         flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS + 2, (total_size >> 16) 
 1194              		.loc 2 303 0
 1195 0088 BB68     		ldr	r3, [r7, #8]
 1196 008a 1B0C     		lsrs	r3, r3, #16
 1197 008c 4FF00004 		mov	r4, #0
 1198 0090 4FF0FF01 		mov	r1, #255
 1199 0094 4FF00002 		mov	r2, #0
 1200 0098 03EA0103 		and	r3, r3, r1
 1201 009c 04EA0204 		and	r4, r4, r2
 1202 00a0 1A46     		mov	r2, r3
 1203 00a2 2346     		mov	r3, r4
 1204 00a4 3149     		ldr	r1, .L70+16
 1205 00a6 0020     		movs	r0, #0
 1206 00a8 FFF7FEFF 		bl	HAL_FLASH_Program
 1207 00ac 0346     		mov	r3, r0
 1208 00ae FB71     		strb	r3, [r7, #7]
 304:Src/spiops.c  **** 
 305:Src/spiops.c  ****         if(flash_status != HAL_OK)
 1209              		.loc 2 305 0
 1210 00b0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1211 00b2 002B     		cmp	r3, #0
 1212 00b4 02D0     		beq	.L63
 306:Src/spiops.c  ****             mprintf("write error\r\n");
 1213              		.loc 2 306 0
 1214 00b6 2B48     		ldr	r0, .L70+8
 1215 00b8 FFF7FEFF 		bl	mprintf
 1216              	.L63:
 307:Src/spiops.c  **** 
 308:Src/spiops.c  ****         flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS + 3, (total_size >> 24) 
 1217              		.loc 2 308 0
 1218 00bc BB68     		ldr	r3, [r7, #8]
 1219 00be 1B0E     		lsrs	r3, r3, #24
 1220 00c0 4FF00004 		mov	r4, #0
 1221 00c4 1A46     		mov	r2, r3
 1222 00c6 2346     		mov	r3, r4
 1223 00c8 2949     		ldr	r1, .L70+20
 1224 00ca 0020     		movs	r0, #0
 1225 00cc FFF7FEFF 		bl	HAL_FLASH_Program
 1226 00d0 0346     		mov	r3, r0
 1227 00d2 FB71     		strb	r3, [r7, #7]
 309:Src/spiops.c  **** 
 310:Src/spiops.c  ****         if(flash_status != HAL_OK)
 1228              		.loc 2 310 0
 1229 00d4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1230 00d6 002B     		cmp	r3, #0
 1231 00d8 02D0     		beq	.L64
 311:Src/spiops.c  ****             mprintf("write error\r\n");
 1232              		.loc 2 311 0
ARM GAS  /tmp/ccImugAR.s 			page 29


 1233 00da 2248     		ldr	r0, .L70+8
 1234 00dc FFF7FEFF 		bl	mprintf
 1235              	.L64:
 312:Src/spiops.c  **** 
 313:Src/spiops.c  ****         HAL_FLASH_Lock();
 1236              		.loc 2 313 0
 1237 00e0 FFF7FEFF 		bl	HAL_FLASH_Lock
 1238              	.L60:
 1239              	.LBE4:
 314:Src/spiops.c  **** 
 315:Src/spiops.c  ****     }
 316:Src/spiops.c  **** 
 317:Src/spiops.c  **** 
 318:Src/spiops.c  **** 
 319:Src/spiops.c  ****     HAL_FLASH_Unlock();
 1240              		.loc 2 319 0
 1241 00e4 FFF7FEFF 		bl	HAL_FLASH_Unlock
 1242              	.LBB5:
 320:Src/spiops.c  **** 
 321:Src/spiops.c  ****     for(int i=0; i<SPI_ENTITY_SIZE; i++)
 1243              		.loc 2 321 0
 1244 00e8 0023     		movs	r3, #0
 1245 00ea FB60     		str	r3, [r7, #12]
 1246 00ec 22E0     		b	.L65
 1247              	.L67:
 322:Src/spiops.c  ****     {
 323:Src/spiops.c  ****         flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, (SECTOR6_ADDRESS + i + 4) + (SPI_ENTITY_
 1248              		.loc 2 323 0
 1249 00ee 1B4B     		ldr	r3, .L70
 1250 00f0 1B68     		ldr	r3, [r3]
 1251 00f2 5B68     		ldr	r3, [r3, #4]
 1252 00f4 6C22     		movs	r2, #108
 1253 00f6 02FB03F2 		mul	r2, r2, r3
 1254 00fa FB68     		ldr	r3, [r7, #12]
 1255 00fc 1344     		add	r3, r3, r2
 1256 00fe 1D49     		ldr	r1, .L70+24
 1257 0100 1944     		add	r1, r1, r3
 1258 0102 164B     		ldr	r3, .L70
 1259 0104 1A68     		ldr	r2, [r3]
 1260 0106 FB68     		ldr	r3, [r7, #12]
 1261 0108 1344     		add	r3, r3, r2
 1262 010a 0833     		adds	r3, r3, #8
 1263 010c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1264 010e DBB2     		uxtb	r3, r3
 1265 0110 4FF00004 		mov	r4, #0
 1266 0114 1A46     		mov	r2, r3
 1267 0116 2346     		mov	r3, r4
 1268 0118 0020     		movs	r0, #0
 1269 011a FFF7FEFF 		bl	HAL_FLASH_Program
 1270 011e 0346     		mov	r3, r0
 1271 0120 FB71     		strb	r3, [r7, #7]
 324:Src/spiops.c  **** 
 325:Src/spiops.c  ****         if(flash_status != HAL_OK)
 1272              		.loc 2 325 0
 1273 0122 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1274 0124 002B     		cmp	r3, #0
 1275 0126 02D0     		beq	.L66
ARM GAS  /tmp/ccImugAR.s 			page 30


 326:Src/spiops.c  ****             mprintf("write error\r\n");
 1276              		.loc 2 326 0
 1277 0128 0E48     		ldr	r0, .L70+8
 1278 012a FFF7FEFF 		bl	mprintf
 1279              	.L66:
 321:Src/spiops.c  ****     {
 1280              		.loc 2 321 0 discriminator 2
 1281 012e FB68     		ldr	r3, [r7, #12]
 1282 0130 0133     		adds	r3, r3, #1
 1283 0132 FB60     		str	r3, [r7, #12]
 1284              	.L65:
 321:Src/spiops.c  ****     {
 1285              		.loc 2 321 0 is_stmt 0 discriminator 1
 1286 0134 FB68     		ldr	r3, [r7, #12]
 1287 0136 6B2B     		cmp	r3, #107
 1288 0138 D9DD     		ble	.L67
 1289              	.LBE5:
 327:Src/spiops.c  ****     }
 328:Src/spiops.c  **** 
 329:Src/spiops.c  ****     HAL_FLASH_Lock();
 1290              		.loc 2 329 0 is_stmt 1
 1291 013a FFF7FEFF 		bl	HAL_FLASH_Lock
 330:Src/spiops.c  **** 
 331:Src/spiops.c  ****     if(UpdateFile->current_sequence_number == UpdateFile->total_sequence_number)
 1292              		.loc 2 331 0
 1293 013e 074B     		ldr	r3, .L70
 1294 0140 1B68     		ldr	r3, [r3]
 1295 0142 5A68     		ldr	r2, [r3, #4]
 1296 0144 054B     		ldr	r3, .L70
 1297 0146 1B68     		ldr	r3, [r3]
 1298 0148 1B68     		ldr	r3, [r3]
 1299 014a 9A42     		cmp	r2, r3
 1300 014c 02D1     		bne	.L69
 332:Src/spiops.c  ****     {
 333:Src/spiops.c  **** 
 334:Src/spiops.c  ****         UpdateIsDone = 1;
 1301              		.loc 2 334 0
 1302 014e 0A4B     		ldr	r3, .L70+28
 1303 0150 0122     		movs	r2, #1
 1304 0152 1A70     		strb	r2, [r3]
 1305              	.L69:
 335:Src/spiops.c  **** 
 336:Src/spiops.c  ****     }
 337:Src/spiops.c  **** 
 338:Src/spiops.c  **** 
 339:Src/spiops.c  **** }
 1306              		.loc 2 339 0
 1307 0154 00BF     		nop
 1308 0156 1437     		adds	r7, r7, #20
 1309              	.LCFI40:
 1310              		.cfi_def_cfa_offset 12
 1311 0158 BD46     		mov	sp, r7
 1312              	.LCFI41:
 1313              		.cfi_def_cfa_register 13
 1314              		@ sp needed
 1315 015a 90BD     		pop	{r4, r7, pc}
 1316              	.L71:
ARM GAS  /tmp/ccImugAR.s 			page 31


 1317              		.align	2
 1318              	.L70:
 1319 015c 00000000 		.word	UpdateFile
 1320 0160 00000808 		.word	134742016
 1321 0164 64000000 		.word	.LC13
 1322 0168 01000808 		.word	134742017
 1323 016c 02000808 		.word	134742018
 1324 0170 03000808 		.word	134742019
 1325 0174 98FF0708 		.word	134741912
 1326 0178 00000000 		.word	UpdateIsDone
 1327              		.cfi_endproc
 1328              	.LFE153:
 1330              		.section	.rodata
 1331 0072 0000     		.align	2
 1332              	.LC14:
 1333 0074 57726974 		.ascii	"Writing data to memory\015\012\000"
 1333      696E6720 
 1333      64617461 
 1333      20746F20 
 1333      6D656D6F 
 1334 008d 000000   		.align	2
 1335              	.LC15:
 1336 0090 57726974 		.ascii	"Writing is done\015\012\000"
 1336      696E6720 
 1336      69732064 
 1336      6F6E650D 
 1336      0A00
 1337              		.section	.text.writeUpdateFileToFlash,"ax",%progbits
 1338              		.align	1
 1339              		.global	writeUpdateFileToFlash
 1340              		.syntax unified
 1341              		.thumb
 1342              		.thumb_func
 1343              		.fpu fpv4-sp-d16
 1345              	writeUpdateFileToFlash:
 1346              	.LFB154:
 340:Src/spiops.c  **** 
 341:Src/spiops.c  **** 
 342:Src/spiops.c  **** void writeUpdateFileToFlash(unsigned char *UpdateFileData)
 343:Src/spiops.c  **** {
 1347              		.loc 2 343 0
 1348              		.cfi_startproc
 1349              		@ args = 0, pretend = 0, frame = 24
 1350              		@ frame_needed = 1, uses_anonymous_args = 0
 1351 0000 90B5     		push	{r4, r7, lr}
 1352              	.LCFI42:
 1353              		.cfi_def_cfa_offset 12
 1354              		.cfi_offset 4, -12
 1355              		.cfi_offset 7, -8
 1356              		.cfi_offset 14, -4
 1357 0002 87B0     		sub	sp, sp, #28
 1358              	.LCFI43:
 1359              		.cfi_def_cfa_offset 40
 1360 0004 00AF     		add	r7, sp, #0
 1361              	.LCFI44:
 1362              		.cfi_def_cfa_register 7
 1363 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccImugAR.s 			page 32


 344:Src/spiops.c  **** 
 345:Src/spiops.c  **** 
 346:Src/spiops.c  ****     HAL_StatusTypeDef flash_status;
 347:Src/spiops.c  ****     uint32_t total_size;
 348:Src/spiops.c  **** 
 349:Src/spiops.c  **** 
 350:Src/spiops.c  ****     mprintf("Writing data to memory\r\n");
 1364              		.loc 2 350 0
 1365 0008 5248     		ldr	r0, .L80
 1366 000a FFF7FEFF 		bl	mprintf
 351:Src/spiops.c  ****     HAL_FLASH_Unlock();
 1367              		.loc 2 351 0
 1368 000e FFF7FEFF 		bl	HAL_FLASH_Unlock
 352:Src/spiops.c  ****     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAER
 1369              		.loc 2 352 0
 1370 0012 514B     		ldr	r3, .L80+4
 1371 0014 3322     		movs	r2, #51
 1372 0016 DA60     		str	r2, [r3, #12]
 353:Src/spiops.c  ****     FLASH_Erase_Sector(FLASH_SECTOR_6, VOLTAGE_RANGE_3);
 1373              		.loc 2 353 0
 1374 0018 0221     		movs	r1, #2
 1375 001a 0620     		movs	r0, #6
 1376 001c FFF7FEFF 		bl	FLASH_Erase_Sector
 354:Src/spiops.c  **** 
 355:Src/spiops.c  **** 
 356:Src/spiops.c  ****     total_size = SPI_ENTITY_SIZE * (UpdateFile->total_sequence_number);
 1377              		.loc 2 356 0
 1378 0020 4E4B     		ldr	r3, .L80+8
 1379 0022 1B68     		ldr	r3, [r3]
 1380 0024 1B68     		ldr	r3, [r3]
 1381 0026 6C22     		movs	r2, #108
 1382 0028 02FB03F3 		mul	r3, r2, r3
 1383 002c 3B61     		str	r3, [r7, #16]
 357:Src/spiops.c  **** 
 358:Src/spiops.c  **** 
 359:Src/spiops.c  ****     flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS, total_size & 0xff);
 1384              		.loc 2 359 0
 1385 002e 3B69     		ldr	r3, [r7, #16]
 1386 0030 4FF00004 		mov	r4, #0
 1387 0034 4FF0FF01 		mov	r1, #255
 1388 0038 4FF00002 		mov	r2, #0
 1389 003c 03EA0103 		and	r3, r3, r1
 1390 0040 04EA0204 		and	r4, r4, r2
 1391 0044 1A46     		mov	r2, r3
 1392 0046 2346     		mov	r3, r4
 1393 0048 4549     		ldr	r1, .L80+12
 1394 004a 0020     		movs	r0, #0
 1395 004c FFF7FEFF 		bl	HAL_FLASH_Program
 1396 0050 0346     		mov	r3, r0
 1397 0052 FB73     		strb	r3, [r7, #15]
 360:Src/spiops.c  **** 
 361:Src/spiops.c  ****     if(flash_status != HAL_OK)
 1398              		.loc 2 361 0
 1399 0054 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1400 0056 002B     		cmp	r3, #0
 1401 0058 02D0     		beq	.L73
 362:Src/spiops.c  ****         mprintf("write error\r\n");
ARM GAS  /tmp/ccImugAR.s 			page 33


 1402              		.loc 2 362 0
 1403 005a 4248     		ldr	r0, .L80+16
 1404 005c FFF7FEFF 		bl	mprintf
 1405              	.L73:
 363:Src/spiops.c  **** 
 364:Src/spiops.c  ****     flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS + 1, (total_size >> 8) & 0xf
 1406              		.loc 2 364 0
 1407 0060 3B69     		ldr	r3, [r7, #16]
 1408 0062 1B0A     		lsrs	r3, r3, #8
 1409 0064 4FF00004 		mov	r4, #0
 1410 0068 4FF0FF01 		mov	r1, #255
 1411 006c 4FF00002 		mov	r2, #0
 1412 0070 03EA0103 		and	r3, r3, r1
 1413 0074 04EA0204 		and	r4, r4, r2
 1414 0078 1A46     		mov	r2, r3
 1415 007a 2346     		mov	r3, r4
 1416 007c 3A49     		ldr	r1, .L80+20
 1417 007e 0020     		movs	r0, #0
 1418 0080 FFF7FEFF 		bl	HAL_FLASH_Program
 1419 0084 0346     		mov	r3, r0
 1420 0086 FB73     		strb	r3, [r7, #15]
 365:Src/spiops.c  **** 
 366:Src/spiops.c  ****     if(flash_status != HAL_OK)
 1421              		.loc 2 366 0
 1422 0088 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1423 008a 002B     		cmp	r3, #0
 1424 008c 02D0     		beq	.L74
 367:Src/spiops.c  ****         mprintf("write error\r\n");
 1425              		.loc 2 367 0
 1426 008e 3548     		ldr	r0, .L80+16
 1427 0090 FFF7FEFF 		bl	mprintf
 1428              	.L74:
 368:Src/spiops.c  **** 
 369:Src/spiops.c  ****     flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS + 2, (total_size >> 16) & 0x
 1429              		.loc 2 369 0
 1430 0094 3B69     		ldr	r3, [r7, #16]
 1431 0096 1B0C     		lsrs	r3, r3, #16
 1432 0098 4FF00004 		mov	r4, #0
 1433 009c 4FF0FF01 		mov	r1, #255
 1434 00a0 4FF00002 		mov	r2, #0
 1435 00a4 03EA0103 		and	r3, r3, r1
 1436 00a8 04EA0204 		and	r4, r4, r2
 1437 00ac 1A46     		mov	r2, r3
 1438 00ae 2346     		mov	r3, r4
 1439 00b0 2E49     		ldr	r1, .L80+24
 1440 00b2 0020     		movs	r0, #0
 1441 00b4 FFF7FEFF 		bl	HAL_FLASH_Program
 1442 00b8 0346     		mov	r3, r0
 1443 00ba FB73     		strb	r3, [r7, #15]
 370:Src/spiops.c  **** 
 371:Src/spiops.c  ****     if(flash_status != HAL_OK)
 1444              		.loc 2 371 0
 1445 00bc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1446 00be 002B     		cmp	r3, #0
 1447 00c0 02D0     		beq	.L75
 372:Src/spiops.c  ****         mprintf("write error\r\n");
 1448              		.loc 2 372 0
ARM GAS  /tmp/ccImugAR.s 			page 34


 1449 00c2 2848     		ldr	r0, .L80+16
 1450 00c4 FFF7FEFF 		bl	mprintf
 1451              	.L75:
 373:Src/spiops.c  **** 
 374:Src/spiops.c  ****     flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS + 3, (total_size >> 24) & 0x
 1452              		.loc 2 374 0
 1453 00c8 3B69     		ldr	r3, [r7, #16]
 1454 00ca 1B0E     		lsrs	r3, r3, #24
 1455 00cc 4FF00004 		mov	r4, #0
 1456 00d0 1A46     		mov	r2, r3
 1457 00d2 2346     		mov	r3, r4
 1458 00d4 2649     		ldr	r1, .L80+28
 1459 00d6 0020     		movs	r0, #0
 1460 00d8 FFF7FEFF 		bl	HAL_FLASH_Program
 1461 00dc 0346     		mov	r3, r0
 1462 00de FB73     		strb	r3, [r7, #15]
 375:Src/spiops.c  **** 
 376:Src/spiops.c  ****     if(flash_status != HAL_OK)
 1463              		.loc 2 376 0
 1464 00e0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1465 00e2 002B     		cmp	r3, #0
 1466 00e4 02D0     		beq	.L76
 377:Src/spiops.c  ****         mprintf("write error\r\n");
 1467              		.loc 2 377 0
 1468 00e6 1F48     		ldr	r0, .L80+16
 1469 00e8 FFF7FEFF 		bl	mprintf
 1470              	.L76:
 1471              	.LBB6:
 378:Src/spiops.c  **** 
 379:Src/spiops.c  ****     for(int i=0; i<total_size; i++)
 1472              		.loc 2 379 0
 1473 00ec 0023     		movs	r3, #0
 1474 00ee 7B61     		str	r3, [r7, #20]
 1475 00f0 1AE0     		b	.L77
 1476              	.L79:
 380:Src/spiops.c  ****     {
 381:Src/spiops.c  ****         flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS + i + 4, (uint8_t)Update
 1477              		.loc 2 381 0
 1478 00f2 7A69     		ldr	r2, [r7, #20]
 1479 00f4 1F4B     		ldr	r3, .L80+32
 1480 00f6 1344     		add	r3, r3, r2
 1481 00f8 1946     		mov	r1, r3
 1482 00fa 7B69     		ldr	r3, [r7, #20]
 1483 00fc 7A68     		ldr	r2, [r7, #4]
 1484 00fe 1344     		add	r3, r3, r2
 1485 0100 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1486 0102 DBB2     		uxtb	r3, r3
 1487 0104 4FF00004 		mov	r4, #0
 1488 0108 1A46     		mov	r2, r3
 1489 010a 2346     		mov	r3, r4
 1490 010c 0020     		movs	r0, #0
 1491 010e FFF7FEFF 		bl	HAL_FLASH_Program
 1492 0112 0346     		mov	r3, r0
 1493 0114 FB73     		strb	r3, [r7, #15]
 382:Src/spiops.c  **** 
 383:Src/spiops.c  ****         if(flash_status != HAL_OK)
 1494              		.loc 2 383 0
ARM GAS  /tmp/ccImugAR.s 			page 35


 1495 0116 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1496 0118 002B     		cmp	r3, #0
 1497 011a 02D0     		beq	.L78
 384:Src/spiops.c  ****             mprintf("write error\r\n");
 1498              		.loc 2 384 0
 1499 011c 1148     		ldr	r0, .L80+16
 1500 011e FFF7FEFF 		bl	mprintf
 1501              	.L78:
 379:Src/spiops.c  ****     {
 1502              		.loc 2 379 0 discriminator 2
 1503 0122 7B69     		ldr	r3, [r7, #20]
 1504 0124 0133     		adds	r3, r3, #1
 1505 0126 7B61     		str	r3, [r7, #20]
 1506              	.L77:
 379:Src/spiops.c  ****     {
 1507              		.loc 2 379 0 is_stmt 0 discriminator 1
 1508 0128 7A69     		ldr	r2, [r7, #20]
 1509 012a 3B69     		ldr	r3, [r7, #16]
 1510 012c 9A42     		cmp	r2, r3
 1511 012e E0D3     		bcc	.L79
 1512              	.LBE6:
 385:Src/spiops.c  ****     }
 386:Src/spiops.c  **** 
 387:Src/spiops.c  ****     HAL_FLASH_Lock();
 1513              		.loc 2 387 0 is_stmt 1
 1514 0130 FFF7FEFF 		bl	HAL_FLASH_Lock
 388:Src/spiops.c  **** 
 389:Src/spiops.c  ****     mprintf("Writing is done\r\n");
 1515              		.loc 2 389 0
 1516 0134 1048     		ldr	r0, .L80+36
 1517 0136 FFF7FEFF 		bl	mprintf
 390:Src/spiops.c  **** 
 391:Src/spiops.c  ****     mprintf("Restarting...\r\n");
 1518              		.loc 2 391 0
 1519 013a 1048     		ldr	r0, .L80+40
 1520 013c FFF7FEFF 		bl	mprintf
 392:Src/spiops.c  **** 
 393:Src/spiops.c  ****     osDelay(50);
 1521              		.loc 2 393 0
 1522 0140 3220     		movs	r0, #50
 1523 0142 FFF7FEFF 		bl	osDelay
 394:Src/spiops.c  **** 
 395:Src/spiops.c  **** 
 396:Src/spiops.c  ****     HAL_NVIC_SystemReset();
 1524              		.loc 2 396 0
 1525 0146 FFF7FEFF 		bl	HAL_NVIC_SystemReset
 397:Src/spiops.c  **** 
 398:Src/spiops.c  **** }
 1526              		.loc 2 398 0
 1527 014a 00BF     		nop
 1528 014c 1C37     		adds	r7, r7, #28
 1529              	.LCFI45:
 1530              		.cfi_def_cfa_offset 12
 1531 014e BD46     		mov	sp, r7
 1532              	.LCFI46:
 1533              		.cfi_def_cfa_register 13
 1534              		@ sp needed
ARM GAS  /tmp/ccImugAR.s 			page 36


 1535 0150 90BD     		pop	{r4, r7, pc}
 1536              	.L81:
 1537 0152 00BF     		.align	2
 1538              	.L80:
 1539 0154 74000000 		.word	.LC14
 1540 0158 003C0240 		.word	1073888256
 1541 015c 00000000 		.word	UpdateFile
 1542 0160 00000808 		.word	134742016
 1543 0164 64000000 		.word	.LC13
 1544 0168 01000808 		.word	134742017
 1545 016c 02000808 		.word	134742018
 1546 0170 03000808 		.word	134742019
 1547 0174 04000808 		.word	134742020
 1548 0178 90000000 		.word	.LC15
 1549 017c 54000000 		.word	.LC12
 1550              		.cfi_endproc
 1551              	.LFE154:
 1553              		.section	.text.processControlData,"ax",%progbits
 1554              		.align	1
 1555              		.global	processControlData
 1556              		.syntax unified
 1557              		.thumb
 1558              		.thumb_func
 1559              		.fpu fpv4-sp-d16
 1561              	processControlData:
 1562              	.LFB155:
 399:Src/spiops.c  **** 
 400:Src/spiops.c  **** 
 401:Src/spiops.c  **** 
 402:Src/spiops.c  **** void processControlData()
 403:Src/spiops.c  **** {
 1563              		.loc 2 403 0
 1564              		.cfi_startproc
 1565              		@ args = 0, pretend = 0, frame = 0
 1566              		@ frame_needed = 1, uses_anonymous_args = 0
 1567              		@ link register save eliminated.
 1568 0000 80B4     		push	{r7}
 1569              	.LCFI47:
 1570              		.cfi_def_cfa_offset 4
 1571              		.cfi_offset 7, -4
 1572 0002 00AF     		add	r7, sp, #0
 1573              	.LCFI48:
 1574              		.cfi_def_cfa_register 7
 404:Src/spiops.c  **** 
 405:Src/spiops.c  **** 
 406:Src/spiops.c  ****     if(ControlData -> step_motor1_direction == FORWARD)
 1575              		.loc 2 406 0
 1576 0004 274B     		ldr	r3, .L90
 1577 0006 1B68     		ldr	r3, [r3]
 1578 0008 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1579 000c 012B     		cmp	r3, #1
 1580 000e 0AD1     		bne	.L83
 407:Src/spiops.c  ****     {
 408:Src/spiops.c  ****         motor1.direction = FORWARD;
 1581              		.loc 2 408 0
 1582 0010 254B     		ldr	r3, .L90+4
 1583 0012 0122     		movs	r2, #1
ARM GAS  /tmp/ccImugAR.s 			page 37


 1584 0014 1A60     		str	r2, [r3]
 409:Src/spiops.c  ****         motor1.speed = ControlData -> step_motor1_speed;
 1585              		.loc 2 409 0
 1586 0016 234B     		ldr	r3, .L90
 1587 0018 1B68     		ldr	r3, [r3]
 1588 001a 93F84230 		ldrb	r3, [r3, #66]	@ zero_extendqisi2
 1589 001e 1A46     		mov	r2, r3
 1590 0020 214B     		ldr	r3, .L90+4
 1591 0022 5A60     		str	r2, [r3, #4]
 1592 0024 13E0     		b	.L84
 1593              	.L83:
 410:Src/spiops.c  ****     }
 411:Src/spiops.c  ****     else if(ControlData -> step_motor1_direction == BACKWARD)
 1594              		.loc 2 411 0
 1595 0026 1F4B     		ldr	r3, .L90
 1596 0028 1B68     		ldr	r3, [r3]
 1597 002a 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1598 002e 022B     		cmp	r3, #2
 1599 0030 0AD1     		bne	.L85
 412:Src/spiops.c  ****     {
 413:Src/spiops.c  ****         motor1.direction = BACKWARD;
 1600              		.loc 2 413 0
 1601 0032 1D4B     		ldr	r3, .L90+4
 1602 0034 0222     		movs	r2, #2
 1603 0036 1A60     		str	r2, [r3]
 414:Src/spiops.c  ****         motor1.speed = ControlData -> step_motor1_speed;
 1604              		.loc 2 414 0
 1605 0038 1A4B     		ldr	r3, .L90
 1606 003a 1B68     		ldr	r3, [r3]
 1607 003c 93F84230 		ldrb	r3, [r3, #66]	@ zero_extendqisi2
 1608 0040 1A46     		mov	r2, r3
 1609 0042 194B     		ldr	r3, .L90+4
 1610 0044 5A60     		str	r2, [r3, #4]
 1611 0046 02E0     		b	.L84
 1612              	.L85:
 415:Src/spiops.c  ****     }
 416:Src/spiops.c  ****     else
 417:Src/spiops.c  ****     {
 418:Src/spiops.c  ****         motor1.direction = STOP;
 1613              		.loc 2 418 0
 1614 0048 174B     		ldr	r3, .L90+4
 1615 004a 0022     		movs	r2, #0
 1616 004c 1A60     		str	r2, [r3]
 1617              	.L84:
 419:Src/spiops.c  ****     }
 420:Src/spiops.c  **** 
 421:Src/spiops.c  ****     if(ControlData -> step_motor2_direction == FORWARD)
 1618              		.loc 2 421 0
 1619 004e 154B     		ldr	r3, .L90
 1620 0050 1B68     		ldr	r3, [r3]
 1621 0052 93F83D30 		ldrb	r3, [r3, #61]	@ zero_extendqisi2
 1622 0056 012B     		cmp	r3, #1
 1623 0058 0AD1     		bne	.L86
 422:Src/spiops.c  ****     {
 423:Src/spiops.c  ****         motor2.direction = FORWARD;
 1624              		.loc 2 423 0
 1625 005a 144B     		ldr	r3, .L90+8
ARM GAS  /tmp/ccImugAR.s 			page 38


 1626 005c 0122     		movs	r2, #1
 1627 005e 1A60     		str	r2, [r3]
 424:Src/spiops.c  ****         motor1.speed = ControlData -> step_motor2_speed;
 1628              		.loc 2 424 0
 1629 0060 104B     		ldr	r3, .L90
 1630 0062 1B68     		ldr	r3, [r3]
 1631 0064 93F84330 		ldrb	r3, [r3, #67]	@ zero_extendqisi2
 1632 0068 1A46     		mov	r2, r3
 1633 006a 0F4B     		ldr	r3, .L90+4
 1634 006c 5A60     		str	r2, [r3, #4]
 425:Src/spiops.c  ****     }
 426:Src/spiops.c  ****     else if(ControlData -> step_motor2_direction == BACKWARD)
 427:Src/spiops.c  ****     {
 428:Src/spiops.c  ****         motor2.direction = BACKWARD;
 429:Src/spiops.c  ****         motor1.speed = ControlData -> step_motor2_speed;
 430:Src/spiops.c  ****     }
 431:Src/spiops.c  ****     else
 432:Src/spiops.c  ****     {
 433:Src/spiops.c  ****         motor2.direction = STOP;
 434:Src/spiops.c  ****     }
 435:Src/spiops.c  **** 
 436:Src/spiops.c  **** 
 437:Src/spiops.c  **** }
 1635              		.loc 2 437 0
 1636 006e 13E0     		b	.L89
 1637              	.L86:
 426:Src/spiops.c  ****     {
 1638              		.loc 2 426 0
 1639 0070 0C4B     		ldr	r3, .L90
 1640 0072 1B68     		ldr	r3, [r3]
 1641 0074 93F83D30 		ldrb	r3, [r3, #61]	@ zero_extendqisi2
 1642 0078 022B     		cmp	r3, #2
 1643 007a 0AD1     		bne	.L88
 428:Src/spiops.c  ****         motor1.speed = ControlData -> step_motor2_speed;
 1644              		.loc 2 428 0
 1645 007c 0B4B     		ldr	r3, .L90+8
 1646 007e 0222     		movs	r2, #2
 1647 0080 1A60     		str	r2, [r3]
 429:Src/spiops.c  ****     }
 1648              		.loc 2 429 0
 1649 0082 084B     		ldr	r3, .L90
 1650 0084 1B68     		ldr	r3, [r3]
 1651 0086 93F84330 		ldrb	r3, [r3, #67]	@ zero_extendqisi2
 1652 008a 1A46     		mov	r2, r3
 1653 008c 064B     		ldr	r3, .L90+4
 1654 008e 5A60     		str	r2, [r3, #4]
 1655              		.loc 2 437 0
 1656 0090 02E0     		b	.L89
 1657              	.L88:
 433:Src/spiops.c  ****     }
 1658              		.loc 2 433 0
 1659 0092 064B     		ldr	r3, .L90+8
 1660 0094 0022     		movs	r2, #0
 1661 0096 1A60     		str	r2, [r3]
 1662              	.L89:
 1663              		.loc 2 437 0
 1664 0098 00BF     		nop
ARM GAS  /tmp/ccImugAR.s 			page 39


 1665 009a BD46     		mov	sp, r7
 1666              	.LCFI49:
 1667              		.cfi_def_cfa_register 13
 1668              		@ sp needed
 1669 009c 5DF8047B 		ldr	r7, [sp], #4
 1670              	.LCFI50:
 1671              		.cfi_restore 7
 1672              		.cfi_def_cfa_offset 0
 1673 00a0 7047     		bx	lr
 1674              	.L91:
 1675 00a2 00BF     		.align	2
 1676              	.L90:
 1677 00a4 00000000 		.word	ControlData
 1678 00a8 00000000 		.word	motor1
 1679 00ac 00000000 		.word	motor2
 1680              		.cfi_endproc
 1681              	.LFE155:
 1683              		.section	.rodata
 1684 00a2 0000     		.align	2
 1685              	.LC16:
 1686 00a4 73656E73 		.ascii	"sensorOps\015\012\000"
 1686      6F724F70 
 1686      730D0A00 
 1687              		.section	.text.sensorOps,"ax",%progbits
 1688              		.align	1
 1689              		.global	sensorOps
 1690              		.syntax unified
 1691              		.thumb
 1692              		.thumb_func
 1693              		.fpu fpv4-sp-d16
 1695              	sensorOps:
 1696              	.LFB156:
 1697              		.file 3 "Src/sensorops.c"
   1:Src/sensorops.c **** #include "sensorops.h"
   2:Src/sensorops.c **** 
   3:Src/sensorops.c **** 
   4:Src/sensorops.c **** /* sensorOps function */
   5:Src/sensorops.c **** void sensorOps(void const * argument)
   6:Src/sensorops.c **** {
 1698              		.loc 3 6 0
 1699              		.cfi_startproc
 1700              		@ args = 0, pretend = 0, frame = 8
 1701              		@ frame_needed = 1, uses_anonymous_args = 0
 1702 0000 80B5     		push	{r7, lr}
 1703              	.LCFI51:
 1704              		.cfi_def_cfa_offset 8
 1705              		.cfi_offset 7, -8
 1706              		.cfi_offset 14, -4
 1707 0002 82B0     		sub	sp, sp, #8
 1708              	.LCFI52:
 1709              		.cfi_def_cfa_offset 16
 1710 0004 00AF     		add	r7, sp, #0
 1711              	.LCFI53:
 1712              		.cfi_def_cfa_register 7
 1713 0006 7860     		str	r0, [r7, #4]
   7:Src/sensorops.c **** 
   8:Src/sensorops.c ****   mprintf("sensorOps\r\n");
ARM GAS  /tmp/ccImugAR.s 			page 40


 1714              		.loc 3 8 0
 1715 0008 1A48     		ldr	r0, .L94
 1716 000a FFF7FEFF 		bl	mprintf
   9:Src/sensorops.c **** 
  10:Src/sensorops.c ****   sensorInit();
 1717              		.loc 3 10 0
 1718 000e FFF7FEFF 		bl	sensorInit
  11:Src/sensorops.c **** 
  12:Src/sensorops.c ****   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 1719              		.loc 3 12 0
 1720 0012 0021     		movs	r1, #0
 1721 0014 1848     		ldr	r0, .L94+4
 1722 0016 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1723              	.L93:
  13:Src/sensorops.c **** 
  14:Src/sensorops.c **** 
  15:Src/sensorops.c **** 
  16:Src/sensorops.c **** 
  17:Src/sensorops.c **** //  calibrateCompass();
  18:Src/sensorops.c **** 
  19:Src/sensorops.c ****   while(1)
  20:Src/sensorops.c ****   {
  21:Src/sensorops.c ****       readAllSensors();
 1724              		.loc 3 21 0 discriminator 1
 1725 001a FFF7FEFF 		bl	readAllSensors
  22:Src/sensorops.c **** 
  23:Src/sensorops.c **** 
  24:Src/sensorops.c ****       xSemaphoreTake(spiMutexHandle, portMAX_DELAY);
 1726              		.loc 3 24 0 discriminator 1
 1727 001e 174B     		ldr	r3, .L94+8
 1728 0020 1868     		ldr	r0, [r3]
 1729 0022 0023     		movs	r3, #0
 1730 0024 4FF0FF32 		mov	r2, #-1
 1731 0028 0021     		movs	r1, #0
 1732 002a FFF7FEFF 		bl	xQueueGenericReceive
  25:Src/sensorops.c **** 
  26:Src/sensorops.c ****       EnvironmentData -> sensor_data.temperature = sensorValues.temperature;
 1733              		.loc 3 26 0 discriminator 1
 1734 002e 144B     		ldr	r3, .L94+12
 1735 0030 1B68     		ldr	r3, [r3]
 1736 0032 144A     		ldr	r2, .L94+16
 1737 0034 9268     		ldr	r2, [r2, #8]
 1738 0036 5A66     		str	r2, [r3, #100]
  27:Src/sensorops.c ****       EnvironmentData -> sensor_data.pressure = sensorValues.pressure;
 1739              		.loc 3 27 0 discriminator 1
 1740 0038 114B     		ldr	r3, .L94+12
 1741 003a 1B68     		ldr	r3, [r3]
 1742 003c 114A     		ldr	r2, .L94+16
 1743 003e 1268     		ldr	r2, [r2]
 1744 0040 DA66     		str	r2, [r3, #108]
  28:Src/sensorops.c ****       EnvironmentData -> sensor_data.altitude = sensorValues.altitude;
 1745              		.loc 3 28 0 discriminator 1
 1746 0042 0F4B     		ldr	r3, .L94+12
 1747 0044 1B68     		ldr	r3, [r3]
 1748 0046 0F4A     		ldr	r2, .L94+16
 1749 0048 5268     		ldr	r2, [r2, #4]
 1750 004a 1A67     		str	r2, [r3, #112]
ARM GAS  /tmp/ccImugAR.s 			page 41


  29:Src/sensorops.c ****       EnvironmentData -> sensor_data.wheather_condition = sensorValues.wheather_condition;
 1751              		.loc 3 29 0 discriminator 1
 1752 004c 0C4B     		ldr	r3, .L94+12
 1753 004e 1B68     		ldr	r3, [r3]
 1754 0050 0C4A     		ldr	r2, .L94+16
 1755 0052 127B     		ldrb	r2, [r2, #12]	@ zero_extendqisi2
 1756 0054 83F87420 		strb	r2, [r3, #116]
  30:Src/sensorops.c ****       EnvironmentData -> sensor_data.compass_degree = sensorValues.compass_degree;
 1757              		.loc 3 30 0 discriminator 1
 1758 0058 094B     		ldr	r3, .L94+12
 1759 005a 1B68     		ldr	r3, [r3]
 1760 005c 094A     		ldr	r2, .L94+16
 1761 005e 1269     		ldr	r2, [r2, #16]
 1762 0060 9A66     		str	r2, [r3, #104]
  31:Src/sensorops.c **** 
  32:Src/sensorops.c ****       xSemaphoreGive(spiMutexHandle);
 1763              		.loc 3 32 0 discriminator 1
 1764 0062 064B     		ldr	r3, .L94+8
 1765 0064 1868     		ldr	r0, [r3]
 1766 0066 0023     		movs	r3, #0
 1767 0068 0022     		movs	r2, #0
 1768 006a 0021     		movs	r1, #0
 1769 006c FFF7FEFF 		bl	xQueueGenericSend
  21:Src/sensorops.c **** 
 1770              		.loc 3 21 0 discriminator 1
 1771 0070 D3E7     		b	.L93
 1772              	.L95:
 1773 0072 00BF     		.align	2
 1774              	.L94:
 1775 0074 A4000000 		.word	.LC16
 1776 0078 00000000 		.word	htim3
 1777 007c 00000000 		.word	spiMutexHandle
 1778 0080 00000000 		.word	EnvironmentData
 1779 0084 00000000 		.word	sensorValues
 1780              		.cfi_endproc
 1781              	.LFE156:
 1783              		.section	.rodata
 1784              		.align	2
 1785              	.LC17:
 1786 00b0 6D6F746F 		.ascii	"motorOps\015\012\000"
 1786      724F7073 
 1786      0D0A00
 1787              		.section	.text.motorOps,"ax",%progbits
 1788              		.align	1
 1789              		.global	motorOps
 1790              		.syntax unified
 1791              		.thumb
 1792              		.thumb_func
 1793              		.fpu fpv4-sp-d16
 1795              	motorOps:
 1796              	.LFB157:
 1797              		.file 4 "Src/motorops.c"
   1:Src/motorops.c **** #include "motorops.h"
   2:Src/motorops.c **** 
   3:Src/motorops.c **** 
   4:Src/motorops.c **** 
   5:Src/motorops.c **** void motorOps(void const * argument)
ARM GAS  /tmp/ccImugAR.s 			page 42


   6:Src/motorops.c **** {
 1798              		.loc 4 6 0
 1799              		.cfi_startproc
 1800              		@ args = 0, pretend = 0, frame = 16
 1801              		@ frame_needed = 1, uses_anonymous_args = 0
 1802 0000 80B5     		push	{r7, lr}
 1803              	.LCFI54:
 1804              		.cfi_def_cfa_offset 8
 1805              		.cfi_offset 7, -8
 1806              		.cfi_offset 14, -4
 1807 0002 84B0     		sub	sp, sp, #16
 1808              	.LCFI55:
 1809              		.cfi_def_cfa_offset 24
 1810 0004 00AF     		add	r7, sp, #0
 1811              	.LCFI56:
 1812              		.cfi_def_cfa_register 7
 1813 0006 7860     		str	r0, [r7, #4]
   7:Src/motorops.c **** 
   8:Src/motorops.c ****     int pwm = 45;
 1814              		.loc 4 8 0
 1815 0008 2D23     		movs	r3, #45
 1816 000a FB60     		str	r3, [r7, #12]
   9:Src/motorops.c **** 
  10:Src/motorops.c ****     mprintf("motorOps\r\n");
 1817              		.loc 4 10 0
 1818 000c 1A48     		ldr	r0, .L102
 1819 000e FFF7FEFF 		bl	mprintf
  11:Src/motorops.c **** 
  12:Src/motorops.c **** 
  13:Src/motorops.c **** 
  14:Src/motorops.c ****     __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, pwm);
 1820              		.loc 4 14 0
 1821 0012 1A4B     		ldr	r3, .L102+4
 1822 0014 1B68     		ldr	r3, [r3]
 1823 0016 FA68     		ldr	r2, [r7, #12]
 1824 0018 5A63     		str	r2, [r3, #52]
  15:Src/motorops.c ****     pwm++;
 1825              		.loc 4 15 0
 1826 001a FB68     		ldr	r3, [r7, #12]
 1827 001c 0133     		adds	r3, r3, #1
 1828 001e FB60     		str	r3, [r7, #12]
  16:Src/motorops.c ****     osDelay(100);
 1829              		.loc 4 16 0
 1830 0020 6420     		movs	r0, #100
 1831 0022 FFF7FEFF 		bl	osDelay
  17:Src/motorops.c **** 
  18:Src/motorops.c ****     if(pwm == 153)
 1832              		.loc 4 18 0
 1833 0026 FB68     		ldr	r3, [r7, #12]
 1834 0028 992B     		cmp	r3, #153
 1835 002a 01D1     		bne	.L97
  19:Src/motorops.c ****       pwm = 45;
 1836              		.loc 4 19 0
 1837 002c 2D23     		movs	r3, #45
 1838 002e FB60     		str	r3, [r7, #12]
 1839              	.L97:
  20:Src/motorops.c **** 
ARM GAS  /tmp/ccImugAR.s 			page 43


  21:Src/motorops.c **** 
  22:Src/motorops.c ****     while(1)
  23:Src/motorops.c ****     {
  24:Src/motorops.c **** 
  25:Src/motorops.c **** 
  26:Src/motorops.c **** 
  27:Src/motorops.c ****       if(motor1.direction == FORWARD)
 1840              		.loc 4 27 0
 1841 0030 134B     		ldr	r3, .L102+8
 1842 0032 1B68     		ldr	r3, [r3]
 1843 0034 012B     		cmp	r3, #1
 1844 0036 02D1     		bne	.L98
  28:Src/motorops.c ****       {
  29:Src/motorops.c ****         motor1Drive(FORWARD);
 1845              		.loc 4 29 0
 1846 0038 0120     		movs	r0, #1
 1847 003a FFF7FEFF 		bl	motor1Drive
 1848              	.L98:
  30:Src/motorops.c ****       }
  31:Src/motorops.c **** 
  32:Src/motorops.c ****       if(motor1.direction == BACKWARD)
 1849              		.loc 4 32 0
 1850 003e 104B     		ldr	r3, .L102+8
 1851 0040 1B68     		ldr	r3, [r3]
 1852 0042 022B     		cmp	r3, #2
 1853 0044 02D1     		bne	.L99
  33:Src/motorops.c ****       {
  34:Src/motorops.c ****         motor1Drive(BACKWARD);
 1854              		.loc 4 34 0
 1855 0046 0220     		movs	r0, #2
 1856 0048 FFF7FEFF 		bl	motor1Drive
 1857              	.L99:
  35:Src/motorops.c ****       }
  36:Src/motorops.c **** 
  37:Src/motorops.c ****       if(motor2.direction == FORWARD)
 1858              		.loc 4 37 0
 1859 004c 0D4B     		ldr	r3, .L102+12
 1860 004e 1B68     		ldr	r3, [r3]
 1861 0050 012B     		cmp	r3, #1
 1862 0052 02D1     		bne	.L100
  38:Src/motorops.c ****       {
  39:Src/motorops.c ****         motor2Drive(FORWARD);
 1863              		.loc 4 39 0
 1864 0054 0120     		movs	r0, #1
 1865 0056 FFF7FEFF 		bl	motor2Drive
 1866              	.L100:
  40:Src/motorops.c ****       }
  41:Src/motorops.c **** 
  42:Src/motorops.c ****       if(motor2.direction == BACKWARD)
 1867              		.loc 4 42 0
 1868 005a 0A4B     		ldr	r3, .L102+12
 1869 005c 1B68     		ldr	r3, [r3]
 1870 005e 022B     		cmp	r3, #2
 1871 0060 02D1     		bne	.L101
  43:Src/motorops.c ****       {
  44:Src/motorops.c ****         motor2Drive(BACKWARD);
 1872              		.loc 4 44 0
ARM GAS  /tmp/ccImugAR.s 			page 44


 1873 0062 0220     		movs	r0, #2
 1874 0064 FFF7FEFF 		bl	motor2Drive
 1875              	.L101:
  45:Src/motorops.c ****       }
  46:Src/motorops.c **** 
  47:Src/motorops.c ****       osDelay(2 + motor1.speed);
 1876              		.loc 4 47 0
 1877 0068 054B     		ldr	r3, .L102+8
 1878 006a 5B68     		ldr	r3, [r3, #4]
 1879 006c 0233     		adds	r3, r3, #2
 1880 006e 1846     		mov	r0, r3
 1881 0070 FFF7FEFF 		bl	osDelay
  27:Src/motorops.c ****       {
 1882              		.loc 4 27 0
 1883 0074 DCE7     		b	.L97
 1884              	.L103:
 1885 0076 00BF     		.align	2
 1886              	.L102:
 1887 0078 B0000000 		.word	.LC17
 1888 007c 00000000 		.word	htim3
 1889 0080 00000000 		.word	motor1
 1890 0084 00000000 		.word	motor2
 1891              		.cfi_endproc
 1892              	.LFE157:
 1894              		.section	.text.vprint,"ax",%progbits
 1895              		.align	1
 1896              		.global	vprint
 1897              		.syntax unified
 1898              		.thumb
 1899              		.thumb_func
 1900              		.fpu fpv4-sp-d16
 1902              	vprint:
 1903              	.LFB158:
 1904              		.file 5 "Src/freertos.c"
   1:Src/freertos.c **** /**
   2:Src/freertos.c ****   ******************************************************************************
   3:Src/freertos.c ****   * File Name          : freertos.c
   4:Src/freertos.c ****   * Description        : Code for freertos applications
   5:Src/freertos.c ****   ******************************************************************************
   6:Src/freertos.c ****   * This notice applies to any and all portions of this file
   7:Src/freertos.c ****   * that are not between comment pairs USER CODE BEGIN and
   8:Src/freertos.c ****   * USER CODE END. Other portions of this file, whether 
   9:Src/freertos.c ****   * inserted by the user or by software development tools
  10:Src/freertos.c ****   * are owned by their respective copyright owners.
  11:Src/freertos.c ****   *
  12:Src/freertos.c ****   * Copyright (c) 2018 STMicroelectronics International N.V. 
  13:Src/freertos.c ****   * All rights reserved.
  14:Src/freertos.c ****   *
  15:Src/freertos.c ****   * Redistribution and use in source and binary forms, with or without 
  16:Src/freertos.c ****   * modification, are permitted, provided that the following conditions are met:
  17:Src/freertos.c ****   *
  18:Src/freertos.c ****   * 1. Redistribution of source code must retain the above copyright notice, 
  19:Src/freertos.c ****   *    this list of conditions and the following disclaimer.
  20:Src/freertos.c ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  21:Src/freertos.c ****   *    this list of conditions and the following disclaimer in the documentation
  22:Src/freertos.c ****   *    and/or other materials provided with the distribution.
  23:Src/freertos.c ****   * 3. Neither the name of STMicroelectronics nor the names of other 
ARM GAS  /tmp/ccImugAR.s 			page 45


  24:Src/freertos.c ****   *    contributors to this software may be used to endorse or promote products 
  25:Src/freertos.c ****   *    derived from this software without specific written permission.
  26:Src/freertos.c ****   * 4. This software, including modifications and/or derivative works of this 
  27:Src/freertos.c ****   *    software, must execute solely and exclusively on microcontroller or
  28:Src/freertos.c ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  29:Src/freertos.c ****   * 5. Redistribution and use of this software other than as permitted under 
  30:Src/freertos.c ****   *    this license is void and will automatically terminate your rights under 
  31:Src/freertos.c ****   *    this license. 
  32:Src/freertos.c ****   *
  33:Src/freertos.c ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  34:Src/freertos.c ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  35:Src/freertos.c ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  36:Src/freertos.c ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  37:Src/freertos.c ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  38:Src/freertos.c ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  39:Src/freertos.c ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  40:Src/freertos.c ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  41:Src/freertos.c ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  42:Src/freertos.c ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  43:Src/freertos.c ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  44:Src/freertos.c ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  45:Src/freertos.c ****   *
  46:Src/freertos.c ****   ******************************************************************************
  47:Src/freertos.c ****   */
  48:Src/freertos.c **** 
  49:Src/freertos.c **** /* Includes ------------------------------------------------------------------*/
  50:Src/freertos.c **** #include "freertos.h"
  51:Src/freertos.c **** 
  52:Src/freertos.c **** #include "gpsops.c"
  53:Src/freertos.c **** #include "spiops.c"
  54:Src/freertos.c **** #include "sensorops.c"
  55:Src/freertos.c **** #include "motorops.c"
  56:Src/freertos.c **** 
  57:Src/freertos.c **** #include <stdlib.h>
  58:Src/freertos.c **** 
  59:Src/freertos.c **** 
  60:Src/freertos.c **** 
  61:Src/freertos.c **** void vprint(const char *fmt, va_list argp)
  62:Src/freertos.c **** {
 1905              		.loc 5 62 0
 1906              		.cfi_startproc
 1907              		@ args = 0, pretend = 0, frame = 160
 1908              		@ frame_needed = 1, uses_anonymous_args = 0
 1909 0000 80B5     		push	{r7, lr}
 1910              	.LCFI57:
 1911              		.cfi_def_cfa_offset 8
 1912              		.cfi_offset 7, -8
 1913              		.cfi_offset 14, -4
 1914 0002 A8B0     		sub	sp, sp, #160
 1915              	.LCFI58:
 1916              		.cfi_def_cfa_offset 168
 1917 0004 00AF     		add	r7, sp, #0
 1918              	.LCFI59:
 1919              		.cfi_def_cfa_register 7
 1920 0006 7860     		str	r0, [r7, #4]
 1921 0008 3960     		str	r1, [r7]
  63:Src/freertos.c ****     char string[150];
ARM GAS  /tmp/ccImugAR.s 			page 46


  64:Src/freertos.c **** 
  65:Src/freertos.c ****     if(0 < vsprintf(string,fmt,argp)) // build string
 1922              		.loc 5 65 0
 1923 000a 07F10803 		add	r3, r7, #8
 1924 000e 3A68     		ldr	r2, [r7]
 1925 0010 7968     		ldr	r1, [r7, #4]
 1926 0012 1846     		mov	r0, r3
 1927 0014 FFF7FEFF 		bl	vsprintf
 1928 0018 0346     		mov	r3, r0
 1929 001a 002B     		cmp	r3, #0
 1930 001c 0DDD     		ble	.L106
  66:Src/freertos.c ****        HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via 
 1931              		.loc 5 66 0
 1932 001e 07F10803 		add	r3, r7, #8
 1933 0022 1846     		mov	r0, r3
 1934 0024 FFF7FEFF 		bl	strlen
 1935 0028 0346     		mov	r3, r0
 1936 002a 9AB2     		uxth	r2, r3
 1937 002c 07F10801 		add	r1, r7, #8
 1938 0030 6FF07F43 		mvn	r3, #-16777216
 1939 0034 0348     		ldr	r0, .L107
 1940 0036 FFF7FEFF 		bl	HAL_UART_Transmit
 1941              	.L106:
  67:Src/freertos.c **** 
  68:Src/freertos.c **** }
 1942              		.loc 5 68 0
 1943 003a 00BF     		nop
 1944 003c A037     		adds	r7, r7, #160
 1945              	.LCFI60:
 1946              		.cfi_def_cfa_offset 8
 1947 003e BD46     		mov	sp, r7
 1948              	.LCFI61:
 1949              		.cfi_def_cfa_register 13
 1950              		@ sp needed
 1951 0040 80BD     		pop	{r7, pc}
 1952              	.L108:
 1953 0042 00BF     		.align	2
 1954              	.L107:
 1955 0044 00000000 		.word	huart1
 1956              		.cfi_endproc
 1957              	.LFE158:
 1959              		.section	.text.mprintf,"ax",%progbits
 1960              		.align	1
 1961              		.global	mprintf
 1962              		.syntax unified
 1963              		.thumb
 1964              		.thumb_func
 1965              		.fpu fpv4-sp-d16
 1967              	mprintf:
 1968              	.LFB159:
  69:Src/freertos.c **** 
  70:Src/freertos.c **** 
  71:Src/freertos.c **** 
  72:Src/freertos.c **** void mprintf(const char *fmt, ...) // custom printf() function
  73:Src/freertos.c **** {
 1969              		.loc 5 73 0
 1970              		.cfi_startproc
ARM GAS  /tmp/ccImugAR.s 			page 47


 1971              		@ args = 4, pretend = 16, frame = 8
 1972              		@ frame_needed = 1, uses_anonymous_args = 1
 1973 0000 0FB4     		push	{r0, r1, r2, r3}
 1974              	.LCFI62:
 1975              		.cfi_def_cfa_offset 16
 1976              		.cfi_offset 0, -16
 1977              		.cfi_offset 1, -12
 1978              		.cfi_offset 2, -8
 1979              		.cfi_offset 3, -4
 1980 0002 80B5     		push	{r7, lr}
 1981              	.LCFI63:
 1982              		.cfi_def_cfa_offset 24
 1983              		.cfi_offset 7, -24
 1984              		.cfi_offset 14, -20
 1985 0004 82B0     		sub	sp, sp, #8
 1986              	.LCFI64:
 1987              		.cfi_def_cfa_offset 32
 1988 0006 00AF     		add	r7, sp, #0
 1989              	.LCFI65:
 1990              		.cfi_def_cfa_register 7
  74:Src/freertos.c **** 
  75:Src/freertos.c ****     xSemaphoreTake(uartMutexHandle, 100);
 1991              		.loc 5 75 0
 1992 0008 0D4B     		ldr	r3, .L110
 1993 000a 1868     		ldr	r0, [r3]
 1994 000c 0023     		movs	r3, #0
 1995 000e 6422     		movs	r2, #100
 1996 0010 0021     		movs	r1, #0
 1997 0012 FFF7FEFF 		bl	xQueueGenericReceive
  76:Src/freertos.c ****     va_list argp;
  77:Src/freertos.c ****     va_start(argp, fmt);
 1998              		.loc 5 77 0
 1999 0016 07F11403 		add	r3, r7, #20
 2000 001a 7B60     		str	r3, [r7, #4]
  78:Src/freertos.c ****     vprint(fmt, argp);
 2001              		.loc 5 78 0
 2002 001c 7968     		ldr	r1, [r7, #4]
 2003 001e 3869     		ldr	r0, [r7, #16]
 2004 0020 FFF7FEFF 		bl	vprint
  79:Src/freertos.c ****     va_end(argp);
  80:Src/freertos.c ****     xSemaphoreGive(uartMutexHandle);
 2005              		.loc 5 80 0
 2006 0024 064B     		ldr	r3, .L110
 2007 0026 1868     		ldr	r0, [r3]
 2008 0028 0023     		movs	r3, #0
 2009 002a 0022     		movs	r2, #0
 2010 002c 0021     		movs	r1, #0
 2011 002e FFF7FEFF 		bl	xQueueGenericSend
  81:Src/freertos.c **** 
  82:Src/freertos.c **** }
 2012              		.loc 5 82 0
 2013 0032 00BF     		nop
 2014 0034 0837     		adds	r7, r7, #8
 2015              	.LCFI66:
 2016              		.cfi_def_cfa_offset 24
 2017 0036 BD46     		mov	sp, r7
 2018              	.LCFI67:
ARM GAS  /tmp/ccImugAR.s 			page 48


 2019              		.cfi_def_cfa_register 13
 2020              		@ sp needed
 2021 0038 BDE88040 		pop	{r7, lr}
 2022              	.LCFI68:
 2023              		.cfi_restore 14
 2024              		.cfi_restore 7
 2025              		.cfi_def_cfa_offset 16
 2026 003c 04B0     		add	sp, sp, #16
 2027              	.LCFI69:
 2028              		.cfi_restore 3
 2029              		.cfi_restore 2
 2030              		.cfi_restore 1
 2031              		.cfi_restore 0
 2032              		.cfi_def_cfa_offset 0
 2033 003e 7047     		bx	lr
 2034              	.L111:
 2035              		.align	2
 2036              	.L110:
 2037 0040 00000000 		.word	uartMutexHandle
 2038              		.cfi_endproc
 2039              	.LFE159:
 2041              		.section	.rodata
 2042 00bb 00       		.align	2
 2043              	.LC0:
 2044 00bc 67707354 		.ascii	"gpsThread\000"
 2044      68726561 
 2044      6400
 2045 00c6 0000     		.align	2
 2046              	.LC18:
 2047 00c8 BC000000 		.word	.LC0
 2048 00cc 00000000 		.word	gpsOps
 2049 00d0 0000     		.short	0
 2050 00d2 0000     		.space	2
 2051 00d4 00000000 		.word	0
 2052 00d8 00040000 		.word	1024
 2053              		.align	2
 2054              	.LC2:
 2055 00dc 73656E73 		.ascii	"sensorThread\000"
 2055      6F725468 
 2055      72656164 
 2055      00
 2056 00e9 000000   		.align	2
 2057              	.LC19:
 2058 00ec DC000000 		.word	.LC2
 2059 00f0 00000000 		.word	sensorOps
 2060 00f4 FFFF     		.short	-1
 2061 00f6 0000     		.space	2
 2062 00f8 00000000 		.word	0
 2063 00fc 00020000 		.word	512
 2064              		.align	2
 2065              	.LC4:
 2066 0100 73706943 		.ascii	"spiComThread\000"
 2066      6F6D5468 
 2066      72656164 
 2066      00
 2067 010d 000000   		.align	2
 2068              	.LC20:
ARM GAS  /tmp/ccImugAR.s 			page 49


 2069 0110 00010000 		.word	.LC4
 2070 0114 00000000 		.word	spiComOps
 2071 0118 0100     		.short	1
 2072 011a 0000     		.space	2
 2073 011c 00000000 		.word	0
 2074 0120 00040000 		.word	1024
 2075              		.align	2
 2076              	.LC6:
 2077 0124 6D6F746F 		.ascii	"motorThread\000"
 2077      72546872 
 2077      65616400 
 2078              		.align	2
 2079              	.LC21:
 2080 0130 24010000 		.word	.LC6
 2081 0134 00000000 		.word	motorOps
 2082 0138 0000     		.short	0
 2083 013a 0000     		.space	2
 2084 013c 00000000 		.word	0
 2085 0140 00020000 		.word	512
 2086              		.section	.text.MX_FREERTOS_Init,"ax",%progbits
 2087              		.align	1
 2088              		.global	MX_FREERTOS_Init
 2089              		.syntax unified
 2090              		.thumb
 2091              		.thumb_func
 2092              		.fpu fpv4-sp-d16
 2094              	MX_FREERTOS_Init:
 2095              	.LFB160:
  83:Src/freertos.c **** 
  84:Src/freertos.c **** 
  85:Src/freertos.c **** 
  86:Src/freertos.c **** void MX_FREERTOS_Init(void)
  87:Src/freertos.c **** {
 2096              		.loc 5 87 0
 2097              		.cfi_startproc
 2098              		@ args = 0, pretend = 0, frame = 104
 2099              		@ frame_needed = 1, uses_anonymous_args = 0
 2100 0000 B0B5     		push	{r4, r5, r7, lr}
 2101              	.LCFI70:
 2102              		.cfi_def_cfa_offset 16
 2103              		.cfi_offset 4, -16
 2104              		.cfi_offset 5, -12
 2105              		.cfi_offset 7, -8
 2106              		.cfi_offset 14, -4
 2107 0002 9AB0     		sub	sp, sp, #104
 2108              	.LCFI71:
 2109              		.cfi_def_cfa_offset 120
 2110 0004 00AF     		add	r7, sp, #0
 2111              	.LCFI72:
 2112              		.cfi_def_cfa_register 7
  88:Src/freertos.c **** 
  89:Src/freertos.c **** 
  90:Src/freertos.c ****   osMutexDef(spiMutex);
 2113              		.loc 5 90 0
 2114 0006 0023     		movs	r3, #0
 2115 0008 7B66     		str	r3, [r7, #100]
  91:Src/freertos.c ****   spiMutexHandle = osMutexCreate(osMutex(spiMutex));
ARM GAS  /tmp/ccImugAR.s 			page 50


 2116              		.loc 5 91 0
 2117 000a 07F16403 		add	r3, r7, #100
 2118 000e 1846     		mov	r0, r3
 2119 0010 FFF7FEFF 		bl	osMutexCreate
 2120 0014 0246     		mov	r2, r0
 2121 0016 4E4B     		ldr	r3, .L113
 2122 0018 1A60     		str	r2, [r3]
  92:Src/freertos.c **** 
  93:Src/freertos.c ****   osMutexDef(uartMutex);
 2123              		.loc 5 93 0
 2124 001a 0023     		movs	r3, #0
 2125 001c 3B66     		str	r3, [r7, #96]
  94:Src/freertos.c ****   uartMutexHandle = osMutexCreate(osMutex(uartMutex));
 2126              		.loc 5 94 0
 2127 001e 07F16003 		add	r3, r7, #96
 2128 0022 1846     		mov	r0, r3
 2129 0024 FFF7FEFF 		bl	osMutexCreate
 2130 0028 0246     		mov	r2, r0
 2131 002a 4A4B     		ldr	r3, .L113+4
 2132 002c 1A60     		str	r2, [r3]
  95:Src/freertos.c **** 
  96:Src/freertos.c ****   osMutexDef(memoryMutex);
 2133              		.loc 5 96 0
 2134 002e 0023     		movs	r3, #0
 2135 0030 FB65     		str	r3, [r7, #92]
  97:Src/freertos.c ****   memoryMutexHandle = osMutexCreate(osMutex(memoryMutex));
 2136              		.loc 5 97 0
 2137 0032 07F15C03 		add	r3, r7, #92
 2138 0036 1846     		mov	r0, r3
 2139 0038 FFF7FEFF 		bl	osMutexCreate
 2140 003c 0246     		mov	r2, r0
 2141 003e 464B     		ldr	r3, .L113+8
 2142 0040 1A60     		str	r2, [r3]
  98:Src/freertos.c **** 
  99:Src/freertos.c ****   osSemaphoreDef(uartSemaphore);
 2143              		.loc 5 99 0
 2144 0042 0023     		movs	r3, #0
 2145 0044 BB65     		str	r3, [r7, #88]
 100:Src/freertos.c ****   uartSemaphoreHandle = osSemaphoreCreate(osSemaphore(uartSemaphore), 1);
 2146              		.loc 5 100 0
 2147 0046 07F15803 		add	r3, r7, #88
 2148 004a 0121     		movs	r1, #1
 2149 004c 1846     		mov	r0, r3
 2150 004e FFF7FEFF 		bl	osSemaphoreCreate
 2151 0052 0246     		mov	r2, r0
 2152 0054 414B     		ldr	r3, .L113+12
 2153 0056 1A60     		str	r2, [r3]
 101:Src/freertos.c **** 
 102:Src/freertos.c ****   /* definition and creation of spiSemaphore */
 103:Src/freertos.c ****   osSemaphoreDef(spiSemaphore);
 2154              		.loc 5 103 0
 2155 0058 0023     		movs	r3, #0
 2156 005a 7B65     		str	r3, [r7, #84]
 104:Src/freertos.c ****   spiSemaphoreHandle = osSemaphoreCreate(osSemaphore(spiSemaphore), 1);
 2157              		.loc 5 104 0
 2158 005c 07F15403 		add	r3, r7, #84
 2159 0060 0121     		movs	r1, #1
ARM GAS  /tmp/ccImugAR.s 			page 51


 2160 0062 1846     		mov	r0, r3
 2161 0064 FFF7FEFF 		bl	osSemaphoreCreate
 2162 0068 0246     		mov	r2, r0
 2163 006a 3D4B     		ldr	r3, .L113+16
 2164 006c 1A60     		str	r2, [r3]
 105:Src/freertos.c **** 
 106:Src/freertos.c ****   /* definition and creation of gpsThread */
 107:Src/freertos.c ****   osThreadDef(gpsThread, gpsOps, osPriorityNormal, 0, 1024);
 2165              		.loc 5 107 0
 2166 006e 3D4B     		ldr	r3, .L113+20
 2167 0070 07F14004 		add	r4, r7, #64
 2168 0074 1D46     		mov	r5, r3
 2169 0076 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2170 0078 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2171 007a 2B68     		ldr	r3, [r5]
 2172 007c 2360     		str	r3, [r4]
 108:Src/freertos.c ****   gpsThreadHandle = osThreadCreate(osThread(gpsThread), NULL);
 2173              		.loc 5 108 0
 2174 007e 07F14003 		add	r3, r7, #64
 2175 0082 0021     		movs	r1, #0
 2176 0084 1846     		mov	r0, r3
 2177 0086 FFF7FEFF 		bl	osThreadCreate
 2178 008a 0246     		mov	r2, r0
 2179 008c 364B     		ldr	r3, .L113+24
 2180 008e 1A60     		str	r2, [r3]
 109:Src/freertos.c **** 
 110:Src/freertos.c ****   /* definition and creation of sensorThread */
 111:Src/freertos.c ****   osThreadDef(sensorThread, sensorOps, osPriorityBelowNormal, 0, 512);
 2181              		.loc 5 111 0
 2182 0090 364B     		ldr	r3, .L113+28
 2183 0092 07F12C04 		add	r4, r7, #44
 2184 0096 1D46     		mov	r5, r3
 2185 0098 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2186 009a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2187 009c 2B68     		ldr	r3, [r5]
 2188 009e 2360     		str	r3, [r4]
 112:Src/freertos.c ****   sensorThreadHandle = osThreadCreate(osThread(sensorThread), NULL);
 2189              		.loc 5 112 0
 2190 00a0 07F12C03 		add	r3, r7, #44
 2191 00a4 0021     		movs	r1, #0
 2192 00a6 1846     		mov	r0, r3
 2193 00a8 FFF7FEFF 		bl	osThreadCreate
 2194 00ac 0246     		mov	r2, r0
 2195 00ae 304B     		ldr	r3, .L113+32
 2196 00b0 1A60     		str	r2, [r3]
 113:Src/freertos.c **** 
 114:Src/freertos.c ****   /* definition and creation of spiComThread */
 115:Src/freertos.c ****   osThreadDef(spiComThread, spiComOps, osPriorityAboveNormal, 0, 1024);
 2197              		.loc 5 115 0
 2198 00b2 304B     		ldr	r3, .L113+36
 2199 00b4 07F11804 		add	r4, r7, #24
 2200 00b8 1D46     		mov	r5, r3
 2201 00ba 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2202 00bc 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2203 00be 2B68     		ldr	r3, [r5]
 2204 00c0 2360     		str	r3, [r4]
 116:Src/freertos.c ****   spiComThreadHandle = osThreadCreate(osThread(spiComThread), NULL);
ARM GAS  /tmp/ccImugAR.s 			page 52


 2205              		.loc 5 116 0
 2206 00c2 07F11803 		add	r3, r7, #24
 2207 00c6 0021     		movs	r1, #0
 2208 00c8 1846     		mov	r0, r3
 2209 00ca FFF7FEFF 		bl	osThreadCreate
 2210 00ce 0246     		mov	r2, r0
 2211 00d0 294B     		ldr	r3, .L113+40
 2212 00d2 1A60     		str	r2, [r3]
 117:Src/freertos.c **** 
 118:Src/freertos.c ****   osThreadDef(motorThread, motorOps, osPriorityNormal, 0, 512);
 2213              		.loc 5 118 0
 2214 00d4 294B     		ldr	r3, .L113+44
 2215 00d6 3C1D     		adds	r4, r7, #4
 2216 00d8 1D46     		mov	r5, r3
 2217 00da 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2218 00dc 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2219 00de 2B68     		ldr	r3, [r5]
 2220 00e0 2360     		str	r3, [r4]
 119:Src/freertos.c ****   motorThreadHandle = osThreadCreate(osThread(motorThread), NULL);
 2221              		.loc 5 119 0
 2222 00e2 3B1D     		adds	r3, r7, #4
 2223 00e4 0021     		movs	r1, #0
 2224 00e6 1846     		mov	r0, r3
 2225 00e8 FFF7FEFF 		bl	osThreadCreate
 2226 00ec 0246     		mov	r2, r0
 2227 00ee 244B     		ldr	r3, .L113+48
 2228 00f0 1A60     		str	r2, [r3]
 120:Src/freertos.c **** 
 121:Src/freertos.c **** 
 122:Src/freertos.c ****   EnvironmentData = malloc(sizeof(ENVIRONMENT_DATA_FORMAT));
 2229              		.loc 5 122 0
 2230 00f2 7820     		movs	r0, #120
 2231 00f4 FFF7FEFF 		bl	malloc
 2232 00f8 0346     		mov	r3, r0
 2233 00fa 1A46     		mov	r2, r3
 2234 00fc 214B     		ldr	r3, .L113+52
 2235 00fe 1A60     		str	r2, [r3]
 123:Src/freertos.c ****   ControlData = malloc(sizeof(CONTROL_DATA_FORMAT));
 2236              		.loc 5 123 0
 2237 0100 7820     		movs	r0, #120
 2238 0102 FFF7FEFF 		bl	malloc
 2239 0106 0346     		mov	r3, r0
 2240 0108 1A46     		mov	r2, r3
 2241 010a 1F4B     		ldr	r3, .L113+56
 2242 010c 1A60     		str	r2, [r3]
 124:Src/freertos.c ****   UpdateFile = malloc(sizeof(UPDATE_FILE_FORMAT));
 2243              		.loc 5 124 0
 2244 010e 7420     		movs	r0, #116
 2245 0110 FFF7FEFF 		bl	malloc
 2246 0114 0346     		mov	r3, r0
 2247 0116 1A46     		mov	r2, r3
 2248 0118 1C4B     		ldr	r3, .L113+60
 2249 011a 1A60     		str	r2, [r3]
 125:Src/freertos.c **** 
 126:Src/freertos.c ****   SpiRxData = malloc(sizeof(SPI_TRANSFER_FORMAT));
 2250              		.loc 5 126 0
 2251 011c 7820     		movs	r0, #120
ARM GAS  /tmp/ccImugAR.s 			page 53


 2252 011e FFF7FEFF 		bl	malloc
 2253 0122 0346     		mov	r3, r0
 2254 0124 1A46     		mov	r2, r3
 2255 0126 1A4B     		ldr	r3, .L113+64
 2256 0128 1A60     		str	r2, [r3]
 127:Src/freertos.c **** 
 128:Src/freertos.c ****   SpiTxData = malloc(sizeof(SPI_TRANSFER_FORMAT));
 2257              		.loc 5 128 0
 2258 012a 7820     		movs	r0, #120
 2259 012c FFF7FEFF 		bl	malloc
 2260 0130 0346     		mov	r3, r0
 2261 0132 1A46     		mov	r2, r3
 2262 0134 174B     		ldr	r3, .L113+68
 2263 0136 1A60     		str	r2, [r3]
 129:Src/freertos.c ****   SpiCheckData = malloc(sizeof(SPI_TRANSFER_FORMAT));
 2264              		.loc 5 129 0
 2265 0138 7820     		movs	r0, #120
 2266 013a FFF7FEFF 		bl	malloc
 2267 013e 0346     		mov	r3, r0
 2268 0140 1A46     		mov	r2, r3
 2269 0142 154B     		ldr	r3, .L113+72
 2270 0144 1A60     		str	r2, [r3]
 130:Src/freertos.c **** 
 131:Src/freertos.c **** 
 132:Src/freertos.c **** }
 2271              		.loc 5 132 0
 2272 0146 00BF     		nop
 2273 0148 6837     		adds	r7, r7, #104
 2274              	.LCFI73:
 2275              		.cfi_def_cfa_offset 16
 2276 014a BD46     		mov	sp, r7
 2277              	.LCFI74:
 2278              		.cfi_def_cfa_register 13
 2279              		@ sp needed
 2280 014c B0BD     		pop	{r4, r5, r7, pc}
 2281              	.L114:
 2282 014e 00BF     		.align	2
 2283              	.L113:
 2284 0150 00000000 		.word	spiMutexHandle
 2285 0154 00000000 		.word	uartMutexHandle
 2286 0158 00000000 		.word	memoryMutexHandle
 2287 015c 00000000 		.word	uartSemaphoreHandle
 2288 0160 00000000 		.word	spiSemaphoreHandle
 2289 0164 C8000000 		.word	.LC18
 2290 0168 00000000 		.word	gpsThreadHandle
 2291 016c EC000000 		.word	.LC19
 2292 0170 00000000 		.word	sensorThreadHandle
 2293 0174 10010000 		.word	.LC20
 2294 0178 00000000 		.word	spiComThreadHandle
 2295 017c 30010000 		.word	.LC21
 2296 0180 00000000 		.word	motorThreadHandle
 2297 0184 00000000 		.word	EnvironmentData
 2298 0188 00000000 		.word	ControlData
 2299 018c 00000000 		.word	UpdateFile
 2300 0190 00000000 		.word	SpiRxData
 2301 0194 00000000 		.word	SpiTxData
 2302 0198 00000000 		.word	SpiCheckData
ARM GAS  /tmp/ccImugAR.s 			page 54


 2303              		.cfi_endproc
 2304              	.LFE160:
 2306              		.text
 2307              	.Letext0:
 2308              		.file 6 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stdarg.h"
 2309              		.file 7 "/usr/include/newlib/machine/_default_types.h"
 2310              		.file 8 "/usr/include/newlib/sys/lock.h"
 2311              		.file 9 "/usr/include/newlib/sys/_types.h"
 2312              		.file 10 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 2313              		.file 11 "/usr/include/newlib/sys/reent.h"
 2314              		.file 12 "<built-in>"
 2315              		.file 13 "/usr/include/newlib/sys/_stdint.h"
 2316              		.file 14 "Inc/main.h"
 2317              		.file 15 "Drivers/CMSIS/Include/core_cm7.h"
 2318              		.file 16 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 2319              		.file 17 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f746xx.h"
 2320              		.file 18 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 2321              		.file 19 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 2322              		.file 20 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_spi.h"
 2323              		.file 21 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim.h"
 2324              		.file 22 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_uart.h"
 2325              		.file 23 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h"
 2326              		.file 24 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 2327              		.file 25 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 2328              		.file 26 "Middlewares/Third_Party/FreeRTOS/Source/include/semphr.h"
 2329              		.file 27 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 2330              		.file 28 "Inc/gps.h"
 2331              		.file 29 "Inc/sensor.h"
 2332              		.file 30 "Inc/motor.h"
 2333              		.file 31 "Inc/usart.h"
 2334              		.file 32 "Inc/spi.h"
 2335              		.file 33 "Inc/tim.h"
 2336              		.file 34 "Inc/freertos.h"
ARM GAS  /tmp/ccImugAR.s 			page 55


DEFINED SYMBOLS
                            *ABS*:0000000000000000 freertos.c
                            *COM*:00000000000001a0 gpsData
                            *COM*:0000000000000014 sensorValues
                            *COM*:0000000000000008 motor1
                            *COM*:0000000000000008 motor2
                            *COM*:0000000000000008 motor3
                            *COM*:0000000000000008 motor4
                            *COM*:0000000000000004 gpsThreadHandle
                            *COM*:0000000000000004 sensorThreadHandle
                            *COM*:0000000000000004 spiComThreadHandle
                            *COM*:0000000000000004 motorThreadHandle
                            *COM*:0000000000000004 spiMutexHandle
                            *COM*:0000000000000004 uartMutexHandle
                            *COM*:0000000000000004 memoryMutexHandle
                            *COM*:0000000000000004 spiSemaphoreHandle
                            *COM*:0000000000000004 uartSemaphoreHandle
                            *COM*:0000000000000004 SpiCheckData
                            *COM*:0000000000000004 SpiTxData
                            *COM*:0000000000000004 SpiRxData
                            *COM*:0000000000000004 EnvironmentData
                            *COM*:0000000000000004 ControlData
                            *COM*:0000000000000004 UpdateFile
                            *COM*:0000000000000001 rx_buf
     /tmp/ccImugAR.s:40     .text.UART4_IRQHandler:0000000000000000 $t
     /tmp/ccImugAR.s:47     .text.UART4_IRQHandler:0000000000000000 UART4_IRQHandler
     /tmp/ccImugAR.s:77     .text.UART4_IRQHandler:000000000000001c $d
     /tmp/ccImugAR.s:83     .rodata:0000000000000000 $d
     /tmp/ccImugAR.s:90     .text.gpsOps:0000000000000000 $t
     /tmp/ccImugAR.s:97     .text.gpsOps:0000000000000000 gpsOps
     /tmp/ccImugAR.s:1967   .text.mprintf:0000000000000000 mprintf
     /tmp/ccImugAR.s:204    .text.gpsOps:00000000000000a8 $d
     /tmp/ccImugAR.s:220    .data.NextUpdateDataPackage:0000000000000000 NextUpdateDataPackage
     /tmp/ccImugAR.s:217    .data.NextUpdateDataPackage:0000000000000000 $d
     /tmp/ccImugAR.s:227    .data.CurrentUpdateDataPackage:0000000000000000 CurrentUpdateDataPackage
     /tmp/ccImugAR.s:224    .data.CurrentUpdateDataPackage:0000000000000000 $d
     /tmp/ccImugAR.s:233    .bss.UpdateIsDone:0000000000000000 UpdateIsDone
     /tmp/ccImugAR.s:234    .bss.UpdateIsDone:0000000000000000 $d
     /tmp/ccImugAR.s:236    .text.writeFlash:0000000000000000 $t
     /tmp/ccImugAR.s:243    .text.writeFlash:0000000000000000 writeFlash
     /tmp/ccImugAR.s:287    .text.readFlash:0000000000000000 $t
     /tmp/ccImugAR.s:294    .text.readFlash:0000000000000000 readFlash
     /tmp/ccImugAR.s:336    .text.SPI1_IRQHandler:0000000000000000 $t
     /tmp/ccImugAR.s:343    .text.SPI1_IRQHandler:0000000000000000 SPI1_IRQHandler
     /tmp/ccImugAR.s:372    .text.SPI1_IRQHandler:000000000000001c $d
     /tmp/ccImugAR.s:388    .text.spiComOps:0000000000000000 $t
     /tmp/ccImugAR.s:395    .text.spiComOps:0000000000000000 spiComOps
     /tmp/ccImugAR.s:603    .text.checkIfUpdateData:0000000000000000 checkIfUpdateData
     /tmp/ccImugAR.s:733    .text.confirmUpdateDataAccuracy:0000000000000000 confirmUpdateDataAccuracy
     /tmp/ccImugAR.s:873    .text.putUpdateDataResponse:0000000000000000 putUpdateDataResponse
     /tmp/ccImugAR.s:668    .text.checkIfControlData:0000000000000000 checkIfControlData
     /tmp/ccImugAR.s:957    .text.putControlDataResponse:0000000000000000 putControlDataResponse
     /tmp/ccImugAR.s:1034   .text.putEnvironmentData:0000000000000000 putEnvironmentData
     /tmp/ccImugAR.s:1115   .text.processUpdateData:0000000000000000 processUpdateData
     /tmp/ccImugAR.s:1561   .text.processControlData:0000000000000000 processControlData
     /tmp/ccImugAR.s:582    .text.spiComOps:000000000000012c $d
     /tmp/ccImugAR.s:596    .text.checkIfUpdateData:0000000000000000 $t
ARM GAS  /tmp/ccImugAR.s 			page 56


     /tmp/ccImugAR.s:655    .text.checkIfUpdateData:000000000000003c $d
     /tmp/ccImugAR.s:661    .text.checkIfControlData:0000000000000000 $t
     /tmp/ccImugAR.s:720    .text.checkIfControlData:000000000000003c $d
     /tmp/ccImugAR.s:726    .text.confirmUpdateDataAccuracy:0000000000000000 $t
     /tmp/ccImugAR.s:859    .text.confirmUpdateDataAccuracy:000000000000009c $d
     /tmp/ccImugAR.s:866    .text.putUpdateDataResponse:0000000000000000 $t
     /tmp/ccImugAR.s:943    .text.putUpdateDataResponse:0000000000000068 $d
     /tmp/ccImugAR.s:950    .text.putControlDataResponse:0000000000000000 $t
     /tmp/ccImugAR.s:1020   .text.putControlDataResponse:0000000000000064 $d
     /tmp/ccImugAR.s:1027   .text.putEnvironmentData:0000000000000000 $t
     /tmp/ccImugAR.s:1097   .text.putEnvironmentData:0000000000000064 $d
     /tmp/ccImugAR.s:1108   .text.processUpdateData:0000000000000000 $t
     /tmp/ccImugAR.s:1319   .text.processUpdateData:000000000000015c $d
     /tmp/ccImugAR.s:1338   .text.writeUpdateFileToFlash:0000000000000000 $t
     /tmp/ccImugAR.s:1345   .text.writeUpdateFileToFlash:0000000000000000 writeUpdateFileToFlash
     /tmp/ccImugAR.s:1539   .text.writeUpdateFileToFlash:0000000000000154 $d
     /tmp/ccImugAR.s:1554   .text.processControlData:0000000000000000 $t
     /tmp/ccImugAR.s:1677   .text.processControlData:00000000000000a4 $d
     /tmp/ccImugAR.s:1688   .text.sensorOps:0000000000000000 $t
     /tmp/ccImugAR.s:1695   .text.sensorOps:0000000000000000 sensorOps
     /tmp/ccImugAR.s:1775   .text.sensorOps:0000000000000074 $d
     /tmp/ccImugAR.s:1788   .text.motorOps:0000000000000000 $t
     /tmp/ccImugAR.s:1795   .text.motorOps:0000000000000000 motorOps
     /tmp/ccImugAR.s:1887   .text.motorOps:0000000000000078 $d
     /tmp/ccImugAR.s:1895   .text.vprint:0000000000000000 $t
     /tmp/ccImugAR.s:1902   .text.vprint:0000000000000000 vprint
     /tmp/ccImugAR.s:1955   .text.vprint:0000000000000044 $d
     /tmp/ccImugAR.s:1960   .text.mprintf:0000000000000000 $t
     /tmp/ccImugAR.s:2037   .text.mprintf:0000000000000040 $d
     /tmp/ccImugAR.s:2087   .text.MX_FREERTOS_Init:0000000000000000 $t
     /tmp/ccImugAR.s:2094   .text.MX_FREERTOS_Init:0000000000000000 MX_FREERTOS_Init
     /tmp/ccImugAR.s:2284   .text.MX_FREERTOS_Init:0000000000000150 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_UART_IRQHandler
xQueueGiveFromISR
huart4
gpsInit
xQueueGenericReceive
checkGpsData
xQueueGenericSend
HAL_GPIO_TogglePin
enableGps
receiveGpsData
HAL_UART_Receive_IT
HAL_FLASH_Program
HAL_SPI_IRQHandler
hspi1
HAL_FLASH_Unlock
FLASH_Erase_Sector
HAL_FLASH_Lock
HAL_SPI_TransmitReceive_IT
HAL_SPI_GetState
osDelay
HAL_NVIC_SystemReset
memcpy
ARM GAS  /tmp/ccImugAR.s 			page 57


sensorInit
HAL_TIM_PWM_Start
readAllSensors
htim3
motor1Drive
motor2Drive
vsprintf
strlen
HAL_UART_Transmit
huart1
osMutexCreate
osSemaphoreCreate
osThreadCreate
malloc
