ARM GAS  /tmp/ccAG3ZiY.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"freertos.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	gpsData,416,4
  18              		.comm	sensorValues,20,4
  19              		.comm	calibration,4,4
  20              		.comm	motor1,8,4
  21              		.comm	motor2,8,4
  22              		.comm	motor3,8,4
  23              		.comm	motor4,8,4
  24              		.comm	servo1,8,4
  25              		.comm	servo2,8,4
  26              		.comm	gpsThreadHandle,4,4
  27              		.comm	sensorThreadHandle,4,4
  28              		.comm	spiComThreadHandle,4,4
  29              		.comm	motorThreadHandle,4,4
  30              		.comm	spiMutexHandle,4,4
  31              		.comm	uartMutexHandle,4,4
  32              		.comm	memoryMutexHandle,4,4
  33              		.comm	spiSemaphoreHandle,4,4
  34              		.comm	uartSemaphoreHandle,4,4
  35              		.comm	SpiCheckData,4,4
  36              		.comm	SpiTxData,4,4
  37              		.comm	SpiRxData,4,4
  38              		.comm	EnvironmentData,4,4
  39              		.comm	ControlData,4,4
  40              		.comm	UpdateFile,4,4
  41              		.comm	SensorCalibrationNeeded,4,4
  42              		.comm	rx_buf,1,1
  43              		.section	.text.UART4_IRQHandler,"ax",%progbits
  44              		.align	1
  45              		.global	UART4_IRQHandler
  46              		.syntax unified
  47              		.thumb
  48              		.thumb_func
  49              		.fpu fpv4-sp-d16
  51              	UART4_IRQHandler:
  52              	.LFB141:
  53              		.file 1 "Src/gpsops.c"
   1:Src/gpsops.c  **** #include "gpsops.h"
   2:Src/gpsops.c  **** #include "stdlib.h"
   3:Src/gpsops.c  **** 
   4:Src/gpsops.c  **** 
   5:Src/gpsops.c  **** void UART4_IRQHandler(void)
ARM GAS  /tmp/ccAG3ZiY.s 			page 2


   6:Src/gpsops.c  **** {
  54              		.loc 1 6 0
  55              		.cfi_startproc
  56              		@ args = 0, pretend = 0, frame = 0
  57              		@ frame_needed = 1, uses_anonymous_args = 0
  58 0000 80B5     		push	{r7, lr}
  59              	.LCFI0:
  60              		.cfi_def_cfa_offset 8
  61              		.cfi_offset 7, -8
  62              		.cfi_offset 14, -4
  63 0002 00AF     		add	r7, sp, #0
  64              	.LCFI1:
  65              		.cfi_def_cfa_register 7
   7:Src/gpsops.c  **** 
   8:Src/gpsops.c  **** 
   9:Src/gpsops.c  ****     HAL_UART_IRQHandler(&huart4);
  66              		.loc 1 9 0
  67 0004 0548     		ldr	r0, .L2
  68 0006 FFF7FEFF 		bl	HAL_UART_IRQHandler
  10:Src/gpsops.c  **** 
  11:Src/gpsops.c  ****     xSemaphoreGiveFromISR(uartSemaphoreHandle, NULL);
  69              		.loc 1 11 0
  70 000a 054B     		ldr	r3, .L2+4
  71 000c 1B68     		ldr	r3, [r3]
  72 000e 0021     		movs	r1, #0
  73 0010 1846     		mov	r0, r3
  74 0012 FFF7FEFF 		bl	xQueueGiveFromISR
  12:Src/gpsops.c  **** 
  13:Src/gpsops.c  **** }
  75              		.loc 1 13 0
  76 0016 00BF     		nop
  77 0018 80BD     		pop	{r7, pc}
  78              	.L3:
  79 001a 00BF     		.align	2
  80              	.L2:
  81 001c 00000000 		.word	huart4
  82 0020 00000000 		.word	uartSemaphoreHandle
  83              		.cfi_endproc
  84              	.LFE141:
  86              		.section	.rodata
  87              		.align	2
  88              	.LC8:
  89 0000 6770734F 		.ascii	"gpsOps\015\012\000"
  89      70730D0A 
  89      00
  90 0009 000000   		.align	2
  91              	.LC9:
  92 000c 6770734F 		.ascii	"gpsOps Crash \015\012\000"
  92      70732043 
  92      72617368 
  92      200D0A00 
  93              		.section	.text.gpsOps,"ax",%progbits
  94              		.align	1
  95              		.global	gpsOps
  96              		.syntax unified
  97              		.thumb
  98              		.thumb_func
ARM GAS  /tmp/ccAG3ZiY.s 			page 3


  99              		.fpu fpv4-sp-d16
 101              	gpsOps:
 102              	.LFB142:
  14:Src/gpsops.c  **** 
  15:Src/gpsops.c  **** 
  16:Src/gpsops.c  **** 
  17:Src/gpsops.c  **** void gpsOps(void const *argument)
  18:Src/gpsops.c  **** {
 103              		.loc 1 18 0
 104              		.cfi_startproc
 105              		@ args = 0, pretend = 0, frame = 16
 106              		@ frame_needed = 1, uses_anonymous_args = 0
 107 0000 80B5     		push	{r7, lr}
 108              	.LCFI2:
 109              		.cfi_def_cfa_offset 8
 110              		.cfi_offset 7, -8
 111              		.cfi_offset 14, -4
 112 0002 84B0     		sub	sp, sp, #16
 113              	.LCFI3:
 114              		.cfi_def_cfa_offset 24
 115 0004 00AF     		add	r7, sp, #0
 116              	.LCFI4:
 117              		.cfi_def_cfa_register 7
 118 0006 7860     		str	r0, [r7, #4]
  19:Src/gpsops.c  **** 
  20:Src/gpsops.c  ****     mprintf("gpsOps\r\n");
 119              		.loc 1 20 0
 120 0008 2748     		ldr	r0, .L11
 121 000a FFF7FEFF 		bl	mprintf
  21:Src/gpsops.c  **** 
  22:Src/gpsops.c  ****     unsigned char rx_data;
  23:Src/gpsops.c  **** 
  24:Src/gpsops.c  ****     gpsInit();
 122              		.loc 1 24 0
 123 000e FFF7FEFF 		bl	gpsInit
 124              	.L10:
  25:Src/gpsops.c  **** 
  26:Src/gpsops.c  ****   while(1)
  27:Src/gpsops.c  ****   {
  28:Src/gpsops.c  **** 
  29:Src/gpsops.c  ****       if( xSemaphoreTake(uartSemaphoreHandle, 1000) == pdPASS)
 125              		.loc 1 29 0
 126 0012 264B     		ldr	r3, .L11+4
 127 0014 1868     		ldr	r0, [r3]
 128 0016 0023     		movs	r3, #0
 129 0018 4FF47A72 		mov	r2, #1000
 130 001c 0021     		movs	r1, #0
 131 001e FFF7FEFF 		bl	xQueueGenericReceive
 132 0022 0346     		mov	r3, r0
 133 0024 012B     		cmp	r3, #1
 134 0026 3AD1     		bne	.L5
  30:Src/gpsops.c  ****       {
  31:Src/gpsops.c  **** 
  32:Src/gpsops.c  **** 
  33:Src/gpsops.c  ****         if(checkGpsData() == GPS_READY)
 135              		.loc 1 33 0
 136 0028 FFF7FEFF 		bl	checkGpsData
ARM GAS  /tmp/ccAG3ZiY.s 			page 4


 137 002c 0346     		mov	r3, r0
 138 002e 012B     		cmp	r3, #1
 139 0030 2BD1     		bne	.L6
  34:Src/gpsops.c  ****         {
  35:Src/gpsops.c  **** 
  36:Src/gpsops.c  ****                xSemaphoreTake(spiMutexHandle, portMAX_DELAY);
 140              		.loc 1 36 0
 141 0032 1F4B     		ldr	r3, .L11+8
 142 0034 1868     		ldr	r0, [r3]
 143 0036 0023     		movs	r3, #0
 144 0038 4FF0FF32 		mov	r2, #-1
 145 003c 0021     		movs	r1, #0
 146 003e FFF7FEFF 		bl	xQueueGenericReceive
 147              	.LBB2:
  37:Src/gpsops.c  **** 
  38:Src/gpsops.c  ****                for(int i=0; i<99; i++)
 148              		.loc 1 38 0
 149 0042 0023     		movs	r3, #0
 150 0044 FB60     		str	r3, [r7, #12]
 151 0046 0FE0     		b	.L7
 152              	.L8:
  39:Src/gpsops.c  ****                    EnvironmentData -> gps_string[i] = gpsData.gprmc_body[i];
 153              		.loc 1 39 0 discriminator 3
 154 0048 1A4B     		ldr	r3, .L11+12
 155 004a 1A68     		ldr	r2, [r3]
 156 004c 1A49     		ldr	r1, .L11+16
 157 004e FB68     		ldr	r3, [r7, #12]
 158 0050 0B44     		add	r3, r3, r1
 159 0052 03F59C73 		add	r3, r3, #312
 160 0056 1B78     		ldrb	r3, [r3]
 161 0058 D9B2     		uxtb	r1, r3
 162 005a FB68     		ldr	r3, [r7, #12]
 163 005c 1344     		add	r3, r3, r2
 164 005e 0A46     		mov	r2, r1
 165 0060 1A70     		strb	r2, [r3]
  38:Src/gpsops.c  ****                    EnvironmentData -> gps_string[i] = gpsData.gprmc_body[i];
 166              		.loc 1 38 0 discriminator 3
 167 0062 FB68     		ldr	r3, [r7, #12]
 168 0064 0133     		adds	r3, r3, #1
 169 0066 FB60     		str	r3, [r7, #12]
 170              	.L7:
  38:Src/gpsops.c  ****                    EnvironmentData -> gps_string[i] = gpsData.gprmc_body[i];
 171              		.loc 1 38 0 is_stmt 0 discriminator 1
 172 0068 FB68     		ldr	r3, [r7, #12]
 173 006a 622B     		cmp	r3, #98
 174 006c ECDD     		ble	.L8
 175              	.LBE2:
  40:Src/gpsops.c  **** 
  41:Src/gpsops.c  ****                xSemaphoreGive(spiMutexHandle);
 176              		.loc 1 41 0 is_stmt 1
 177 006e 104B     		ldr	r3, .L11+8
 178 0070 1868     		ldr	r0, [r3]
 179 0072 0023     		movs	r3, #0
 180 0074 0022     		movs	r2, #0
 181 0076 0021     		movs	r1, #0
 182 0078 FFF7FEFF 		bl	xQueueGenericSend
  42:Src/gpsops.c  **** 
ARM GAS  /tmp/ccAG3ZiY.s 			page 5


  43:Src/gpsops.c  **** 
  44:Src/gpsops.c  **** 
  45:Src/gpsops.c  ****            HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 183              		.loc 1 45 0
 184 007c 4FF48051 		mov	r1, #4096
 185 0080 0E48     		ldr	r0, .L11+20
 186 0082 FFF7FEFF 		bl	HAL_GPIO_TogglePin
  46:Src/gpsops.c  **** 
  47:Src/gpsops.c  ****            enableGps();
 187              		.loc 1 47 0
 188 0086 FFF7FEFF 		bl	enableGps
 189              	.L6:
  48:Src/gpsops.c  **** 
  49:Src/gpsops.c  ****         }
  50:Src/gpsops.c  **** 
  51:Src/gpsops.c  **** 
  52:Src/gpsops.c  ****           receiveGpsData();
 190              		.loc 1 52 0
 191 008a FFF7FEFF 		bl	receiveGpsData
  53:Src/gpsops.c  **** 
  54:Src/gpsops.c  ****           HAL_UART_Receive_IT(&huart4, (uint8_t *)&rx_data, 1);
 192              		.loc 1 54 0
 193 008e 07F10B03 		add	r3, r7, #11
 194 0092 0122     		movs	r2, #1
 195 0094 1946     		mov	r1, r3
 196 0096 0A48     		ldr	r0, .L11+24
 197 0098 FFF7FEFF 		bl	HAL_UART_Receive_IT
 198 009c B9E7     		b	.L10
 199              	.L5:
  55:Src/gpsops.c  **** 
  56:Src/gpsops.c  **** 
  57:Src/gpsops.c  ****       }
  58:Src/gpsops.c  ****       else
  59:Src/gpsops.c  ****       {
  60:Src/gpsops.c  **** 
  61:Src/gpsops.c  ****           mprintf("gpsOps Crash \r\n");
 200              		.loc 1 61 0
 201 009e 0948     		ldr	r0, .L11+28
 202 00a0 FFF7FEFF 		bl	mprintf
  29:Src/gpsops.c  ****       {
 203              		.loc 1 29 0
 204 00a4 B5E7     		b	.L10
 205              	.L12:
 206 00a6 00BF     		.align	2
 207              	.L11:
 208 00a8 00000000 		.word	.LC8
 209 00ac 00000000 		.word	uartSemaphoreHandle
 210 00b0 00000000 		.word	spiMutexHandle
 211 00b4 00000000 		.word	EnvironmentData
 212 00b8 00000000 		.word	gpsData
 213 00bc 00040240 		.word	1073873920
 214 00c0 00000000 		.word	huart4
 215 00c4 0C000000 		.word	.LC9
 216              		.cfi_endproc
 217              	.LFE142:
 219              		.global	NextUpdateDataPackage
 220              		.section	.data.NextUpdateDataPackage,"aw",%progbits
ARM GAS  /tmp/ccAG3ZiY.s 			page 6


 221              		.align	2
 224              	NextUpdateDataPackage:
 225 0000 01000000 		.word	1
 226              		.global	CurrentUpdateDataPackage
 227              		.section	.data.CurrentUpdateDataPackage,"aw",%progbits
 228              		.align	2
 231              	CurrentUpdateDataPackage:
 232 0000 01000000 		.word	1
 233              		.section	.text.writeFlash,"ax",%progbits
 234              		.align	1
 235              		.global	writeFlash
 236              		.syntax unified
 237              		.thumb
 238              		.thumb_func
 239              		.fpu fpv4-sp-d16
 241              	writeFlash:
 242              	.LFB143:
 243              		.file 2 "Src/spiops.c"
   1:Src/spiops.c  **** #include "spiops.h"
   2:Src/spiops.c  **** #include "stdlib.h"
   3:Src/spiops.c  **** 
   4:Src/spiops.c  **** #define SECTOR6_ADDRESS 0x8080000
   5:Src/spiops.c  **** 
   6:Src/spiops.c  **** uint32_t NextUpdateDataPackage = 1;
   7:Src/spiops.c  **** uint32_t CurrentUpdateDataPackage = 1;
   8:Src/spiops.c  **** 
   9:Src/spiops.c  **** 
  10:Src/spiops.c  **** void writeFlash(uint8_t Data, long Address)
  11:Src/spiops.c  **** {
 244              		.loc 2 11 0
 245              		.cfi_startproc
 246              		@ args = 0, pretend = 0, frame = 8
 247              		@ frame_needed = 1, uses_anonymous_args = 0
 248 0000 90B5     		push	{r4, r7, lr}
 249              	.LCFI5:
 250              		.cfi_def_cfa_offset 12
 251              		.cfi_offset 4, -12
 252              		.cfi_offset 7, -8
 253              		.cfi_offset 14, -4
 254 0002 83B0     		sub	sp, sp, #12
 255              	.LCFI6:
 256              		.cfi_def_cfa_offset 24
 257 0004 00AF     		add	r7, sp, #0
 258              	.LCFI7:
 259              		.cfi_def_cfa_register 7
 260 0006 0346     		mov	r3, r0
 261 0008 3960     		str	r1, [r7]
 262 000a FB71     		strb	r3, [r7, #7]
  12:Src/spiops.c  **** 
  13:Src/spiops.c  ****      HAL_FLASH_Program(TYPEPROGRAM_BYTE, Address , (uint8_t) Data);
 263              		.loc 2 13 0
 264 000c 3968     		ldr	r1, [r7]
 265 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 266 0010 4FF00004 		mov	r4, #0
 267 0014 1A46     		mov	r2, r3
 268 0016 2346     		mov	r3, r4
 269 0018 0020     		movs	r0, #0
ARM GAS  /tmp/ccAG3ZiY.s 			page 7


 270 001a FFF7FEFF 		bl	HAL_FLASH_Program
  14:Src/spiops.c  **** 
  15:Src/spiops.c  **** }
 271              		.loc 2 15 0
 272 001e 00BF     		nop
 273 0020 0C37     		adds	r7, r7, #12
 274              	.LCFI8:
 275              		.cfi_def_cfa_offset 12
 276 0022 BD46     		mov	sp, r7
 277              	.LCFI9:
 278              		.cfi_def_cfa_register 13
 279              		@ sp needed
 280 0024 90BD     		pop	{r4, r7, pc}
 281              		.cfi_endproc
 282              	.LFE143:
 284              		.section	.text.readFlash,"ax",%progbits
 285              		.align	1
 286              		.global	readFlash
 287              		.syntax unified
 288              		.thumb
 289              		.thumb_func
 290              		.fpu fpv4-sp-d16
 292              	readFlash:
 293              	.LFB144:
  16:Src/spiops.c  **** 
  17:Src/spiops.c  **** 
  18:Src/spiops.c  **** 
  19:Src/spiops.c  **** uint8_t readFlash(int Address)
  20:Src/spiops.c  **** {
 294              		.loc 2 20 0
 295              		.cfi_startproc
 296              		@ args = 0, pretend = 0, frame = 16
 297              		@ frame_needed = 1, uses_anonymous_args = 0
 298              		@ link register save eliminated.
 299 0000 80B4     		push	{r7}
 300              	.LCFI10:
 301              		.cfi_def_cfa_offset 4
 302              		.cfi_offset 7, -4
 303 0002 85B0     		sub	sp, sp, #20
 304              	.LCFI11:
 305              		.cfi_def_cfa_offset 24
 306 0004 00AF     		add	r7, sp, #0
 307              	.LCFI12:
 308              		.cfi_def_cfa_register 7
 309 0006 7860     		str	r0, [r7, #4]
  21:Src/spiops.c  **** 
  22:Src/spiops.c  ****     uint8_t flash_data;
  23:Src/spiops.c  **** 
  24:Src/spiops.c  ****     flash_data = *(uint8_t *)Address;
 310              		.loc 2 24 0
 311 0008 7B68     		ldr	r3, [r7, #4]
 312 000a 1B78     		ldrb	r3, [r3]
 313 000c FB73     		strb	r3, [r7, #15]
  25:Src/spiops.c  **** 
  26:Src/spiops.c  ****     return flash_data;
 314              		.loc 2 26 0
 315 000e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
ARM GAS  /tmp/ccAG3ZiY.s 			page 8


  27:Src/spiops.c  **** 
  28:Src/spiops.c  **** }
 316              		.loc 2 28 0
 317 0010 1846     		mov	r0, r3
 318 0012 1437     		adds	r7, r7, #20
 319              	.LCFI13:
 320              		.cfi_def_cfa_offset 4
 321 0014 BD46     		mov	sp, r7
 322              	.LCFI14:
 323              		.cfi_def_cfa_register 13
 324              		@ sp needed
 325 0016 5DF8047B 		ldr	r7, [sp], #4
 326              	.LCFI15:
 327              		.cfi_restore 7
 328              		.cfi_def_cfa_offset 0
 329 001a 7047     		bx	lr
 330              		.cfi_endproc
 331              	.LFE144:
 333              		.section	.text.SPI1_IRQHandler,"ax",%progbits
 334              		.align	1
 335              		.global	SPI1_IRQHandler
 336              		.syntax unified
 337              		.thumb
 338              		.thumb_func
 339              		.fpu fpv4-sp-d16
 341              	SPI1_IRQHandler:
 342              	.LFB145:
  29:Src/spiops.c  **** 
  30:Src/spiops.c  **** 
  31:Src/spiops.c  **** 
  32:Src/spiops.c  **** void SPI1_IRQHandler(void)
  33:Src/spiops.c  **** {
 343              		.loc 2 33 0
 344              		.cfi_startproc
 345              		@ args = 0, pretend = 0, frame = 0
 346              		@ frame_needed = 1, uses_anonymous_args = 0
 347 0000 80B5     		push	{r7, lr}
 348              	.LCFI16:
 349              		.cfi_def_cfa_offset 8
 350              		.cfi_offset 7, -8
 351              		.cfi_offset 14, -4
 352 0002 00AF     		add	r7, sp, #0
 353              	.LCFI17:
 354              		.cfi_def_cfa_register 7
  34:Src/spiops.c  **** 
  35:Src/spiops.c  ****   HAL_SPI_IRQHandler(&hspi1);
 355              		.loc 2 35 0
 356 0004 0548     		ldr	r0, .L17
 357 0006 FFF7FEFF 		bl	HAL_SPI_IRQHandler
  36:Src/spiops.c  **** 
  37:Src/spiops.c  ****   xSemaphoreGiveFromISR(spiSemaphoreHandle, NULL);
 358              		.loc 2 37 0
 359 000a 054B     		ldr	r3, .L17+4
 360 000c 1B68     		ldr	r3, [r3]
 361 000e 0021     		movs	r1, #0
 362 0010 1846     		mov	r0, r3
 363 0012 FFF7FEFF 		bl	xQueueGiveFromISR
ARM GAS  /tmp/ccAG3ZiY.s 			page 9


  38:Src/spiops.c  **** 
  39:Src/spiops.c  **** }
 364              		.loc 2 39 0
 365 0016 00BF     		nop
 366 0018 80BD     		pop	{r7, pc}
 367              	.L18:
 368 001a 00BF     		.align	2
 369              	.L17:
 370 001c 00000000 		.word	hspi1
 371 0020 00000000 		.word	spiSemaphoreHandle
 372              		.cfi_endproc
 373              	.LFE145:
 375              		.section	.rodata
 376              		.align	2
 377              	.LC10:
 378 001c 7370694F 		.ascii	"spiOps\015\012\000"
 378      70730D0A 
 378      00
 379              		.section	.text.spiComOps,"ax",%progbits
 380              		.align	1
 381              		.global	spiComOps
 382              		.syntax unified
 383              		.thumb
 384              		.thumb_func
 385              		.fpu fpv4-sp-d16
 387              	spiComOps:
 388              	.LFB146:
  40:Src/spiops.c  **** 
  41:Src/spiops.c  **** 
  42:Src/spiops.c  **** 
  43:Src/spiops.c  **** /* spiComOps function */
  44:Src/spiops.c  **** void spiComOps(void const * argument)
  45:Src/spiops.c  **** {
 389              		.loc 2 45 0
 390              		.cfi_startproc
 391              		@ args = 0, pretend = 0, frame = 16
 392              		@ frame_needed = 1, uses_anonymous_args = 0
 393 0000 80B5     		push	{r7, lr}
 394              	.LCFI18:
 395              		.cfi_def_cfa_offset 8
 396              		.cfi_offset 7, -8
 397              		.cfi_offset 14, -4
 398 0002 84B0     		sub	sp, sp, #16
 399              	.LCFI19:
 400              		.cfi_def_cfa_offset 24
 401 0004 00AF     		add	r7, sp, #0
 402              	.LCFI20:
 403              		.cfi_def_cfa_register 7
 404 0006 7860     		str	r0, [r7, #4]
  46:Src/spiops.c  **** 
  47:Src/spiops.c  ****     HAL_SPI_StateTypeDef status;
  48:Src/spiops.c  **** 
  49:Src/spiops.c  ****     short int ret;
  50:Src/spiops.c  ****     short int update_data_available = 0;
 405              		.loc 2 50 0
 406 0008 0023     		movs	r3, #0
 407 000a FB81     		strh	r3, [r7, #14]	@ movhi
ARM GAS  /tmp/ccAG3ZiY.s 			page 10


  51:Src/spiops.c  ****     short int control_data_available = 0;
 408              		.loc 2 51 0
 409 000c 0023     		movs	r3, #0
 410 000e BB81     		strh	r3, [r7, #12]	@ movhi
  52:Src/spiops.c  **** 
  53:Src/spiops.c  ****     mprintf("spiOps\r\n");
 411              		.loc 2 53 0
 412 0010 4048     		ldr	r0, .L28
 413 0012 FFF7FEFF 		bl	mprintf
  54:Src/spiops.c  **** 
  55:Src/spiops.c  ****     HAL_FLASH_Unlock();
 414              		.loc 2 55 0
 415 0016 FFF7FEFF 		bl	HAL_FLASH_Unlock
  56:Src/spiops.c  ****     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAER
 416              		.loc 2 56 0
 417 001a 3F4B     		ldr	r3, .L28+4
 418 001c 3322     		movs	r2, #51
 419 001e DA60     		str	r2, [r3, #12]
  57:Src/spiops.c  ****     FLASH_Erase_Sector(FLASH_SECTOR_6, VOLTAGE_RANGE_3);
 420              		.loc 2 57 0
 421 0020 0221     		movs	r1, #2
 422 0022 0620     		movs	r0, #6
 423 0024 FFF7FEFF 		bl	FLASH_Erase_Sector
  58:Src/spiops.c  ****     FLASH_Erase_Sector(FLASH_SECTOR_7, VOLTAGE_RANGE_3);
 424              		.loc 2 58 0
 425 0028 0221     		movs	r1, #2
 426 002a 0720     		movs	r0, #7
 427 002c FFF7FEFF 		bl	FLASH_Erase_Sector
  59:Src/spiops.c  ****     HAL_FLASH_Lock();
 428              		.loc 2 59 0
 429 0030 FFF7FEFF 		bl	HAL_FLASH_Lock
  60:Src/spiops.c  **** 
  61:Src/spiops.c  **** 
  62:Src/spiops.c  ****     HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)SpiTxData, (uint8_t *)SpiRxData,  SPI_TRANSFER_SI
 430              		.loc 2 62 0
 431 0034 394B     		ldr	r3, .L28+8
 432 0036 1968     		ldr	r1, [r3]
 433 0038 394B     		ldr	r3, .L28+12
 434 003a 1A68     		ldr	r2, [r3]
 435 003c 7823     		movs	r3, #120
 436 003e 3948     		ldr	r0, .L28+16
 437 0040 FFF7FEFF 		bl	HAL_SPI_TransmitReceive_IT
 438              	.L27:
  63:Src/spiops.c  **** 
  64:Src/spiops.c  ****     while(1)
  65:Src/spiops.c  ****     {
  66:Src/spiops.c  **** 
  67:Src/spiops.c  ****         if( xSemaphoreTake(spiSemaphoreHandle, 1) == pdPASS)  // when interrupt is occured
 439              		.loc 2 67 0
 440 0044 384B     		ldr	r3, .L28+20
 441 0046 1868     		ldr	r0, [r3]
 442 0048 0023     		movs	r3, #0
 443 004a 0122     		movs	r2, #1
 444 004c 0021     		movs	r1, #0
 445 004e FFF7FEFF 		bl	xQueueGenericReceive
 446 0052 0346     		mov	r3, r0
 447 0054 012B     		cmp	r3, #1
ARM GAS  /tmp/ccAG3ZiY.s 			page 11


 448 0056 4BD1     		bne	.L20
  68:Src/spiops.c  ****         {
  69:Src/spiops.c  **** 
  70:Src/spiops.c  ****             status = HAL_SPI_GetState(&hspi1);
 449              		.loc 2 70 0
 450 0058 3248     		ldr	r0, .L28+16
 451 005a FFF7FEFF 		bl	HAL_SPI_GetState
 452 005e 0346     		mov	r3, r0
 453 0060 FB72     		strb	r3, [r7, #11]
  71:Src/spiops.c  **** 
  72:Src/spiops.c  ****             if(status == HAL_SPI_STATE_READY)
 454              		.loc 2 72 0
 455 0062 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 456 0064 012B     		cmp	r3, #1
 457 0066 3BD1     		bne	.L21
  73:Src/spiops.c  ****             {
  74:Src/spiops.c  **** 
  75:Src/spiops.c  ****                 ret = checkIfUpdateData();
 458              		.loc 2 75 0
 459 0068 FFF7FEFF 		bl	checkIfUpdateData
 460 006c 0346     		mov	r3, r0
 461 006e 3B81     		strh	r3, [r7, #8]	@ movhi
  76:Src/spiops.c  **** 
  77:Src/spiops.c  ****                 if(ret == HAL_OK)
 462              		.loc 2 77 0
 463 0070 B7F90830 		ldrsh	r3, [r7, #8]
 464 0074 002B     		cmp	r3, #0
 465 0076 18D1     		bne	.L22
  78:Src/spiops.c  ****                 {
  79:Src/spiops.c  **** 
  80:Src/spiops.c  ****                     ret = confirmUpdateDataAccuracy();
 466              		.loc 2 80 0
 467 0078 FFF7FEFF 		bl	confirmUpdateDataAccuracy
 468 007c 0346     		mov	r3, r0
 469 007e 3B81     		strh	r3, [r7, #8]	@ movhi
  81:Src/spiops.c  ****                     if(ret == HAL_OK)
 470              		.loc 2 81 0
 471 0080 B7F90830 		ldrsh	r3, [r7, #8]
 472 0084 002B     		cmp	r3, #0
 473 0086 01D1     		bne	.L23
  82:Src/spiops.c  ****                         update_data_available = 1;
 474              		.loc 2 82 0
 475 0088 0123     		movs	r3, #1
 476 008a FB81     		strh	r3, [r7, #14]	@ movhi
 477              	.L23:
  83:Src/spiops.c  **** 
  84:Src/spiops.c  ****                     putUpdateDataResponse();
 478              		.loc 2 84 0
 479 008c FFF7FEFF 		bl	putUpdateDataResponse
  85:Src/spiops.c  **** 
  86:Src/spiops.c  **** 
  87:Src/spiops.c  ****                     motor1.direction = STOP;
 480              		.loc 2 87 0
 481 0090 264B     		ldr	r3, .L28+24
 482 0092 0022     		movs	r2, #0
 483 0094 1A60     		str	r2, [r3]
  88:Src/spiops.c  ****                     motor2.direction = STOP;
ARM GAS  /tmp/ccAG3ZiY.s 			page 12


 484              		.loc 2 88 0
 485 0096 264B     		ldr	r3, .L28+28
 486 0098 0022     		movs	r2, #0
 487 009a 1A60     		str	r2, [r3]
  89:Src/spiops.c  ****                     servo1.angle = 0;
 488              		.loc 2 89 0
 489 009c 254B     		ldr	r3, .L28+32
 490 009e 0022     		movs	r2, #0
 491 00a0 1A60     		str	r2, [r3]
  90:Src/spiops.c  ****                     servo2.angle = 0;
 492              		.loc 2 90 0
 493 00a2 254B     		ldr	r3, .L28+36
 494 00a4 0022     		movs	r2, #0
 495 00a6 1A60     		str	r2, [r3]
 496 00a8 1AE0     		b	.L21
 497              	.L22:
  91:Src/spiops.c  ****                 }
  92:Src/spiops.c  ****                 else
  93:Src/spiops.c  ****                 {
  94:Src/spiops.c  ****                     ret = checkIfControlData();
 498              		.loc 2 94 0
 499 00aa FFF7FEFF 		bl	checkIfControlData
 500 00ae 0346     		mov	r3, r0
 501 00b0 3B81     		strh	r3, [r7, #8]	@ movhi
  95:Src/spiops.c  **** 
  96:Src/spiops.c  **** 
  97:Src/spiops.c  **** 
  98:Src/spiops.c  ****                     if(ret == HAL_OK)
 502              		.loc 2 98 0
 503 00b2 B7F90830 		ldrsh	r3, [r7, #8]
 504 00b6 002B     		cmp	r3, #0
 505 00b8 04D1     		bne	.L24
  99:Src/spiops.c  ****                     {
 100:Src/spiops.c  **** 
 101:Src/spiops.c  ****                         control_data_available = 1;
 506              		.loc 2 101 0
 507 00ba 0123     		movs	r3, #1
 508 00bc BB81     		strh	r3, [r7, #12]	@ movhi
 102:Src/spiops.c  **** 
 103:Src/spiops.c  ****                         putControlDataResponse();
 509              		.loc 2 103 0
 510 00be FFF7FEFF 		bl	putControlDataResponse
 511 00c2 0DE0     		b	.L21
 512              	.L24:
 104:Src/spiops.c  **** 
 105:Src/spiops.c  ****                     }
 106:Src/spiops.c  ****                     else
 107:Src/spiops.c  ****                     {
 108:Src/spiops.c  ****                         putEnvironmentData();
 513              		.loc 2 108 0
 514 00c4 FFF7FEFF 		bl	putEnvironmentData
 109:Src/spiops.c  **** 
 110:Src/spiops.c  ****                         motor1.direction = STOP;
 515              		.loc 2 110 0
 516 00c8 184B     		ldr	r3, .L28+24
 517 00ca 0022     		movs	r2, #0
 518 00cc 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccAG3ZiY.s 			page 13


 111:Src/spiops.c  ****                         motor2.direction = STOP;
 519              		.loc 2 111 0
 520 00ce 184B     		ldr	r3, .L28+28
 521 00d0 0022     		movs	r2, #0
 522 00d2 1A60     		str	r2, [r3]
 112:Src/spiops.c  ****                         servo1.angle = 0;
 523              		.loc 2 112 0
 524 00d4 174B     		ldr	r3, .L28+32
 525 00d6 0022     		movs	r2, #0
 526 00d8 1A60     		str	r2, [r3]
 113:Src/spiops.c  ****                         servo2.angle = 0;
 527              		.loc 2 113 0
 528 00da 174B     		ldr	r3, .L28+36
 529 00dc 0022     		movs	r2, #0
 530 00de 1A60     		str	r2, [r3]
 531              	.L21:
 114:Src/spiops.c  ****                     }
 115:Src/spiops.c  **** 
 116:Src/spiops.c  **** 
 117:Src/spiops.c  ****                 }
 118:Src/spiops.c  **** 
 119:Src/spiops.c  ****             }
 120:Src/spiops.c  **** 
 121:Src/spiops.c  ****             HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)SpiTxData, (uint8_t *)SpiRxData,  SPI_TRA
 532              		.loc 2 121 0
 533 00e0 0E4B     		ldr	r3, .L28+8
 534 00e2 1968     		ldr	r1, [r3]
 535 00e4 0E4B     		ldr	r3, .L28+12
 536 00e6 1A68     		ldr	r2, [r3]
 537 00e8 7823     		movs	r3, #120
 538 00ea 0E48     		ldr	r0, .L28+16
 539 00ec FFF7FEFF 		bl	HAL_SPI_TransmitReceive_IT
 540              	.L20:
 122:Src/spiops.c  **** 
 123:Src/spiops.c  ****         }
 124:Src/spiops.c  **** 
 125:Src/spiops.c  **** 
 126:Src/spiops.c  **** 
 127:Src/spiops.c  **** 
 128:Src/spiops.c  ****         if(update_data_available == 1)
 541              		.loc 2 128 0
 542 00f0 B7F90E30 		ldrsh	r3, [r7, #14]
 543 00f4 012B     		cmp	r3, #1
 544 00f6 04D1     		bne	.L25
 129:Src/spiops.c  ****         {
 130:Src/spiops.c  ****             processUpdateData();
 545              		.loc 2 130 0
 546 00f8 FFF7FEFF 		bl	processUpdateData
 131:Src/spiops.c  **** 
 132:Src/spiops.c  ****             update_data_available = 0;
 547              		.loc 2 132 0
 548 00fc 0023     		movs	r3, #0
 549 00fe FB81     		strh	r3, [r7, #14]	@ movhi
 550 0100 A0E7     		b	.L27
 551              	.L25:
 133:Src/spiops.c  ****         }
 134:Src/spiops.c  ****         else if(control_data_available == 1)
ARM GAS  /tmp/ccAG3ZiY.s 			page 14


 552              		.loc 2 134 0
 553 0102 B7F90C30 		ldrsh	r3, [r7, #12]
 554 0106 012B     		cmp	r3, #1
 555 0108 9CD1     		bne	.L27
 135:Src/spiops.c  ****         {
 136:Src/spiops.c  **** 
 137:Src/spiops.c  ****             processControlData();
 556              		.loc 2 137 0
 557 010a FFF7FEFF 		bl	processControlData
 138:Src/spiops.c  **** 
 139:Src/spiops.c  ****             control_data_available = 0;
 558              		.loc 2 139 0
 559 010e 0023     		movs	r3, #0
 560 0110 BB81     		strh	r3, [r7, #12]	@ movhi
  67:Src/spiops.c  ****         {
 561              		.loc 2 67 0
 562 0112 97E7     		b	.L27
 563              	.L29:
 564              		.align	2
 565              	.L28:
 566 0114 1C000000 		.word	.LC10
 567 0118 003C0240 		.word	1073888256
 568 011c 00000000 		.word	SpiTxData
 569 0120 00000000 		.word	SpiRxData
 570 0124 00000000 		.word	hspi1
 571 0128 00000000 		.word	spiSemaphoreHandle
 572 012c 00000000 		.word	motor1
 573 0130 00000000 		.word	motor2
 574 0134 00000000 		.word	servo1
 575 0138 00000000 		.word	servo2
 576              		.cfi_endproc
 577              	.LFE146:
 579              		.section	.text.checkIfUpdateData,"ax",%progbits
 580              		.align	1
 581              		.global	checkIfUpdateData
 582              		.syntax unified
 583              		.thumb
 584              		.thumb_func
 585              		.fpu fpv4-sp-d16
 587              	checkIfUpdateData:
 588              	.LFB147:
 140:Src/spiops.c  ****         }
 141:Src/spiops.c  **** 
 142:Src/spiops.c  **** 
 143:Src/spiops.c  **** 
 144:Src/spiops.c  **** 
 145:Src/spiops.c  ****     }
 146:Src/spiops.c  **** 
 147:Src/spiops.c  **** }
 148:Src/spiops.c  **** 
 149:Src/spiops.c  **** 
 150:Src/spiops.c  **** 
 151:Src/spiops.c  **** HAL_StatusTypeDef checkIfUpdateData()
 152:Src/spiops.c  **** {
 589              		.loc 2 152 0
 590              		.cfi_startproc
 591              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccAG3ZiY.s 			page 15


 592              		@ frame_needed = 1, uses_anonymous_args = 0
 593 0000 80B5     		push	{r7, lr}
 594              	.LCFI21:
 595              		.cfi_def_cfa_offset 8
 596              		.cfi_offset 7, -8
 597              		.cfi_offset 14, -4
 598 0002 00AF     		add	r7, sp, #0
 599              	.LCFI22:
 600              		.cfi_def_cfa_register 7
 153:Src/spiops.c  **** 
 154:Src/spiops.c  ****     if((SpiRxData->header & 0xff) == 'U' && ((SpiRxData->header >> 8) & 0xff) == 'P')
 601              		.loc 2 154 0
 602 0004 0D4B     		ldr	r3, .L33
 603 0006 1B68     		ldr	r3, [r3]
 604 0008 1B88     		ldrh	r3, [r3]
 605 000a DBB2     		uxtb	r3, r3
 606 000c 552B     		cmp	r3, #85
 607 000e 12D1     		bne	.L31
 608              		.loc 2 154 0 is_stmt 0 discriminator 1
 609 0010 0A4B     		ldr	r3, .L33
 610 0012 1B68     		ldr	r3, [r3]
 611 0014 1B88     		ldrh	r3, [r3]
 612 0016 1B0A     		lsrs	r3, r3, #8
 613 0018 9BB2     		uxth	r3, r3
 614 001a DBB2     		uxtb	r3, r3
 615 001c 502B     		cmp	r3, #80
 616 001e 0AD1     		bne	.L31
 155:Src/spiops.c  ****     {
 156:Src/spiops.c  **** 
 157:Src/spiops.c  ****         memcpy(UpdateFile, SpiRxData->data, SPI_DATA_SIZE);
 617              		.loc 2 157 0 is_stmt 1
 618 0020 074B     		ldr	r3, .L33+4
 619 0022 1868     		ldr	r0, [r3]
 620 0024 054B     		ldr	r3, .L33
 621 0026 1B68     		ldr	r3, [r3]
 622 0028 0233     		adds	r3, r3, #2
 623 002a 7422     		movs	r2, #116
 624 002c 1946     		mov	r1, r3
 625 002e FFF7FEFF 		bl	memcpy
 158:Src/spiops.c  **** 
 159:Src/spiops.c  ****         return HAL_OK;
 626              		.loc 2 159 0
 627 0032 0023     		movs	r3, #0
 628 0034 00E0     		b	.L32
 629              	.L31:
 160:Src/spiops.c  ****     }
 161:Src/spiops.c  ****     else
 162:Src/spiops.c  ****     {
 163:Src/spiops.c  ****         return HAL_ERROR;
 630              		.loc 2 163 0
 631 0036 0123     		movs	r3, #1
 632              	.L32:
 164:Src/spiops.c  ****     }
 165:Src/spiops.c  **** 
 166:Src/spiops.c  **** }
 633              		.loc 2 166 0
 634 0038 1846     		mov	r0, r3
ARM GAS  /tmp/ccAG3ZiY.s 			page 16


 635 003a 80BD     		pop	{r7, pc}
 636              	.L34:
 637              		.align	2
 638              	.L33:
 639 003c 00000000 		.word	SpiRxData
 640 0040 00000000 		.word	UpdateFile
 641              		.cfi_endproc
 642              	.LFE147:
 644              		.section	.text.checkIfControlData,"ax",%progbits
 645              		.align	1
 646              		.global	checkIfControlData
 647              		.syntax unified
 648              		.thumb
 649              		.thumb_func
 650              		.fpu fpv4-sp-d16
 652              	checkIfControlData:
 653              	.LFB148:
 167:Src/spiops.c  **** 
 168:Src/spiops.c  **** 
 169:Src/spiops.c  **** 
 170:Src/spiops.c  **** HAL_StatusTypeDef checkIfControlData()
 171:Src/spiops.c  **** {
 654              		.loc 2 171 0
 655              		.cfi_startproc
 656              		@ args = 0, pretend = 0, frame = 0
 657              		@ frame_needed = 1, uses_anonymous_args = 0
 658              		@ link register save eliminated.
 659 0000 80B4     		push	{r7}
 660              	.LCFI23:
 661              		.cfi_def_cfa_offset 4
 662              		.cfi_offset 7, -4
 663 0002 00AF     		add	r7, sp, #0
 664              	.LCFI24:
 665              		.cfi_def_cfa_register 7
 172:Src/spiops.c  **** 
 173:Src/spiops.c  ****     if((SpiRxData->header & 0xff) == 'C' && ((SpiRxData->header >> 8) & 0xff) == 'O')
 666              		.loc 2 173 0
 667 0004 0C4B     		ldr	r3, .L38
 668 0006 1B68     		ldr	r3, [r3]
 669 0008 1B88     		ldrh	r3, [r3]
 670 000a DBB2     		uxtb	r3, r3
 671 000c 432B     		cmp	r3, #67
 672 000e 0DD1     		bne	.L36
 673              		.loc 2 173 0 is_stmt 0 discriminator 1
 674 0010 094B     		ldr	r3, .L38
 675 0012 1B68     		ldr	r3, [r3]
 676 0014 1B88     		ldrh	r3, [r3]
 677 0016 1B0A     		lsrs	r3, r3, #8
 678 0018 9BB2     		uxth	r3, r3
 679 001a DBB2     		uxtb	r3, r3
 680 001c 4F2B     		cmp	r3, #79
 681 001e 05D1     		bne	.L36
 174:Src/spiops.c  ****     {
 175:Src/spiops.c  **** 
 176:Src/spiops.c  **** //        mprintf("%d\r\n", SpiRxData->data[58]);
 177:Src/spiops.c  **** 
 178:Src/spiops.c  ****         ControlData = (CONTROL_DATA_FORMAT *) SpiRxData + offsetof(SPI_TRANSFER_FORMAT, header);
ARM GAS  /tmp/ccAG3ZiY.s 			page 17


 682              		.loc 2 178 0 is_stmt 1
 683 0020 054B     		ldr	r3, .L38
 684 0022 1B68     		ldr	r3, [r3]
 685 0024 054A     		ldr	r2, .L38+4
 686 0026 1360     		str	r3, [r2]
 179:Src/spiops.c  **** 
 180:Src/spiops.c  **** //        memcpy(ControlData, SpiRxData->data, SPI_DATA_SIZE);
 181:Src/spiops.c  **** 
 182:Src/spiops.c  **** 
 183:Src/spiops.c  ****         return HAL_OK;
 687              		.loc 2 183 0
 688 0028 0023     		movs	r3, #0
 689 002a 00E0     		b	.L37
 690              	.L36:
 184:Src/spiops.c  **** 
 185:Src/spiops.c  ****     }
 186:Src/spiops.c  ****     else
 187:Src/spiops.c  ****     {
 188:Src/spiops.c  **** 
 189:Src/spiops.c  ****         return HAL_ERROR;
 691              		.loc 2 189 0
 692 002c 0123     		movs	r3, #1
 693              	.L37:
 190:Src/spiops.c  **** 
 191:Src/spiops.c  ****     }
 192:Src/spiops.c  **** }
 694              		.loc 2 192 0
 695 002e 1846     		mov	r0, r3
 696 0030 BD46     		mov	sp, r7
 697              	.LCFI25:
 698              		.cfi_def_cfa_register 13
 699              		@ sp needed
 700 0032 5DF8047B 		ldr	r7, [sp], #4
 701              	.LCFI26:
 702              		.cfi_restore 7
 703              		.cfi_def_cfa_offset 0
 704 0036 7047     		bx	lr
 705              	.L39:
 706              		.align	2
 707              	.L38:
 708 0038 00000000 		.word	SpiRxData
 709 003c 00000000 		.word	ControlData
 710              		.cfi_endproc
 711              	.LFE148:
 713              		.section	.text.confirmUpdateDataAccuracy,"ax",%progbits
 714              		.align	1
 715              		.global	confirmUpdateDataAccuracy
 716              		.syntax unified
 717              		.thumb
 718              		.thumb_func
 719              		.fpu fpv4-sp-d16
 721              	confirmUpdateDataAccuracy:
 722              	.LFB149:
 193:Src/spiops.c  **** 
 194:Src/spiops.c  **** HAL_StatusTypeDef confirmUpdateDataAccuracy()
 195:Src/spiops.c  **** {
 723              		.loc 2 195 0
ARM GAS  /tmp/ccAG3ZiY.s 			page 18


 724              		.cfi_startproc
 725              		@ args = 0, pretend = 0, frame = 16
 726              		@ frame_needed = 1, uses_anonymous_args = 0
 727              		@ link register save eliminated.
 728 0000 80B4     		push	{r7}
 729              	.LCFI27:
 730              		.cfi_def_cfa_offset 4
 731              		.cfi_offset 7, -4
 732 0002 85B0     		sub	sp, sp, #20
 733              	.LCFI28:
 734              		.cfi_def_cfa_offset 24
 735 0004 00AF     		add	r7, sp, #0
 736              	.LCFI29:
 737              		.cfi_def_cfa_register 7
 196:Src/spiops.c  **** 
 197:Src/spiops.c  **** 
 198:Src/spiops.c  ****     uint16_t checksum = 0;
 738              		.loc 2 198 0
 739 0006 0023     		movs	r3, #0
 740 0008 FB81     		strh	r3, [r7, #14]	@ movhi
 199:Src/spiops.c  ****     short int checksum_error = 0;
 741              		.loc 2 199 0
 742 000a 0023     		movs	r3, #0
 743 000c BB81     		strh	r3, [r7, #12]	@ movhi
 200:Src/spiops.c  ****     short int sequence_error = 0;
 744              		.loc 2 200 0
 745 000e 0023     		movs	r3, #0
 746 0010 7B81     		strh	r3, [r7, #10]	@ movhi
 747              	.LBB3:
 201:Src/spiops.c  **** 
 202:Src/spiops.c  ****     for(int i=0; i< SPI_ENTITY_SIZE; i++)
 748              		.loc 2 202 0
 749 0012 0023     		movs	r3, #0
 750 0014 7B60     		str	r3, [r7, #4]
 751 0016 0CE0     		b	.L41
 752              	.L42:
 203:Src/spiops.c  ****         checksum += UpdateFile->data[i];
 753              		.loc 2 203 0 discriminator 3
 754 0018 204B     		ldr	r3, .L48
 755 001a 1A68     		ldr	r2, [r3]
 756 001c 7B68     		ldr	r3, [r7, #4]
 757 001e 1344     		add	r3, r3, r2
 758 0020 0833     		adds	r3, r3, #8
 759 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 760 0024 9AB2     		uxth	r2, r3
 761 0026 FB89     		ldrh	r3, [r7, #14]	@ movhi
 762 0028 1344     		add	r3, r3, r2
 763 002a FB81     		strh	r3, [r7, #14]	@ movhi
 202:Src/spiops.c  ****         checksum += UpdateFile->data[i];
 764              		.loc 2 202 0 discriminator 3
 765 002c 7B68     		ldr	r3, [r7, #4]
 766 002e 0133     		adds	r3, r3, #1
 767 0030 7B60     		str	r3, [r7, #4]
 768              	.L41:
 202:Src/spiops.c  ****         checksum += UpdateFile->data[i];
 769              		.loc 2 202 0 is_stmt 0 discriminator 1
 770 0032 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccAG3ZiY.s 			page 19


 771 0034 6B2B     		cmp	r3, #107
 772 0036 EFDD     		ble	.L42
 773              	.LBE3:
 204:Src/spiops.c  **** 
 205:Src/spiops.c  ****     if(checksum != SpiRxData->checksum)
 774              		.loc 2 205 0 is_stmt 1
 775 0038 194B     		ldr	r3, .L48+4
 776 003a 1B68     		ldr	r3, [r3]
 777 003c B3F87630 		ldrh	r3, [r3, #118]
 778 0040 FA89     		ldrh	r2, [r7, #14]
 779 0042 9A42     		cmp	r2, r3
 780 0044 01D0     		beq	.L43
 206:Src/spiops.c  ****         checksum_error = 1;
 781              		.loc 2 206 0
 782 0046 0123     		movs	r3, #1
 783 0048 BB81     		strh	r3, [r7, #12]	@ movhi
 784              	.L43:
 207:Src/spiops.c  **** 
 208:Src/spiops.c  ****     if(NextUpdateDataPackage != 1 && UpdateFile->current_sequence_number != NextUpdateDataPackage)
 785              		.loc 2 208 0
 786 004a 164B     		ldr	r3, .L48+8
 787 004c 1B68     		ldr	r3, [r3]
 788 004e 012B     		cmp	r3, #1
 789 0050 09D0     		beq	.L44
 790              		.loc 2 208 0 is_stmt 0 discriminator 1
 791 0052 124B     		ldr	r3, .L48
 792 0054 1B68     		ldr	r3, [r3]
 793 0056 5A68     		ldr	r2, [r3, #4]
 794 0058 124B     		ldr	r3, .L48+8
 795 005a 1B68     		ldr	r3, [r3]
 796 005c 9A42     		cmp	r2, r3
 797 005e 02D0     		beq	.L44
 209:Src/spiops.c  ****     {
 210:Src/spiops.c  ****         sequence_error = 1;
 798              		.loc 2 210 0 is_stmt 1
 799 0060 0123     		movs	r3, #1
 800 0062 7B81     		strh	r3, [r7, #10]	@ movhi
 801 0064 09E0     		b	.L45
 802              	.L44:
 211:Src/spiops.c  ****     }
 212:Src/spiops.c  ****     else
 213:Src/spiops.c  ****     {
 214:Src/spiops.c  ****         if(checksum_error == 0)
 803              		.loc 2 214 0
 804 0066 B7F90C30 		ldrsh	r3, [r7, #12]
 805 006a 002B     		cmp	r3, #0
 806 006c 05D1     		bne	.L45
 215:Src/spiops.c  ****            NextUpdateDataPackage = UpdateFile->current_sequence_number + 1;
 807              		.loc 2 215 0
 808 006e 0B4B     		ldr	r3, .L48
 809 0070 1B68     		ldr	r3, [r3]
 810 0072 5B68     		ldr	r3, [r3, #4]
 811 0074 0133     		adds	r3, r3, #1
 812 0076 0B4A     		ldr	r2, .L48+8
 813 0078 1360     		str	r3, [r2]
 814              	.L45:
 216:Src/spiops.c  **** 
ARM GAS  /tmp/ccAG3ZiY.s 			page 20


 217:Src/spiops.c  ****     }
 218:Src/spiops.c  **** 
 219:Src/spiops.c  ****      if(sequence_error != 1 && checksum_error != 1)
 815              		.loc 2 219 0
 816 007a B7F90A30 		ldrsh	r3, [r7, #10]
 817 007e 012B     		cmp	r3, #1
 818 0080 05D0     		beq	.L46
 819              		.loc 2 219 0 is_stmt 0 discriminator 1
 820 0082 B7F90C30 		ldrsh	r3, [r7, #12]
 821 0086 012B     		cmp	r3, #1
 822 0088 01D0     		beq	.L46
 220:Src/spiops.c  ****          return HAL_OK;
 823              		.loc 2 220 0 is_stmt 1
 824 008a 0023     		movs	r3, #0
 825 008c 00E0     		b	.L47
 826              	.L46:
 221:Src/spiops.c  ****      else
 222:Src/spiops.c  ****          return HAL_ERROR;
 827              		.loc 2 222 0
 828 008e 0123     		movs	r3, #1
 829              	.L47:
 223:Src/spiops.c  **** 
 224:Src/spiops.c  **** 
 225:Src/spiops.c  **** 
 226:Src/spiops.c  **** }
 830              		.loc 2 226 0
 831 0090 1846     		mov	r0, r3
 832 0092 1437     		adds	r7, r7, #20
 833              	.LCFI30:
 834              		.cfi_def_cfa_offset 4
 835 0094 BD46     		mov	sp, r7
 836              	.LCFI31:
 837              		.cfi_def_cfa_register 13
 838              		@ sp needed
 839 0096 5DF8047B 		ldr	r7, [sp], #4
 840              	.LCFI32:
 841              		.cfi_restore 7
 842              		.cfi_def_cfa_offset 0
 843 009a 7047     		bx	lr
 844              	.L49:
 845              		.align	2
 846              	.L48:
 847 009c 00000000 		.word	UpdateFile
 848 00a0 00000000 		.word	SpiRxData
 849 00a4 00000000 		.word	NextUpdateDataPackage
 850              		.cfi_endproc
 851              	.LFE149:
 853              		.section	.text.putUpdateDataResponse,"ax",%progbits
 854              		.align	1
 855              		.global	putUpdateDataResponse
 856              		.syntax unified
 857              		.thumb
 858              		.thumb_func
 859              		.fpu fpv4-sp-d16
 861              	putUpdateDataResponse:
 862              	.LFB150:
 227:Src/spiops.c  **** 
ARM GAS  /tmp/ccAG3ZiY.s 			page 21


 228:Src/spiops.c  **** 
 229:Src/spiops.c  **** 
 230:Src/spiops.c  **** void putUpdateDataResponse()
 231:Src/spiops.c  **** {
 863              		.loc 2 231 0
 864              		.cfi_startproc
 865              		@ args = 0, pretend = 0, frame = 0
 866              		@ frame_needed = 1, uses_anonymous_args = 0
 867 0000 80B5     		push	{r7, lr}
 868              	.LCFI33:
 869              		.cfi_def_cfa_offset 8
 870              		.cfi_offset 7, -8
 871              		.cfi_offset 14, -4
 872 0002 00AF     		add	r7, sp, #0
 873              	.LCFI34:
 874              		.cfi_def_cfa_register 7
 232:Src/spiops.c  **** 
 233:Src/spiops.c  **** 
 234:Src/spiops.c  **** 
 235:Src/spiops.c  ****     xSemaphoreTake(spiMutexHandle, (TickType_t)1000);
 875              		.loc 2 235 0
 876 0004 184B     		ldr	r3, .L51
 877 0006 1868     		ldr	r0, [r3]
 878 0008 0023     		movs	r3, #0
 879 000a 4FF47A72 		mov	r2, #1000
 880 000e 0021     		movs	r1, #0
 881 0010 FFF7FEFF 		bl	xQueueGenericReceive
 236:Src/spiops.c  **** 
 237:Src/spiops.c  ****     SpiTxData->header = 'U' | 'P' << 8;
 882              		.loc 2 237 0
 883 0014 154B     		ldr	r3, .L51+4
 884 0016 1B68     		ldr	r3, [r3]
 885 0018 45F25502 		movw	r2, #20565
 886 001c 1A80     		strh	r2, [r3]	@ movhi
 238:Src/spiops.c  ****     SpiTxData->data[4] = NextUpdateDataPackage & 0xff;
 887              		.loc 2 238 0
 888 001e 134B     		ldr	r3, .L51+4
 889 0020 1B68     		ldr	r3, [r3]
 890 0022 134A     		ldr	r2, .L51+8
 891 0024 1268     		ldr	r2, [r2]
 892 0026 D2B2     		uxtb	r2, r2
 893 0028 9A71     		strb	r2, [r3, #6]
 239:Src/spiops.c  ****     SpiTxData->data[5] = (NextUpdateDataPackage >>  8) & 0xff;
 894              		.loc 2 239 0
 895 002a 104B     		ldr	r3, .L51+4
 896 002c 1B68     		ldr	r3, [r3]
 897 002e 104A     		ldr	r2, .L51+8
 898 0030 1268     		ldr	r2, [r2]
 899 0032 120A     		lsrs	r2, r2, #8
 900 0034 D2B2     		uxtb	r2, r2
 901 0036 DA71     		strb	r2, [r3, #7]
 240:Src/spiops.c  ****     SpiTxData->data[6] = (NextUpdateDataPackage >> 16) & 0xff;
 902              		.loc 2 240 0
 903 0038 0C4B     		ldr	r3, .L51+4
 904 003a 1B68     		ldr	r3, [r3]
 905 003c 0C4A     		ldr	r2, .L51+8
 906 003e 1268     		ldr	r2, [r2]
ARM GAS  /tmp/ccAG3ZiY.s 			page 22


 907 0040 120C     		lsrs	r2, r2, #16
 908 0042 D2B2     		uxtb	r2, r2
 909 0044 1A72     		strb	r2, [r3, #8]
 241:Src/spiops.c  ****     SpiTxData->data[7] = (NextUpdateDataPackage >> 24) & 0xff;
 910              		.loc 2 241 0
 911 0046 094B     		ldr	r3, .L51+4
 912 0048 1B68     		ldr	r3, [r3]
 913 004a 094A     		ldr	r2, .L51+8
 914 004c 1268     		ldr	r2, [r2]
 915 004e 120E     		lsrs	r2, r2, #24
 916 0050 D2B2     		uxtb	r2, r2
 917 0052 5A72     		strb	r2, [r3, #9]
 242:Src/spiops.c  **** 
 243:Src/spiops.c  ****     xSemaphoreGive(spiMutexHandle);
 918              		.loc 2 243 0
 919 0054 044B     		ldr	r3, .L51
 920 0056 1868     		ldr	r0, [r3]
 921 0058 0023     		movs	r3, #0
 922 005a 0022     		movs	r2, #0
 923 005c 0021     		movs	r1, #0
 924 005e FFF7FEFF 		bl	xQueueGenericSend
 244:Src/spiops.c  **** 
 245:Src/spiops.c  **** }
 925              		.loc 2 245 0
 926 0062 00BF     		nop
 927 0064 80BD     		pop	{r7, pc}
 928              	.L52:
 929 0066 00BF     		.align	2
 930              	.L51:
 931 0068 00000000 		.word	spiMutexHandle
 932 006c 00000000 		.word	SpiTxData
 933 0070 00000000 		.word	NextUpdateDataPackage
 934              		.cfi_endproc
 935              	.LFE150:
 937              		.section	.text.putControlDataResponse,"ax",%progbits
 938              		.align	1
 939              		.global	putControlDataResponse
 940              		.syntax unified
 941              		.thumb
 942              		.thumb_func
 943              		.fpu fpv4-sp-d16
 945              	putControlDataResponse:
 946              	.LFB151:
 246:Src/spiops.c  **** 
 247:Src/spiops.c  **** 
 248:Src/spiops.c  **** 
 249:Src/spiops.c  **** void putControlDataResponse()
 250:Src/spiops.c  **** {
 947              		.loc 2 250 0
 948              		.cfi_startproc
 949              		@ args = 0, pretend = 0, frame = 0
 950              		@ frame_needed = 1, uses_anonymous_args = 0
 951 0000 80B5     		push	{r7, lr}
 952              	.LCFI35:
 953              		.cfi_def_cfa_offset 8
 954              		.cfi_offset 7, -8
 955              		.cfi_offset 14, -4
ARM GAS  /tmp/ccAG3ZiY.s 			page 23


 956 0002 00AF     		add	r7, sp, #0
 957              	.LCFI36:
 958              		.cfi_def_cfa_register 7
 251:Src/spiops.c  **** 
 252:Src/spiops.c  ****     xSemaphoreTake(spiMutexHandle, (TickType_t)1000);
 959              		.loc 2 252 0
 960 0004 174B     		ldr	r3, .L54
 961 0006 1868     		ldr	r0, [r3]
 962 0008 0023     		movs	r3, #0
 963 000a 4FF47A72 		mov	r2, #1000
 964 000e 0021     		movs	r1, #0
 965 0010 FFF7FEFF 		bl	xQueueGenericReceive
 253:Src/spiops.c  **** 
 254:Src/spiops.c  ****     SpiTxData->header = (('E') | (('N') << 8 ));
 966              		.loc 2 254 0
 967 0014 144B     		ldr	r3, .L54+4
 968 0016 1B68     		ldr	r3, [r3]
 969 0018 44F64562 		movw	r2, #20037
 970 001c 1A80     		strh	r2, [r3]	@ movhi
 255:Src/spiops.c  ****     memcpy(&SpiTxData->data[0], (unsigned char *)EnvironmentData, SPI_DATA_SIZE);
 971              		.loc 2 255 0
 972 001e 124B     		ldr	r3, .L54+4
 973 0020 1B68     		ldr	r3, [r3]
 974 0022 981C     		adds	r0, r3, #2
 975 0024 114B     		ldr	r3, .L54+8
 976 0026 1B68     		ldr	r3, [r3]
 977 0028 7422     		movs	r2, #116
 978 002a 1946     		mov	r1, r3
 979 002c FFF7FEFF 		bl	memcpy
 256:Src/spiops.c  ****     memcpy(&SpiTxData->data[99], (unsigned char *)&EnvironmentData->sensor_data, sizeof(SENSOR_DATA
 980              		.loc 2 256 0
 981 0030 0D4B     		ldr	r3, .L54+4
 982 0032 1B68     		ldr	r3, [r3]
 983 0034 03F16500 		add	r0, r3, #101
 984 0038 0C4B     		ldr	r3, .L54+8
 985 003a 1B68     		ldr	r3, [r3]
 986 003c 6433     		adds	r3, r3, #100
 987 003e 1422     		movs	r2, #20
 988 0040 1946     		mov	r1, r3
 989 0042 FFF7FEFF 		bl	memcpy
 257:Src/spiops.c  ****     SpiTxData->checksum = (('C') | (('H') << 8 ));
 990              		.loc 2 257 0
 991 0046 084B     		ldr	r3, .L54+4
 992 0048 1B68     		ldr	r3, [r3]
 993 004a 44F64302 		movw	r2, #18499
 994 004e A3F87620 		strh	r2, [r3, #118]	@ movhi
 258:Src/spiops.c  **** 
 259:Src/spiops.c  ****     xSemaphoreGive(spiMutexHandle);
 995              		.loc 2 259 0
 996 0052 044B     		ldr	r3, .L54
 997 0054 1868     		ldr	r0, [r3]
 998 0056 0023     		movs	r3, #0
 999 0058 0022     		movs	r2, #0
 1000 005a 0021     		movs	r1, #0
 1001 005c FFF7FEFF 		bl	xQueueGenericSend
 260:Src/spiops.c  **** 
 261:Src/spiops.c  **** }
ARM GAS  /tmp/ccAG3ZiY.s 			page 24


 1002              		.loc 2 261 0
 1003 0060 00BF     		nop
 1004 0062 80BD     		pop	{r7, pc}
 1005              	.L55:
 1006              		.align	2
 1007              	.L54:
 1008 0064 00000000 		.word	spiMutexHandle
 1009 0068 00000000 		.word	SpiTxData
 1010 006c 00000000 		.word	EnvironmentData
 1011              		.cfi_endproc
 1012              	.LFE151:
 1014              		.section	.text.putEnvironmentData,"ax",%progbits
 1015              		.align	1
 1016              		.global	putEnvironmentData
 1017              		.syntax unified
 1018              		.thumb
 1019              		.thumb_func
 1020              		.fpu fpv4-sp-d16
 1022              	putEnvironmentData:
 1023              	.LFB152:
 262:Src/spiops.c  **** 
 263:Src/spiops.c  **** 
 264:Src/spiops.c  **** 
 265:Src/spiops.c  **** void putEnvironmentData()
 266:Src/spiops.c  **** {
 1024              		.loc 2 266 0
 1025              		.cfi_startproc
 1026              		@ args = 0, pretend = 0, frame = 0
 1027              		@ frame_needed = 1, uses_anonymous_args = 0
 1028 0000 80B5     		push	{r7, lr}
 1029              	.LCFI37:
 1030              		.cfi_def_cfa_offset 8
 1031              		.cfi_offset 7, -8
 1032              		.cfi_offset 14, -4
 1033 0002 00AF     		add	r7, sp, #0
 1034              	.LCFI38:
 1035              		.cfi_def_cfa_register 7
 267:Src/spiops.c  **** 
 268:Src/spiops.c  ****     xSemaphoreTake(spiMutexHandle, (TickType_t)1000);
 1036              		.loc 2 268 0
 1037 0004 174B     		ldr	r3, .L57
 1038 0006 1868     		ldr	r0, [r3]
 1039 0008 0023     		movs	r3, #0
 1040 000a 4FF47A72 		mov	r2, #1000
 1041 000e 0021     		movs	r1, #0
 1042 0010 FFF7FEFF 		bl	xQueueGenericReceive
 269:Src/spiops.c  **** 
 270:Src/spiops.c  ****     SpiTxData->header = (('E') | (('N') << 8 ));
 1043              		.loc 2 270 0
 1044 0014 144B     		ldr	r3, .L57+4
 1045 0016 1B68     		ldr	r3, [r3]
 1046 0018 44F64562 		movw	r2, #20037
 1047 001c 1A80     		strh	r2, [r3]	@ movhi
 271:Src/spiops.c  ****     memcpy(&SpiTxData->data[0], (unsigned char *)EnvironmentData, SPI_DATA_SIZE);
 1048              		.loc 2 271 0
 1049 001e 124B     		ldr	r3, .L57+4
 1050 0020 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccAG3ZiY.s 			page 25


 1051 0022 981C     		adds	r0, r3, #2
 1052 0024 114B     		ldr	r3, .L57+8
 1053 0026 1B68     		ldr	r3, [r3]
 1054 0028 7422     		movs	r2, #116
 1055 002a 1946     		mov	r1, r3
 1056 002c FFF7FEFF 		bl	memcpy
 272:Src/spiops.c  ****     memcpy(&SpiTxData->data[99], (unsigned char *)&EnvironmentData->sensor_data, sizeof(SENSOR_DATA
 1057              		.loc 2 272 0
 1058 0030 0D4B     		ldr	r3, .L57+4
 1059 0032 1B68     		ldr	r3, [r3]
 1060 0034 03F16500 		add	r0, r3, #101
 1061 0038 0C4B     		ldr	r3, .L57+8
 1062 003a 1B68     		ldr	r3, [r3]
 1063 003c 6433     		adds	r3, r3, #100
 1064 003e 1422     		movs	r2, #20
 1065 0040 1946     		mov	r1, r3
 1066 0042 FFF7FEFF 		bl	memcpy
 273:Src/spiops.c  ****     SpiTxData->checksum = (('C') | (('H') << 8 ));
 1067              		.loc 2 273 0
 1068 0046 084B     		ldr	r3, .L57+4
 1069 0048 1B68     		ldr	r3, [r3]
 1070 004a 44F64302 		movw	r2, #18499
 1071 004e A3F87620 		strh	r2, [r3, #118]	@ movhi
 274:Src/spiops.c  **** 
 275:Src/spiops.c  ****     xSemaphoreGive(spiMutexHandle);
 1072              		.loc 2 275 0
 1073 0052 044B     		ldr	r3, .L57
 1074 0054 1868     		ldr	r0, [r3]
 1075 0056 0023     		movs	r3, #0
 1076 0058 0022     		movs	r2, #0
 1077 005a 0021     		movs	r1, #0
 1078 005c FFF7FEFF 		bl	xQueueGenericSend
 276:Src/spiops.c  **** 
 277:Src/spiops.c  **** }
 1079              		.loc 2 277 0
 1080 0060 00BF     		nop
 1081 0062 80BD     		pop	{r7, pc}
 1082              	.L58:
 1083              		.align	2
 1084              	.L57:
 1085 0064 00000000 		.word	spiMutexHandle
 1086 0068 00000000 		.word	SpiTxData
 1087 006c 00000000 		.word	EnvironmentData
 1088              		.cfi_endproc
 1089              	.LFE152:
 1091              		.section	.rodata
 1092 0025 000000   		.align	2
 1093              	.LC11:
 1094 0028 77726974 		.ascii	"write error\015\012\000"
 1094      65206572 
 1094      726F720D 
 1094      0A00
 1095 0036 0000     		.align	2
 1096              	.LC12:
 1097 0038 55706461 		.ascii	"Update file uploading has been finished.\015\012\000"
 1097      74652066 
 1097      696C6520 
ARM GAS  /tmp/ccAG3ZiY.s 			page 26


 1097      75706C6F 
 1097      6164696E 
 1098 0063 00       		.align	2
 1099              	.LC13:
 1100 0064 52657374 		.ascii	"Restarting...\015\012\000"
 1100      61727469 
 1100      6E672E2E 
 1100      2E0D0A00 
 1101              		.section	.text.processUpdateData,"ax",%progbits
 1102              		.align	1
 1103              		.global	processUpdateData
 1104              		.syntax unified
 1105              		.thumb
 1106              		.thumb_func
 1107              		.fpu fpv4-sp-d16
 1109              	processUpdateData:
 1110              	.LFB153:
 278:Src/spiops.c  **** 
 279:Src/spiops.c  **** void processUpdateData()
 280:Src/spiops.c  **** {
 1111              		.loc 2 280 0
 1112              		.cfi_startproc
 1113              		@ args = 0, pretend = 0, frame = 16
 1114              		@ frame_needed = 1, uses_anonymous_args = 0
 1115 0000 90B5     		push	{r4, r7, lr}
 1116              	.LCFI39:
 1117              		.cfi_def_cfa_offset 12
 1118              		.cfi_offset 4, -12
 1119              		.cfi_offset 7, -8
 1120              		.cfi_offset 14, -4
 1121 0002 85B0     		sub	sp, sp, #20
 1122              	.LCFI40:
 1123              		.cfi_def_cfa_offset 32
 1124 0004 00AF     		add	r7, sp, #0
 1125              	.LCFI41:
 1126              		.cfi_def_cfa_register 7
 281:Src/spiops.c  **** 
 282:Src/spiops.c  **** 
 283:Src/spiops.c  ****     HAL_StatusTypeDef flash_status;
 284:Src/spiops.c  **** 
 285:Src/spiops.c  ****     if(UpdateFile->current_sequence_number == 1)
 1127              		.loc 2 285 0
 1128 0006 624B     		ldr	r3, .L70
 1129 0008 1B68     		ldr	r3, [r3]
 1130 000a 5B68     		ldr	r3, [r3, #4]
 1131 000c 012B     		cmp	r3, #1
 1132 000e 69D1     		bne	.L60
 1133              	.LBB4:
 286:Src/spiops.c  ****     {
 287:Src/spiops.c  **** 
 288:Src/spiops.c  ****         uint32_t total_size = SPI_ENTITY_SIZE*UpdateFile->total_sequence_number;
 1134              		.loc 2 288 0
 1135 0010 5F4B     		ldr	r3, .L70
 1136 0012 1B68     		ldr	r3, [r3]
 1137 0014 1B68     		ldr	r3, [r3]
 1138 0016 6C22     		movs	r2, #108
 1139 0018 02FB03F3 		mul	r3, r2, r3
ARM GAS  /tmp/ccAG3ZiY.s 			page 27


 1140 001c BB60     		str	r3, [r7, #8]
 289:Src/spiops.c  **** 
 290:Src/spiops.c  **** 
 291:Src/spiops.c  **** 
 292:Src/spiops.c  ****         HAL_FLASH_Unlock();
 1141              		.loc 2 292 0
 1142 001e FFF7FEFF 		bl	HAL_FLASH_Unlock
 293:Src/spiops.c  **** 
 294:Src/spiops.c  ****         flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS, total_size & 0xff);
 1143              		.loc 2 294 0
 1144 0022 BB68     		ldr	r3, [r7, #8]
 1145 0024 4FF00004 		mov	r4, #0
 1146 0028 4FF0FF01 		mov	r1, #255
 1147 002c 4FF00002 		mov	r2, #0
 1148 0030 03EA0103 		and	r3, r3, r1
 1149 0034 04EA0204 		and	r4, r4, r2
 1150 0038 1A46     		mov	r2, r3
 1151 003a 2346     		mov	r3, r4
 1152 003c 5549     		ldr	r1, .L70+4
 1153 003e 0020     		movs	r0, #0
 1154 0040 FFF7FEFF 		bl	HAL_FLASH_Program
 1155 0044 0346     		mov	r3, r0
 1156 0046 FB71     		strb	r3, [r7, #7]
 295:Src/spiops.c  **** 
 296:Src/spiops.c  ****         if(flash_status != HAL_OK)
 1157              		.loc 2 296 0
 1158 0048 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1159 004a 002B     		cmp	r3, #0
 1160 004c 02D0     		beq	.L61
 297:Src/spiops.c  ****             mprintf("write error\r\n");
 1161              		.loc 2 297 0
 1162 004e 5248     		ldr	r0, .L70+8
 1163 0050 FFF7FEFF 		bl	mprintf
 1164              	.L61:
 298:Src/spiops.c  **** 
 299:Src/spiops.c  ****         flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS + 1, (total_size >> 8) &
 1165              		.loc 2 299 0
 1166 0054 BB68     		ldr	r3, [r7, #8]
 1167 0056 1B0A     		lsrs	r3, r3, #8
 1168 0058 4FF00004 		mov	r4, #0
 1169 005c 4FF0FF01 		mov	r1, #255
 1170 0060 4FF00002 		mov	r2, #0
 1171 0064 03EA0103 		and	r3, r3, r1
 1172 0068 04EA0204 		and	r4, r4, r2
 1173 006c 1A46     		mov	r2, r3
 1174 006e 2346     		mov	r3, r4
 1175 0070 4A49     		ldr	r1, .L70+12
 1176 0072 0020     		movs	r0, #0
 1177 0074 FFF7FEFF 		bl	HAL_FLASH_Program
 1178 0078 0346     		mov	r3, r0
 1179 007a FB71     		strb	r3, [r7, #7]
 300:Src/spiops.c  **** 
 301:Src/spiops.c  ****         if(flash_status != HAL_OK)
 1180              		.loc 2 301 0
 1181 007c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1182 007e 002B     		cmp	r3, #0
 1183 0080 02D0     		beq	.L62
ARM GAS  /tmp/ccAG3ZiY.s 			page 28


 302:Src/spiops.c  ****             mprintf("write error\r\n");
 1184              		.loc 2 302 0
 1185 0082 4548     		ldr	r0, .L70+8
 1186 0084 FFF7FEFF 		bl	mprintf
 1187              	.L62:
 303:Src/spiops.c  **** 
 304:Src/spiops.c  ****         flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS + 2, (total_size >> 16) 
 1188              		.loc 2 304 0
 1189 0088 BB68     		ldr	r3, [r7, #8]
 1190 008a 1B0C     		lsrs	r3, r3, #16
 1191 008c 4FF00004 		mov	r4, #0
 1192 0090 4FF0FF01 		mov	r1, #255
 1193 0094 4FF00002 		mov	r2, #0
 1194 0098 03EA0103 		and	r3, r3, r1
 1195 009c 04EA0204 		and	r4, r4, r2
 1196 00a0 1A46     		mov	r2, r3
 1197 00a2 2346     		mov	r3, r4
 1198 00a4 3E49     		ldr	r1, .L70+16
 1199 00a6 0020     		movs	r0, #0
 1200 00a8 FFF7FEFF 		bl	HAL_FLASH_Program
 1201 00ac 0346     		mov	r3, r0
 1202 00ae FB71     		strb	r3, [r7, #7]
 305:Src/spiops.c  **** 
 306:Src/spiops.c  ****         if(flash_status != HAL_OK)
 1203              		.loc 2 306 0
 1204 00b0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1205 00b2 002B     		cmp	r3, #0
 1206 00b4 02D0     		beq	.L63
 307:Src/spiops.c  ****             mprintf("write error\r\n");
 1207              		.loc 2 307 0
 1208 00b6 3848     		ldr	r0, .L70+8
 1209 00b8 FFF7FEFF 		bl	mprintf
 1210              	.L63:
 308:Src/spiops.c  **** 
 309:Src/spiops.c  ****         flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS + 3, (total_size >> 24) 
 1211              		.loc 2 309 0
 1212 00bc BB68     		ldr	r3, [r7, #8]
 1213 00be 1B0E     		lsrs	r3, r3, #24
 1214 00c0 4FF00004 		mov	r4, #0
 1215 00c4 1A46     		mov	r2, r3
 1216 00c6 2346     		mov	r3, r4
 1217 00c8 3649     		ldr	r1, .L70+20
 1218 00ca 0020     		movs	r0, #0
 1219 00cc FFF7FEFF 		bl	HAL_FLASH_Program
 1220 00d0 0346     		mov	r3, r0
 1221 00d2 FB71     		strb	r3, [r7, #7]
 310:Src/spiops.c  **** 
 311:Src/spiops.c  ****         if(flash_status != HAL_OK)
 1222              		.loc 2 311 0
 1223 00d4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1224 00d6 002B     		cmp	r3, #0
 1225 00d8 02D0     		beq	.L64
 312:Src/spiops.c  ****             mprintf("write error\r\n");
 1226              		.loc 2 312 0
 1227 00da 2F48     		ldr	r0, .L70+8
 1228 00dc FFF7FEFF 		bl	mprintf
 1229              	.L64:
ARM GAS  /tmp/ccAG3ZiY.s 			page 29


 313:Src/spiops.c  **** 
 314:Src/spiops.c  ****         HAL_FLASH_Lock();
 1230              		.loc 2 314 0
 1231 00e0 FFF7FEFF 		bl	HAL_FLASH_Lock
 1232              	.L60:
 1233              	.LBE4:
 315:Src/spiops.c  **** 
 316:Src/spiops.c  ****     }
 317:Src/spiops.c  **** 
 318:Src/spiops.c  **** 
 319:Src/spiops.c  **** 
 320:Src/spiops.c  ****     HAL_FLASH_Unlock();
 1234              		.loc 2 320 0
 1235 00e4 FFF7FEFF 		bl	HAL_FLASH_Unlock
 1236              	.LBB5:
 321:Src/spiops.c  **** 
 322:Src/spiops.c  ****     for(int i=0; i<SPI_ENTITY_SIZE; i++)
 1237              		.loc 2 322 0
 1238 00e8 0023     		movs	r3, #0
 1239 00ea FB60     		str	r3, [r7, #12]
 1240 00ec 22E0     		b	.L65
 1241              	.L67:
 323:Src/spiops.c  ****     {
 324:Src/spiops.c  ****         flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, (SECTOR6_ADDRESS + i + 4) + (SPI_ENTITY_
 1242              		.loc 2 324 0
 1243 00ee 284B     		ldr	r3, .L70
 1244 00f0 1B68     		ldr	r3, [r3]
 1245 00f2 5B68     		ldr	r3, [r3, #4]
 1246 00f4 6C22     		movs	r2, #108
 1247 00f6 02FB03F2 		mul	r2, r2, r3
 1248 00fa FB68     		ldr	r3, [r7, #12]
 1249 00fc 1344     		add	r3, r3, r2
 1250 00fe 2A49     		ldr	r1, .L70+24
 1251 0100 1944     		add	r1, r1, r3
 1252 0102 234B     		ldr	r3, .L70
 1253 0104 1A68     		ldr	r2, [r3]
 1254 0106 FB68     		ldr	r3, [r7, #12]
 1255 0108 1344     		add	r3, r3, r2
 1256 010a 0833     		adds	r3, r3, #8
 1257 010c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1258 010e DBB2     		uxtb	r3, r3
 1259 0110 4FF00004 		mov	r4, #0
 1260 0114 1A46     		mov	r2, r3
 1261 0116 2346     		mov	r3, r4
 1262 0118 0020     		movs	r0, #0
 1263 011a FFF7FEFF 		bl	HAL_FLASH_Program
 1264 011e 0346     		mov	r3, r0
 1265 0120 FB71     		strb	r3, [r7, #7]
 325:Src/spiops.c  **** 
 326:Src/spiops.c  ****         if(flash_status != HAL_OK)
 1266              		.loc 2 326 0
 1267 0122 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1268 0124 002B     		cmp	r3, #0
 1269 0126 02D0     		beq	.L66
 327:Src/spiops.c  ****             mprintf("write error\r\n");
 1270              		.loc 2 327 0
 1271 0128 1B48     		ldr	r0, .L70+8
ARM GAS  /tmp/ccAG3ZiY.s 			page 30


 1272 012a FFF7FEFF 		bl	mprintf
 1273              	.L66:
 322:Src/spiops.c  ****     {
 1274              		.loc 2 322 0 discriminator 2
 1275 012e FB68     		ldr	r3, [r7, #12]
 1276 0130 0133     		adds	r3, r3, #1
 1277 0132 FB60     		str	r3, [r7, #12]
 1278              	.L65:
 322:Src/spiops.c  ****     {
 1279              		.loc 2 322 0 is_stmt 0 discriminator 1
 1280 0134 FB68     		ldr	r3, [r7, #12]
 1281 0136 6B2B     		cmp	r3, #107
 1282 0138 D9DD     		ble	.L67
 1283              	.LBE5:
 328:Src/spiops.c  ****     }
 329:Src/spiops.c  **** 
 330:Src/spiops.c  ****     HAL_FLASH_Lock();
 1284              		.loc 2 330 0 is_stmt 1
 1285 013a FFF7FEFF 		bl	HAL_FLASH_Lock
 331:Src/spiops.c  **** 
 332:Src/spiops.c  ****     if(UpdateFile->current_sequence_number == UpdateFile->total_sequence_number)
 1286              		.loc 2 332 0
 1287 013e 144B     		ldr	r3, .L70
 1288 0140 1B68     		ldr	r3, [r3]
 1289 0142 5A68     		ldr	r2, [r3, #4]
 1290 0144 124B     		ldr	r3, .L70
 1291 0146 1B68     		ldr	r3, [r3]
 1292 0148 1B68     		ldr	r3, [r3]
 1293 014a 9A42     		cmp	r2, r3
 1294 014c 1CD1     		bne	.L69
 333:Src/spiops.c  ****     {
 334:Src/spiops.c  **** 
 335:Src/spiops.c  **** 
 336:Src/spiops.c  ****         mprintf("Update file uploading has been finished.\r\n");
 1295              		.loc 2 336 0
 1296 014e 1748     		ldr	r0, .L70+28
 1297 0150 FFF7FEFF 		bl	mprintf
 337:Src/spiops.c  **** 
 338:Src/spiops.c  ****         mprintf("Restarting...\r\n");
 1298              		.loc 2 338 0
 1299 0154 1648     		ldr	r0, .L70+32
 1300 0156 FFF7FEFF 		bl	mprintf
 339:Src/spiops.c  **** 
 340:Src/spiops.c  ****         SpiRxData->header = 0;
 1301              		.loc 2 340 0
 1302 015a 164B     		ldr	r3, .L70+36
 1303 015c 1B68     		ldr	r3, [r3]
 1304 015e 0022     		movs	r2, #0
 1305 0160 1A80     		strh	r2, [r3]	@ movhi
 341:Src/spiops.c  ****         SpiRxData->checksum = 0;
 1306              		.loc 2 341 0
 1307 0162 144B     		ldr	r3, .L70+36
 1308 0164 1B68     		ldr	r3, [r3]
 1309 0166 0022     		movs	r2, #0
 1310 0168 A3F87620 		strh	r2, [r3, #118]	@ movhi
 342:Src/spiops.c  ****         UpdateFile->current_sequence_number = 0;
 1311              		.loc 2 342 0
ARM GAS  /tmp/ccAG3ZiY.s 			page 31


 1312 016c 084B     		ldr	r3, .L70
 1313 016e 1B68     		ldr	r3, [r3]
 1314 0170 0022     		movs	r2, #0
 1315 0172 5A60     		str	r2, [r3, #4]
 343:Src/spiops.c  ****         UpdateFile->total_sequence_number = -1;
 1316              		.loc 2 343 0
 1317 0174 064B     		ldr	r3, .L70
 1318 0176 1B68     		ldr	r3, [r3]
 1319 0178 4FF0FF32 		mov	r2, #-1
 1320 017c 1A60     		str	r2, [r3]
 344:Src/spiops.c  **** 
 345:Src/spiops.c  **** 
 346:Src/spiops.c  ****         osDelay(50);
 1321              		.loc 2 346 0
 1322 017e 3220     		movs	r0, #50
 1323 0180 FFF7FEFF 		bl	osDelay
 347:Src/spiops.c  **** 
 348:Src/spiops.c  ****         HAL_NVIC_SystemReset();
 1324              		.loc 2 348 0
 1325 0184 FFF7FEFF 		bl	HAL_NVIC_SystemReset
 1326              	.L69:
 349:Src/spiops.c  **** 
 350:Src/spiops.c  **** 
 351:Src/spiops.c  ****     }
 352:Src/spiops.c  **** 
 353:Src/spiops.c  **** 
 354:Src/spiops.c  **** }
 1327              		.loc 2 354 0
 1328 0188 00BF     		nop
 1329 018a 1437     		adds	r7, r7, #20
 1330              	.LCFI42:
 1331              		.cfi_def_cfa_offset 12
 1332 018c BD46     		mov	sp, r7
 1333              	.LCFI43:
 1334              		.cfi_def_cfa_register 13
 1335              		@ sp needed
 1336 018e 90BD     		pop	{r4, r7, pc}
 1337              	.L71:
 1338              		.align	2
 1339              	.L70:
 1340 0190 00000000 		.word	UpdateFile
 1341 0194 00000808 		.word	134742016
 1342 0198 28000000 		.word	.LC11
 1343 019c 01000808 		.word	134742017
 1344 01a0 02000808 		.word	134742018
 1345 01a4 03000808 		.word	134742019
 1346 01a8 98FF0708 		.word	134741912
 1347 01ac 38000000 		.word	.LC12
 1348 01b0 64000000 		.word	.LC13
 1349 01b4 00000000 		.word	SpiRxData
 1350              		.cfi_endproc
 1351              	.LFE153:
 1353              		.section	.rodata
 1354              		.align	2
 1355              	.LC14:
 1356 0074 57726974 		.ascii	"Writing data to memory\015\012\000"
 1356      696E6720 
ARM GAS  /tmp/ccAG3ZiY.s 			page 32


 1356      64617461 
 1356      20746F20 
 1356      6D656D6F 
 1357 008d 000000   		.align	2
 1358              	.LC15:
 1359 0090 57726974 		.ascii	"Writing is done\015\012\000"
 1359      696E6720 
 1359      69732064 
 1359      6F6E650D 
 1359      0A00
 1360              		.section	.text.writeUpdateFileToFlash,"ax",%progbits
 1361              		.align	1
 1362              		.global	writeUpdateFileToFlash
 1363              		.syntax unified
 1364              		.thumb
 1365              		.thumb_func
 1366              		.fpu fpv4-sp-d16
 1368              	writeUpdateFileToFlash:
 1369              	.LFB154:
 355:Src/spiops.c  **** 
 356:Src/spiops.c  **** 
 357:Src/spiops.c  **** void writeUpdateFileToFlash(unsigned char *UpdateFileData)
 358:Src/spiops.c  **** {
 1370              		.loc 2 358 0
 1371              		.cfi_startproc
 1372              		@ args = 0, pretend = 0, frame = 24
 1373              		@ frame_needed = 1, uses_anonymous_args = 0
 1374 0000 90B5     		push	{r4, r7, lr}
 1375              	.LCFI44:
 1376              		.cfi_def_cfa_offset 12
 1377              		.cfi_offset 4, -12
 1378              		.cfi_offset 7, -8
 1379              		.cfi_offset 14, -4
 1380 0002 87B0     		sub	sp, sp, #28
 1381              	.LCFI45:
 1382              		.cfi_def_cfa_offset 40
 1383 0004 00AF     		add	r7, sp, #0
 1384              	.LCFI46:
 1385              		.cfi_def_cfa_register 7
 1386 0006 7860     		str	r0, [r7, #4]
 359:Src/spiops.c  **** 
 360:Src/spiops.c  **** 
 361:Src/spiops.c  ****     HAL_StatusTypeDef flash_status;
 362:Src/spiops.c  ****     uint32_t total_size;
 363:Src/spiops.c  **** 
 364:Src/spiops.c  **** 
 365:Src/spiops.c  ****     mprintf("Writing data to memory\r\n");
 1387              		.loc 2 365 0
 1388 0008 5248     		ldr	r0, .L80
 1389 000a FFF7FEFF 		bl	mprintf
 366:Src/spiops.c  ****     HAL_FLASH_Unlock();
 1390              		.loc 2 366 0
 1391 000e FFF7FEFF 		bl	HAL_FLASH_Unlock
 367:Src/spiops.c  ****     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAER
 1392              		.loc 2 367 0
 1393 0012 514B     		ldr	r3, .L80+4
 1394 0014 3322     		movs	r2, #51
ARM GAS  /tmp/ccAG3ZiY.s 			page 33


 1395 0016 DA60     		str	r2, [r3, #12]
 368:Src/spiops.c  ****     FLASH_Erase_Sector(FLASH_SECTOR_6, VOLTAGE_RANGE_3);
 1396              		.loc 2 368 0
 1397 0018 0221     		movs	r1, #2
 1398 001a 0620     		movs	r0, #6
 1399 001c FFF7FEFF 		bl	FLASH_Erase_Sector
 369:Src/spiops.c  **** 
 370:Src/spiops.c  **** 
 371:Src/spiops.c  ****     total_size = SPI_ENTITY_SIZE * (UpdateFile->total_sequence_number);
 1400              		.loc 2 371 0
 1401 0020 4E4B     		ldr	r3, .L80+8
 1402 0022 1B68     		ldr	r3, [r3]
 1403 0024 1B68     		ldr	r3, [r3]
 1404 0026 6C22     		movs	r2, #108
 1405 0028 02FB03F3 		mul	r3, r2, r3
 1406 002c 3B61     		str	r3, [r7, #16]
 372:Src/spiops.c  **** 
 373:Src/spiops.c  **** 
 374:Src/spiops.c  ****     flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS, total_size & 0xff);
 1407              		.loc 2 374 0
 1408 002e 3B69     		ldr	r3, [r7, #16]
 1409 0030 4FF00004 		mov	r4, #0
 1410 0034 4FF0FF01 		mov	r1, #255
 1411 0038 4FF00002 		mov	r2, #0
 1412 003c 03EA0103 		and	r3, r3, r1
 1413 0040 04EA0204 		and	r4, r4, r2
 1414 0044 1A46     		mov	r2, r3
 1415 0046 2346     		mov	r3, r4
 1416 0048 4549     		ldr	r1, .L80+12
 1417 004a 0020     		movs	r0, #0
 1418 004c FFF7FEFF 		bl	HAL_FLASH_Program
 1419 0050 0346     		mov	r3, r0
 1420 0052 FB73     		strb	r3, [r7, #15]
 375:Src/spiops.c  **** 
 376:Src/spiops.c  ****     if(flash_status != HAL_OK)
 1421              		.loc 2 376 0
 1422 0054 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1423 0056 002B     		cmp	r3, #0
 1424 0058 02D0     		beq	.L73
 377:Src/spiops.c  ****         mprintf("write error\r\n");
 1425              		.loc 2 377 0
 1426 005a 4248     		ldr	r0, .L80+16
 1427 005c FFF7FEFF 		bl	mprintf
 1428              	.L73:
 378:Src/spiops.c  **** 
 379:Src/spiops.c  ****     flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS + 1, (total_size >> 8) & 0xf
 1429              		.loc 2 379 0
 1430 0060 3B69     		ldr	r3, [r7, #16]
 1431 0062 1B0A     		lsrs	r3, r3, #8
 1432 0064 4FF00004 		mov	r4, #0
 1433 0068 4FF0FF01 		mov	r1, #255
 1434 006c 4FF00002 		mov	r2, #0
 1435 0070 03EA0103 		and	r3, r3, r1
 1436 0074 04EA0204 		and	r4, r4, r2
 1437 0078 1A46     		mov	r2, r3
 1438 007a 2346     		mov	r3, r4
 1439 007c 3A49     		ldr	r1, .L80+20
ARM GAS  /tmp/ccAG3ZiY.s 			page 34


 1440 007e 0020     		movs	r0, #0
 1441 0080 FFF7FEFF 		bl	HAL_FLASH_Program
 1442 0084 0346     		mov	r3, r0
 1443 0086 FB73     		strb	r3, [r7, #15]
 380:Src/spiops.c  **** 
 381:Src/spiops.c  ****     if(flash_status != HAL_OK)
 1444              		.loc 2 381 0
 1445 0088 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1446 008a 002B     		cmp	r3, #0
 1447 008c 02D0     		beq	.L74
 382:Src/spiops.c  ****         mprintf("write error\r\n");
 1448              		.loc 2 382 0
 1449 008e 3548     		ldr	r0, .L80+16
 1450 0090 FFF7FEFF 		bl	mprintf
 1451              	.L74:
 383:Src/spiops.c  **** 
 384:Src/spiops.c  ****     flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS + 2, (total_size >> 16) & 0x
 1452              		.loc 2 384 0
 1453 0094 3B69     		ldr	r3, [r7, #16]
 1454 0096 1B0C     		lsrs	r3, r3, #16
 1455 0098 4FF00004 		mov	r4, #0
 1456 009c 4FF0FF01 		mov	r1, #255
 1457 00a0 4FF00002 		mov	r2, #0
 1458 00a4 03EA0103 		and	r3, r3, r1
 1459 00a8 04EA0204 		and	r4, r4, r2
 1460 00ac 1A46     		mov	r2, r3
 1461 00ae 2346     		mov	r3, r4
 1462 00b0 2E49     		ldr	r1, .L80+24
 1463 00b2 0020     		movs	r0, #0
 1464 00b4 FFF7FEFF 		bl	HAL_FLASH_Program
 1465 00b8 0346     		mov	r3, r0
 1466 00ba FB73     		strb	r3, [r7, #15]
 385:Src/spiops.c  **** 
 386:Src/spiops.c  ****     if(flash_status != HAL_OK)
 1467              		.loc 2 386 0
 1468 00bc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1469 00be 002B     		cmp	r3, #0
 1470 00c0 02D0     		beq	.L75
 387:Src/spiops.c  ****         mprintf("write error\r\n");
 1471              		.loc 2 387 0
 1472 00c2 2848     		ldr	r0, .L80+16
 1473 00c4 FFF7FEFF 		bl	mprintf
 1474              	.L75:
 388:Src/spiops.c  **** 
 389:Src/spiops.c  ****     flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS + 3, (total_size >> 24) & 0x
 1475              		.loc 2 389 0
 1476 00c8 3B69     		ldr	r3, [r7, #16]
 1477 00ca 1B0E     		lsrs	r3, r3, #24
 1478 00cc 4FF00004 		mov	r4, #0
 1479 00d0 1A46     		mov	r2, r3
 1480 00d2 2346     		mov	r3, r4
 1481 00d4 2649     		ldr	r1, .L80+28
 1482 00d6 0020     		movs	r0, #0
 1483 00d8 FFF7FEFF 		bl	HAL_FLASH_Program
 1484 00dc 0346     		mov	r3, r0
 1485 00de FB73     		strb	r3, [r7, #15]
 390:Src/spiops.c  **** 
ARM GAS  /tmp/ccAG3ZiY.s 			page 35


 391:Src/spiops.c  ****     if(flash_status != HAL_OK)
 1486              		.loc 2 391 0
 1487 00e0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1488 00e2 002B     		cmp	r3, #0
 1489 00e4 02D0     		beq	.L76
 392:Src/spiops.c  ****         mprintf("write error\r\n");
 1490              		.loc 2 392 0
 1491 00e6 1F48     		ldr	r0, .L80+16
 1492 00e8 FFF7FEFF 		bl	mprintf
 1493              	.L76:
 1494              	.LBB6:
 393:Src/spiops.c  **** 
 394:Src/spiops.c  ****     for(int i=0; i<total_size; i++)
 1495              		.loc 2 394 0
 1496 00ec 0023     		movs	r3, #0
 1497 00ee 7B61     		str	r3, [r7, #20]
 1498 00f0 1AE0     		b	.L77
 1499              	.L79:
 395:Src/spiops.c  ****     {
 396:Src/spiops.c  ****         flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS + i + 4, (uint8_t)Update
 1500              		.loc 2 396 0
 1501 00f2 7A69     		ldr	r2, [r7, #20]
 1502 00f4 1F4B     		ldr	r3, .L80+32
 1503 00f6 1344     		add	r3, r3, r2
 1504 00f8 1946     		mov	r1, r3
 1505 00fa 7B69     		ldr	r3, [r7, #20]
 1506 00fc 7A68     		ldr	r2, [r7, #4]
 1507 00fe 1344     		add	r3, r3, r2
 1508 0100 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1509 0102 DBB2     		uxtb	r3, r3
 1510 0104 4FF00004 		mov	r4, #0
 1511 0108 1A46     		mov	r2, r3
 1512 010a 2346     		mov	r3, r4
 1513 010c 0020     		movs	r0, #0
 1514 010e FFF7FEFF 		bl	HAL_FLASH_Program
 1515 0112 0346     		mov	r3, r0
 1516 0114 FB73     		strb	r3, [r7, #15]
 397:Src/spiops.c  **** 
 398:Src/spiops.c  ****         if(flash_status != HAL_OK)
 1517              		.loc 2 398 0
 1518 0116 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1519 0118 002B     		cmp	r3, #0
 1520 011a 02D0     		beq	.L78
 399:Src/spiops.c  ****             mprintf("write error\r\n");
 1521              		.loc 2 399 0
 1522 011c 1148     		ldr	r0, .L80+16
 1523 011e FFF7FEFF 		bl	mprintf
 1524              	.L78:
 394:Src/spiops.c  ****     {
 1525              		.loc 2 394 0 discriminator 2
 1526 0122 7B69     		ldr	r3, [r7, #20]
 1527 0124 0133     		adds	r3, r3, #1
 1528 0126 7B61     		str	r3, [r7, #20]
 1529              	.L77:
 394:Src/spiops.c  ****     {
 1530              		.loc 2 394 0 is_stmt 0 discriminator 1
 1531 0128 7A69     		ldr	r2, [r7, #20]
ARM GAS  /tmp/ccAG3ZiY.s 			page 36


 1532 012a 3B69     		ldr	r3, [r7, #16]
 1533 012c 9A42     		cmp	r2, r3
 1534 012e E0D3     		bcc	.L79
 1535              	.LBE6:
 400:Src/spiops.c  ****     }
 401:Src/spiops.c  **** 
 402:Src/spiops.c  ****     HAL_FLASH_Lock();
 1536              		.loc 2 402 0 is_stmt 1
 1537 0130 FFF7FEFF 		bl	HAL_FLASH_Lock
 403:Src/spiops.c  **** 
 404:Src/spiops.c  ****     mprintf("Writing is done\r\n");
 1538              		.loc 2 404 0
 1539 0134 1048     		ldr	r0, .L80+36
 1540 0136 FFF7FEFF 		bl	mprintf
 405:Src/spiops.c  **** 
 406:Src/spiops.c  ****     mprintf("Restarting...\r\n");
 1541              		.loc 2 406 0
 1542 013a 1048     		ldr	r0, .L80+40
 1543 013c FFF7FEFF 		bl	mprintf
 407:Src/spiops.c  **** 
 408:Src/spiops.c  ****     osDelay(50);
 1544              		.loc 2 408 0
 1545 0140 3220     		movs	r0, #50
 1546 0142 FFF7FEFF 		bl	osDelay
 409:Src/spiops.c  **** 
 410:Src/spiops.c  **** 
 411:Src/spiops.c  ****     HAL_NVIC_SystemReset();
 1547              		.loc 2 411 0
 1548 0146 FFF7FEFF 		bl	HAL_NVIC_SystemReset
 412:Src/spiops.c  **** 
 413:Src/spiops.c  **** }
 1549              		.loc 2 413 0
 1550 014a 00BF     		nop
 1551 014c 1C37     		adds	r7, r7, #28
 1552              	.LCFI47:
 1553              		.cfi_def_cfa_offset 12
 1554 014e BD46     		mov	sp, r7
 1555              	.LCFI48:
 1556              		.cfi_def_cfa_register 13
 1557              		@ sp needed
 1558 0150 90BD     		pop	{r4, r7, pc}
 1559              	.L81:
 1560 0152 00BF     		.align	2
 1561              	.L80:
 1562 0154 74000000 		.word	.LC14
 1563 0158 003C0240 		.word	1073888256
 1564 015c 00000000 		.word	UpdateFile
 1565 0160 00000808 		.word	134742016
 1566 0164 28000000 		.word	.LC11
 1567 0168 01000808 		.word	134742017
 1568 016c 02000808 		.word	134742018
 1569 0170 03000808 		.word	134742019
 1570 0174 04000808 		.word	134742020
 1571 0178 90000000 		.word	.LC15
 1572 017c 64000000 		.word	.LC13
 1573              		.cfi_endproc
 1574              	.LFE154:
ARM GAS  /tmp/ccAG3ZiY.s 			page 37


 1576              		.section	.rodata
 1577 00a2 0000     		.align	2
 1578              	.LC16:
 1579 00a4 530D0A00 		.ascii	"S\015\012\000"
 1580              		.section	.text.processControlData,"ax",%progbits
 1581              		.align	1
 1582              		.global	processControlData
 1583              		.syntax unified
 1584              		.thumb
 1585              		.thumb_func
 1586              		.fpu fpv4-sp-d16
 1588              	processControlData:
 1589              	.LFB155:
 414:Src/spiops.c  **** 
 415:Src/spiops.c  **** 
 416:Src/spiops.c  **** 
 417:Src/spiops.c  **** void processControlData()
 418:Src/spiops.c  **** {
 1590              		.loc 2 418 0
 1591              		.cfi_startproc
 1592              		@ args = 0, pretend = 0, frame = 0
 1593              		@ frame_needed = 1, uses_anonymous_args = 0
 1594 0000 80B5     		push	{r7, lr}
 1595              	.LCFI49:
 1596              		.cfi_def_cfa_offset 8
 1597              		.cfi_offset 7, -8
 1598              		.cfi_offset 14, -4
 1599 0002 00AF     		add	r7, sp, #0
 1600              	.LCFI50:
 1601              		.cfi_def_cfa_register 7
 419:Src/spiops.c  **** 
 420:Src/spiops.c  **** 
 421:Src/spiops.c  ****     motor1.direction = ControlData -> step_motor1_direction;
 1602              		.loc 2 421 0
 1603 0004 1E4B     		ldr	r3, .L85
 1604 0006 1B68     		ldr	r3, [r3]
 1605 0008 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1606 000c 1A46     		mov	r2, r3
 1607 000e 1D4B     		ldr	r3, .L85+4
 1608 0010 1A60     		str	r2, [r3]
 422:Src/spiops.c  ****     motor1.speed = ControlData -> step_motor1_speed;
 1609              		.loc 2 422 0
 1610 0012 1B4B     		ldr	r3, .L85
 1611 0014 1B68     		ldr	r3, [r3]
 1612 0016 93F84230 		ldrb	r3, [r3, #66]	@ zero_extendqisi2
 1613 001a 1A46     		mov	r2, r3
 1614 001c 194B     		ldr	r3, .L85+4
 1615 001e 5A60     		str	r2, [r3, #4]
 423:Src/spiops.c  **** 
 424:Src/spiops.c  **** 
 425:Src/spiops.c  ****     motor2.direction = ControlData -> step_motor2_direction;;
 1616              		.loc 2 425 0
 1617 0020 174B     		ldr	r3, .L85
 1618 0022 1B68     		ldr	r3, [r3]
 1619 0024 93F83D30 		ldrb	r3, [r3, #61]	@ zero_extendqisi2
 1620 0028 1A46     		mov	r2, r3
 1621 002a 174B     		ldr	r3, .L85+8
ARM GAS  /tmp/ccAG3ZiY.s 			page 38


 1622 002c 1A60     		str	r2, [r3]
 426:Src/spiops.c  ****     motor2.speed = ControlData -> step_motor2_speed;
 1623              		.loc 2 426 0
 1624 002e 144B     		ldr	r3, .L85
 1625 0030 1B68     		ldr	r3, [r3]
 1626 0032 93F84330 		ldrb	r3, [r3, #67]	@ zero_extendqisi2
 1627 0036 1A46     		mov	r2, r3
 1628 0038 134B     		ldr	r3, .L85+8
 1629 003a 5A60     		str	r2, [r3, #4]
 427:Src/spiops.c  **** 
 428:Src/spiops.c  **** 
 429:Src/spiops.c  **** //    if(ControlData -> servo_motor1_degree != 0)
 430:Src/spiops.c  ****     servo1.angle = ControlData -> servo_motor1_degree;
 1630              		.loc 2 430 0
 1631 003c 104B     		ldr	r3, .L85
 1632 003e 1B68     		ldr	r3, [r3]
 1633 0040 93F84630 		ldrb	r3, [r3, #70]	@ zero_extendqisi2
 1634 0044 1A46     		mov	r2, r3
 1635 0046 114B     		ldr	r3, .L85+12
 1636 0048 1A60     		str	r2, [r3]
 431:Src/spiops.c  **** 
 432:Src/spiops.c  **** 
 433:Src/spiops.c  **** //    if(ControlData -> servo_motor2_degree != 0)
 434:Src/spiops.c  ****     servo2.angle = ControlData -> servo_motor2_degree;
 1637              		.loc 2 434 0
 1638 004a 0D4B     		ldr	r3, .L85
 1639 004c 1B68     		ldr	r3, [r3]
 1640 004e 93F84730 		ldrb	r3, [r3, #71]	@ zero_extendqisi2
 1641 0052 1A46     		mov	r2, r3
 1642 0054 0E4B     		ldr	r3, .L85+16
 1643 0056 1A60     		str	r2, [r3]
 435:Src/spiops.c  **** 
 436:Src/spiops.c  **** 
 437:Src/spiops.c  ****     if(ControlData -> calibrate_sensor == 1)
 1644              		.loc 2 437 0
 1645 0058 094B     		ldr	r3, .L85
 1646 005a 1B68     		ldr	r3, [r3]
 1647 005c 93F84830 		ldrb	r3, [r3, #72]	@ zero_extendqisi2
 1648 0060 012B     		cmp	r3, #1
 1649 0062 0BD1     		bne	.L84
 438:Src/spiops.c  ****     {
 439:Src/spiops.c  ****         mprintf("S\r\n");
 1650              		.loc 2 439 0
 1651 0064 0B48     		ldr	r0, .L85+20
 1652 0066 FFF7FEFF 		bl	mprintf
 440:Src/spiops.c  **** 
 441:Src/spiops.c  ****         calibration.available = 1;
 1653              		.loc 2 441 0
 1654 006a 0B4B     		ldr	r3, .L85+24
 1655 006c 0122     		movs	r2, #1
 1656 006e 1A60     		str	r2, [r3]
 442:Src/spiops.c  **** 
 443:Src/spiops.c  ****         motor1.direction = STOP;
 1657              		.loc 2 443 0
 1658 0070 044B     		ldr	r3, .L85+4
 1659 0072 0022     		movs	r2, #0
 1660 0074 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccAG3ZiY.s 			page 39


 444:Src/spiops.c  ****         motor2.direction = STOP;
 1661              		.loc 2 444 0
 1662 0076 044B     		ldr	r3, .L85+8
 1663 0078 0022     		movs	r2, #0
 1664 007a 1A60     		str	r2, [r3]
 1665              	.L84:
 445:Src/spiops.c  **** 
 446:Src/spiops.c  ****     }
 447:Src/spiops.c  **** 
 448:Src/spiops.c  **** 
 449:Src/spiops.c  **** 
 450:Src/spiops.c  **** 
 451:Src/spiops.c  **** }
 1666              		.loc 2 451 0
 1667 007c 00BF     		nop
 1668 007e 80BD     		pop	{r7, pc}
 1669              	.L86:
 1670              		.align	2
 1671              	.L85:
 1672 0080 00000000 		.word	ControlData
 1673 0084 00000000 		.word	motor1
 1674 0088 00000000 		.word	motor2
 1675 008c 00000000 		.word	servo1
 1676 0090 00000000 		.word	servo2
 1677 0094 A4000000 		.word	.LC16
 1678 0098 00000000 		.word	calibration
 1679              		.cfi_endproc
 1680              	.LFE155:
 1682              		.section	.rodata
 1683              		.align	2
 1684              	.LC17:
 1685 00a8 73656E73 		.ascii	"sensorOps\015\012\000"
 1685      6F724F70 
 1685      730D0A00 
 1686              		.align	2
 1687              	.LC18:
 1688 00b4 53656E73 		.ascii	"Sensor Calibration Started. \015\012\000"
 1688      6F722043 
 1688      616C6962 
 1688      72617469 
 1688      6F6E2053 
 1689              		.section	.text.sensorOps,"ax",%progbits
 1690              		.align	1
 1691              		.global	sensorOps
 1692              		.syntax unified
 1693              		.thumb
 1694              		.thumb_func
 1695              		.fpu fpv4-sp-d16
 1697              	sensorOps:
 1698              	.LFB156:
 1699              		.file 3 "Src/sensorops.c"
   1:Src/sensorops.c **** #include "sensorops.h"
   2:Src/sensorops.c **** 
   3:Src/sensorops.c **** 
   4:Src/sensorops.c **** /* sensorOps function */
   5:Src/sensorops.c **** void sensorOps(void const * argument)
   6:Src/sensorops.c **** {
ARM GAS  /tmp/ccAG3ZiY.s 			page 40


 1700              		.loc 3 6 0
 1701              		.cfi_startproc
 1702              		@ args = 0, pretend = 0, frame = 8
 1703              		@ frame_needed = 1, uses_anonymous_args = 0
 1704 0000 80B5     		push	{r7, lr}
 1705              	.LCFI51:
 1706              		.cfi_def_cfa_offset 8
 1707              		.cfi_offset 7, -8
 1708              		.cfi_offset 14, -4
 1709 0002 82B0     		sub	sp, sp, #8
 1710              	.LCFI52:
 1711              		.cfi_def_cfa_offset 16
 1712 0004 00AF     		add	r7, sp, #0
 1713              	.LCFI53:
 1714              		.cfi_def_cfa_register 7
 1715 0006 7860     		str	r0, [r7, #4]
   7:Src/sensorops.c **** 
   8:Src/sensorops.c ****   mprintf("sensorOps\r\n");
 1716              		.loc 3 8 0
 1717 0008 1D48     		ldr	r0, .L91
 1718 000a FFF7FEFF 		bl	mprintf
 1719              	.L90:
   9:Src/sensorops.c **** 
  10:Src/sensorops.c **** //  sensorInit();
  11:Src/sensorops.c **** 
  12:Src/sensorops.c **** 
  13:Src/sensorops.c ****   while(1)
  14:Src/sensorops.c ****   {
  15:Src/sensorops.c **** 
  16:Src/sensorops.c **** 
  17:Src/sensorops.c ****       if(calibration.available == 1)
 1720              		.loc 3 17 0
 1721 000e 1D4B     		ldr	r3, .L91+4
 1722 0010 1B68     		ldr	r3, [r3]
 1723 0012 012B     		cmp	r3, #1
 1724 0014 08D1     		bne	.L88
  18:Src/sensorops.c ****       {
  19:Src/sensorops.c ****           mprintf("Sensor Calibration Started. \r\n");
 1725              		.loc 3 19 0
 1726 0016 1C48     		ldr	r0, .L91+8
 1727 0018 FFF7FEFF 		bl	mprintf
  20:Src/sensorops.c **** 
  21:Src/sensorops.c ****           calibration.available  = 0;
 1728              		.loc 3 21 0
 1729 001c 194B     		ldr	r3, .L91+4
 1730 001e 0022     		movs	r2, #0
 1731 0020 1A60     		str	r2, [r3]
  22:Src/sensorops.c ****           calibrateCompass();
 1732              		.loc 3 22 0
 1733 0022 FFF7FEFF 		bl	calibrateCompass
 1734 0026 F2E7     		b	.L90
 1735              	.L88:
  23:Src/sensorops.c ****       }
  24:Src/sensorops.c ****       else
  25:Src/sensorops.c ****       {
  26:Src/sensorops.c **** 
  27:Src/sensorops.c ****           readAllSensors();
ARM GAS  /tmp/ccAG3ZiY.s 			page 41


 1736              		.loc 3 27 0
 1737 0028 FFF7FEFF 		bl	readAllSensors
  28:Src/sensorops.c **** 
  29:Src/sensorops.c **** 
  30:Src/sensorops.c ****           xSemaphoreTake(spiMutexHandle, portMAX_DELAY);
 1738              		.loc 3 30 0
 1739 002c 174B     		ldr	r3, .L91+12
 1740 002e 1868     		ldr	r0, [r3]
 1741 0030 0023     		movs	r3, #0
 1742 0032 4FF0FF32 		mov	r2, #-1
 1743 0036 0021     		movs	r1, #0
 1744 0038 FFF7FEFF 		bl	xQueueGenericReceive
  31:Src/sensorops.c **** 
  32:Src/sensorops.c ****           EnvironmentData -> sensor_data.temperature = sensorValues.temperature;
 1745              		.loc 3 32 0
 1746 003c 144B     		ldr	r3, .L91+16
 1747 003e 1B68     		ldr	r3, [r3]
 1748 0040 144A     		ldr	r2, .L91+20
 1749 0042 9268     		ldr	r2, [r2, #8]
 1750 0044 5A66     		str	r2, [r3, #100]
  33:Src/sensorops.c ****           EnvironmentData -> sensor_data.pressure = sensorValues.pressure;
 1751              		.loc 3 33 0
 1752 0046 124B     		ldr	r3, .L91+16
 1753 0048 1B68     		ldr	r3, [r3]
 1754 004a 124A     		ldr	r2, .L91+20
 1755 004c 1268     		ldr	r2, [r2]
 1756 004e DA66     		str	r2, [r3, #108]
  34:Src/sensorops.c ****           EnvironmentData -> sensor_data.altitude = sensorValues.altitude;
 1757              		.loc 3 34 0
 1758 0050 0F4B     		ldr	r3, .L91+16
 1759 0052 1B68     		ldr	r3, [r3]
 1760 0054 0F4A     		ldr	r2, .L91+20
 1761 0056 5268     		ldr	r2, [r2, #4]
 1762 0058 1A67     		str	r2, [r3, #112]
  35:Src/sensorops.c ****           EnvironmentData -> sensor_data.wheather_condition = sensorValues.wheather_condition;
 1763              		.loc 3 35 0
 1764 005a 0D4B     		ldr	r3, .L91+16
 1765 005c 1B68     		ldr	r3, [r3]
 1766 005e 0D4A     		ldr	r2, .L91+20
 1767 0060 127B     		ldrb	r2, [r2, #12]	@ zero_extendqisi2
 1768 0062 83F87420 		strb	r2, [r3, #116]
  36:Src/sensorops.c ****           EnvironmentData -> sensor_data.compass_degree = sensorValues.compass_degree;
 1769              		.loc 3 36 0
 1770 0066 0A4B     		ldr	r3, .L91+16
 1771 0068 1B68     		ldr	r3, [r3]
 1772 006a 0A4A     		ldr	r2, .L91+20
 1773 006c 1269     		ldr	r2, [r2, #16]
 1774 006e 9A66     		str	r2, [r3, #104]
  37:Src/sensorops.c **** 
  38:Src/sensorops.c ****           xSemaphoreGive(spiMutexHandle);
 1775              		.loc 3 38 0
 1776 0070 064B     		ldr	r3, .L91+12
 1777 0072 1868     		ldr	r0, [r3]
 1778 0074 0023     		movs	r3, #0
 1779 0076 0022     		movs	r2, #0
 1780 0078 0021     		movs	r1, #0
 1781 007a FFF7FEFF 		bl	xQueueGenericSend
ARM GAS  /tmp/ccAG3ZiY.s 			page 42


  17:Src/sensorops.c ****       {
 1782              		.loc 3 17 0
 1783 007e C6E7     		b	.L90
 1784              	.L92:
 1785              		.align	2
 1786              	.L91:
 1787 0080 A8000000 		.word	.LC17
 1788 0084 00000000 		.word	calibration
 1789 0088 B4000000 		.word	.LC18
 1790 008c 00000000 		.word	spiMutexHandle
 1791 0090 00000000 		.word	EnvironmentData
 1792 0094 00000000 		.word	sensorValues
 1793              		.cfi_endproc
 1794              	.LFE156:
 1796              		.section	.rodata
 1797 00d3 00       		.align	2
 1798              	.LC19:
 1799 00d4 6D6F746F 		.ascii	"motorOps\015\012\000"
 1799      724F7073 
 1799      0D0A00
 1800              		.global	__aeabi_i2d
 1801              		.global	__aeabi_dmul
 1802              		.global	__aeabi_dadd
 1803              		.global	__aeabi_d2iz
 1804              		.section	.text.motorOps,"ax",%progbits
 1805              		.align	1
 1806              		.global	motorOps
 1807              		.syntax unified
 1808              		.thumb
 1809              		.thumb_func
 1810              		.fpu fpv4-sp-d16
 1812              	motorOps:
 1813              	.LFB157:
 1814              		.file 4 "Src/motorops.c"
   1:Src/motorops.c **** #include "motorops.h"
   2:Src/motorops.c **** #include "main.h"
   3:Src/motorops.c **** 
   4:Src/motorops.c **** 
   5:Src/motorops.c **** 
   6:Src/motorops.c **** void motorOps(void const * argument)
   7:Src/motorops.c **** {
 1815              		.loc 4 7 0
 1816              		.cfi_startproc
 1817              		@ args = 0, pretend = 0, frame = 48
 1818              		@ frame_needed = 1, uses_anonymous_args = 0
 1819 0000 90B5     		push	{r4, r7, lr}
 1820              	.LCFI54:
 1821              		.cfi_def_cfa_offset 12
 1822              		.cfi_offset 4, -12
 1823              		.cfi_offset 7, -8
 1824              		.cfi_offset 14, -4
 1825 0002 8DB0     		sub	sp, sp, #52
 1826              	.LCFI55:
 1827              		.cfi_def_cfa_offset 64
 1828 0004 00AF     		add	r7, sp, #0
 1829              	.LCFI56:
 1830              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccAG3ZiY.s 			page 43


 1831 0006 7860     		str	r0, [r7, #4]
   8:Src/motorops.c **** 
   9:Src/motorops.c ****     int counter1 = 0;
 1832              		.loc 4 9 0
 1833 0008 0023     		movs	r3, #0
 1834 000a FB62     		str	r3, [r7, #44]
  10:Src/motorops.c ****     int counter2 = 0;
 1835              		.loc 4 10 0
 1836 000c 0023     		movs	r3, #0
 1837 000e BB62     		str	r3, [r7, #40]
  11:Src/motorops.c **** 
  12:Src/motorops.c ****     int servo2_degree = 0;
 1838              		.loc 4 12 0
 1839 0010 0023     		movs	r3, #0
 1840 0012 7B62     		str	r3, [r7, #36]
  13:Src/motorops.c ****     int servo1_degree = 0;
 1841              		.loc 4 13 0
 1842 0014 0023     		movs	r3, #0
 1843 0016 3B62     		str	r3, [r7, #32]
  14:Src/motorops.c **** 
  15:Src/motorops.c ****     int speed = 0;
 1844              		.loc 4 15 0
 1845 0018 0023     		movs	r3, #0
 1846 001a FB61     		str	r3, [r7, #28]
  16:Src/motorops.c **** 
  17:Src/motorops.c ****     int step_motor1_last_direction;
  18:Src/motorops.c ****     int step_motor2_last_direction;
  19:Src/motorops.c ****     int step_motor1_break;
  20:Src/motorops.c ****     int step_motor2_break;
  21:Src/motorops.c **** 
  22:Src/motorops.c ****     short int offside_step1;
  23:Src/motorops.c ****     short int offside_step2;
  24:Src/motorops.c ****     short int offside_available_step1 = 0;
 1847              		.loc 4 24 0
 1848 001c 0023     		movs	r3, #0
 1849 001e 7B83     		strh	r3, [r7, #26]	@ movhi
  25:Src/motorops.c ****     short int offside_available_step2 = 0;
 1850              		.loc 4 25 0
 1851 0020 0023     		movs	r3, #0
 1852 0022 3B83     		strh	r3, [r7, #24]	@ movhi
  26:Src/motorops.c **** 
  27:Src/motorops.c **** 
  28:Src/motorops.c ****     mprintf("motorOps\r\n");
 1853              		.loc 4 28 0
 1854 0024 5E48     		ldr	r0, .L107+8
 1855 0026 FFF7FEFF 		bl	mprintf
 1856              	.L106:
  29:Src/motorops.c **** 
  30:Src/motorops.c ****     while(1)
  31:Src/motorops.c ****     {
  32:Src/motorops.c **** 
  33:Src/motorops.c ****         step_motor1_break = HAL_GPIO_ReadPin(STEP1_BREAK_GPIO_Port, STEP1_BREAK_Pin);
 1857              		.loc 4 33 0
 1858 002a 4FF40041 		mov	r1, #32768
 1859 002e 5D48     		ldr	r0, .L107+12
 1860 0030 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1861 0034 0346     		mov	r3, r0
ARM GAS  /tmp/ccAG3ZiY.s 			page 44


 1862 0036 7B61     		str	r3, [r7, #20]
  34:Src/motorops.c ****         step_motor2_break = HAL_GPIO_ReadPin(STEP2_BREAK_GPIO_Port, STEP2_BREAK_Pin);
 1863              		.loc 4 34 0
 1864 0038 0221     		movs	r1, #2
 1865 003a 5B48     		ldr	r0, .L107+16
 1866 003c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1867 0040 0346     		mov	r3, r0
 1868 0042 3B61     		str	r3, [r7, #16]
  35:Src/motorops.c **** 
  36:Src/motorops.c **** //        if(!step_motor1_break && !offside_available_step1)
  37:Src/motorops.c **** //        {
  38:Src/motorops.c **** //            offside_step1 == step_motor1_last_direction;
  39:Src/motorops.c **** //            offside_available_step1 = 1;
  40:Src/motorops.c **** 
  41:Src/motorops.c **** //        }else if(step_motor1_break)
  42:Src/motorops.c **** //        {
  43:Src/motorops.c **** //            offside_step1 = 0;
  44:Src/motorops.c **** //            offside_available_step1 = 0;
  45:Src/motorops.c **** //        }
  46:Src/motorops.c **** 
  47:Src/motorops.c **** 
  48:Src/motorops.c **** //        if(!step_motor2_break && !offside_available_step2)
  49:Src/motorops.c **** //        {
  50:Src/motorops.c **** //            offside_step2 == step_motor2_last_direction;
  51:Src/motorops.c **** //            offside_available_step2 = 1;
  52:Src/motorops.c **** 
  53:Src/motorops.c **** //        }else if(step_motor2_break)
  54:Src/motorops.c **** //        {
  55:Src/motorops.c **** //            offside_step2 = 0;
  56:Src/motorops.c **** //            offside_available_step2 = 0;
  57:Src/motorops.c **** //        }
  58:Src/motorops.c **** 
  59:Src/motorops.c ****         if(motor1.direction == FORWARD)
 1869              		.loc 4 59 0
 1870 0044 594B     		ldr	r3, .L107+20
 1871 0046 1B68     		ldr	r3, [r3]
 1872 0048 012B     		cmp	r3, #1
 1873 004a 08D1     		bne	.L94
  60:Src/motorops.c ****         {
  61:Src/motorops.c **** //            if(offside_step1 != FORWARD)
  62:Src/motorops.c **** //            {
  63:Src/motorops.c ****                 motor1Drive(FORWARD);
 1874              		.loc 4 63 0
 1875 004c 0120     		movs	r0, #1
 1876 004e FFF7FEFF 		bl	motor1Drive
  64:Src/motorops.c ****                 speed = motor1.speed;
 1877              		.loc 4 64 0
 1878 0052 564B     		ldr	r3, .L107+20
 1879 0054 5B68     		ldr	r3, [r3, #4]
 1880 0056 FB61     		str	r3, [r7, #28]
  65:Src/motorops.c **** //            }
  66:Src/motorops.c ****              step_motor1_last_direction = FORWARD;
 1881              		.loc 4 66 0
 1882 0058 0123     		movs	r3, #1
 1883 005a FB60     		str	r3, [r7, #12]
 1884 005c 0FE0     		b	.L95
 1885              	.L94:
ARM GAS  /tmp/ccAG3ZiY.s 			page 45


  67:Src/motorops.c **** 
  68:Src/motorops.c ****         }
  69:Src/motorops.c ****         else if(motor1.direction == BACKWARD)
 1886              		.loc 4 69 0
 1887 005e 534B     		ldr	r3, .L107+20
 1888 0060 1B68     		ldr	r3, [r3]
 1889 0062 022B     		cmp	r3, #2
 1890 0064 08D1     		bne	.L96
  70:Src/motorops.c ****         {
  71:Src/motorops.c **** //            if(offside_step1 == BACKWARD)
  72:Src/motorops.c **** //            {
  73:Src/motorops.c ****                 motor1Drive(BACKWARD);
 1891              		.loc 4 73 0
 1892 0066 0220     		movs	r0, #2
 1893 0068 FFF7FEFF 		bl	motor1Drive
  74:Src/motorops.c ****                 speed = motor1.speed;
 1894              		.loc 4 74 0
 1895 006c 4F4B     		ldr	r3, .L107+20
 1896 006e 5B68     		ldr	r3, [r3, #4]
 1897 0070 FB61     		str	r3, [r7, #28]
  75:Src/motorops.c **** //            }
  76:Src/motorops.c ****             step_motor1_last_direction = BACKWARD;
 1898              		.loc 4 76 0
 1899 0072 0223     		movs	r3, #2
 1900 0074 FB60     		str	r3, [r7, #12]
 1901 0076 02E0     		b	.L95
 1902              	.L96:
  77:Src/motorops.c ****         }
  78:Src/motorops.c ****         else
  79:Src/motorops.c ****         {
  80:Src/motorops.c ****             motor1Drive(STOP);
 1903              		.loc 4 80 0
 1904 0078 0020     		movs	r0, #0
 1905 007a FFF7FEFF 		bl	motor1Drive
 1906              	.L95:
  81:Src/motorops.c ****         }
  82:Src/motorops.c **** 
  83:Src/motorops.c **** 
  84:Src/motorops.c ****         if(motor2.direction == FORWARD )
 1907              		.loc 4 84 0
 1908 007e 4C4B     		ldr	r3, .L107+24
 1909 0080 1B68     		ldr	r3, [r3]
 1910 0082 012B     		cmp	r3, #1
 1911 0084 08D1     		bne	.L97
  85:Src/motorops.c ****         {
  86:Src/motorops.c **** //            if(offside_step2 != FORWARD)
  87:Src/motorops.c **** //            {
  88:Src/motorops.c ****                 motor2Drive(FORWARD);
 1912              		.loc 4 88 0
 1913 0086 0120     		movs	r0, #1
 1914 0088 FFF7FEFF 		bl	motor2Drive
  89:Src/motorops.c ****                 speed = motor1.speed;
 1915              		.loc 4 89 0
 1916 008c 474B     		ldr	r3, .L107+20
 1917 008e 5B68     		ldr	r3, [r3, #4]
 1918 0090 FB61     		str	r3, [r7, #28]
  90:Src/motorops.c **** //            }
ARM GAS  /tmp/ccAG3ZiY.s 			page 46


  91:Src/motorops.c ****             step_motor2_last_direction = FORWARD;
 1919              		.loc 4 91 0
 1920 0092 0123     		movs	r3, #1
 1921 0094 BB60     		str	r3, [r7, #8]
 1922 0096 0FE0     		b	.L98
 1923              	.L97:
  92:Src/motorops.c ****         }
  93:Src/motorops.c ****         else if(motor2.direction == BACKWARD)
 1924              		.loc 4 93 0
 1925 0098 454B     		ldr	r3, .L107+24
 1926 009a 1B68     		ldr	r3, [r3]
 1927 009c 022B     		cmp	r3, #2
 1928 009e 08D1     		bne	.L99
  94:Src/motorops.c ****         {
  95:Src/motorops.c **** //            if(offside_step2 != BACKWARD)
  96:Src/motorops.c **** //            {
  97:Src/motorops.c ****                 motor2Drive(BACKWARD);
 1929              		.loc 4 97 0
 1930 00a0 0220     		movs	r0, #2
 1931 00a2 FFF7FEFF 		bl	motor2Drive
  98:Src/motorops.c ****                 speed = motor1.speed;
 1932              		.loc 4 98 0
 1933 00a6 414B     		ldr	r3, .L107+20
 1934 00a8 5B68     		ldr	r3, [r3, #4]
 1935 00aa FB61     		str	r3, [r7, #28]
  99:Src/motorops.c **** //            }
 100:Src/motorops.c ****             step_motor2_last_direction = BACKWARD;
 1936              		.loc 4 100 0
 1937 00ac 0223     		movs	r3, #2
 1938 00ae BB60     		str	r3, [r7, #8]
 1939 00b0 02E0     		b	.L98
 1940              	.L99:
 101:Src/motorops.c ****         }
 102:Src/motorops.c ****         else
 103:Src/motorops.c ****         {
 104:Src/motorops.c ****             motor2Drive(STOP);
 1941              		.loc 4 104 0
 1942 00b2 0020     		movs	r0, #0
 1943 00b4 FFF7FEFF 		bl	motor2Drive
 1944              	.L98:
 105:Src/motorops.c ****         }
 106:Src/motorops.c **** 
 107:Src/motorops.c **** 
 108:Src/motorops.c **** 
 109:Src/motorops.c ****         if(servo2.angle != 0)
 1945              		.loc 4 109 0
 1946 00b8 3E4B     		ldr	r3, .L107+28
 1947 00ba 1B68     		ldr	r3, [r3]
 1948 00bc 002B     		cmp	r3, #0
 1949 00be 0AD0     		beq	.L100
 110:Src/motorops.c ****         {
 111:Src/motorops.c ****            HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 1950              		.loc 4 111 0
 1951 00c0 0421     		movs	r1, #4
 1952 00c2 3D48     		ldr	r0, .L107+32
 1953 00c4 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 112:Src/motorops.c **** 
ARM GAS  /tmp/ccAG3ZiY.s 			page 47


 113:Src/motorops.c ****            servo2_degree = servo2.angle;
 1954              		.loc 4 113 0
 1955 00c8 3A4B     		ldr	r3, .L107+28
 1956 00ca 1B68     		ldr	r3, [r3]
 1957 00cc 7B62     		str	r3, [r7, #36]
 114:Src/motorops.c **** 
 115:Src/motorops.c ****            counter2 = 0;
 1958              		.loc 4 115 0
 1959 00ce 0023     		movs	r3, #0
 1960 00d0 BB62     		str	r3, [r7, #40]
 116:Src/motorops.c ****            speed = 1;
 1961              		.loc 4 116 0
 1962 00d2 0123     		movs	r3, #1
 1963 00d4 FB61     		str	r3, [r7, #28]
 1964              	.L100:
 117:Src/motorops.c ****         }
 118:Src/motorops.c **** 
 119:Src/motorops.c ****         if(counter2 <= 100)
 1965              		.loc 4 119 0
 1966 00d6 BB6A     		ldr	r3, [r7, #40]
 1967 00d8 642B     		cmp	r3, #100
 1968 00da 1EDC     		bgt	.L101
 120:Src/motorops.c ****         {
 121:Src/motorops.c ****           counter2 ++;
 1969              		.loc 4 121 0
 1970 00dc BB6A     		ldr	r3, [r7, #40]
 1971 00de 0133     		adds	r3, r3, #1
 1972 00e0 BB62     		str	r3, [r7, #40]
 122:Src/motorops.c ****           __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, (int)((double)(servo2_degree)*((double)(215-6
 1973              		.loc 4 122 0
 1974 00e2 354B     		ldr	r3, .L107+32
 1975 00e4 1C68     		ldr	r4, [r3]
 1976 00e6 786A     		ldr	r0, [r7, #36]
 1977 00e8 FFF7FEFF 		bl	__aeabi_i2d
 1978              	.LVL0:
 1979 00ec 2AA3     		adr	r3, .L107
 1980 00ee D3E90023 		ldrd	r2, [r3]
 1981 00f2 FFF7FEFF 		bl	__aeabi_dmul
 1982              	.LVL1:
 1983 00f6 0246     		mov	r2, r0
 1984 00f8 0B46     		mov	r3, r1
 1985 00fa 1046     		mov	r0, r2
 1986 00fc 1946     		mov	r1, r3
 1987 00fe 4FF00002 		mov	r2, #0
 1988 0102 2E4B     		ldr	r3, .L107+36
 1989 0104 FFF7FEFF 		bl	__aeabi_dadd
 1990              	.LVL2:
 1991 0108 0246     		mov	r2, r0
 1992 010a 0B46     		mov	r3, r1
 1993 010c 1046     		mov	r0, r2
 1994 010e 1946     		mov	r1, r3
 1995 0110 FFF7FEFF 		bl	__aeabi_d2iz
 1996              	.LVL3:
 1997 0114 0346     		mov	r3, r0
 1998 0116 A363     		str	r3, [r4, #56]
 1999 0118 03E0     		b	.L102
 2000              	.L101:
ARM GAS  /tmp/ccAG3ZiY.s 			page 48


 123:Src/motorops.c ****         }
 124:Src/motorops.c ****         else
 125:Src/motorops.c ****         {
 126:Src/motorops.c ****            HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 2001              		.loc 4 126 0
 2002 011a 0421     		movs	r1, #4
 2003 011c 2648     		ldr	r0, .L107+32
 2004 011e FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 2005              	.L102:
 127:Src/motorops.c ****         }
 128:Src/motorops.c **** 
 129:Src/motorops.c **** 
 130:Src/motorops.c ****         if(servo1.angle != 0)
 2006              		.loc 4 130 0
 2007 0122 274B     		ldr	r3, .L107+40
 2008 0124 1B68     		ldr	r3, [r3]
 2009 0126 002B     		cmp	r3, #0
 2010 0128 0AD0     		beq	.L103
 131:Src/motorops.c ****         {
 132:Src/motorops.c ****            HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 2011              		.loc 4 132 0
 2012 012a 0021     		movs	r1, #0
 2013 012c 2248     		ldr	r0, .L107+32
 2014 012e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 133:Src/motorops.c **** 
 134:Src/motorops.c ****            servo1_degree = servo1.angle;
 2015              		.loc 4 134 0
 2016 0132 234B     		ldr	r3, .L107+40
 2017 0134 1B68     		ldr	r3, [r3]
 2018 0136 3B62     		str	r3, [r7, #32]
 135:Src/motorops.c **** 
 136:Src/motorops.c ****            counter1 = 0;
 2019              		.loc 4 136 0
 2020 0138 0023     		movs	r3, #0
 2021 013a FB62     		str	r3, [r7, #44]
 137:Src/motorops.c ****            speed = 1;
 2022              		.loc 4 137 0
 2023 013c 0123     		movs	r3, #1
 2024 013e FB61     		str	r3, [r7, #28]
 2025              	.L103:
 138:Src/motorops.c ****         }
 139:Src/motorops.c **** 
 140:Src/motorops.c **** 
 141:Src/motorops.c **** 
 142:Src/motorops.c ****         if(counter1 <= 100)
 2026              		.loc 4 142 0
 2027 0140 FB6A     		ldr	r3, [r7, #44]
 2028 0142 642B     		cmp	r3, #100
 2029 0144 1EDC     		bgt	.L104
 143:Src/motorops.c ****         {
 144:Src/motorops.c ****           counter1 ++;
 2030              		.loc 4 144 0
 2031 0146 FB6A     		ldr	r3, [r7, #44]
 2032 0148 0133     		adds	r3, r3, #1
 2033 014a FB62     		str	r3, [r7, #44]
 145:Src/motorops.c ****           __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, (int)((double)(servo1_degree)*((double)(215-6
 2034              		.loc 4 145 0
ARM GAS  /tmp/ccAG3ZiY.s 			page 49


 2035 014c 1A4B     		ldr	r3, .L107+32
 2036 014e 1C68     		ldr	r4, [r3]
 2037 0150 386A     		ldr	r0, [r7, #32]
 2038 0152 FFF7FEFF 		bl	__aeabi_i2d
 2039              	.LVL4:
 2040 0156 10A3     		adr	r3, .L107
 2041 0158 D3E90023 		ldrd	r2, [r3]
 2042 015c FFF7FEFF 		bl	__aeabi_dmul
 2043              	.LVL5:
 2044 0160 0246     		mov	r2, r0
 2045 0162 0B46     		mov	r3, r1
 2046 0164 1046     		mov	r0, r2
 2047 0166 1946     		mov	r1, r3
 2048 0168 4FF00002 		mov	r2, #0
 2049 016c 134B     		ldr	r3, .L107+36
 2050 016e FFF7FEFF 		bl	__aeabi_dadd
 2051              	.LVL6:
 2052 0172 0246     		mov	r2, r0
 2053 0174 0B46     		mov	r3, r1
 2054 0176 1046     		mov	r0, r2
 2055 0178 1946     		mov	r1, r3
 2056 017a FFF7FEFF 		bl	__aeabi_d2iz
 2057              	.LVL7:
 2058 017e 0346     		mov	r3, r0
 2059 0180 6363     		str	r3, [r4, #52]
 2060 0182 03E0     		b	.L105
 2061              	.L104:
 146:Src/motorops.c ****         }
 147:Src/motorops.c ****         else
 148:Src/motorops.c ****         {
 149:Src/motorops.c ****            HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 2062              		.loc 4 149 0
 2063 0184 0021     		movs	r1, #0
 2064 0186 0C48     		ldr	r0, .L107+32
 2065 0188 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 2066              	.L105:
 150:Src/motorops.c ****         }
 151:Src/motorops.c **** 
 152:Src/motorops.c ****         osDelay(2 + speed);
 2067              		.loc 4 152 0
 2068 018c FB69     		ldr	r3, [r7, #28]
 2069 018e 0233     		adds	r3, r3, #2
 2070 0190 1846     		mov	r0, r3
 2071 0192 FFF7FEFF 		bl	osDelay
  33:Src/motorops.c ****         step_motor2_break = HAL_GPIO_ReadPin(STEP2_BREAK_GPIO_Port, STEP2_BREAK_Pin);
 2072              		.loc 4 33 0
 2073 0196 48E7     		b	.L106
 2074              	.L108:
 2075              		.align	3
 2076              	.L107:
 2077 0198 89888888 		.word	2290649225
 2078 019c 8888F03F 		.word	1072728200
 2079 01a0 D4000000 		.word	.LC19
 2080 01a4 00100240 		.word	1073876992
 2081 01a8 00080240 		.word	1073874944
 2082 01ac 00000000 		.word	motor1
 2083 01b0 00000000 		.word	motor2
ARM GAS  /tmp/ccAG3ZiY.s 			page 50


 2084 01b4 00000000 		.word	servo2
 2085 01b8 00000000 		.word	htim3
 2086 01bc 00004E40 		.word	1078853632
 2087 01c0 00000000 		.word	servo1
 2088              		.cfi_endproc
 2089              	.LFE157:
 2091              		.section	.text.vprint,"ax",%progbits
 2092              		.align	1
 2093              		.global	vprint
 2094              		.syntax unified
 2095              		.thumb
 2096              		.thumb_func
 2097              		.fpu fpv4-sp-d16
 2099              	vprint:
 2100              	.LFB158:
 2101              		.file 5 "Src/freertos.c"
   1:Src/freertos.c **** /**
   2:Src/freertos.c ****   ******************************************************************************
   3:Src/freertos.c ****   * File Name          : freertos.c
   4:Src/freertos.c ****   * Description        : Code for freertos applications
   5:Src/freertos.c ****   ******************************************************************************
   6:Src/freertos.c ****   * This notice applies to any and all portions of this file
   7:Src/freertos.c ****   * that are not between comment pairs USER CODE BEGIN and
   8:Src/freertos.c ****   * USER CODE END. Other portions of this file, whether 
   9:Src/freertos.c ****   * inserted by the user or by software development tools
  10:Src/freertos.c ****   * are owned by their respective copyright owners.
  11:Src/freertos.c ****   *
  12:Src/freertos.c ****   * Copyright (c) 2018 STMicroelectronics International N.V. 
  13:Src/freertos.c ****   * All rights reserved.
  14:Src/freertos.c ****   *
  15:Src/freertos.c ****   * Redistribution and use in source and binary forms, with or without 
  16:Src/freertos.c ****   * modification, are permitted, provided that the following conditions are met:
  17:Src/freertos.c ****   *
  18:Src/freertos.c ****   * 1. Redistribution of source code must retain the above copyright notice, 
  19:Src/freertos.c ****   *    this list of conditions and the following disclaimer.
  20:Src/freertos.c ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  21:Src/freertos.c ****   *    this list of conditions and the following disclaimer in the documentation
  22:Src/freertos.c ****   *    and/or other materials provided with the distribution.
  23:Src/freertos.c ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  24:Src/freertos.c ****   *    contributors to this software may be used to endorse or promote products 
  25:Src/freertos.c ****   *    derived from this software without specific written permission.
  26:Src/freertos.c ****   * 4. This software, including modifications and/or derivative works of this 
  27:Src/freertos.c ****   *    software, must execute solely and exclusively on microcontroller or
  28:Src/freertos.c ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  29:Src/freertos.c ****   * 5. Redistribution and use of this software other than as permitted under 
  30:Src/freertos.c ****   *    this license is void and will automatically terminate your rights under 
  31:Src/freertos.c ****   *    this license. 
  32:Src/freertos.c ****   *
  33:Src/freertos.c ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  34:Src/freertos.c ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  35:Src/freertos.c ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  36:Src/freertos.c ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  37:Src/freertos.c ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  38:Src/freertos.c ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  39:Src/freertos.c ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  40:Src/freertos.c ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  41:Src/freertos.c ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
ARM GAS  /tmp/ccAG3ZiY.s 			page 51


  42:Src/freertos.c ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  43:Src/freertos.c ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  44:Src/freertos.c ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  45:Src/freertos.c ****   *
  46:Src/freertos.c ****   ******************************************************************************
  47:Src/freertos.c ****   */
  48:Src/freertos.c **** 
  49:Src/freertos.c **** /* Includes ------------------------------------------------------------------*/
  50:Src/freertos.c **** #include "freertos.h"
  51:Src/freertos.c **** 
  52:Src/freertos.c **** #include "gpsops.c"
  53:Src/freertos.c **** #include "spiops.c"
  54:Src/freertos.c **** #include "sensorops.c"
  55:Src/freertos.c **** #include "motorops.c"
  56:Src/freertos.c **** 
  57:Src/freertos.c **** #include <stdlib.h>
  58:Src/freertos.c **** 
  59:Src/freertos.c **** 
  60:Src/freertos.c **** 
  61:Src/freertos.c **** void vprint(const char *fmt, va_list argp)
  62:Src/freertos.c **** {
 2102              		.loc 5 62 0
 2103              		.cfi_startproc
 2104              		@ args = 0, pretend = 0, frame = 160
 2105              		@ frame_needed = 1, uses_anonymous_args = 0
 2106 0000 80B5     		push	{r7, lr}
 2107              	.LCFI57:
 2108              		.cfi_def_cfa_offset 8
 2109              		.cfi_offset 7, -8
 2110              		.cfi_offset 14, -4
 2111 0002 A8B0     		sub	sp, sp, #160
 2112              	.LCFI58:
 2113              		.cfi_def_cfa_offset 168
 2114 0004 00AF     		add	r7, sp, #0
 2115              	.LCFI59:
 2116              		.cfi_def_cfa_register 7
 2117 0006 7860     		str	r0, [r7, #4]
 2118 0008 3960     		str	r1, [r7]
  63:Src/freertos.c ****     char string[150];
  64:Src/freertos.c **** 
  65:Src/freertos.c ****     if(0 < vsprintf(string,fmt,argp)) // build string
 2119              		.loc 5 65 0
 2120 000a 07F10803 		add	r3, r7, #8
 2121 000e 3A68     		ldr	r2, [r7]
 2122 0010 7968     		ldr	r1, [r7, #4]
 2123 0012 1846     		mov	r0, r3
 2124 0014 FFF7FEFF 		bl	vsprintf
 2125 0018 0346     		mov	r3, r0
 2126 001a 002B     		cmp	r3, #0
 2127 001c 0DDD     		ble	.L111
  66:Src/freertos.c ****        HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via 
 2128              		.loc 5 66 0
 2129 001e 07F10803 		add	r3, r7, #8
 2130 0022 1846     		mov	r0, r3
 2131 0024 FFF7FEFF 		bl	strlen
 2132 0028 0346     		mov	r3, r0
 2133 002a 9AB2     		uxth	r2, r3
ARM GAS  /tmp/ccAG3ZiY.s 			page 52


 2134 002c 07F10801 		add	r1, r7, #8
 2135 0030 6FF07F43 		mvn	r3, #-16777216
 2136 0034 0348     		ldr	r0, .L112
 2137 0036 FFF7FEFF 		bl	HAL_UART_Transmit
 2138              	.L111:
  67:Src/freertos.c **** 
  68:Src/freertos.c **** }
 2139              		.loc 5 68 0
 2140 003a 00BF     		nop
 2141 003c A037     		adds	r7, r7, #160
 2142              	.LCFI60:
 2143              		.cfi_def_cfa_offset 8
 2144 003e BD46     		mov	sp, r7
 2145              	.LCFI61:
 2146              		.cfi_def_cfa_register 13
 2147              		@ sp needed
 2148 0040 80BD     		pop	{r7, pc}
 2149              	.L113:
 2150 0042 00BF     		.align	2
 2151              	.L112:
 2152 0044 00000000 		.word	huart1
 2153              		.cfi_endproc
 2154              	.LFE158:
 2156              		.section	.text.mprintf,"ax",%progbits
 2157              		.align	1
 2158              		.global	mprintf
 2159              		.syntax unified
 2160              		.thumb
 2161              		.thumb_func
 2162              		.fpu fpv4-sp-d16
 2164              	mprintf:
 2165              	.LFB159:
  69:Src/freertos.c **** 
  70:Src/freertos.c **** 
  71:Src/freertos.c **** 
  72:Src/freertos.c **** void mprintf(const char *fmt, ...) // custom printf() function
  73:Src/freertos.c **** {
 2166              		.loc 5 73 0
 2167              		.cfi_startproc
 2168              		@ args = 4, pretend = 16, frame = 8
 2169              		@ frame_needed = 1, uses_anonymous_args = 1
 2170 0000 0FB4     		push	{r0, r1, r2, r3}
 2171              	.LCFI62:
 2172              		.cfi_def_cfa_offset 16
 2173              		.cfi_offset 0, -16
 2174              		.cfi_offset 1, -12
 2175              		.cfi_offset 2, -8
 2176              		.cfi_offset 3, -4
 2177 0002 80B5     		push	{r7, lr}
 2178              	.LCFI63:
 2179              		.cfi_def_cfa_offset 24
 2180              		.cfi_offset 7, -24
 2181              		.cfi_offset 14, -20
 2182 0004 82B0     		sub	sp, sp, #8
 2183              	.LCFI64:
 2184              		.cfi_def_cfa_offset 32
 2185 0006 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccAG3ZiY.s 			page 53


 2186              	.LCFI65:
 2187              		.cfi_def_cfa_register 7
  74:Src/freertos.c **** 
  75:Src/freertos.c ****     xSemaphoreTake(uartMutexHandle, 100);
 2188              		.loc 5 75 0
 2189 0008 0D4B     		ldr	r3, .L115
 2190 000a 1868     		ldr	r0, [r3]
 2191 000c 0023     		movs	r3, #0
 2192 000e 6422     		movs	r2, #100
 2193 0010 0021     		movs	r1, #0
 2194 0012 FFF7FEFF 		bl	xQueueGenericReceive
  76:Src/freertos.c ****     va_list argp;
  77:Src/freertos.c ****     va_start(argp, fmt);
 2195              		.loc 5 77 0
 2196 0016 07F11403 		add	r3, r7, #20
 2197 001a 7B60     		str	r3, [r7, #4]
  78:Src/freertos.c ****     vprint(fmt, argp);
 2198              		.loc 5 78 0
 2199 001c 7968     		ldr	r1, [r7, #4]
 2200 001e 3869     		ldr	r0, [r7, #16]
 2201 0020 FFF7FEFF 		bl	vprint
  79:Src/freertos.c ****     va_end(argp);
  80:Src/freertos.c ****     xSemaphoreGive(uartMutexHandle);
 2202              		.loc 5 80 0
 2203 0024 064B     		ldr	r3, .L115
 2204 0026 1868     		ldr	r0, [r3]
 2205 0028 0023     		movs	r3, #0
 2206 002a 0022     		movs	r2, #0
 2207 002c 0021     		movs	r1, #0
 2208 002e FFF7FEFF 		bl	xQueueGenericSend
  81:Src/freertos.c **** 
  82:Src/freertos.c **** }
 2209              		.loc 5 82 0
 2210 0032 00BF     		nop
 2211 0034 0837     		adds	r7, r7, #8
 2212              	.LCFI66:
 2213              		.cfi_def_cfa_offset 24
 2214 0036 BD46     		mov	sp, r7
 2215              	.LCFI67:
 2216              		.cfi_def_cfa_register 13
 2217              		@ sp needed
 2218 0038 BDE88040 		pop	{r7, lr}
 2219              	.LCFI68:
 2220              		.cfi_restore 14
 2221              		.cfi_restore 7
 2222              		.cfi_def_cfa_offset 16
 2223 003c 04B0     		add	sp, sp, #16
 2224              	.LCFI69:
 2225              		.cfi_restore 3
 2226              		.cfi_restore 2
 2227              		.cfi_restore 1
 2228              		.cfi_restore 0
 2229              		.cfi_def_cfa_offset 0
 2230 003e 7047     		bx	lr
 2231              	.L116:
 2232              		.align	2
 2233              	.L115:
ARM GAS  /tmp/ccAG3ZiY.s 			page 54


 2234 0040 00000000 		.word	uartMutexHandle
 2235              		.cfi_endproc
 2236              	.LFE159:
 2238              		.section	.rodata
 2239 00df 00       		.align	2
 2240              	.LC0:
 2241 00e0 67707354 		.ascii	"gpsThread\000"
 2241      68726561 
 2241      6400
 2242 00ea 0000     		.align	2
 2243              	.LC20:
 2244 00ec E0000000 		.word	.LC0
 2245 00f0 00000000 		.word	gpsOps
 2246 00f4 0000     		.short	0
 2247 00f6 0000     		.space	2
 2248 00f8 00000000 		.word	0
 2249 00fc 00040000 		.word	1024
 2250              		.align	2
 2251              	.LC2:
 2252 0100 73656E73 		.ascii	"sensorThread\000"
 2252      6F725468 
 2252      72656164 
 2252      00
 2253 010d 000000   		.align	2
 2254              	.LC21:
 2255 0110 00010000 		.word	.LC2
 2256 0114 00000000 		.word	sensorOps
 2257 0118 FFFF     		.short	-1
 2258 011a 0000     		.space	2
 2259 011c 00000000 		.word	0
 2260 0120 00020000 		.word	512
 2261              		.align	2
 2262              	.LC4:
 2263 0124 73706943 		.ascii	"spiComThread\000"
 2263      6F6D5468 
 2263      72656164 
 2263      00
 2264 0131 000000   		.align	2
 2265              	.LC22:
 2266 0134 24010000 		.word	.LC4
 2267 0138 00000000 		.word	spiComOps
 2268 013c 0100     		.short	1
 2269 013e 0000     		.space	2
 2270 0140 00000000 		.word	0
 2271 0144 00040000 		.word	1024
 2272              		.align	2
 2273              	.LC6:
 2274 0148 6D6F746F 		.ascii	"motorThread\000"
 2274      72546872 
 2274      65616400 
 2275              		.align	2
 2276              	.LC23:
 2277 0154 48010000 		.word	.LC6
 2278 0158 00000000 		.word	motorOps
 2279 015c 0000     		.short	0
 2280 015e 0000     		.space	2
 2281 0160 00000000 		.word	0
ARM GAS  /tmp/ccAG3ZiY.s 			page 55


 2282 0164 00020000 		.word	512
 2283              		.section	.text.MX_FREERTOS_Init,"ax",%progbits
 2284              		.align	1
 2285              		.global	MX_FREERTOS_Init
 2286              		.syntax unified
 2287              		.thumb
 2288              		.thumb_func
 2289              		.fpu fpv4-sp-d16
 2291              	MX_FREERTOS_Init:
 2292              	.LFB160:
  83:Src/freertos.c **** 
  84:Src/freertos.c **** 
  85:Src/freertos.c **** 
  86:Src/freertos.c **** void MX_FREERTOS_Init(void)
  87:Src/freertos.c **** {
 2293              		.loc 5 87 0
 2294              		.cfi_startproc
 2295              		@ args = 0, pretend = 0, frame = 104
 2296              		@ frame_needed = 1, uses_anonymous_args = 0
 2297 0000 B0B5     		push	{r4, r5, r7, lr}
 2298              	.LCFI70:
 2299              		.cfi_def_cfa_offset 16
 2300              		.cfi_offset 4, -16
 2301              		.cfi_offset 5, -12
 2302              		.cfi_offset 7, -8
 2303              		.cfi_offset 14, -4
 2304 0002 9AB0     		sub	sp, sp, #104
 2305              	.LCFI71:
 2306              		.cfi_def_cfa_offset 120
 2307 0004 00AF     		add	r7, sp, #0
 2308              	.LCFI72:
 2309              		.cfi_def_cfa_register 7
  88:Src/freertos.c **** 
  89:Src/freertos.c **** 
  90:Src/freertos.c ****   osMutexDef(spiMutex);
 2310              		.loc 5 90 0
 2311 0006 0023     		movs	r3, #0
 2312 0008 7B66     		str	r3, [r7, #100]
  91:Src/freertos.c ****   spiMutexHandle = osMutexCreate(osMutex(spiMutex));
 2313              		.loc 5 91 0
 2314 000a 07F16403 		add	r3, r7, #100
 2315 000e 1846     		mov	r0, r3
 2316 0010 FFF7FEFF 		bl	osMutexCreate
 2317 0014 0246     		mov	r2, r0
 2318 0016 514B     		ldr	r3, .L118
 2319 0018 1A60     		str	r2, [r3]
  92:Src/freertos.c **** 
  93:Src/freertos.c ****   osMutexDef(uartMutex);
 2320              		.loc 5 93 0
 2321 001a 0023     		movs	r3, #0
 2322 001c 3B66     		str	r3, [r7, #96]
  94:Src/freertos.c ****   uartMutexHandle = osMutexCreate(osMutex(uartMutex));
 2323              		.loc 5 94 0
 2324 001e 07F16003 		add	r3, r7, #96
 2325 0022 1846     		mov	r0, r3
 2326 0024 FFF7FEFF 		bl	osMutexCreate
 2327 0028 0246     		mov	r2, r0
ARM GAS  /tmp/ccAG3ZiY.s 			page 56


 2328 002a 4D4B     		ldr	r3, .L118+4
 2329 002c 1A60     		str	r2, [r3]
  95:Src/freertos.c **** 
  96:Src/freertos.c ****   osMutexDef(memoryMutex);
 2330              		.loc 5 96 0
 2331 002e 0023     		movs	r3, #0
 2332 0030 FB65     		str	r3, [r7, #92]
  97:Src/freertos.c ****   memoryMutexHandle = osMutexCreate(osMutex(memoryMutex));
 2333              		.loc 5 97 0
 2334 0032 07F15C03 		add	r3, r7, #92
 2335 0036 1846     		mov	r0, r3
 2336 0038 FFF7FEFF 		bl	osMutexCreate
 2337 003c 0246     		mov	r2, r0
 2338 003e 494B     		ldr	r3, .L118+8
 2339 0040 1A60     		str	r2, [r3]
  98:Src/freertos.c **** 
  99:Src/freertos.c ****   osSemaphoreDef(uartSemaphore);
 2340              		.loc 5 99 0
 2341 0042 0023     		movs	r3, #0
 2342 0044 BB65     		str	r3, [r7, #88]
 100:Src/freertos.c ****   uartSemaphoreHandle = osSemaphoreCreate(osSemaphore(uartSemaphore), 1);
 2343              		.loc 5 100 0
 2344 0046 07F15803 		add	r3, r7, #88
 2345 004a 0121     		movs	r1, #1
 2346 004c 1846     		mov	r0, r3
 2347 004e FFF7FEFF 		bl	osSemaphoreCreate
 2348 0052 0246     		mov	r2, r0
 2349 0054 444B     		ldr	r3, .L118+12
 2350 0056 1A60     		str	r2, [r3]
 101:Src/freertos.c **** 
 102:Src/freertos.c ****   /* definition and creation of spiSemaphore */
 103:Src/freertos.c ****   osSemaphoreDef(spiSemaphore);
 2351              		.loc 5 103 0
 2352 0058 0023     		movs	r3, #0
 2353 005a 7B65     		str	r3, [r7, #84]
 104:Src/freertos.c ****   spiSemaphoreHandle = osSemaphoreCreate(osSemaphore(spiSemaphore), 1);
 2354              		.loc 5 104 0
 2355 005c 07F15403 		add	r3, r7, #84
 2356 0060 0121     		movs	r1, #1
 2357 0062 1846     		mov	r0, r3
 2358 0064 FFF7FEFF 		bl	osSemaphoreCreate
 2359 0068 0246     		mov	r2, r0
 2360 006a 404B     		ldr	r3, .L118+16
 2361 006c 1A60     		str	r2, [r3]
 105:Src/freertos.c **** 
 106:Src/freertos.c ****   /* definition and creation of gpsThread */
 107:Src/freertos.c ****   osThreadDef(gpsThread, gpsOps, osPriorityNormal, 0, 1024);
 2362              		.loc 5 107 0
 2363 006e 404B     		ldr	r3, .L118+20
 2364 0070 07F14004 		add	r4, r7, #64
 2365 0074 1D46     		mov	r5, r3
 2366 0076 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2367 0078 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2368 007a 2B68     		ldr	r3, [r5]
 2369 007c 2360     		str	r3, [r4]
 108:Src/freertos.c ****   gpsThreadHandle = osThreadCreate(osThread(gpsThread), NULL);
 2370              		.loc 5 108 0
ARM GAS  /tmp/ccAG3ZiY.s 			page 57


 2371 007e 07F14003 		add	r3, r7, #64
 2372 0082 0021     		movs	r1, #0
 2373 0084 1846     		mov	r0, r3
 2374 0086 FFF7FEFF 		bl	osThreadCreate
 2375 008a 0246     		mov	r2, r0
 2376 008c 394B     		ldr	r3, .L118+24
 2377 008e 1A60     		str	r2, [r3]
 109:Src/freertos.c **** 
 110:Src/freertos.c ****   /* definition and creation of sensorThread */
 111:Src/freertos.c ****   osThreadDef(sensorThread, sensorOps, osPriorityBelowNormal, 0, 512);
 2378              		.loc 5 111 0
 2379 0090 394B     		ldr	r3, .L118+28
 2380 0092 07F12C04 		add	r4, r7, #44
 2381 0096 1D46     		mov	r5, r3
 2382 0098 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2383 009a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2384 009c 2B68     		ldr	r3, [r5]
 2385 009e 2360     		str	r3, [r4]
 112:Src/freertos.c ****   sensorThreadHandle = osThreadCreate(osThread(sensorThread), NULL);
 2386              		.loc 5 112 0
 2387 00a0 07F12C03 		add	r3, r7, #44
 2388 00a4 0021     		movs	r1, #0
 2389 00a6 1846     		mov	r0, r3
 2390 00a8 FFF7FEFF 		bl	osThreadCreate
 2391 00ac 0246     		mov	r2, r0
 2392 00ae 334B     		ldr	r3, .L118+32
 2393 00b0 1A60     		str	r2, [r3]
 113:Src/freertos.c **** 
 114:Src/freertos.c ****   /* definition and creation of spiComThread */
 115:Src/freertos.c ****   osThreadDef(spiComThread, spiComOps, osPriorityAboveNormal, 0, 1024);
 2394              		.loc 5 115 0
 2395 00b2 334B     		ldr	r3, .L118+36
 2396 00b4 07F11804 		add	r4, r7, #24
 2397 00b8 1D46     		mov	r5, r3
 2398 00ba 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2399 00bc 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2400 00be 2B68     		ldr	r3, [r5]
 2401 00c0 2360     		str	r3, [r4]
 116:Src/freertos.c ****   spiComThreadHandle = osThreadCreate(osThread(spiComThread), NULL);
 2402              		.loc 5 116 0
 2403 00c2 07F11803 		add	r3, r7, #24
 2404 00c6 0021     		movs	r1, #0
 2405 00c8 1846     		mov	r0, r3
 2406 00ca FFF7FEFF 		bl	osThreadCreate
 2407 00ce 0246     		mov	r2, r0
 2408 00d0 2C4B     		ldr	r3, .L118+40
 2409 00d2 1A60     		str	r2, [r3]
 117:Src/freertos.c **** 
 118:Src/freertos.c ****   osThreadDef(motorThread, motorOps, osPriorityNormal, 0, 512);
 2410              		.loc 5 118 0
 2411 00d4 2C4B     		ldr	r3, .L118+44
 2412 00d6 3C1D     		adds	r4, r7, #4
 2413 00d8 1D46     		mov	r5, r3
 2414 00da 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2415 00dc 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2416 00de 2B68     		ldr	r3, [r5]
 2417 00e0 2360     		str	r3, [r4]
ARM GAS  /tmp/ccAG3ZiY.s 			page 58


 119:Src/freertos.c ****   motorThreadHandle = osThreadCreate(osThread(motorThread), NULL);
 2418              		.loc 5 119 0
 2419 00e2 3B1D     		adds	r3, r7, #4
 2420 00e4 0021     		movs	r1, #0
 2421 00e6 1846     		mov	r0, r3
 2422 00e8 FFF7FEFF 		bl	osThreadCreate
 2423 00ec 0246     		mov	r2, r0
 2424 00ee 274B     		ldr	r3, .L118+48
 2425 00f0 1A60     		str	r2, [r3]
 120:Src/freertos.c **** 
 121:Src/freertos.c **** 
 122:Src/freertos.c ****   EnvironmentData = malloc(sizeof(ENVIRONMENT_DATA_FORMAT));
 2426              		.loc 5 122 0
 2427 00f2 7820     		movs	r0, #120
 2428 00f4 FFF7FEFF 		bl	malloc
 2429 00f8 0346     		mov	r3, r0
 2430 00fa 1A46     		mov	r2, r3
 2431 00fc 244B     		ldr	r3, .L118+52
 2432 00fe 1A60     		str	r2, [r3]
 123:Src/freertos.c ****   ControlData = malloc(sizeof(CONTROL_DATA_FORMAT));
 2433              		.loc 5 123 0
 2434 0100 7820     		movs	r0, #120
 2435 0102 FFF7FEFF 		bl	malloc
 2436 0106 0346     		mov	r3, r0
 2437 0108 1A46     		mov	r2, r3
 2438 010a 224B     		ldr	r3, .L118+56
 2439 010c 1A60     		str	r2, [r3]
 124:Src/freertos.c ****   UpdateFile = malloc(sizeof(UPDATE_FILE_FORMAT));
 2440              		.loc 5 124 0
 2441 010e 7420     		movs	r0, #116
 2442 0110 FFF7FEFF 		bl	malloc
 2443 0114 0346     		mov	r3, r0
 2444 0116 1A46     		mov	r2, r3
 2445 0118 1F4B     		ldr	r3, .L118+60
 2446 011a 1A60     		str	r2, [r3]
 125:Src/freertos.c **** 
 126:Src/freertos.c ****   SpiRxData = malloc(sizeof(SPI_TRANSFER_FORMAT));
 2447              		.loc 5 126 0
 2448 011c 7820     		movs	r0, #120
 2449 011e FFF7FEFF 		bl	malloc
 2450 0122 0346     		mov	r3, r0
 2451 0124 1A46     		mov	r2, r3
 2452 0126 1D4B     		ldr	r3, .L118+64
 2453 0128 1A60     		str	r2, [r3]
 127:Src/freertos.c **** 
 128:Src/freertos.c ****   SpiTxData = malloc(sizeof(SPI_TRANSFER_FORMAT));
 2454              		.loc 5 128 0
 2455 012a 7820     		movs	r0, #120
 2456 012c FFF7FEFF 		bl	malloc
 2457 0130 0346     		mov	r3, r0
 2458 0132 1A46     		mov	r2, r3
 2459 0134 1A4B     		ldr	r3, .L118+68
 2460 0136 1A60     		str	r2, [r3]
 129:Src/freertos.c ****   SpiCheckData = malloc(sizeof(SPI_TRANSFER_FORMAT));
 2461              		.loc 5 129 0
 2462 0138 7820     		movs	r0, #120
 2463 013a FFF7FEFF 		bl	malloc
ARM GAS  /tmp/ccAG3ZiY.s 			page 59


 2464 013e 0346     		mov	r3, r0
 2465 0140 1A46     		mov	r2, r3
 2466 0142 184B     		ldr	r3, .L118+72
 2467 0144 1A60     		str	r2, [r3]
 130:Src/freertos.c **** 
 131:Src/freertos.c ****   SensorCalibrationNeeded = malloc(sizeof(int));
 2468              		.loc 5 131 0
 2469 0146 0420     		movs	r0, #4
 2470 0148 FFF7FEFF 		bl	malloc
 2471 014c 0346     		mov	r3, r0
 2472 014e 1A46     		mov	r2, r3
 2473 0150 154B     		ldr	r3, .L118+76
 2474 0152 1A60     		str	r2, [r3]
 132:Src/freertos.c **** 
 133:Src/freertos.c **** }
 2475              		.loc 5 133 0
 2476 0154 00BF     		nop
 2477 0156 6837     		adds	r7, r7, #104
 2478              	.LCFI73:
 2479              		.cfi_def_cfa_offset 16
 2480 0158 BD46     		mov	sp, r7
 2481              	.LCFI74:
 2482              		.cfi_def_cfa_register 13
 2483              		@ sp needed
 2484 015a B0BD     		pop	{r4, r5, r7, pc}
 2485              	.L119:
 2486              		.align	2
 2487              	.L118:
 2488 015c 00000000 		.word	spiMutexHandle
 2489 0160 00000000 		.word	uartMutexHandle
 2490 0164 00000000 		.word	memoryMutexHandle
 2491 0168 00000000 		.word	uartSemaphoreHandle
 2492 016c 00000000 		.word	spiSemaphoreHandle
 2493 0170 EC000000 		.word	.LC20
 2494 0174 00000000 		.word	gpsThreadHandle
 2495 0178 10010000 		.word	.LC21
 2496 017c 00000000 		.word	sensorThreadHandle
 2497 0180 34010000 		.word	.LC22
 2498 0184 00000000 		.word	spiComThreadHandle
 2499 0188 54010000 		.word	.LC23
 2500 018c 00000000 		.word	motorThreadHandle
 2501 0190 00000000 		.word	EnvironmentData
 2502 0194 00000000 		.word	ControlData
 2503 0198 00000000 		.word	UpdateFile
 2504 019c 00000000 		.word	SpiRxData
 2505 01a0 00000000 		.word	SpiTxData
 2506 01a4 00000000 		.word	SpiCheckData
 2507 01a8 00000000 		.word	SensorCalibrationNeeded
 2508              		.cfi_endproc
 2509              	.LFE160:
 2511              		.text
 2512              	.Letext0:
 2513              		.file 6 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stdarg.h"
 2514              		.file 7 "/usr/include/newlib/machine/_default_types.h"
 2515              		.file 8 "/usr/include/newlib/sys/lock.h"
 2516              		.file 9 "/usr/include/newlib/sys/_types.h"
 2517              		.file 10 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
ARM GAS  /tmp/ccAG3ZiY.s 			page 60


 2518              		.file 11 "/usr/include/newlib/sys/reent.h"
 2519              		.file 12 "<built-in>"
 2520              		.file 13 "/usr/include/newlib/sys/_stdint.h"
 2521              		.file 14 "Inc/main.h"
 2522              		.file 15 "Drivers/CMSIS/Include/core_cm7.h"
 2523              		.file 16 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 2524              		.file 17 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f746xx.h"
 2525              		.file 18 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 2526              		.file 19 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 2527              		.file 20 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_spi.h"
 2528              		.file 21 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim.h"
 2529              		.file 22 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_uart.h"
 2530              		.file 23 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h"
 2531              		.file 24 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 2532              		.file 25 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 2533              		.file 26 "Middlewares/Third_Party/FreeRTOS/Source/include/semphr.h"
 2534              		.file 27 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 2535              		.file 28 "Inc/gps.h"
 2536              		.file 29 "Inc/sensor.h"
 2537              		.file 30 "Inc/motor.h"
 2538              		.file 31 "Inc/usart.h"
 2539              		.file 32 "Inc/spi.h"
 2540              		.file 33 "Inc/tim.h"
 2541              		.file 34 "Inc/freertos.h"
ARM GAS  /tmp/ccAG3ZiY.s 			page 61


DEFINED SYMBOLS
                            *ABS*:0000000000000000 freertos.c
                            *COM*:00000000000001a0 gpsData
                            *COM*:0000000000000014 sensorValues
                            *COM*:0000000000000004 calibration
                            *COM*:0000000000000008 motor1
                            *COM*:0000000000000008 motor2
                            *COM*:0000000000000008 motor3
                            *COM*:0000000000000008 motor4
                            *COM*:0000000000000008 servo1
                            *COM*:0000000000000008 servo2
                            *COM*:0000000000000004 gpsThreadHandle
                            *COM*:0000000000000004 sensorThreadHandle
                            *COM*:0000000000000004 spiComThreadHandle
                            *COM*:0000000000000004 motorThreadHandle
                            *COM*:0000000000000004 spiMutexHandle
                            *COM*:0000000000000004 uartMutexHandle
                            *COM*:0000000000000004 memoryMutexHandle
                            *COM*:0000000000000004 spiSemaphoreHandle
                            *COM*:0000000000000004 uartSemaphoreHandle
                            *COM*:0000000000000004 SpiCheckData
                            *COM*:0000000000000004 SpiTxData
                            *COM*:0000000000000004 SpiRxData
                            *COM*:0000000000000004 EnvironmentData
                            *COM*:0000000000000004 ControlData
                            *COM*:0000000000000004 UpdateFile
                            *COM*:0000000000000004 SensorCalibrationNeeded
                            *COM*:0000000000000001 rx_buf
     /tmp/ccAG3ZiY.s:44     .text.UART4_IRQHandler:0000000000000000 $t
     /tmp/ccAG3ZiY.s:51     .text.UART4_IRQHandler:0000000000000000 UART4_IRQHandler
     /tmp/ccAG3ZiY.s:81     .text.UART4_IRQHandler:000000000000001c $d
     /tmp/ccAG3ZiY.s:87     .rodata:0000000000000000 $d
     /tmp/ccAG3ZiY.s:94     .text.gpsOps:0000000000000000 $t
     /tmp/ccAG3ZiY.s:101    .text.gpsOps:0000000000000000 gpsOps
     /tmp/ccAG3ZiY.s:2164   .text.mprintf:0000000000000000 mprintf
     /tmp/ccAG3ZiY.s:208    .text.gpsOps:00000000000000a8 $d
     /tmp/ccAG3ZiY.s:224    .data.NextUpdateDataPackage:0000000000000000 NextUpdateDataPackage
     /tmp/ccAG3ZiY.s:221    .data.NextUpdateDataPackage:0000000000000000 $d
     /tmp/ccAG3ZiY.s:231    .data.CurrentUpdateDataPackage:0000000000000000 CurrentUpdateDataPackage
     /tmp/ccAG3ZiY.s:228    .data.CurrentUpdateDataPackage:0000000000000000 $d
     /tmp/ccAG3ZiY.s:234    .text.writeFlash:0000000000000000 $t
     /tmp/ccAG3ZiY.s:241    .text.writeFlash:0000000000000000 writeFlash
     /tmp/ccAG3ZiY.s:285    .text.readFlash:0000000000000000 $t
     /tmp/ccAG3ZiY.s:292    .text.readFlash:0000000000000000 readFlash
     /tmp/ccAG3ZiY.s:334    .text.SPI1_IRQHandler:0000000000000000 $t
     /tmp/ccAG3ZiY.s:341    .text.SPI1_IRQHandler:0000000000000000 SPI1_IRQHandler
     /tmp/ccAG3ZiY.s:370    .text.SPI1_IRQHandler:000000000000001c $d
     /tmp/ccAG3ZiY.s:380    .text.spiComOps:0000000000000000 $t
     /tmp/ccAG3ZiY.s:387    .text.spiComOps:0000000000000000 spiComOps
     /tmp/ccAG3ZiY.s:587    .text.checkIfUpdateData:0000000000000000 checkIfUpdateData
     /tmp/ccAG3ZiY.s:721    .text.confirmUpdateDataAccuracy:0000000000000000 confirmUpdateDataAccuracy
     /tmp/ccAG3ZiY.s:861    .text.putUpdateDataResponse:0000000000000000 putUpdateDataResponse
     /tmp/ccAG3ZiY.s:652    .text.checkIfControlData:0000000000000000 checkIfControlData
     /tmp/ccAG3ZiY.s:945    .text.putControlDataResponse:0000000000000000 putControlDataResponse
     /tmp/ccAG3ZiY.s:1022   .text.putEnvironmentData:0000000000000000 putEnvironmentData
     /tmp/ccAG3ZiY.s:1109   .text.processUpdateData:0000000000000000 processUpdateData
     /tmp/ccAG3ZiY.s:1588   .text.processControlData:0000000000000000 processControlData
ARM GAS  /tmp/ccAG3ZiY.s 			page 62


     /tmp/ccAG3ZiY.s:566    .text.spiComOps:0000000000000114 $d
     /tmp/ccAG3ZiY.s:580    .text.checkIfUpdateData:0000000000000000 $t
     /tmp/ccAG3ZiY.s:639    .text.checkIfUpdateData:000000000000003c $d
     /tmp/ccAG3ZiY.s:645    .text.checkIfControlData:0000000000000000 $t
     /tmp/ccAG3ZiY.s:708    .text.checkIfControlData:0000000000000038 $d
     /tmp/ccAG3ZiY.s:714    .text.confirmUpdateDataAccuracy:0000000000000000 $t
     /tmp/ccAG3ZiY.s:847    .text.confirmUpdateDataAccuracy:000000000000009c $d
     /tmp/ccAG3ZiY.s:854    .text.putUpdateDataResponse:0000000000000000 $t
     /tmp/ccAG3ZiY.s:931    .text.putUpdateDataResponse:0000000000000068 $d
     /tmp/ccAG3ZiY.s:938    .text.putControlDataResponse:0000000000000000 $t
     /tmp/ccAG3ZiY.s:1008   .text.putControlDataResponse:0000000000000064 $d
     /tmp/ccAG3ZiY.s:1015   .text.putEnvironmentData:0000000000000000 $t
     /tmp/ccAG3ZiY.s:1085   .text.putEnvironmentData:0000000000000064 $d
     /tmp/ccAG3ZiY.s:1102   .text.processUpdateData:0000000000000000 $t
     /tmp/ccAG3ZiY.s:1340   .text.processUpdateData:0000000000000190 $d
     /tmp/ccAG3ZiY.s:1361   .text.writeUpdateFileToFlash:0000000000000000 $t
     /tmp/ccAG3ZiY.s:1368   .text.writeUpdateFileToFlash:0000000000000000 writeUpdateFileToFlash
     /tmp/ccAG3ZiY.s:1562   .text.writeUpdateFileToFlash:0000000000000154 $d
     /tmp/ccAG3ZiY.s:1581   .text.processControlData:0000000000000000 $t
     /tmp/ccAG3ZiY.s:1672   .text.processControlData:0000000000000080 $d
     /tmp/ccAG3ZiY.s:1690   .text.sensorOps:0000000000000000 $t
     /tmp/ccAG3ZiY.s:1697   .text.sensorOps:0000000000000000 sensorOps
     /tmp/ccAG3ZiY.s:1787   .text.sensorOps:0000000000000080 $d
     /tmp/ccAG3ZiY.s:1805   .text.motorOps:0000000000000000 $t
     /tmp/ccAG3ZiY.s:1812   .text.motorOps:0000000000000000 motorOps
     /tmp/ccAG3ZiY.s:2077   .text.motorOps:0000000000000198 $d
     /tmp/ccAG3ZiY.s:2092   .text.vprint:0000000000000000 $t
     /tmp/ccAG3ZiY.s:2099   .text.vprint:0000000000000000 vprint
     /tmp/ccAG3ZiY.s:2152   .text.vprint:0000000000000044 $d
     /tmp/ccAG3ZiY.s:2157   .text.mprintf:0000000000000000 $t
     /tmp/ccAG3ZiY.s:2234   .text.mprintf:0000000000000040 $d
     /tmp/ccAG3ZiY.s:2284   .text.MX_FREERTOS_Init:0000000000000000 $t
     /tmp/ccAG3ZiY.s:2291   .text.MX_FREERTOS_Init:0000000000000000 MX_FREERTOS_Init
     /tmp/ccAG3ZiY.s:2488   .text.MX_FREERTOS_Init:000000000000015c $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_UART_IRQHandler
xQueueGiveFromISR
huart4
gpsInit
xQueueGenericReceive
checkGpsData
xQueueGenericSend
HAL_GPIO_TogglePin
enableGps
receiveGpsData
HAL_UART_Receive_IT
HAL_FLASH_Program
HAL_SPI_IRQHandler
hspi1
HAL_FLASH_Unlock
FLASH_Erase_Sector
HAL_FLASH_Lock
HAL_SPI_TransmitReceive_IT
HAL_SPI_GetState
memcpy
ARM GAS  /tmp/ccAG3ZiY.s 			page 63


osDelay
HAL_NVIC_SystemReset
calibrateCompass
readAllSensors
__aeabi_i2d
__aeabi_dmul
__aeabi_dadd
__aeabi_d2iz
HAL_GPIO_ReadPin
motor1Drive
motor2Drive
HAL_TIM_PWM_Start
HAL_TIM_PWM_Stop
htim3
vsprintf
strlen
HAL_UART_Transmit
huart1
osMutexCreate
osSemaphoreCreate
osThreadCreate
malloc
