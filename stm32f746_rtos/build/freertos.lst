ARM GAS  /tmp/ccux5DbS.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"freertos.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	gpsData,416,4
  18              		.comm	sensorValues,20,4
  19              		.comm	motor1,8,4
  20              		.comm	motor2,8,4
  21              		.comm	motor3,8,4
  22              		.comm	motor4,8,4
  23              		.comm	gpsThreadHandle,4,4
  24              		.comm	sensorThreadHandle,4,4
  25              		.comm	spiComThreadHandle,4,4
  26              		.comm	motorThreadHandle,4,4
  27              		.comm	spiMutexHandle,4,4
  28              		.comm	uartMutexHandle,4,4
  29              		.comm	memoryMutexHandle,4,4
  30              		.comm	spiSemaphoreHandle,4,4
  31              		.comm	uartSemaphoreHandle,4,4
  32              		.comm	SpiCheckData,4,4
  33              		.comm	SpiTxData,4,4
  34              		.comm	SpiRxData,4,4
  35              		.comm	EnvironmentData,4,4
  36              		.comm	ControlData,4,4
  37              		.comm	UpdateFile,4,4
  38              		.comm	rx_buf,1,1
  39              		.section	.text.UART4_IRQHandler,"ax",%progbits
  40              		.align	1
  41              		.global	UART4_IRQHandler
  42              		.syntax unified
  43              		.thumb
  44              		.thumb_func
  45              		.fpu fpv4-sp-d16
  47              	UART4_IRQHandler:
  48              	.LFB141:
  49              		.file 1 "Src/gpsops.c"
   1:Src/gpsops.c  **** #include "gpsops.h"
   2:Src/gpsops.c  **** #include "stdlib.h"
   3:Src/gpsops.c  **** 
   4:Src/gpsops.c  **** 
   5:Src/gpsops.c  **** void UART4_IRQHandler(void)
   6:Src/gpsops.c  **** {
  50              		.loc 1 6 0
  51              		.cfi_startproc
  52              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccux5DbS.s 			page 2


  53              		@ frame_needed = 1, uses_anonymous_args = 0
  54 0000 80B5     		push	{r7, lr}
  55              	.LCFI0:
  56              		.cfi_def_cfa_offset 8
  57              		.cfi_offset 7, -8
  58              		.cfi_offset 14, -4
  59 0002 00AF     		add	r7, sp, #0
  60              	.LCFI1:
  61              		.cfi_def_cfa_register 7
   7:Src/gpsops.c  **** 
   8:Src/gpsops.c  **** 
   9:Src/gpsops.c  ****     HAL_UART_IRQHandler(&huart4);
  62              		.loc 1 9 0
  63 0004 0548     		ldr	r0, .L2
  64 0006 FFF7FEFF 		bl	HAL_UART_IRQHandler
  10:Src/gpsops.c  **** 
  11:Src/gpsops.c  ****     xSemaphoreGiveFromISR(uartSemaphoreHandle, NULL);
  65              		.loc 1 11 0
  66 000a 054B     		ldr	r3, .L2+4
  67 000c 1B68     		ldr	r3, [r3]
  68 000e 0021     		movs	r1, #0
  69 0010 1846     		mov	r0, r3
  70 0012 FFF7FEFF 		bl	xQueueGiveFromISR
  12:Src/gpsops.c  **** 
  13:Src/gpsops.c  **** }
  71              		.loc 1 13 0
  72 0016 00BF     		nop
  73 0018 80BD     		pop	{r7, pc}
  74              	.L3:
  75 001a 00BF     		.align	2
  76              	.L2:
  77 001c 00000000 		.word	huart4
  78 0020 00000000 		.word	uartSemaphoreHandle
  79              		.cfi_endproc
  80              	.LFE141:
  82              		.section	.rodata
  83              		.align	2
  84              	.LC8:
  85 0000 6770734F 		.ascii	"gpsOps\015\012\000"
  85      70730D0A 
  85      00
  86 0009 000000   		.align	2
  87              	.LC9:
  88 000c 6770734F 		.ascii	"gpsOps Crash \015\012\000"
  88      70732043 
  88      72617368 
  88      200D0A00 
  89              		.section	.text.gpsOps,"ax",%progbits
  90              		.align	1
  91              		.global	gpsOps
  92              		.syntax unified
  93              		.thumb
  94              		.thumb_func
  95              		.fpu fpv4-sp-d16
  97              	gpsOps:
  98              	.LFB142:
  14:Src/gpsops.c  **** 
ARM GAS  /tmp/ccux5DbS.s 			page 3


  15:Src/gpsops.c  **** 
  16:Src/gpsops.c  **** 
  17:Src/gpsops.c  **** void gpsOps(void const *argument)
  18:Src/gpsops.c  **** {
  99              		.loc 1 18 0
 100              		.cfi_startproc
 101              		@ args = 0, pretend = 0, frame = 16
 102              		@ frame_needed = 1, uses_anonymous_args = 0
 103 0000 80B5     		push	{r7, lr}
 104              	.LCFI2:
 105              		.cfi_def_cfa_offset 8
 106              		.cfi_offset 7, -8
 107              		.cfi_offset 14, -4
 108 0002 84B0     		sub	sp, sp, #16
 109              	.LCFI3:
 110              		.cfi_def_cfa_offset 24
 111 0004 00AF     		add	r7, sp, #0
 112              	.LCFI4:
 113              		.cfi_def_cfa_register 7
 114 0006 7860     		str	r0, [r7, #4]
  19:Src/gpsops.c  **** 
  20:Src/gpsops.c  ****     mprintf("gpsOps\r\n");
 115              		.loc 1 20 0
 116 0008 2748     		ldr	r0, .L11
 117 000a FFF7FEFF 		bl	mprintf
  21:Src/gpsops.c  **** 
  22:Src/gpsops.c  ****     unsigned char rx_data;
  23:Src/gpsops.c  **** 
  24:Src/gpsops.c  ****     gpsInit();
 118              		.loc 1 24 0
 119 000e FFF7FEFF 		bl	gpsInit
 120              	.L10:
  25:Src/gpsops.c  **** 
  26:Src/gpsops.c  ****   while(1)
  27:Src/gpsops.c  ****   {
  28:Src/gpsops.c  **** 
  29:Src/gpsops.c  ****       if( xSemaphoreTake(uartSemaphoreHandle, 1000) == pdPASS)
 121              		.loc 1 29 0
 122 0012 264B     		ldr	r3, .L11+4
 123 0014 1868     		ldr	r0, [r3]
 124 0016 0023     		movs	r3, #0
 125 0018 4FF47A72 		mov	r2, #1000
 126 001c 0021     		movs	r1, #0
 127 001e FFF7FEFF 		bl	xQueueGenericReceive
 128 0022 0346     		mov	r3, r0
 129 0024 012B     		cmp	r3, #1
 130 0026 3AD1     		bne	.L5
  30:Src/gpsops.c  ****       {
  31:Src/gpsops.c  **** 
  32:Src/gpsops.c  **** 
  33:Src/gpsops.c  ****         if(checkGpsData() == GPS_READY)
 131              		.loc 1 33 0
 132 0028 FFF7FEFF 		bl	checkGpsData
 133 002c 0346     		mov	r3, r0
 134 002e 012B     		cmp	r3, #1
 135 0030 2BD1     		bne	.L6
  34:Src/gpsops.c  ****         {
ARM GAS  /tmp/ccux5DbS.s 			page 4


  35:Src/gpsops.c  **** 
  36:Src/gpsops.c  ****                xSemaphoreTake(spiMutexHandle, portMAX_DELAY);
 136              		.loc 1 36 0
 137 0032 1F4B     		ldr	r3, .L11+8
 138 0034 1868     		ldr	r0, [r3]
 139 0036 0023     		movs	r3, #0
 140 0038 4FF0FF32 		mov	r2, #-1
 141 003c 0021     		movs	r1, #0
 142 003e FFF7FEFF 		bl	xQueueGenericReceive
 143              	.LBB2:
  37:Src/gpsops.c  **** 
  38:Src/gpsops.c  ****                for(int i=0; i<99; i++)
 144              		.loc 1 38 0
 145 0042 0023     		movs	r3, #0
 146 0044 FB60     		str	r3, [r7, #12]
 147 0046 0FE0     		b	.L7
 148              	.L8:
  39:Src/gpsops.c  ****                    EnvironmentData -> gps_string[i] = gpsData.gprmc_body[i];
 149              		.loc 1 39 0 discriminator 3
 150 0048 1A4B     		ldr	r3, .L11+12
 151 004a 1A68     		ldr	r2, [r3]
 152 004c 1A49     		ldr	r1, .L11+16
 153 004e FB68     		ldr	r3, [r7, #12]
 154 0050 0B44     		add	r3, r3, r1
 155 0052 03F59C73 		add	r3, r3, #312
 156 0056 1B78     		ldrb	r3, [r3]
 157 0058 D9B2     		uxtb	r1, r3
 158 005a FB68     		ldr	r3, [r7, #12]
 159 005c 1344     		add	r3, r3, r2
 160 005e 0A46     		mov	r2, r1
 161 0060 1A70     		strb	r2, [r3]
  38:Src/gpsops.c  ****                    EnvironmentData -> gps_string[i] = gpsData.gprmc_body[i];
 162              		.loc 1 38 0 discriminator 3
 163 0062 FB68     		ldr	r3, [r7, #12]
 164 0064 0133     		adds	r3, r3, #1
 165 0066 FB60     		str	r3, [r7, #12]
 166              	.L7:
  38:Src/gpsops.c  ****                    EnvironmentData -> gps_string[i] = gpsData.gprmc_body[i];
 167              		.loc 1 38 0 is_stmt 0 discriminator 1
 168 0068 FB68     		ldr	r3, [r7, #12]
 169 006a 622B     		cmp	r3, #98
 170 006c ECDD     		ble	.L8
 171              	.LBE2:
  40:Src/gpsops.c  **** 
  41:Src/gpsops.c  ****                xSemaphoreGive(spiMutexHandle);
 172              		.loc 1 41 0 is_stmt 1
 173 006e 104B     		ldr	r3, .L11+8
 174 0070 1868     		ldr	r0, [r3]
 175 0072 0023     		movs	r3, #0
 176 0074 0022     		movs	r2, #0
 177 0076 0021     		movs	r1, #0
 178 0078 FFF7FEFF 		bl	xQueueGenericSend
  42:Src/gpsops.c  **** 
  43:Src/gpsops.c  **** 
  44:Src/gpsops.c  **** 
  45:Src/gpsops.c  ****            HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 179              		.loc 1 45 0
ARM GAS  /tmp/ccux5DbS.s 			page 5


 180 007c 4FF48051 		mov	r1, #4096
 181 0080 0E48     		ldr	r0, .L11+20
 182 0082 FFF7FEFF 		bl	HAL_GPIO_TogglePin
  46:Src/gpsops.c  **** 
  47:Src/gpsops.c  ****            enableGps();
 183              		.loc 1 47 0
 184 0086 FFF7FEFF 		bl	enableGps
 185              	.L6:
  48:Src/gpsops.c  **** 
  49:Src/gpsops.c  ****         }
  50:Src/gpsops.c  **** 
  51:Src/gpsops.c  **** 
  52:Src/gpsops.c  ****           receiveGpsData();
 186              		.loc 1 52 0
 187 008a FFF7FEFF 		bl	receiveGpsData
  53:Src/gpsops.c  **** 
  54:Src/gpsops.c  ****           HAL_UART_Receive_IT(&huart4, (uint8_t *)&rx_data, 1);
 188              		.loc 1 54 0
 189 008e 07F10B03 		add	r3, r7, #11
 190 0092 0122     		movs	r2, #1
 191 0094 1946     		mov	r1, r3
 192 0096 0A48     		ldr	r0, .L11+24
 193 0098 FFF7FEFF 		bl	HAL_UART_Receive_IT
 194 009c B9E7     		b	.L10
 195              	.L5:
  55:Src/gpsops.c  **** 
  56:Src/gpsops.c  **** 
  57:Src/gpsops.c  ****       }
  58:Src/gpsops.c  ****       else
  59:Src/gpsops.c  ****       {
  60:Src/gpsops.c  **** 
  61:Src/gpsops.c  ****           mprintf("gpsOps Crash \r\n");
 196              		.loc 1 61 0
 197 009e 0948     		ldr	r0, .L11+28
 198 00a0 FFF7FEFF 		bl	mprintf
  29:Src/gpsops.c  ****       {
 199              		.loc 1 29 0
 200 00a4 B5E7     		b	.L10
 201              	.L12:
 202 00a6 00BF     		.align	2
 203              	.L11:
 204 00a8 00000000 		.word	.LC8
 205 00ac 00000000 		.word	uartSemaphoreHandle
 206 00b0 00000000 		.word	spiMutexHandle
 207 00b4 00000000 		.word	EnvironmentData
 208 00b8 00000000 		.word	gpsData
 209 00bc 00040240 		.word	1073873920
 210 00c0 00000000 		.word	huart4
 211 00c4 0C000000 		.word	.LC9
 212              		.cfi_endproc
 213              	.LFE142:
 215              		.global	NextUpdateDataPackage
 216              		.section	.data.NextUpdateDataPackage,"aw",%progbits
 217              		.align	2
 220              	NextUpdateDataPackage:
 221 0000 01000000 		.word	1
 222              		.global	CurrentUpdateDataPackage
ARM GAS  /tmp/ccux5DbS.s 			page 6


 223              		.section	.data.CurrentUpdateDataPackage,"aw",%progbits
 224              		.align	2
 227              	CurrentUpdateDataPackage:
 228 0000 01000000 		.word	1
 229              		.section	.text.writeFlash,"ax",%progbits
 230              		.align	1
 231              		.global	writeFlash
 232              		.syntax unified
 233              		.thumb
 234              		.thumb_func
 235              		.fpu fpv4-sp-d16
 237              	writeFlash:
 238              	.LFB143:
 239              		.file 2 "Src/spiops.c"
   1:Src/spiops.c  **** ﻿#include "spiops.h"
   2:Src/spiops.c  **** #include "stdlib.h"
   3:Src/spiops.c  **** 
   4:Src/spiops.c  **** #define SECTOR6_ADDRESS 0x8080000
   5:Src/spiops.c  **** 
   6:Src/spiops.c  **** uint32_t NextUpdateDataPackage = 1;
   7:Src/spiops.c  **** uint32_t CurrentUpdateDataPackage = 1;
   8:Src/spiops.c  **** 
   9:Src/spiops.c  **** 
  10:Src/spiops.c  **** void writeFlash(uint8_t Data, long Address)
  11:Src/spiops.c  **** {
 240              		.loc 2 11 0
 241              		.cfi_startproc
 242              		@ args = 0, pretend = 0, frame = 8
 243              		@ frame_needed = 1, uses_anonymous_args = 0
 244 0000 90B5     		push	{r4, r7, lr}
 245              	.LCFI5:
 246              		.cfi_def_cfa_offset 12
 247              		.cfi_offset 4, -12
 248              		.cfi_offset 7, -8
 249              		.cfi_offset 14, -4
 250 0002 83B0     		sub	sp, sp, #12
 251              	.LCFI6:
 252              		.cfi_def_cfa_offset 24
 253 0004 00AF     		add	r7, sp, #0
 254              	.LCFI7:
 255              		.cfi_def_cfa_register 7
 256 0006 0346     		mov	r3, r0
 257 0008 3960     		str	r1, [r7]
 258 000a FB71     		strb	r3, [r7, #7]
  12:Src/spiops.c  **** 
  13:Src/spiops.c  ****      HAL_FLASH_Program(TYPEPROGRAM_BYTE, Address , (uint8_t) Data);
 259              		.loc 2 13 0
 260 000c 3968     		ldr	r1, [r7]
 261 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 262 0010 4FF00004 		mov	r4, #0
 263 0014 1A46     		mov	r2, r3
 264 0016 2346     		mov	r3, r4
 265 0018 0020     		movs	r0, #0
 266 001a FFF7FEFF 		bl	HAL_FLASH_Program
  14:Src/spiops.c  **** 
  15:Src/spiops.c  **** }
 267              		.loc 2 15 0
ARM GAS  /tmp/ccux5DbS.s 			page 7


 268 001e 00BF     		nop
 269 0020 0C37     		adds	r7, r7, #12
 270              	.LCFI8:
 271              		.cfi_def_cfa_offset 12
 272 0022 BD46     		mov	sp, r7
 273              	.LCFI9:
 274              		.cfi_def_cfa_register 13
 275              		@ sp needed
 276 0024 90BD     		pop	{r4, r7, pc}
 277              		.cfi_endproc
 278              	.LFE143:
 280              		.section	.text.readFlash,"ax",%progbits
 281              		.align	1
 282              		.global	readFlash
 283              		.syntax unified
 284              		.thumb
 285              		.thumb_func
 286              		.fpu fpv4-sp-d16
 288              	readFlash:
 289              	.LFB144:
  16:Src/spiops.c  **** 
  17:Src/spiops.c  **** 
  18:Src/spiops.c  **** 
  19:Src/spiops.c  **** uint8_t readFlash(int Address)
  20:Src/spiops.c  **** {
 290              		.loc 2 20 0
 291              		.cfi_startproc
 292              		@ args = 0, pretend = 0, frame = 16
 293              		@ frame_needed = 1, uses_anonymous_args = 0
 294              		@ link register save eliminated.
 295 0000 80B4     		push	{r7}
 296              	.LCFI10:
 297              		.cfi_def_cfa_offset 4
 298              		.cfi_offset 7, -4
 299 0002 85B0     		sub	sp, sp, #20
 300              	.LCFI11:
 301              		.cfi_def_cfa_offset 24
 302 0004 00AF     		add	r7, sp, #0
 303              	.LCFI12:
 304              		.cfi_def_cfa_register 7
 305 0006 7860     		str	r0, [r7, #4]
  21:Src/spiops.c  **** 
  22:Src/spiops.c  ****     uint8_t flash_data;
  23:Src/spiops.c  **** 
  24:Src/spiops.c  ****     flash_data = *(uint8_t *)Address;
 306              		.loc 2 24 0
 307 0008 7B68     		ldr	r3, [r7, #4]
 308 000a 1B78     		ldrb	r3, [r3]
 309 000c FB73     		strb	r3, [r7, #15]
  25:Src/spiops.c  **** 
  26:Src/spiops.c  ****     return flash_data;
 310              		.loc 2 26 0
 311 000e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
  27:Src/spiops.c  **** 
  28:Src/spiops.c  **** }
 312              		.loc 2 28 0
 313 0010 1846     		mov	r0, r3
ARM GAS  /tmp/ccux5DbS.s 			page 8


 314 0012 1437     		adds	r7, r7, #20
 315              	.LCFI13:
 316              		.cfi_def_cfa_offset 4
 317 0014 BD46     		mov	sp, r7
 318              	.LCFI14:
 319              		.cfi_def_cfa_register 13
 320              		@ sp needed
 321 0016 5DF8047B 		ldr	r7, [sp], #4
 322              	.LCFI15:
 323              		.cfi_restore 7
 324              		.cfi_def_cfa_offset 0
 325 001a 7047     		bx	lr
 326              		.cfi_endproc
 327              	.LFE144:
 329              		.section	.text.SPI1_IRQHandler,"ax",%progbits
 330              		.align	1
 331              		.global	SPI1_IRQHandler
 332              		.syntax unified
 333              		.thumb
 334              		.thumb_func
 335              		.fpu fpv4-sp-d16
 337              	SPI1_IRQHandler:
 338              	.LFB145:
  29:Src/spiops.c  **** 
  30:Src/spiops.c  **** 
  31:Src/spiops.c  **** 
  32:Src/spiops.c  **** void SPI1_IRQHandler(void)
  33:Src/spiops.c  **** {
 339              		.loc 2 33 0
 340              		.cfi_startproc
 341              		@ args = 0, pretend = 0, frame = 0
 342              		@ frame_needed = 1, uses_anonymous_args = 0
 343 0000 80B5     		push	{r7, lr}
 344              	.LCFI16:
 345              		.cfi_def_cfa_offset 8
 346              		.cfi_offset 7, -8
 347              		.cfi_offset 14, -4
 348 0002 00AF     		add	r7, sp, #0
 349              	.LCFI17:
 350              		.cfi_def_cfa_register 7
  34:Src/spiops.c  **** 
  35:Src/spiops.c  ****   HAL_SPI_IRQHandler(&hspi1);
 351              		.loc 2 35 0
 352 0004 0548     		ldr	r0, .L17
 353 0006 FFF7FEFF 		bl	HAL_SPI_IRQHandler
  36:Src/spiops.c  **** 
  37:Src/spiops.c  ****   xSemaphoreGiveFromISR(spiSemaphoreHandle, NULL);
 354              		.loc 2 37 0
 355 000a 054B     		ldr	r3, .L17+4
 356 000c 1B68     		ldr	r3, [r3]
 357 000e 0021     		movs	r1, #0
 358 0010 1846     		mov	r0, r3
 359 0012 FFF7FEFF 		bl	xQueueGiveFromISR
  38:Src/spiops.c  **** 
  39:Src/spiops.c  **** }
 360              		.loc 2 39 0
 361 0016 00BF     		nop
ARM GAS  /tmp/ccux5DbS.s 			page 9


 362 0018 80BD     		pop	{r7, pc}
 363              	.L18:
 364 001a 00BF     		.align	2
 365              	.L17:
 366 001c 00000000 		.word	hspi1
 367 0020 00000000 		.word	spiSemaphoreHandle
 368              		.cfi_endproc
 369              	.LFE145:
 371              		.section	.rodata
 372              		.align	2
 373              	.LC10:
 374 001c 7370694F 		.ascii	"spiOps\015\012\000"
 374      70730D0A 
 374      00
 375              		.section	.text.spiComOps,"ax",%progbits
 376              		.align	1
 377              		.global	spiComOps
 378              		.syntax unified
 379              		.thumb
 380              		.thumb_func
 381              		.fpu fpv4-sp-d16
 383              	spiComOps:
 384              	.LFB146:
  40:Src/spiops.c  **** 
  41:Src/spiops.c  **** 
  42:Src/spiops.c  **** 
  43:Src/spiops.c  **** /* spiComOps function */
  44:Src/spiops.c  **** void spiComOps(void const * argument)
  45:Src/spiops.c  **** {
 385              		.loc 2 45 0
 386              		.cfi_startproc
 387              		@ args = 0, pretend = 0, frame = 16
 388              		@ frame_needed = 1, uses_anonymous_args = 0
 389 0000 80B5     		push	{r7, lr}
 390              	.LCFI18:
 391              		.cfi_def_cfa_offset 8
 392              		.cfi_offset 7, -8
 393              		.cfi_offset 14, -4
 394 0002 84B0     		sub	sp, sp, #16
 395              	.LCFI19:
 396              		.cfi_def_cfa_offset 24
 397 0004 00AF     		add	r7, sp, #0
 398              	.LCFI20:
 399              		.cfi_def_cfa_register 7
 400 0006 7860     		str	r0, [r7, #4]
  46:Src/spiops.c  **** 
  47:Src/spiops.c  ****     HAL_SPI_StateTypeDef status;
  48:Src/spiops.c  **** 
  49:Src/spiops.c  ****     short int ret;
  50:Src/spiops.c  ****     short int update_data_available = 0;
 401              		.loc 2 50 0
 402 0008 0023     		movs	r3, #0
 403 000a FB81     		strh	r3, [r7, #14]	@ movhi
  51:Src/spiops.c  ****     short int control_data_available = 0;
 404              		.loc 2 51 0
 405 000c 0023     		movs	r3, #0
 406 000e BB81     		strh	r3, [r7, #12]	@ movhi
ARM GAS  /tmp/ccux5DbS.s 			page 10


  52:Src/spiops.c  **** 
  53:Src/spiops.c  ****     mprintf("spiOps\r\n");
 407              		.loc 2 53 0
 408 0010 3448     		ldr	r0, .L28
 409 0012 FFF7FEFF 		bl	mprintf
  54:Src/spiops.c  **** 
  55:Src/spiops.c  ****     HAL_FLASH_Unlock();
 410              		.loc 2 55 0
 411 0016 FFF7FEFF 		bl	HAL_FLASH_Unlock
  56:Src/spiops.c  ****     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAER
 412              		.loc 2 56 0
 413 001a 334B     		ldr	r3, .L28+4
 414 001c 3322     		movs	r2, #51
 415 001e DA60     		str	r2, [r3, #12]
  57:Src/spiops.c  ****     FLASH_Erase_Sector(FLASH_SECTOR_6, VOLTAGE_RANGE_3);
 416              		.loc 2 57 0
 417 0020 0221     		movs	r1, #2
 418 0022 0620     		movs	r0, #6
 419 0024 FFF7FEFF 		bl	FLASH_Erase_Sector
  58:Src/spiops.c  ****     FLASH_Erase_Sector(FLASH_SECTOR_7, VOLTAGE_RANGE_3);
 420              		.loc 2 58 0
 421 0028 0221     		movs	r1, #2
 422 002a 0720     		movs	r0, #7
 423 002c FFF7FEFF 		bl	FLASH_Erase_Sector
  59:Src/spiops.c  ****     HAL_FLASH_Lock();
 424              		.loc 2 59 0
 425 0030 FFF7FEFF 		bl	HAL_FLASH_Lock
  60:Src/spiops.c  **** 
  61:Src/spiops.c  **** 
  62:Src/spiops.c  ****     HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)SpiTxData, (uint8_t *)SpiRxData,  SPI_TRANSFER_SI
 426              		.loc 2 62 0
 427 0034 2D4B     		ldr	r3, .L28+8
 428 0036 1968     		ldr	r1, [r3]
 429 0038 2D4B     		ldr	r3, .L28+12
 430 003a 1A68     		ldr	r2, [r3]
 431 003c 7823     		movs	r3, #120
 432 003e 2D48     		ldr	r0, .L28+16
 433 0040 FFF7FEFF 		bl	HAL_SPI_TransmitReceive_IT
 434              	.L27:
  63:Src/spiops.c  **** 
  64:Src/spiops.c  ****     while(1)
  65:Src/spiops.c  ****     {
  66:Src/spiops.c  **** 
  67:Src/spiops.c  ****         if( xSemaphoreTake(spiSemaphoreHandle, 1) == pdPASS)  // when interrupt is occured
 435              		.loc 2 67 0
 436 0044 2C4B     		ldr	r3, .L28+20
 437 0046 1868     		ldr	r0, [r3]
 438 0048 0023     		movs	r3, #0
 439 004a 0122     		movs	r2, #1
 440 004c 0021     		movs	r1, #0
 441 004e FFF7FEFF 		bl	xQueueGenericReceive
 442 0052 0346     		mov	r3, r0
 443 0054 012B     		cmp	r3, #1
 444 0056 33D1     		bne	.L20
  68:Src/spiops.c  ****         {
  69:Src/spiops.c  **** 
  70:Src/spiops.c  ****             status = HAL_SPI_GetState(&hspi1);
ARM GAS  /tmp/ccux5DbS.s 			page 11


 445              		.loc 2 70 0
 446 0058 2648     		ldr	r0, .L28+16
 447 005a FFF7FEFF 		bl	HAL_SPI_GetState
 448 005e 0346     		mov	r3, r0
 449 0060 FB72     		strb	r3, [r7, #11]
  71:Src/spiops.c  **** 
  72:Src/spiops.c  ****             if(status == HAL_SPI_STATE_READY)
 450              		.loc 2 72 0
 451 0062 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 452 0064 012B     		cmp	r3, #1
 453 0066 23D1     		bne	.L21
  73:Src/spiops.c  ****             {
  74:Src/spiops.c  **** 
  75:Src/spiops.c  ****                 ret = checkIfUpdateData();
 454              		.loc 2 75 0
 455 0068 FFF7FEFF 		bl	checkIfUpdateData
 456 006c 0346     		mov	r3, r0
 457 006e 3B81     		strh	r3, [r7, #8]	@ movhi
  76:Src/spiops.c  **** 
  77:Src/spiops.c  ****                 if(ret == HAL_OK)
 458              		.loc 2 77 0
 459 0070 B7F90830 		ldrsh	r3, [r7, #8]
 460 0074 002B     		cmp	r3, #0
 461 0076 0CD1     		bne	.L22
  78:Src/spiops.c  ****                 {
  79:Src/spiops.c  **** 
  80:Src/spiops.c  ****                     ret = confirmUpdateDataAccuracy();
 462              		.loc 2 80 0
 463 0078 FFF7FEFF 		bl	confirmUpdateDataAccuracy
 464 007c 0346     		mov	r3, r0
 465 007e 3B81     		strh	r3, [r7, #8]	@ movhi
  81:Src/spiops.c  ****                     if(ret == HAL_OK)
 466              		.loc 2 81 0
 467 0080 B7F90830 		ldrsh	r3, [r7, #8]
 468 0084 002B     		cmp	r3, #0
 469 0086 01D1     		bne	.L23
  82:Src/spiops.c  ****                         update_data_available = 1;
 470              		.loc 2 82 0
 471 0088 0123     		movs	r3, #1
 472 008a FB81     		strh	r3, [r7, #14]	@ movhi
 473              	.L23:
  83:Src/spiops.c  **** 
  84:Src/spiops.c  ****                     putUpdateDataResponse();
 474              		.loc 2 84 0
 475 008c FFF7FEFF 		bl	putUpdateDataResponse
 476 0090 0EE0     		b	.L21
 477              	.L22:
  85:Src/spiops.c  ****                 }
  86:Src/spiops.c  ****                 else
  87:Src/spiops.c  ****                 {
  88:Src/spiops.c  ****                     ret = checkIfControlData();
 478              		.loc 2 88 0
 479 0092 FFF7FEFF 		bl	checkIfControlData
 480 0096 0346     		mov	r3, r0
 481 0098 3B81     		strh	r3, [r7, #8]	@ movhi
  89:Src/spiops.c  **** 
  90:Src/spiops.c  ****                     if(ret == HAL_OK)
ARM GAS  /tmp/ccux5DbS.s 			page 12


 482              		.loc 2 90 0
 483 009a B7F90830 		ldrsh	r3, [r7, #8]
 484 009e 002B     		cmp	r3, #0
 485 00a0 04D1     		bne	.L24
  91:Src/spiops.c  ****                     {
  92:Src/spiops.c  **** 
  93:Src/spiops.c  ****                         control_data_available = 1;
 486              		.loc 2 93 0
 487 00a2 0123     		movs	r3, #1
 488 00a4 BB81     		strh	r3, [r7, #12]	@ movhi
  94:Src/spiops.c  **** 
  95:Src/spiops.c  ****                         putControlDataResponse();
 489              		.loc 2 95 0
 490 00a6 FFF7FEFF 		bl	putControlDataResponse
 491 00aa 01E0     		b	.L21
 492              	.L24:
  96:Src/spiops.c  **** 
  97:Src/spiops.c  ****                     }
  98:Src/spiops.c  ****                     else
  99:Src/spiops.c  ****                     {
 100:Src/spiops.c  ****                         putEnvironmentData();
 493              		.loc 2 100 0
 494 00ac FFF7FEFF 		bl	putEnvironmentData
 495              	.L21:
 101:Src/spiops.c  ****                     }
 102:Src/spiops.c  ****                 }
 103:Src/spiops.c  **** 
 104:Src/spiops.c  ****             }
 105:Src/spiops.c  **** 
 106:Src/spiops.c  ****             HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)SpiTxData, (uint8_t *)SpiRxData,  SPI_TRA
 496              		.loc 2 106 0
 497 00b0 0E4B     		ldr	r3, .L28+8
 498 00b2 1968     		ldr	r1, [r3]
 499 00b4 0E4B     		ldr	r3, .L28+12
 500 00b6 1A68     		ldr	r2, [r3]
 501 00b8 7823     		movs	r3, #120
 502 00ba 0E48     		ldr	r0, .L28+16
 503 00bc FFF7FEFF 		bl	HAL_SPI_TransmitReceive_IT
 504              	.L20:
 107:Src/spiops.c  **** 
 108:Src/spiops.c  ****         }
 109:Src/spiops.c  **** 
 110:Src/spiops.c  **** 
 111:Src/spiops.c  **** 
 112:Src/spiops.c  **** 
 113:Src/spiops.c  ****         if(update_data_available == 1)
 505              		.loc 2 113 0
 506 00c0 B7F90E30 		ldrsh	r3, [r7, #14]
 507 00c4 012B     		cmp	r3, #1
 508 00c6 04D1     		bne	.L25
 114:Src/spiops.c  ****         {
 115:Src/spiops.c  ****             processUpdateData();
 509              		.loc 2 115 0
 510 00c8 FFF7FEFF 		bl	processUpdateData
 116:Src/spiops.c  **** 
 117:Src/spiops.c  ****             update_data_available = 0;
 511              		.loc 2 117 0
ARM GAS  /tmp/ccux5DbS.s 			page 13


 512 00cc 0023     		movs	r3, #0
 513 00ce FB81     		strh	r3, [r7, #14]	@ movhi
 514 00d0 B8E7     		b	.L27
 515              	.L25:
 118:Src/spiops.c  ****         }
 119:Src/spiops.c  ****         else if(control_data_available == 1)
 516              		.loc 2 119 0
 517 00d2 B7F90C30 		ldrsh	r3, [r7, #12]
 518 00d6 012B     		cmp	r3, #1
 519 00d8 B4D1     		bne	.L27
 120:Src/spiops.c  ****         {
 121:Src/spiops.c  **** 
 122:Src/spiops.c  ****             processControlData();
 520              		.loc 2 122 0
 521 00da FFF7FEFF 		bl	processControlData
 123:Src/spiops.c  **** 
 124:Src/spiops.c  ****             control_data_available = 0;
 522              		.loc 2 124 0
 523 00de 0023     		movs	r3, #0
 524 00e0 BB81     		strh	r3, [r7, #12]	@ movhi
  67:Src/spiops.c  ****         {
 525              		.loc 2 67 0
 526 00e2 AFE7     		b	.L27
 527              	.L29:
 528              		.align	2
 529              	.L28:
 530 00e4 1C000000 		.word	.LC10
 531 00e8 003C0240 		.word	1073888256
 532 00ec 00000000 		.word	SpiTxData
 533 00f0 00000000 		.word	SpiRxData
 534 00f4 00000000 		.word	hspi1
 535 00f8 00000000 		.word	spiSemaphoreHandle
 536              		.cfi_endproc
 537              	.LFE146:
 539              		.section	.text.checkIfUpdateData,"ax",%progbits
 540              		.align	1
 541              		.global	checkIfUpdateData
 542              		.syntax unified
 543              		.thumb
 544              		.thumb_func
 545              		.fpu fpv4-sp-d16
 547              	checkIfUpdateData:
 548              	.LFB147:
 125:Src/spiops.c  ****         }
 126:Src/spiops.c  **** 
 127:Src/spiops.c  **** 
 128:Src/spiops.c  **** 
 129:Src/spiops.c  **** 
 130:Src/spiops.c  ****     }
 131:Src/spiops.c  **** 
 132:Src/spiops.c  **** }
 133:Src/spiops.c  **** 
 134:Src/spiops.c  **** 
 135:Src/spiops.c  **** 
 136:Src/spiops.c  **** HAL_StatusTypeDef checkIfUpdateData()
 137:Src/spiops.c  **** {
 549              		.loc 2 137 0
ARM GAS  /tmp/ccux5DbS.s 			page 14


 550              		.cfi_startproc
 551              		@ args = 0, pretend = 0, frame = 0
 552              		@ frame_needed = 1, uses_anonymous_args = 0
 553 0000 80B5     		push	{r7, lr}
 554              	.LCFI21:
 555              		.cfi_def_cfa_offset 8
 556              		.cfi_offset 7, -8
 557              		.cfi_offset 14, -4
 558 0002 00AF     		add	r7, sp, #0
 559              	.LCFI22:
 560              		.cfi_def_cfa_register 7
 138:Src/spiops.c  **** 
 139:Src/spiops.c  ****     if((SpiRxData->header & 0xff) == 'U' && ((SpiRxData->header >> 8) & 0xff) == 'P')
 561              		.loc 2 139 0
 562 0004 0D4B     		ldr	r3, .L33
 563 0006 1B68     		ldr	r3, [r3]
 564 0008 1B88     		ldrh	r3, [r3]
 565 000a DBB2     		uxtb	r3, r3
 566 000c 552B     		cmp	r3, #85
 567 000e 12D1     		bne	.L31
 568              		.loc 2 139 0 is_stmt 0 discriminator 1
 569 0010 0A4B     		ldr	r3, .L33
 570 0012 1B68     		ldr	r3, [r3]
 571 0014 1B88     		ldrh	r3, [r3]
 572 0016 1B0A     		lsrs	r3, r3, #8
 573 0018 9BB2     		uxth	r3, r3
 574 001a DBB2     		uxtb	r3, r3
 575 001c 502B     		cmp	r3, #80
 576 001e 0AD1     		bne	.L31
 140:Src/spiops.c  ****     {
 141:Src/spiops.c  **** 
 142:Src/spiops.c  ****         memcpy(UpdateFile, SpiRxData->data, SPI_DATA_SIZE);
 577              		.loc 2 142 0 is_stmt 1
 578 0020 074B     		ldr	r3, .L33+4
 579 0022 1868     		ldr	r0, [r3]
 580 0024 054B     		ldr	r3, .L33
 581 0026 1B68     		ldr	r3, [r3]
 582 0028 0233     		adds	r3, r3, #2
 583 002a 7422     		movs	r2, #116
 584 002c 1946     		mov	r1, r3
 585 002e FFF7FEFF 		bl	memcpy
 143:Src/spiops.c  **** 
 144:Src/spiops.c  ****         return HAL_OK;
 586              		.loc 2 144 0
 587 0032 0023     		movs	r3, #0
 588 0034 00E0     		b	.L32
 589              	.L31:
 145:Src/spiops.c  ****     }
 146:Src/spiops.c  ****     else
 147:Src/spiops.c  ****     {
 148:Src/spiops.c  ****         return HAL_ERROR;
 590              		.loc 2 148 0
 591 0036 0123     		movs	r3, #1
 592              	.L32:
 149:Src/spiops.c  ****     }
 150:Src/spiops.c  **** 
 151:Src/spiops.c  **** }
ARM GAS  /tmp/ccux5DbS.s 			page 15


 593              		.loc 2 151 0
 594 0038 1846     		mov	r0, r3
 595 003a 80BD     		pop	{r7, pc}
 596              	.L34:
 597              		.align	2
 598              	.L33:
 599 003c 00000000 		.word	SpiRxData
 600 0040 00000000 		.word	UpdateFile
 601              		.cfi_endproc
 602              	.LFE147:
 604              		.section	.text.checkIfControlData,"ax",%progbits
 605              		.align	1
 606              		.global	checkIfControlData
 607              		.syntax unified
 608              		.thumb
 609              		.thumb_func
 610              		.fpu fpv4-sp-d16
 612              	checkIfControlData:
 613              	.LFB148:
 152:Src/spiops.c  **** 
 153:Src/spiops.c  **** 
 154:Src/spiops.c  **** 
 155:Src/spiops.c  **** HAL_StatusTypeDef checkIfControlData()
 156:Src/spiops.c  **** {
 614              		.loc 2 156 0
 615              		.cfi_startproc
 616              		@ args = 0, pretend = 0, frame = 0
 617              		@ frame_needed = 1, uses_anonymous_args = 0
 618              		@ link register save eliminated.
 619 0000 80B4     		push	{r7}
 620              	.LCFI23:
 621              		.cfi_def_cfa_offset 4
 622              		.cfi_offset 7, -4
 623 0002 00AF     		add	r7, sp, #0
 624              	.LCFI24:
 625              		.cfi_def_cfa_register 7
 157:Src/spiops.c  **** 
 158:Src/spiops.c  ****     if((SpiRxData->header & 0xff) == 'C' && ((SpiRxData->header >> 8) & 0xff) == 'O')
 626              		.loc 2 158 0
 627 0004 0C4B     		ldr	r3, .L38
 628 0006 1B68     		ldr	r3, [r3]
 629 0008 1B88     		ldrh	r3, [r3]
 630 000a DBB2     		uxtb	r3, r3
 631 000c 432B     		cmp	r3, #67
 632 000e 0DD1     		bne	.L36
 633              		.loc 2 158 0 is_stmt 0 discriminator 1
 634 0010 094B     		ldr	r3, .L38
 635 0012 1B68     		ldr	r3, [r3]
 636 0014 1B88     		ldrh	r3, [r3]
 637 0016 1B0A     		lsrs	r3, r3, #8
 638 0018 9BB2     		uxth	r3, r3
 639 001a DBB2     		uxtb	r3, r3
 640 001c 4F2B     		cmp	r3, #79
 641 001e 05D1     		bne	.L36
 159:Src/spiops.c  ****     {
 160:Src/spiops.c  **** 
 161:Src/spiops.c  **** //        mprintf("%d\r\n", SpiRxData->data[58]);
ARM GAS  /tmp/ccux5DbS.s 			page 16


 162:Src/spiops.c  **** 
 163:Src/spiops.c  ****         ControlData = (CONTROL_DATA_FORMAT *) SpiRxData + offsetof(SPI_TRANSFER_FORMAT, header);
 642              		.loc 2 163 0 is_stmt 1
 643 0020 054B     		ldr	r3, .L38
 644 0022 1B68     		ldr	r3, [r3]
 645 0024 054A     		ldr	r2, .L38+4
 646 0026 1360     		str	r3, [r2]
 164:Src/spiops.c  **** 
 165:Src/spiops.c  **** //        memcpy(ControlData, SpiRxData->data, SPI_DATA_SIZE);
 166:Src/spiops.c  **** 
 167:Src/spiops.c  **** 
 168:Src/spiops.c  ****         return HAL_OK;
 647              		.loc 2 168 0
 648 0028 0023     		movs	r3, #0
 649 002a 00E0     		b	.L37
 650              	.L36:
 169:Src/spiops.c  **** 
 170:Src/spiops.c  ****     }
 171:Src/spiops.c  ****     else
 172:Src/spiops.c  ****     {
 173:Src/spiops.c  **** 
 174:Src/spiops.c  ****         return HAL_ERROR;
 651              		.loc 2 174 0
 652 002c 0123     		movs	r3, #1
 653              	.L37:
 175:Src/spiops.c  **** 
 176:Src/spiops.c  ****     }
 177:Src/spiops.c  **** }
 654              		.loc 2 177 0
 655 002e 1846     		mov	r0, r3
 656 0030 BD46     		mov	sp, r7
 657              	.LCFI25:
 658              		.cfi_def_cfa_register 13
 659              		@ sp needed
 660 0032 5DF8047B 		ldr	r7, [sp], #4
 661              	.LCFI26:
 662              		.cfi_restore 7
 663              		.cfi_def_cfa_offset 0
 664 0036 7047     		bx	lr
 665              	.L39:
 666              		.align	2
 667              	.L38:
 668 0038 00000000 		.word	SpiRxData
 669 003c 00000000 		.word	ControlData
 670              		.cfi_endproc
 671              	.LFE148:
 673              		.section	.text.confirmUpdateDataAccuracy,"ax",%progbits
 674              		.align	1
 675              		.global	confirmUpdateDataAccuracy
 676              		.syntax unified
 677              		.thumb
 678              		.thumb_func
 679              		.fpu fpv4-sp-d16
 681              	confirmUpdateDataAccuracy:
 682              	.LFB149:
 178:Src/spiops.c  **** 
 179:Src/spiops.c  **** HAL_StatusTypeDef confirmUpdateDataAccuracy()
ARM GAS  /tmp/ccux5DbS.s 			page 17


 180:Src/spiops.c  **** {
 683              		.loc 2 180 0
 684              		.cfi_startproc
 685              		@ args = 0, pretend = 0, frame = 16
 686              		@ frame_needed = 1, uses_anonymous_args = 0
 687              		@ link register save eliminated.
 688 0000 80B4     		push	{r7}
 689              	.LCFI27:
 690              		.cfi_def_cfa_offset 4
 691              		.cfi_offset 7, -4
 692 0002 85B0     		sub	sp, sp, #20
 693              	.LCFI28:
 694              		.cfi_def_cfa_offset 24
 695 0004 00AF     		add	r7, sp, #0
 696              	.LCFI29:
 697              		.cfi_def_cfa_register 7
 181:Src/spiops.c  **** 
 182:Src/spiops.c  **** 
 183:Src/spiops.c  ****     uint16_t checksum = 0;
 698              		.loc 2 183 0
 699 0006 0023     		movs	r3, #0
 700 0008 FB81     		strh	r3, [r7, #14]	@ movhi
 184:Src/spiops.c  ****     short int checksum_error = 0;
 701              		.loc 2 184 0
 702 000a 0023     		movs	r3, #0
 703 000c BB81     		strh	r3, [r7, #12]	@ movhi
 185:Src/spiops.c  ****     short int sequence_error = 0;
 704              		.loc 2 185 0
 705 000e 0023     		movs	r3, #0
 706 0010 7B81     		strh	r3, [r7, #10]	@ movhi
 707              	.LBB3:
 186:Src/spiops.c  **** 
 187:Src/spiops.c  ****     for(int i=0; i< SPI_ENTITY_SIZE; i++)
 708              		.loc 2 187 0
 709 0012 0023     		movs	r3, #0
 710 0014 7B60     		str	r3, [r7, #4]
 711 0016 0CE0     		b	.L41
 712              	.L42:
 188:Src/spiops.c  ****         checksum += UpdateFile->data[i];
 713              		.loc 2 188 0 discriminator 3
 714 0018 204B     		ldr	r3, .L48
 715 001a 1A68     		ldr	r2, [r3]
 716 001c 7B68     		ldr	r3, [r7, #4]
 717 001e 1344     		add	r3, r3, r2
 718 0020 0833     		adds	r3, r3, #8
 719 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 720 0024 9AB2     		uxth	r2, r3
 721 0026 FB89     		ldrh	r3, [r7, #14]	@ movhi
 722 0028 1344     		add	r3, r3, r2
 723 002a FB81     		strh	r3, [r7, #14]	@ movhi
 187:Src/spiops.c  ****         checksum += UpdateFile->data[i];
 724              		.loc 2 187 0 discriminator 3
 725 002c 7B68     		ldr	r3, [r7, #4]
 726 002e 0133     		adds	r3, r3, #1
 727 0030 7B60     		str	r3, [r7, #4]
 728              	.L41:
 187:Src/spiops.c  ****         checksum += UpdateFile->data[i];
ARM GAS  /tmp/ccux5DbS.s 			page 18


 729              		.loc 2 187 0 is_stmt 0 discriminator 1
 730 0032 7B68     		ldr	r3, [r7, #4]
 731 0034 6B2B     		cmp	r3, #107
 732 0036 EFDD     		ble	.L42
 733              	.LBE3:
 189:Src/spiops.c  **** 
 190:Src/spiops.c  ****     if(checksum != SpiRxData->checksum)
 734              		.loc 2 190 0 is_stmt 1
 735 0038 194B     		ldr	r3, .L48+4
 736 003a 1B68     		ldr	r3, [r3]
 737 003c B3F87630 		ldrh	r3, [r3, #118]
 738 0040 FA89     		ldrh	r2, [r7, #14]
 739 0042 9A42     		cmp	r2, r3
 740 0044 01D0     		beq	.L43
 191:Src/spiops.c  ****         checksum_error = 1;
 741              		.loc 2 191 0
 742 0046 0123     		movs	r3, #1
 743 0048 BB81     		strh	r3, [r7, #12]	@ movhi
 744              	.L43:
 192:Src/spiops.c  **** 
 193:Src/spiops.c  ****     if(NextUpdateDataPackage != 1 && UpdateFile->current_sequence_number != NextUpdateDataPackage)
 745              		.loc 2 193 0
 746 004a 164B     		ldr	r3, .L48+8
 747 004c 1B68     		ldr	r3, [r3]
 748 004e 012B     		cmp	r3, #1
 749 0050 09D0     		beq	.L44
 750              		.loc 2 193 0 is_stmt 0 discriminator 1
 751 0052 124B     		ldr	r3, .L48
 752 0054 1B68     		ldr	r3, [r3]
 753 0056 5A68     		ldr	r2, [r3, #4]
 754 0058 124B     		ldr	r3, .L48+8
 755 005a 1B68     		ldr	r3, [r3]
 756 005c 9A42     		cmp	r2, r3
 757 005e 02D0     		beq	.L44
 194:Src/spiops.c  ****     {
 195:Src/spiops.c  ****         sequence_error = 1;
 758              		.loc 2 195 0 is_stmt 1
 759 0060 0123     		movs	r3, #1
 760 0062 7B81     		strh	r3, [r7, #10]	@ movhi
 761 0064 09E0     		b	.L45
 762              	.L44:
 196:Src/spiops.c  ****     }
 197:Src/spiops.c  ****     else
 198:Src/spiops.c  ****     {
 199:Src/spiops.c  ****         if(checksum_error == 0)
 763              		.loc 2 199 0
 764 0066 B7F90C30 		ldrsh	r3, [r7, #12]
 765 006a 002B     		cmp	r3, #0
 766 006c 05D1     		bne	.L45
 200:Src/spiops.c  ****            NextUpdateDataPackage = UpdateFile->current_sequence_number + 1;
 767              		.loc 2 200 0
 768 006e 0B4B     		ldr	r3, .L48
 769 0070 1B68     		ldr	r3, [r3]
 770 0072 5B68     		ldr	r3, [r3, #4]
 771 0074 0133     		adds	r3, r3, #1
 772 0076 0B4A     		ldr	r2, .L48+8
 773 0078 1360     		str	r3, [r2]
ARM GAS  /tmp/ccux5DbS.s 			page 19


 774              	.L45:
 201:Src/spiops.c  **** 
 202:Src/spiops.c  ****     }
 203:Src/spiops.c  **** 
 204:Src/spiops.c  ****      if(sequence_error != 1 && checksum_error != 1)
 775              		.loc 2 204 0
 776 007a B7F90A30 		ldrsh	r3, [r7, #10]
 777 007e 012B     		cmp	r3, #1
 778 0080 05D0     		beq	.L46
 779              		.loc 2 204 0 is_stmt 0 discriminator 1
 780 0082 B7F90C30 		ldrsh	r3, [r7, #12]
 781 0086 012B     		cmp	r3, #1
 782 0088 01D0     		beq	.L46
 205:Src/spiops.c  ****          return HAL_OK;
 783              		.loc 2 205 0 is_stmt 1
 784 008a 0023     		movs	r3, #0
 785 008c 00E0     		b	.L47
 786              	.L46:
 206:Src/spiops.c  ****      else
 207:Src/spiops.c  ****          return HAL_ERROR;
 787              		.loc 2 207 0
 788 008e 0123     		movs	r3, #1
 789              	.L47:
 208:Src/spiops.c  **** 
 209:Src/spiops.c  **** 
 210:Src/spiops.c  **** 
 211:Src/spiops.c  **** }
 790              		.loc 2 211 0
 791 0090 1846     		mov	r0, r3
 792 0092 1437     		adds	r7, r7, #20
 793              	.LCFI30:
 794              		.cfi_def_cfa_offset 4
 795 0094 BD46     		mov	sp, r7
 796              	.LCFI31:
 797              		.cfi_def_cfa_register 13
 798              		@ sp needed
 799 0096 5DF8047B 		ldr	r7, [sp], #4
 800              	.LCFI32:
 801              		.cfi_restore 7
 802              		.cfi_def_cfa_offset 0
 803 009a 7047     		bx	lr
 804              	.L49:
 805              		.align	2
 806              	.L48:
 807 009c 00000000 		.word	UpdateFile
 808 00a0 00000000 		.word	SpiRxData
 809 00a4 00000000 		.word	NextUpdateDataPackage
 810              		.cfi_endproc
 811              	.LFE149:
 813              		.section	.text.putUpdateDataResponse,"ax",%progbits
 814              		.align	1
 815              		.global	putUpdateDataResponse
 816              		.syntax unified
 817              		.thumb
 818              		.thumb_func
 819              		.fpu fpv4-sp-d16
 821              	putUpdateDataResponse:
ARM GAS  /tmp/ccux5DbS.s 			page 20


 822              	.LFB150:
 212:Src/spiops.c  **** 
 213:Src/spiops.c  **** 
 214:Src/spiops.c  **** 
 215:Src/spiops.c  **** void putUpdateDataResponse()
 216:Src/spiops.c  **** {
 823              		.loc 2 216 0
 824              		.cfi_startproc
 825              		@ args = 0, pretend = 0, frame = 0
 826              		@ frame_needed = 1, uses_anonymous_args = 0
 827 0000 80B5     		push	{r7, lr}
 828              	.LCFI33:
 829              		.cfi_def_cfa_offset 8
 830              		.cfi_offset 7, -8
 831              		.cfi_offset 14, -4
 832 0002 00AF     		add	r7, sp, #0
 833              	.LCFI34:
 834              		.cfi_def_cfa_register 7
 217:Src/spiops.c  **** 
 218:Src/spiops.c  **** 
 219:Src/spiops.c  **** 
 220:Src/spiops.c  ****     xSemaphoreTake(spiMutexHandle, (TickType_t)1000);
 835              		.loc 2 220 0
 836 0004 184B     		ldr	r3, .L51
 837 0006 1868     		ldr	r0, [r3]
 838 0008 0023     		movs	r3, #0
 839 000a 4FF47A72 		mov	r2, #1000
 840 000e 0021     		movs	r1, #0
 841 0010 FFF7FEFF 		bl	xQueueGenericReceive
 221:Src/spiops.c  **** 
 222:Src/spiops.c  ****     SpiTxData->header = 'U' | 'P' << 8;
 842              		.loc 2 222 0
 843 0014 154B     		ldr	r3, .L51+4
 844 0016 1B68     		ldr	r3, [r3]
 845 0018 45F25502 		movw	r2, #20565
 846 001c 1A80     		strh	r2, [r3]	@ movhi
 223:Src/spiops.c  ****     SpiTxData->data[4] = NextUpdateDataPackage & 0xff;
 847              		.loc 2 223 0
 848 001e 134B     		ldr	r3, .L51+4
 849 0020 1B68     		ldr	r3, [r3]
 850 0022 134A     		ldr	r2, .L51+8
 851 0024 1268     		ldr	r2, [r2]
 852 0026 D2B2     		uxtb	r2, r2
 853 0028 9A71     		strb	r2, [r3, #6]
 224:Src/spiops.c  ****     SpiTxData->data[5] = (NextUpdateDataPackage >>  8) & 0xff;
 854              		.loc 2 224 0
 855 002a 104B     		ldr	r3, .L51+4
 856 002c 1B68     		ldr	r3, [r3]
 857 002e 104A     		ldr	r2, .L51+8
 858 0030 1268     		ldr	r2, [r2]
 859 0032 120A     		lsrs	r2, r2, #8
 860 0034 D2B2     		uxtb	r2, r2
 861 0036 DA71     		strb	r2, [r3, #7]
 225:Src/spiops.c  ****     SpiTxData->data[6] = (NextUpdateDataPackage >> 16) & 0xff;
 862              		.loc 2 225 0
 863 0038 0C4B     		ldr	r3, .L51+4
 864 003a 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccux5DbS.s 			page 21


 865 003c 0C4A     		ldr	r2, .L51+8
 866 003e 1268     		ldr	r2, [r2]
 867 0040 120C     		lsrs	r2, r2, #16
 868 0042 D2B2     		uxtb	r2, r2
 869 0044 1A72     		strb	r2, [r3, #8]
 226:Src/spiops.c  ****     SpiTxData->data[7] = (NextUpdateDataPackage >> 24) & 0xff;
 870              		.loc 2 226 0
 871 0046 094B     		ldr	r3, .L51+4
 872 0048 1B68     		ldr	r3, [r3]
 873 004a 094A     		ldr	r2, .L51+8
 874 004c 1268     		ldr	r2, [r2]
 875 004e 120E     		lsrs	r2, r2, #24
 876 0050 D2B2     		uxtb	r2, r2
 877 0052 5A72     		strb	r2, [r3, #9]
 227:Src/spiops.c  **** 
 228:Src/spiops.c  ****     xSemaphoreGive(spiMutexHandle);
 878              		.loc 2 228 0
 879 0054 044B     		ldr	r3, .L51
 880 0056 1868     		ldr	r0, [r3]
 881 0058 0023     		movs	r3, #0
 882 005a 0022     		movs	r2, #0
 883 005c 0021     		movs	r1, #0
 884 005e FFF7FEFF 		bl	xQueueGenericSend
 229:Src/spiops.c  **** 
 230:Src/spiops.c  **** }
 885              		.loc 2 230 0
 886 0062 00BF     		nop
 887 0064 80BD     		pop	{r7, pc}
 888              	.L52:
 889 0066 00BF     		.align	2
 890              	.L51:
 891 0068 00000000 		.word	spiMutexHandle
 892 006c 00000000 		.word	SpiTxData
 893 0070 00000000 		.word	NextUpdateDataPackage
 894              		.cfi_endproc
 895              	.LFE150:
 897              		.section	.text.putControlDataResponse,"ax",%progbits
 898              		.align	1
 899              		.global	putControlDataResponse
 900              		.syntax unified
 901              		.thumb
 902              		.thumb_func
 903              		.fpu fpv4-sp-d16
 905              	putControlDataResponse:
 906              	.LFB151:
 231:Src/spiops.c  **** 
 232:Src/spiops.c  **** 
 233:Src/spiops.c  **** 
 234:Src/spiops.c  **** void putControlDataResponse()
 235:Src/spiops.c  **** {
 907              		.loc 2 235 0
 908              		.cfi_startproc
 909              		@ args = 0, pretend = 0, frame = 0
 910              		@ frame_needed = 1, uses_anonymous_args = 0
 911 0000 80B5     		push	{r7, lr}
 912              	.LCFI35:
 913              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccux5DbS.s 			page 22


 914              		.cfi_offset 7, -8
 915              		.cfi_offset 14, -4
 916 0002 00AF     		add	r7, sp, #0
 917              	.LCFI36:
 918              		.cfi_def_cfa_register 7
 236:Src/spiops.c  **** 
 237:Src/spiops.c  ****     xSemaphoreTake(spiMutexHandle, (TickType_t)1000);
 919              		.loc 2 237 0
 920 0004 174B     		ldr	r3, .L54
 921 0006 1868     		ldr	r0, [r3]
 922 0008 0023     		movs	r3, #0
 923 000a 4FF47A72 		mov	r2, #1000
 924 000e 0021     		movs	r1, #0
 925 0010 FFF7FEFF 		bl	xQueueGenericReceive
 238:Src/spiops.c  **** 
 239:Src/spiops.c  ****     SpiTxData->header = (('E') | (('N') << 8 ));
 926              		.loc 2 239 0
 927 0014 144B     		ldr	r3, .L54+4
 928 0016 1B68     		ldr	r3, [r3]
 929 0018 44F64562 		movw	r2, #20037
 930 001c 1A80     		strh	r2, [r3]	@ movhi
 240:Src/spiops.c  ****     memcpy(&SpiTxData->data[0], (unsigned char *)EnvironmentData, SPI_DATA_SIZE);
 931              		.loc 2 240 0
 932 001e 124B     		ldr	r3, .L54+4
 933 0020 1B68     		ldr	r3, [r3]
 934 0022 981C     		adds	r0, r3, #2
 935 0024 114B     		ldr	r3, .L54+8
 936 0026 1B68     		ldr	r3, [r3]
 937 0028 7422     		movs	r2, #116
 938 002a 1946     		mov	r1, r3
 939 002c FFF7FEFF 		bl	memcpy
 241:Src/spiops.c  ****     memcpy(&SpiTxData->data[99], (unsigned char *)&EnvironmentData->sensor_data, sizeof(SENSOR_DATA
 940              		.loc 2 241 0
 941 0030 0D4B     		ldr	r3, .L54+4
 942 0032 1B68     		ldr	r3, [r3]
 943 0034 03F16500 		add	r0, r3, #101
 944 0038 0C4B     		ldr	r3, .L54+8
 945 003a 1B68     		ldr	r3, [r3]
 946 003c 6433     		adds	r3, r3, #100
 947 003e 1422     		movs	r2, #20
 948 0040 1946     		mov	r1, r3
 949 0042 FFF7FEFF 		bl	memcpy
 242:Src/spiops.c  ****     SpiTxData->checksum = (('C') | (('H') << 8 ));
 950              		.loc 2 242 0
 951 0046 084B     		ldr	r3, .L54+4
 952 0048 1B68     		ldr	r3, [r3]
 953 004a 44F64302 		movw	r2, #18499
 954 004e A3F87620 		strh	r2, [r3, #118]	@ movhi
 243:Src/spiops.c  **** 
 244:Src/spiops.c  ****     xSemaphoreGive(spiMutexHandle);
 955              		.loc 2 244 0
 956 0052 044B     		ldr	r3, .L54
 957 0054 1868     		ldr	r0, [r3]
 958 0056 0023     		movs	r3, #0
 959 0058 0022     		movs	r2, #0
 960 005a 0021     		movs	r1, #0
 961 005c FFF7FEFF 		bl	xQueueGenericSend
ARM GAS  /tmp/ccux5DbS.s 			page 23


 245:Src/spiops.c  **** 
 246:Src/spiops.c  **** }
 962              		.loc 2 246 0
 963 0060 00BF     		nop
 964 0062 80BD     		pop	{r7, pc}
 965              	.L55:
 966              		.align	2
 967              	.L54:
 968 0064 00000000 		.word	spiMutexHandle
 969 0068 00000000 		.word	SpiTxData
 970 006c 00000000 		.word	EnvironmentData
 971              		.cfi_endproc
 972              	.LFE151:
 974              		.section	.text.putEnvironmentData,"ax",%progbits
 975              		.align	1
 976              		.global	putEnvironmentData
 977              		.syntax unified
 978              		.thumb
 979              		.thumb_func
 980              		.fpu fpv4-sp-d16
 982              	putEnvironmentData:
 983              	.LFB152:
 247:Src/spiops.c  **** 
 248:Src/spiops.c  **** 
 249:Src/spiops.c  **** 
 250:Src/spiops.c  **** void putEnvironmentData()
 251:Src/spiops.c  **** {
 984              		.loc 2 251 0
 985              		.cfi_startproc
 986              		@ args = 0, pretend = 0, frame = 0
 987              		@ frame_needed = 1, uses_anonymous_args = 0
 988 0000 80B5     		push	{r7, lr}
 989              	.LCFI37:
 990              		.cfi_def_cfa_offset 8
 991              		.cfi_offset 7, -8
 992              		.cfi_offset 14, -4
 993 0002 00AF     		add	r7, sp, #0
 994              	.LCFI38:
 995              		.cfi_def_cfa_register 7
 252:Src/spiops.c  **** 
 253:Src/spiops.c  ****     xSemaphoreTake(spiMutexHandle, (TickType_t)1000);
 996              		.loc 2 253 0
 997 0004 174B     		ldr	r3, .L57
 998 0006 1868     		ldr	r0, [r3]
 999 0008 0023     		movs	r3, #0
 1000 000a 4FF47A72 		mov	r2, #1000
 1001 000e 0021     		movs	r1, #0
 1002 0010 FFF7FEFF 		bl	xQueueGenericReceive
 254:Src/spiops.c  **** 
 255:Src/spiops.c  ****     SpiTxData->header = (('E') | (('N') << 8 ));
 1003              		.loc 2 255 0
 1004 0014 144B     		ldr	r3, .L57+4
 1005 0016 1B68     		ldr	r3, [r3]
 1006 0018 44F64562 		movw	r2, #20037
 1007 001c 1A80     		strh	r2, [r3]	@ movhi
 256:Src/spiops.c  ****     memcpy(&SpiTxData->data[0], (unsigned char *)EnvironmentData, SPI_DATA_SIZE);
 1008              		.loc 2 256 0
ARM GAS  /tmp/ccux5DbS.s 			page 24


 1009 001e 124B     		ldr	r3, .L57+4
 1010 0020 1B68     		ldr	r3, [r3]
 1011 0022 981C     		adds	r0, r3, #2
 1012 0024 114B     		ldr	r3, .L57+8
 1013 0026 1B68     		ldr	r3, [r3]
 1014 0028 7422     		movs	r2, #116
 1015 002a 1946     		mov	r1, r3
 1016 002c FFF7FEFF 		bl	memcpy
 257:Src/spiops.c  ****     memcpy(&SpiTxData->data[99], (unsigned char *)&EnvironmentData->sensor_data, sizeof(SENSOR_DATA
 1017              		.loc 2 257 0
 1018 0030 0D4B     		ldr	r3, .L57+4
 1019 0032 1B68     		ldr	r3, [r3]
 1020 0034 03F16500 		add	r0, r3, #101
 1021 0038 0C4B     		ldr	r3, .L57+8
 1022 003a 1B68     		ldr	r3, [r3]
 1023 003c 6433     		adds	r3, r3, #100
 1024 003e 1422     		movs	r2, #20
 1025 0040 1946     		mov	r1, r3
 1026 0042 FFF7FEFF 		bl	memcpy
 258:Src/spiops.c  ****     SpiTxData->checksum = (('C') | (('H') << 8 ));
 1027              		.loc 2 258 0
 1028 0046 084B     		ldr	r3, .L57+4
 1029 0048 1B68     		ldr	r3, [r3]
 1030 004a 44F64302 		movw	r2, #18499
 1031 004e A3F87620 		strh	r2, [r3, #118]	@ movhi
 259:Src/spiops.c  **** 
 260:Src/spiops.c  ****     xSemaphoreGive(spiMutexHandle);
 1032              		.loc 2 260 0
 1033 0052 044B     		ldr	r3, .L57
 1034 0054 1868     		ldr	r0, [r3]
 1035 0056 0023     		movs	r3, #0
 1036 0058 0022     		movs	r2, #0
 1037 005a 0021     		movs	r1, #0
 1038 005c FFF7FEFF 		bl	xQueueGenericSend
 261:Src/spiops.c  **** 
 262:Src/spiops.c  **** }
 1039              		.loc 2 262 0
 1040 0060 00BF     		nop
 1041 0062 80BD     		pop	{r7, pc}
 1042              	.L58:
 1043              		.align	2
 1044              	.L57:
 1045 0064 00000000 		.word	spiMutexHandle
 1046 0068 00000000 		.word	SpiTxData
 1047 006c 00000000 		.word	EnvironmentData
 1048              		.cfi_endproc
 1049              	.LFE152:
 1051              		.section	.rodata
 1052 0025 000000   		.align	2
 1053              	.LC11:
 1054 0028 77726974 		.ascii	"write error\015\012\000"
 1054      65206572 
 1054      726F720D 
 1054      0A00
 1055 0036 0000     		.align	2
 1056              	.LC12:
 1057 0038 55706461 		.ascii	"Update file uploading has been finished.\015\012\000"
ARM GAS  /tmp/ccux5DbS.s 			page 25


 1057      74652066 
 1057      696C6520 
 1057      75706C6F 
 1057      6164696E 
 1058 0063 00       		.align	2
 1059              	.LC13:
 1060 0064 52657374 		.ascii	"Restarting...\015\012\000"
 1060      61727469 
 1060      6E672E2E 
 1060      2E0D0A00 
 1061              		.section	.text.processUpdateData,"ax",%progbits
 1062              		.align	1
 1063              		.global	processUpdateData
 1064              		.syntax unified
 1065              		.thumb
 1066              		.thumb_func
 1067              		.fpu fpv4-sp-d16
 1069              	processUpdateData:
 1070              	.LFB153:
 263:Src/spiops.c  **** 
 264:Src/spiops.c  **** void processUpdateData()
 265:Src/spiops.c  **** {
 1071              		.loc 2 265 0
 1072              		.cfi_startproc
 1073              		@ args = 0, pretend = 0, frame = 16
 1074              		@ frame_needed = 1, uses_anonymous_args = 0
 1075 0000 90B5     		push	{r4, r7, lr}
 1076              	.LCFI39:
 1077              		.cfi_def_cfa_offset 12
 1078              		.cfi_offset 4, -12
 1079              		.cfi_offset 7, -8
 1080              		.cfi_offset 14, -4
 1081 0002 85B0     		sub	sp, sp, #20
 1082              	.LCFI40:
 1083              		.cfi_def_cfa_offset 32
 1084 0004 00AF     		add	r7, sp, #0
 1085              	.LCFI41:
 1086              		.cfi_def_cfa_register 7
 266:Src/spiops.c  **** 
 267:Src/spiops.c  **** 
 268:Src/spiops.c  ****     HAL_StatusTypeDef flash_status;
 269:Src/spiops.c  **** 
 270:Src/spiops.c  ****     if(UpdateFile->current_sequence_number == 1)
 1087              		.loc 2 270 0
 1088 0006 624B     		ldr	r3, .L70
 1089 0008 1B68     		ldr	r3, [r3]
 1090 000a 5B68     		ldr	r3, [r3, #4]
 1091 000c 012B     		cmp	r3, #1
 1092 000e 69D1     		bne	.L60
 1093              	.LBB4:
 271:Src/spiops.c  ****     {
 272:Src/spiops.c  **** 
 273:Src/spiops.c  ****         uint32_t total_size = SPI_ENTITY_SIZE*UpdateFile->total_sequence_number;
 1094              		.loc 2 273 0
 1095 0010 5F4B     		ldr	r3, .L70
 1096 0012 1B68     		ldr	r3, [r3]
 1097 0014 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccux5DbS.s 			page 26


 1098 0016 6C22     		movs	r2, #108
 1099 0018 02FB03F3 		mul	r3, r2, r3
 1100 001c BB60     		str	r3, [r7, #8]
 274:Src/spiops.c  **** 
 275:Src/spiops.c  **** 
 276:Src/spiops.c  **** 
 277:Src/spiops.c  ****         HAL_FLASH_Unlock();
 1101              		.loc 2 277 0
 1102 001e FFF7FEFF 		bl	HAL_FLASH_Unlock
 278:Src/spiops.c  **** 
 279:Src/spiops.c  ****         flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS, total_size & 0xff);
 1103              		.loc 2 279 0
 1104 0022 BB68     		ldr	r3, [r7, #8]
 1105 0024 4FF00004 		mov	r4, #0
 1106 0028 4FF0FF01 		mov	r1, #255
 1107 002c 4FF00002 		mov	r2, #0
 1108 0030 03EA0103 		and	r3, r3, r1
 1109 0034 04EA0204 		and	r4, r4, r2
 1110 0038 1A46     		mov	r2, r3
 1111 003a 2346     		mov	r3, r4
 1112 003c 5549     		ldr	r1, .L70+4
 1113 003e 0020     		movs	r0, #0
 1114 0040 FFF7FEFF 		bl	HAL_FLASH_Program
 1115 0044 0346     		mov	r3, r0
 1116 0046 FB71     		strb	r3, [r7, #7]
 280:Src/spiops.c  **** 
 281:Src/spiops.c  ****         if(flash_status != HAL_OK)
 1117              		.loc 2 281 0
 1118 0048 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1119 004a 002B     		cmp	r3, #0
 1120 004c 02D0     		beq	.L61
 282:Src/spiops.c  ****             mprintf("write error\r\n");
 1121              		.loc 2 282 0
 1122 004e 5248     		ldr	r0, .L70+8
 1123 0050 FFF7FEFF 		bl	mprintf
 1124              	.L61:
 283:Src/spiops.c  **** 
 284:Src/spiops.c  ****         flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS + 1, (total_size >> 8) &
 1125              		.loc 2 284 0
 1126 0054 BB68     		ldr	r3, [r7, #8]
 1127 0056 1B0A     		lsrs	r3, r3, #8
 1128 0058 4FF00004 		mov	r4, #0
 1129 005c 4FF0FF01 		mov	r1, #255
 1130 0060 4FF00002 		mov	r2, #0
 1131 0064 03EA0103 		and	r3, r3, r1
 1132 0068 04EA0204 		and	r4, r4, r2
 1133 006c 1A46     		mov	r2, r3
 1134 006e 2346     		mov	r3, r4
 1135 0070 4A49     		ldr	r1, .L70+12
 1136 0072 0020     		movs	r0, #0
 1137 0074 FFF7FEFF 		bl	HAL_FLASH_Program
 1138 0078 0346     		mov	r3, r0
 1139 007a FB71     		strb	r3, [r7, #7]
 285:Src/spiops.c  **** 
 286:Src/spiops.c  ****         if(flash_status != HAL_OK)
 1140              		.loc 2 286 0
 1141 007c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  /tmp/ccux5DbS.s 			page 27


 1142 007e 002B     		cmp	r3, #0
 1143 0080 02D0     		beq	.L62
 287:Src/spiops.c  ****             mprintf("write error\r\n");
 1144              		.loc 2 287 0
 1145 0082 4548     		ldr	r0, .L70+8
 1146 0084 FFF7FEFF 		bl	mprintf
 1147              	.L62:
 288:Src/spiops.c  **** 
 289:Src/spiops.c  ****         flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS + 2, (total_size >> 16) 
 1148              		.loc 2 289 0
 1149 0088 BB68     		ldr	r3, [r7, #8]
 1150 008a 1B0C     		lsrs	r3, r3, #16
 1151 008c 4FF00004 		mov	r4, #0
 1152 0090 4FF0FF01 		mov	r1, #255
 1153 0094 4FF00002 		mov	r2, #0
 1154 0098 03EA0103 		and	r3, r3, r1
 1155 009c 04EA0204 		and	r4, r4, r2
 1156 00a0 1A46     		mov	r2, r3
 1157 00a2 2346     		mov	r3, r4
 1158 00a4 3E49     		ldr	r1, .L70+16
 1159 00a6 0020     		movs	r0, #0
 1160 00a8 FFF7FEFF 		bl	HAL_FLASH_Program
 1161 00ac 0346     		mov	r3, r0
 1162 00ae FB71     		strb	r3, [r7, #7]
 290:Src/spiops.c  **** 
 291:Src/spiops.c  ****         if(flash_status != HAL_OK)
 1163              		.loc 2 291 0
 1164 00b0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1165 00b2 002B     		cmp	r3, #0
 1166 00b4 02D0     		beq	.L63
 292:Src/spiops.c  ****             mprintf("write error\r\n");
 1167              		.loc 2 292 0
 1168 00b6 3848     		ldr	r0, .L70+8
 1169 00b8 FFF7FEFF 		bl	mprintf
 1170              	.L63:
 293:Src/spiops.c  **** 
 294:Src/spiops.c  ****         flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS + 3, (total_size >> 24) 
 1171              		.loc 2 294 0
 1172 00bc BB68     		ldr	r3, [r7, #8]
 1173 00be 1B0E     		lsrs	r3, r3, #24
 1174 00c0 4FF00004 		mov	r4, #0
 1175 00c4 1A46     		mov	r2, r3
 1176 00c6 2346     		mov	r3, r4
 1177 00c8 3649     		ldr	r1, .L70+20
 1178 00ca 0020     		movs	r0, #0
 1179 00cc FFF7FEFF 		bl	HAL_FLASH_Program
 1180 00d0 0346     		mov	r3, r0
 1181 00d2 FB71     		strb	r3, [r7, #7]
 295:Src/spiops.c  **** 
 296:Src/spiops.c  ****         if(flash_status != HAL_OK)
 1182              		.loc 2 296 0
 1183 00d4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1184 00d6 002B     		cmp	r3, #0
 1185 00d8 02D0     		beq	.L64
 297:Src/spiops.c  ****             mprintf("write error\r\n");
 1186              		.loc 2 297 0
 1187 00da 2F48     		ldr	r0, .L70+8
ARM GAS  /tmp/ccux5DbS.s 			page 28


 1188 00dc FFF7FEFF 		bl	mprintf
 1189              	.L64:
 298:Src/spiops.c  **** 
 299:Src/spiops.c  ****         HAL_FLASH_Lock();
 1190              		.loc 2 299 0
 1191 00e0 FFF7FEFF 		bl	HAL_FLASH_Lock
 1192              	.L60:
 1193              	.LBE4:
 300:Src/spiops.c  **** 
 301:Src/spiops.c  ****     }
 302:Src/spiops.c  **** 
 303:Src/spiops.c  **** 
 304:Src/spiops.c  **** 
 305:Src/spiops.c  ****     HAL_FLASH_Unlock();
 1194              		.loc 2 305 0
 1195 00e4 FFF7FEFF 		bl	HAL_FLASH_Unlock
 1196              	.LBB5:
 306:Src/spiops.c  **** 
 307:Src/spiops.c  ****     for(int i=0; i<SPI_ENTITY_SIZE; i++)
 1197              		.loc 2 307 0
 1198 00e8 0023     		movs	r3, #0
 1199 00ea FB60     		str	r3, [r7, #12]
 1200 00ec 22E0     		b	.L65
 1201              	.L67:
 308:Src/spiops.c  ****     {
 309:Src/spiops.c  ****         flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, (SECTOR6_ADDRESS + i + 4) + (SPI_ENTITY_
 1202              		.loc 2 309 0
 1203 00ee 284B     		ldr	r3, .L70
 1204 00f0 1B68     		ldr	r3, [r3]
 1205 00f2 5B68     		ldr	r3, [r3, #4]
 1206 00f4 6C22     		movs	r2, #108
 1207 00f6 02FB03F2 		mul	r2, r2, r3
 1208 00fa FB68     		ldr	r3, [r7, #12]
 1209 00fc 1344     		add	r3, r3, r2
 1210 00fe 2A49     		ldr	r1, .L70+24
 1211 0100 1944     		add	r1, r1, r3
 1212 0102 234B     		ldr	r3, .L70
 1213 0104 1A68     		ldr	r2, [r3]
 1214 0106 FB68     		ldr	r3, [r7, #12]
 1215 0108 1344     		add	r3, r3, r2
 1216 010a 0833     		adds	r3, r3, #8
 1217 010c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1218 010e DBB2     		uxtb	r3, r3
 1219 0110 4FF00004 		mov	r4, #0
 1220 0114 1A46     		mov	r2, r3
 1221 0116 2346     		mov	r3, r4
 1222 0118 0020     		movs	r0, #0
 1223 011a FFF7FEFF 		bl	HAL_FLASH_Program
 1224 011e 0346     		mov	r3, r0
 1225 0120 FB71     		strb	r3, [r7, #7]
 310:Src/spiops.c  **** 
 311:Src/spiops.c  ****         if(flash_status != HAL_OK)
 1226              		.loc 2 311 0
 1227 0122 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1228 0124 002B     		cmp	r3, #0
 1229 0126 02D0     		beq	.L66
 312:Src/spiops.c  ****             mprintf("write error\r\n");
ARM GAS  /tmp/ccux5DbS.s 			page 29


 1230              		.loc 2 312 0
 1231 0128 1B48     		ldr	r0, .L70+8
 1232 012a FFF7FEFF 		bl	mprintf
 1233              	.L66:
 307:Src/spiops.c  ****     {
 1234              		.loc 2 307 0 discriminator 2
 1235 012e FB68     		ldr	r3, [r7, #12]
 1236 0130 0133     		adds	r3, r3, #1
 1237 0132 FB60     		str	r3, [r7, #12]
 1238              	.L65:
 307:Src/spiops.c  ****     {
 1239              		.loc 2 307 0 is_stmt 0 discriminator 1
 1240 0134 FB68     		ldr	r3, [r7, #12]
 1241 0136 6B2B     		cmp	r3, #107
 1242 0138 D9DD     		ble	.L67
 1243              	.LBE5:
 313:Src/spiops.c  ****     }
 314:Src/spiops.c  **** 
 315:Src/spiops.c  ****     HAL_FLASH_Lock();
 1244              		.loc 2 315 0 is_stmt 1
 1245 013a FFF7FEFF 		bl	HAL_FLASH_Lock
 316:Src/spiops.c  **** 
 317:Src/spiops.c  ****     if(UpdateFile->current_sequence_number == UpdateFile->total_sequence_number)
 1246              		.loc 2 317 0
 1247 013e 144B     		ldr	r3, .L70
 1248 0140 1B68     		ldr	r3, [r3]
 1249 0142 5A68     		ldr	r2, [r3, #4]
 1250 0144 124B     		ldr	r3, .L70
 1251 0146 1B68     		ldr	r3, [r3]
 1252 0148 1B68     		ldr	r3, [r3]
 1253 014a 9A42     		cmp	r2, r3
 1254 014c 1CD1     		bne	.L69
 318:Src/spiops.c  ****     {
 319:Src/spiops.c  **** 
 320:Src/spiops.c  **** 
 321:Src/spiops.c  ****         mprintf("Update file uploading has been finished.\r\n");
 1255              		.loc 2 321 0
 1256 014e 1748     		ldr	r0, .L70+28
 1257 0150 FFF7FEFF 		bl	mprintf
 322:Src/spiops.c  **** 
 323:Src/spiops.c  ****         mprintf("Restarting...\r\n");
 1258              		.loc 2 323 0
 1259 0154 1648     		ldr	r0, .L70+32
 1260 0156 FFF7FEFF 		bl	mprintf
 324:Src/spiops.c  **** 
 325:Src/spiops.c  ****         SpiRxData->header = 0;
 1261              		.loc 2 325 0
 1262 015a 164B     		ldr	r3, .L70+36
 1263 015c 1B68     		ldr	r3, [r3]
 1264 015e 0022     		movs	r2, #0
 1265 0160 1A80     		strh	r2, [r3]	@ movhi
 326:Src/spiops.c  ****         SpiRxData->checksum = 0;
 1266              		.loc 2 326 0
 1267 0162 144B     		ldr	r3, .L70+36
 1268 0164 1B68     		ldr	r3, [r3]
 1269 0166 0022     		movs	r2, #0
 1270 0168 A3F87620 		strh	r2, [r3, #118]	@ movhi
ARM GAS  /tmp/ccux5DbS.s 			page 30


 327:Src/spiops.c  ****         UpdateFile->current_sequence_number = 0;
 1271              		.loc 2 327 0
 1272 016c 084B     		ldr	r3, .L70
 1273 016e 1B68     		ldr	r3, [r3]
 1274 0170 0022     		movs	r2, #0
 1275 0172 5A60     		str	r2, [r3, #4]
 328:Src/spiops.c  ****         UpdateFile->total_sequence_number = -1;
 1276              		.loc 2 328 0
 1277 0174 064B     		ldr	r3, .L70
 1278 0176 1B68     		ldr	r3, [r3]
 1279 0178 4FF0FF32 		mov	r2, #-1
 1280 017c 1A60     		str	r2, [r3]
 329:Src/spiops.c  **** 
 330:Src/spiops.c  **** 
 331:Src/spiops.c  ****         osDelay(50);
 1281              		.loc 2 331 0
 1282 017e 3220     		movs	r0, #50
 1283 0180 FFF7FEFF 		bl	osDelay
 332:Src/spiops.c  **** 
 333:Src/spiops.c  ****         HAL_NVIC_SystemReset();
 1284              		.loc 2 333 0
 1285 0184 FFF7FEFF 		bl	HAL_NVIC_SystemReset
 1286              	.L69:
 334:Src/spiops.c  **** 
 335:Src/spiops.c  **** 
 336:Src/spiops.c  ****     }
 337:Src/spiops.c  **** 
 338:Src/spiops.c  **** 
 339:Src/spiops.c  **** }
 1287              		.loc 2 339 0
 1288 0188 00BF     		nop
 1289 018a 1437     		adds	r7, r7, #20
 1290              	.LCFI42:
 1291              		.cfi_def_cfa_offset 12
 1292 018c BD46     		mov	sp, r7
 1293              	.LCFI43:
 1294              		.cfi_def_cfa_register 13
 1295              		@ sp needed
 1296 018e 90BD     		pop	{r4, r7, pc}
 1297              	.L71:
 1298              		.align	2
 1299              	.L70:
 1300 0190 00000000 		.word	UpdateFile
 1301 0194 00000808 		.word	134742016
 1302 0198 28000000 		.word	.LC11
 1303 019c 01000808 		.word	134742017
 1304 01a0 02000808 		.word	134742018
 1305 01a4 03000808 		.word	134742019
 1306 01a8 98FF0708 		.word	134741912
 1307 01ac 38000000 		.word	.LC12
 1308 01b0 64000000 		.word	.LC13
 1309 01b4 00000000 		.word	SpiRxData
 1310              		.cfi_endproc
 1311              	.LFE153:
 1313              		.section	.rodata
 1314              		.align	2
 1315              	.LC14:
ARM GAS  /tmp/ccux5DbS.s 			page 31


 1316 0074 57726974 		.ascii	"Writing data to memory\015\012\000"
 1316      696E6720 
 1316      64617461 
 1316      20746F20 
 1316      6D656D6F 
 1317 008d 000000   		.align	2
 1318              	.LC15:
 1319 0090 57726974 		.ascii	"Writing is done\015\012\000"
 1319      696E6720 
 1319      69732064 
 1319      6F6E650D 
 1319      0A00
 1320              		.section	.text.writeUpdateFileToFlash,"ax",%progbits
 1321              		.align	1
 1322              		.global	writeUpdateFileToFlash
 1323              		.syntax unified
 1324              		.thumb
 1325              		.thumb_func
 1326              		.fpu fpv4-sp-d16
 1328              	writeUpdateFileToFlash:
 1329              	.LFB154:
 340:Src/spiops.c  **** 
 341:Src/spiops.c  **** 
 342:Src/spiops.c  **** void writeUpdateFileToFlash(unsigned char *UpdateFileData)
 343:Src/spiops.c  **** {
 1330              		.loc 2 343 0
 1331              		.cfi_startproc
 1332              		@ args = 0, pretend = 0, frame = 24
 1333              		@ frame_needed = 1, uses_anonymous_args = 0
 1334 0000 90B5     		push	{r4, r7, lr}
 1335              	.LCFI44:
 1336              		.cfi_def_cfa_offset 12
 1337              		.cfi_offset 4, -12
 1338              		.cfi_offset 7, -8
 1339              		.cfi_offset 14, -4
 1340 0002 87B0     		sub	sp, sp, #28
 1341              	.LCFI45:
 1342              		.cfi_def_cfa_offset 40
 1343 0004 00AF     		add	r7, sp, #0
 1344              	.LCFI46:
 1345              		.cfi_def_cfa_register 7
 1346 0006 7860     		str	r0, [r7, #4]
 344:Src/spiops.c  **** 
 345:Src/spiops.c  **** 
 346:Src/spiops.c  ****     HAL_StatusTypeDef flash_status;
 347:Src/spiops.c  ****     uint32_t total_size;
 348:Src/spiops.c  **** 
 349:Src/spiops.c  **** 
 350:Src/spiops.c  ****     mprintf("Writing data to memory\r\n");
 1347              		.loc 2 350 0
 1348 0008 5248     		ldr	r0, .L80
 1349 000a FFF7FEFF 		bl	mprintf
 351:Src/spiops.c  ****     HAL_FLASH_Unlock();
 1350              		.loc 2 351 0
 1351 000e FFF7FEFF 		bl	HAL_FLASH_Unlock
 352:Src/spiops.c  ****     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAER
 1352              		.loc 2 352 0
ARM GAS  /tmp/ccux5DbS.s 			page 32


 1353 0012 514B     		ldr	r3, .L80+4
 1354 0014 3322     		movs	r2, #51
 1355 0016 DA60     		str	r2, [r3, #12]
 353:Src/spiops.c  ****     FLASH_Erase_Sector(FLASH_SECTOR_6, VOLTAGE_RANGE_3);
 1356              		.loc 2 353 0
 1357 0018 0221     		movs	r1, #2
 1358 001a 0620     		movs	r0, #6
 1359 001c FFF7FEFF 		bl	FLASH_Erase_Sector
 354:Src/spiops.c  **** 
 355:Src/spiops.c  **** 
 356:Src/spiops.c  ****     total_size = SPI_ENTITY_SIZE * (UpdateFile->total_sequence_number);
 1360              		.loc 2 356 0
 1361 0020 4E4B     		ldr	r3, .L80+8
 1362 0022 1B68     		ldr	r3, [r3]
 1363 0024 1B68     		ldr	r3, [r3]
 1364 0026 6C22     		movs	r2, #108
 1365 0028 02FB03F3 		mul	r3, r2, r3
 1366 002c 3B61     		str	r3, [r7, #16]
 357:Src/spiops.c  **** 
 358:Src/spiops.c  **** 
 359:Src/spiops.c  ****     flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS, total_size & 0xff);
 1367              		.loc 2 359 0
 1368 002e 3B69     		ldr	r3, [r7, #16]
 1369 0030 4FF00004 		mov	r4, #0
 1370 0034 4FF0FF01 		mov	r1, #255
 1371 0038 4FF00002 		mov	r2, #0
 1372 003c 03EA0103 		and	r3, r3, r1
 1373 0040 04EA0204 		and	r4, r4, r2
 1374 0044 1A46     		mov	r2, r3
 1375 0046 2346     		mov	r3, r4
 1376 0048 4549     		ldr	r1, .L80+12
 1377 004a 0020     		movs	r0, #0
 1378 004c FFF7FEFF 		bl	HAL_FLASH_Program
 1379 0050 0346     		mov	r3, r0
 1380 0052 FB73     		strb	r3, [r7, #15]
 360:Src/spiops.c  **** 
 361:Src/spiops.c  ****     if(flash_status != HAL_OK)
 1381              		.loc 2 361 0
 1382 0054 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1383 0056 002B     		cmp	r3, #0
 1384 0058 02D0     		beq	.L73
 362:Src/spiops.c  ****         mprintf("write error\r\n");
 1385              		.loc 2 362 0
 1386 005a 4248     		ldr	r0, .L80+16
 1387 005c FFF7FEFF 		bl	mprintf
 1388              	.L73:
 363:Src/spiops.c  **** 
 364:Src/spiops.c  ****     flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS + 1, (total_size >> 8) & 0xf
 1389              		.loc 2 364 0
 1390 0060 3B69     		ldr	r3, [r7, #16]
 1391 0062 1B0A     		lsrs	r3, r3, #8
 1392 0064 4FF00004 		mov	r4, #0
 1393 0068 4FF0FF01 		mov	r1, #255
 1394 006c 4FF00002 		mov	r2, #0
 1395 0070 03EA0103 		and	r3, r3, r1
 1396 0074 04EA0204 		and	r4, r4, r2
 1397 0078 1A46     		mov	r2, r3
ARM GAS  /tmp/ccux5DbS.s 			page 33


 1398 007a 2346     		mov	r3, r4
 1399 007c 3A49     		ldr	r1, .L80+20
 1400 007e 0020     		movs	r0, #0
 1401 0080 FFF7FEFF 		bl	HAL_FLASH_Program
 1402 0084 0346     		mov	r3, r0
 1403 0086 FB73     		strb	r3, [r7, #15]
 365:Src/spiops.c  **** 
 366:Src/spiops.c  ****     if(flash_status != HAL_OK)
 1404              		.loc 2 366 0
 1405 0088 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1406 008a 002B     		cmp	r3, #0
 1407 008c 02D0     		beq	.L74
 367:Src/spiops.c  ****         mprintf("write error\r\n");
 1408              		.loc 2 367 0
 1409 008e 3548     		ldr	r0, .L80+16
 1410 0090 FFF7FEFF 		bl	mprintf
 1411              	.L74:
 368:Src/spiops.c  **** 
 369:Src/spiops.c  ****     flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS + 2, (total_size >> 16) & 0x
 1412              		.loc 2 369 0
 1413 0094 3B69     		ldr	r3, [r7, #16]
 1414 0096 1B0C     		lsrs	r3, r3, #16
 1415 0098 4FF00004 		mov	r4, #0
 1416 009c 4FF0FF01 		mov	r1, #255
 1417 00a0 4FF00002 		mov	r2, #0
 1418 00a4 03EA0103 		and	r3, r3, r1
 1419 00a8 04EA0204 		and	r4, r4, r2
 1420 00ac 1A46     		mov	r2, r3
 1421 00ae 2346     		mov	r3, r4
 1422 00b0 2E49     		ldr	r1, .L80+24
 1423 00b2 0020     		movs	r0, #0
 1424 00b4 FFF7FEFF 		bl	HAL_FLASH_Program
 1425 00b8 0346     		mov	r3, r0
 1426 00ba FB73     		strb	r3, [r7, #15]
 370:Src/spiops.c  **** 
 371:Src/spiops.c  ****     if(flash_status != HAL_OK)
 1427              		.loc 2 371 0
 1428 00bc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1429 00be 002B     		cmp	r3, #0
 1430 00c0 02D0     		beq	.L75
 372:Src/spiops.c  ****         mprintf("write error\r\n");
 1431              		.loc 2 372 0
 1432 00c2 2848     		ldr	r0, .L80+16
 1433 00c4 FFF7FEFF 		bl	mprintf
 1434              	.L75:
 373:Src/spiops.c  **** 
 374:Src/spiops.c  ****     flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS + 3, (total_size >> 24) & 0x
 1435              		.loc 2 374 0
 1436 00c8 3B69     		ldr	r3, [r7, #16]
 1437 00ca 1B0E     		lsrs	r3, r3, #24
 1438 00cc 4FF00004 		mov	r4, #0
 1439 00d0 1A46     		mov	r2, r3
 1440 00d2 2346     		mov	r3, r4
 1441 00d4 2649     		ldr	r1, .L80+28
 1442 00d6 0020     		movs	r0, #0
 1443 00d8 FFF7FEFF 		bl	HAL_FLASH_Program
 1444 00dc 0346     		mov	r3, r0
ARM GAS  /tmp/ccux5DbS.s 			page 34


 1445 00de FB73     		strb	r3, [r7, #15]
 375:Src/spiops.c  **** 
 376:Src/spiops.c  ****     if(flash_status != HAL_OK)
 1446              		.loc 2 376 0
 1447 00e0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1448 00e2 002B     		cmp	r3, #0
 1449 00e4 02D0     		beq	.L76
 377:Src/spiops.c  ****         mprintf("write error\r\n");
 1450              		.loc 2 377 0
 1451 00e6 1F48     		ldr	r0, .L80+16
 1452 00e8 FFF7FEFF 		bl	mprintf
 1453              	.L76:
 1454              	.LBB6:
 378:Src/spiops.c  **** 
 379:Src/spiops.c  ****     for(int i=0; i<total_size; i++)
 1455              		.loc 2 379 0
 1456 00ec 0023     		movs	r3, #0
 1457 00ee 7B61     		str	r3, [r7, #20]
 1458 00f0 1AE0     		b	.L77
 1459              	.L79:
 380:Src/spiops.c  ****     {
 381:Src/spiops.c  ****         flash_status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, SECTOR6_ADDRESS + i + 4, (uint8_t)Update
 1460              		.loc 2 381 0
 1461 00f2 7A69     		ldr	r2, [r7, #20]
 1462 00f4 1F4B     		ldr	r3, .L80+32
 1463 00f6 1344     		add	r3, r3, r2
 1464 00f8 1946     		mov	r1, r3
 1465 00fa 7B69     		ldr	r3, [r7, #20]
 1466 00fc 7A68     		ldr	r2, [r7, #4]
 1467 00fe 1344     		add	r3, r3, r2
 1468 0100 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1469 0102 DBB2     		uxtb	r3, r3
 1470 0104 4FF00004 		mov	r4, #0
 1471 0108 1A46     		mov	r2, r3
 1472 010a 2346     		mov	r3, r4
 1473 010c 0020     		movs	r0, #0
 1474 010e FFF7FEFF 		bl	HAL_FLASH_Program
 1475 0112 0346     		mov	r3, r0
 1476 0114 FB73     		strb	r3, [r7, #15]
 382:Src/spiops.c  **** 
 383:Src/spiops.c  ****         if(flash_status != HAL_OK)
 1477              		.loc 2 383 0
 1478 0116 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1479 0118 002B     		cmp	r3, #0
 1480 011a 02D0     		beq	.L78
 384:Src/spiops.c  ****             mprintf("write error\r\n");
 1481              		.loc 2 384 0
 1482 011c 1148     		ldr	r0, .L80+16
 1483 011e FFF7FEFF 		bl	mprintf
 1484              	.L78:
 379:Src/spiops.c  ****     {
 1485              		.loc 2 379 0 discriminator 2
 1486 0122 7B69     		ldr	r3, [r7, #20]
 1487 0124 0133     		adds	r3, r3, #1
 1488 0126 7B61     		str	r3, [r7, #20]
 1489              	.L77:
 379:Src/spiops.c  ****     {
ARM GAS  /tmp/ccux5DbS.s 			page 35


 1490              		.loc 2 379 0 is_stmt 0 discriminator 1
 1491 0128 7A69     		ldr	r2, [r7, #20]
 1492 012a 3B69     		ldr	r3, [r7, #16]
 1493 012c 9A42     		cmp	r2, r3
 1494 012e E0D3     		bcc	.L79
 1495              	.LBE6:
 385:Src/spiops.c  ****     }
 386:Src/spiops.c  **** 
 387:Src/spiops.c  ****     HAL_FLASH_Lock();
 1496              		.loc 2 387 0 is_stmt 1
 1497 0130 FFF7FEFF 		bl	HAL_FLASH_Lock
 388:Src/spiops.c  **** 
 389:Src/spiops.c  ****     mprintf("Writing is done\r\n");
 1498              		.loc 2 389 0
 1499 0134 1048     		ldr	r0, .L80+36
 1500 0136 FFF7FEFF 		bl	mprintf
 390:Src/spiops.c  **** 
 391:Src/spiops.c  ****     mprintf("Restarting...\r\n");
 1501              		.loc 2 391 0
 1502 013a 1048     		ldr	r0, .L80+40
 1503 013c FFF7FEFF 		bl	mprintf
 392:Src/spiops.c  **** 
 393:Src/spiops.c  ****     osDelay(50);
 1504              		.loc 2 393 0
 1505 0140 3220     		movs	r0, #50
 1506 0142 FFF7FEFF 		bl	osDelay
 394:Src/spiops.c  **** 
 395:Src/spiops.c  **** 
 396:Src/spiops.c  ****     HAL_NVIC_SystemReset();
 1507              		.loc 2 396 0
 1508 0146 FFF7FEFF 		bl	HAL_NVIC_SystemReset
 397:Src/spiops.c  **** 
 398:Src/spiops.c  **** }
 1509              		.loc 2 398 0
 1510 014a 00BF     		nop
 1511 014c 1C37     		adds	r7, r7, #28
 1512              	.LCFI47:
 1513              		.cfi_def_cfa_offset 12
 1514 014e BD46     		mov	sp, r7
 1515              	.LCFI48:
 1516              		.cfi_def_cfa_register 13
 1517              		@ sp needed
 1518 0150 90BD     		pop	{r4, r7, pc}
 1519              	.L81:
 1520 0152 00BF     		.align	2
 1521              	.L80:
 1522 0154 74000000 		.word	.LC14
 1523 0158 003C0240 		.word	1073888256
 1524 015c 00000000 		.word	UpdateFile
 1525 0160 00000808 		.word	134742016
 1526 0164 28000000 		.word	.LC11
 1527 0168 01000808 		.word	134742017
 1528 016c 02000808 		.word	134742018
 1529 0170 03000808 		.word	134742019
 1530 0174 04000808 		.word	134742020
 1531 0178 90000000 		.word	.LC15
 1532 017c 64000000 		.word	.LC13
ARM GAS  /tmp/ccux5DbS.s 			page 36


 1533              		.cfi_endproc
 1534              	.LFE154:
 1536              		.section	.rodata
 1537 00a2 0000     		.align	2
 1538              	.LC16:
 1539 00a4 31750D0A 		.ascii	"1u\015\012\000"
 1539      00
 1540 00a9 000000   		.align	2
 1541              	.LC17:
 1542 00ac 31640D0A 		.ascii	"1d\015\012\000"
 1542      00
 1543 00b1 000000   		.align	2
 1544              	.LC18:
 1545 00b4 32750D0A 		.ascii	"2u\015\012\000"
 1545      00
 1546 00b9 000000   		.align	2
 1547              	.LC19:
 1548 00bc 32640D0A 		.ascii	"2d\015\012\000"
 1548      00
 1549              		.section	.text.processControlData,"ax",%progbits
 1550              		.align	1
 1551              		.global	processControlData
 1552              		.syntax unified
 1553              		.thumb
 1554              		.thumb_func
 1555              		.fpu fpv4-sp-d16
 1557              	processControlData:
 1558              	.LFB155:
 399:Src/spiops.c  **** 
 400:Src/spiops.c  **** 
 401:Src/spiops.c  **** 
 402:Src/spiops.c  **** void processControlData()
 403:Src/spiops.c  **** {
 1559              		.loc 2 403 0
 1560              		.cfi_startproc
 1561              		@ args = 0, pretend = 0, frame = 0
 1562              		@ frame_needed = 1, uses_anonymous_args = 0
 1563 0000 80B5     		push	{r7, lr}
 1564              	.LCFI49:
 1565              		.cfi_def_cfa_offset 8
 1566              		.cfi_offset 7, -8
 1567              		.cfi_offset 14, -4
 1568 0002 00AF     		add	r7, sp, #0
 1569              	.LCFI50:
 1570              		.cfi_def_cfa_register 7
 404:Src/spiops.c  **** 
 405:Src/spiops.c  **** 
 406:Src/spiops.c  ****     if(ControlData -> step_motor1_direction == FORWARD)
 1571              		.loc 2 406 0
 1572 0004 2B4B     		ldr	r3, .L90
 1573 0006 1B68     		ldr	r3, [r3]
 1574 0008 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1575 000c 012B     		cmp	r3, #1
 1576 000e 0DD1     		bne	.L83
 407:Src/spiops.c  ****     {
 408:Src/spiops.c  ****         mprintf("1u\r\n");
 1577              		.loc 2 408 0
ARM GAS  /tmp/ccux5DbS.s 			page 37


 1578 0010 2948     		ldr	r0, .L90+4
 1579 0012 FFF7FEFF 		bl	mprintf
 409:Src/spiops.c  ****         motor1.direction = FORWARD;
 1580              		.loc 2 409 0
 1581 0016 294B     		ldr	r3, .L90+8
 1582 0018 0122     		movs	r2, #1
 1583 001a 1A60     		str	r2, [r3]
 410:Src/spiops.c  ****         motor1.speed = ControlData -> step_motor1_speed;
 1584              		.loc 2 410 0
 1585 001c 254B     		ldr	r3, .L90
 1586 001e 1B68     		ldr	r3, [r3]
 1587 0020 93F84230 		ldrb	r3, [r3, #66]	@ zero_extendqisi2
 1588 0024 1A46     		mov	r2, r3
 1589 0026 254B     		ldr	r3, .L90+8
 1590 0028 5A60     		str	r2, [r3, #4]
 1591 002a 16E0     		b	.L84
 1592              	.L83:
 411:Src/spiops.c  ****     }
 412:Src/spiops.c  ****     else if(ControlData -> step_motor1_direction == BACKWARD)
 1593              		.loc 2 412 0
 1594 002c 214B     		ldr	r3, .L90
 1595 002e 1B68     		ldr	r3, [r3]
 1596 0030 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1597 0034 022B     		cmp	r3, #2
 1598 0036 0DD1     		bne	.L85
 413:Src/spiops.c  ****     {
 414:Src/spiops.c  ****         mprintf("1d\r\n");
 1599              		.loc 2 414 0
 1600 0038 2148     		ldr	r0, .L90+12
 1601 003a FFF7FEFF 		bl	mprintf
 415:Src/spiops.c  ****         motor1.direction = BACKWARD;
 1602              		.loc 2 415 0
 1603 003e 1F4B     		ldr	r3, .L90+8
 1604 0040 0222     		movs	r2, #2
 1605 0042 1A60     		str	r2, [r3]
 416:Src/spiops.c  ****         motor1.speed = ControlData -> step_motor1_speed;
 1606              		.loc 2 416 0
 1607 0044 1B4B     		ldr	r3, .L90
 1608 0046 1B68     		ldr	r3, [r3]
 1609 0048 93F84230 		ldrb	r3, [r3, #66]	@ zero_extendqisi2
 1610 004c 1A46     		mov	r2, r3
 1611 004e 1B4B     		ldr	r3, .L90+8
 1612 0050 5A60     		str	r2, [r3, #4]
 1613 0052 02E0     		b	.L84
 1614              	.L85:
 417:Src/spiops.c  ****     }
 418:Src/spiops.c  ****     else
 419:Src/spiops.c  ****     {
 420:Src/spiops.c  ****         motor1.direction = STOP;
 1615              		.loc 2 420 0
 1616 0054 194B     		ldr	r3, .L90+8
 1617 0056 0022     		movs	r2, #0
 1618 0058 1A60     		str	r2, [r3]
 1619              	.L84:
 421:Src/spiops.c  ****     }
 422:Src/spiops.c  **** 
 423:Src/spiops.c  ****     if(ControlData -> step_motor2_direction == FORWARD)
ARM GAS  /tmp/ccux5DbS.s 			page 38


 1620              		.loc 2 423 0
 1621 005a 164B     		ldr	r3, .L90
 1622 005c 1B68     		ldr	r3, [r3]
 1623 005e 93F83D30 		ldrb	r3, [r3, #61]	@ zero_extendqisi2
 1624 0062 012B     		cmp	r3, #1
 1625 0064 0DD1     		bne	.L86
 424:Src/spiops.c  ****     {
 425:Src/spiops.c  ****         mprintf("2u\r\n");
 1626              		.loc 2 425 0
 1627 0066 1748     		ldr	r0, .L90+16
 1628 0068 FFF7FEFF 		bl	mprintf
 426:Src/spiops.c  ****         motor2.direction = FORWARD;
 1629              		.loc 2 426 0
 1630 006c 164B     		ldr	r3, .L90+20
 1631 006e 0122     		movs	r2, #1
 1632 0070 1A60     		str	r2, [r3]
 427:Src/spiops.c  ****         motor1.speed = ControlData -> step_motor2_speed;
 1633              		.loc 2 427 0
 1634 0072 104B     		ldr	r3, .L90
 1635 0074 1B68     		ldr	r3, [r3]
 1636 0076 93F84330 		ldrb	r3, [r3, #67]	@ zero_extendqisi2
 1637 007a 1A46     		mov	r2, r3
 1638 007c 0F4B     		ldr	r3, .L90+8
 1639 007e 5A60     		str	r2, [r3, #4]
 428:Src/spiops.c  ****     }
 429:Src/spiops.c  ****     else if(ControlData -> step_motor2_direction == BACKWARD)
 430:Src/spiops.c  ****     {
 431:Src/spiops.c  ****         mprintf("2d\r\n");
 432:Src/spiops.c  ****         motor2.direction = BACKWARD;
 433:Src/spiops.c  ****         motor1.speed = ControlData -> step_motor2_speed;
 434:Src/spiops.c  ****     }
 435:Src/spiops.c  ****     else
 436:Src/spiops.c  ****     {
 437:Src/spiops.c  ****         motor2.direction = STOP;
 438:Src/spiops.c  ****     }
 439:Src/spiops.c  **** 
 440:Src/spiops.c  **** 
 441:Src/spiops.c  **** }
 1640              		.loc 2 441 0
 1641 0080 16E0     		b	.L89
 1642              	.L86:
 429:Src/spiops.c  ****     {
 1643              		.loc 2 429 0
 1644 0082 0C4B     		ldr	r3, .L90
 1645 0084 1B68     		ldr	r3, [r3]
 1646 0086 93F83D30 		ldrb	r3, [r3, #61]	@ zero_extendqisi2
 1647 008a 022B     		cmp	r3, #2
 1648 008c 0DD1     		bne	.L88
 431:Src/spiops.c  ****         motor2.direction = BACKWARD;
 1649              		.loc 2 431 0
 1650 008e 0F48     		ldr	r0, .L90+24
 1651 0090 FFF7FEFF 		bl	mprintf
 432:Src/spiops.c  ****         motor1.speed = ControlData -> step_motor2_speed;
 1652              		.loc 2 432 0
 1653 0094 0C4B     		ldr	r3, .L90+20
 1654 0096 0222     		movs	r2, #2
 1655 0098 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccux5DbS.s 			page 39


 433:Src/spiops.c  ****     }
 1656              		.loc 2 433 0
 1657 009a 064B     		ldr	r3, .L90
 1658 009c 1B68     		ldr	r3, [r3]
 1659 009e 93F84330 		ldrb	r3, [r3, #67]	@ zero_extendqisi2
 1660 00a2 1A46     		mov	r2, r3
 1661 00a4 054B     		ldr	r3, .L90+8
 1662 00a6 5A60     		str	r2, [r3, #4]
 1663              		.loc 2 441 0
 1664 00a8 02E0     		b	.L89
 1665              	.L88:
 437:Src/spiops.c  ****     }
 1666              		.loc 2 437 0
 1667 00aa 074B     		ldr	r3, .L90+20
 1668 00ac 0022     		movs	r2, #0
 1669 00ae 1A60     		str	r2, [r3]
 1670              	.L89:
 1671              		.loc 2 441 0
 1672 00b0 00BF     		nop
 1673 00b2 80BD     		pop	{r7, pc}
 1674              	.L91:
 1675              		.align	2
 1676              	.L90:
 1677 00b4 00000000 		.word	ControlData
 1678 00b8 A4000000 		.word	.LC16
 1679 00bc 00000000 		.word	motor1
 1680 00c0 AC000000 		.word	.LC17
 1681 00c4 B4000000 		.word	.LC18
 1682 00c8 00000000 		.word	motor2
 1683 00cc BC000000 		.word	.LC19
 1684              		.cfi_endproc
 1685              	.LFE155:
 1687              		.section	.rodata
 1688 00c1 000000   		.align	2
 1689              	.LC20:
 1690 00c4 73656E73 		.ascii	"sensorOps\015\012\000"
 1690      6F724F70 
 1690      730D0A00 
 1691              		.section	.text.sensorOps,"ax",%progbits
 1692              		.align	1
 1693              		.global	sensorOps
 1694              		.syntax unified
 1695              		.thumb
 1696              		.thumb_func
 1697              		.fpu fpv4-sp-d16
 1699              	sensorOps:
 1700              	.LFB156:
 1701              		.file 3 "Src/sensorops.c"
   1:Src/sensorops.c **** #include "sensorops.h"
   2:Src/sensorops.c **** 
   3:Src/sensorops.c **** 
   4:Src/sensorops.c **** /* sensorOps function */
   5:Src/sensorops.c **** void sensorOps(void const * argument)
   6:Src/sensorops.c **** {
 1702              		.loc 3 6 0
 1703              		.cfi_startproc
 1704              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccux5DbS.s 			page 40


 1705              		@ frame_needed = 1, uses_anonymous_args = 0
 1706 0000 80B5     		push	{r7, lr}
 1707              	.LCFI51:
 1708              		.cfi_def_cfa_offset 8
 1709              		.cfi_offset 7, -8
 1710              		.cfi_offset 14, -4
 1711 0002 82B0     		sub	sp, sp, #8
 1712              	.LCFI52:
 1713              		.cfi_def_cfa_offset 16
 1714 0004 00AF     		add	r7, sp, #0
 1715              	.LCFI53:
 1716              		.cfi_def_cfa_register 7
 1717 0006 7860     		str	r0, [r7, #4]
   7:Src/sensorops.c **** 
   8:Src/sensorops.c ****   mprintf("sensorOps\r\n");
 1718              		.loc 3 8 0
 1719 0008 1A48     		ldr	r0, .L94
 1720 000a FFF7FEFF 		bl	mprintf
   9:Src/sensorops.c **** 
  10:Src/sensorops.c ****   sensorInit();
 1721              		.loc 3 10 0
 1722 000e FFF7FEFF 		bl	sensorInit
  11:Src/sensorops.c **** 
  12:Src/sensorops.c ****   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 1723              		.loc 3 12 0
 1724 0012 0021     		movs	r1, #0
 1725 0014 1848     		ldr	r0, .L94+4
 1726 0016 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1727              	.L93:
  13:Src/sensorops.c **** 
  14:Src/sensorops.c **** 
  15:Src/sensorops.c **** 
  16:Src/sensorops.c **** 
  17:Src/sensorops.c **** //  calibrateCompass();
  18:Src/sensorops.c **** 
  19:Src/sensorops.c ****   while(1)
  20:Src/sensorops.c ****   {
  21:Src/sensorops.c ****       readAllSensors();
 1728              		.loc 3 21 0 discriminator 1
 1729 001a FFF7FEFF 		bl	readAllSensors
  22:Src/sensorops.c **** 
  23:Src/sensorops.c **** 
  24:Src/sensorops.c ****       xSemaphoreTake(spiMutexHandle, portMAX_DELAY);
 1730              		.loc 3 24 0 discriminator 1
 1731 001e 174B     		ldr	r3, .L94+8
 1732 0020 1868     		ldr	r0, [r3]
 1733 0022 0023     		movs	r3, #0
 1734 0024 4FF0FF32 		mov	r2, #-1
 1735 0028 0021     		movs	r1, #0
 1736 002a FFF7FEFF 		bl	xQueueGenericReceive
  25:Src/sensorops.c **** 
  26:Src/sensorops.c ****       EnvironmentData -> sensor_data.temperature = sensorValues.temperature;
 1737              		.loc 3 26 0 discriminator 1
 1738 002e 144B     		ldr	r3, .L94+12
 1739 0030 1B68     		ldr	r3, [r3]
 1740 0032 144A     		ldr	r2, .L94+16
 1741 0034 9268     		ldr	r2, [r2, #8]
ARM GAS  /tmp/ccux5DbS.s 			page 41


 1742 0036 5A66     		str	r2, [r3, #100]
  27:Src/sensorops.c ****       EnvironmentData -> sensor_data.pressure = sensorValues.pressure;
 1743              		.loc 3 27 0 discriminator 1
 1744 0038 114B     		ldr	r3, .L94+12
 1745 003a 1B68     		ldr	r3, [r3]
 1746 003c 114A     		ldr	r2, .L94+16
 1747 003e 1268     		ldr	r2, [r2]
 1748 0040 DA66     		str	r2, [r3, #108]
  28:Src/sensorops.c ****       EnvironmentData -> sensor_data.altitude = sensorValues.altitude;
 1749              		.loc 3 28 0 discriminator 1
 1750 0042 0F4B     		ldr	r3, .L94+12
 1751 0044 1B68     		ldr	r3, [r3]
 1752 0046 0F4A     		ldr	r2, .L94+16
 1753 0048 5268     		ldr	r2, [r2, #4]
 1754 004a 1A67     		str	r2, [r3, #112]
  29:Src/sensorops.c ****       EnvironmentData -> sensor_data.wheather_condition = sensorValues.wheather_condition;
 1755              		.loc 3 29 0 discriminator 1
 1756 004c 0C4B     		ldr	r3, .L94+12
 1757 004e 1B68     		ldr	r3, [r3]
 1758 0050 0C4A     		ldr	r2, .L94+16
 1759 0052 127B     		ldrb	r2, [r2, #12]	@ zero_extendqisi2
 1760 0054 83F87420 		strb	r2, [r3, #116]
  30:Src/sensorops.c ****       EnvironmentData -> sensor_data.compass_degree = sensorValues.compass_degree;
 1761              		.loc 3 30 0 discriminator 1
 1762 0058 094B     		ldr	r3, .L94+12
 1763 005a 1B68     		ldr	r3, [r3]
 1764 005c 094A     		ldr	r2, .L94+16
 1765 005e 1269     		ldr	r2, [r2, #16]
 1766 0060 9A66     		str	r2, [r3, #104]
  31:Src/sensorops.c **** 
  32:Src/sensorops.c ****       xSemaphoreGive(spiMutexHandle);
 1767              		.loc 3 32 0 discriminator 1
 1768 0062 064B     		ldr	r3, .L94+8
 1769 0064 1868     		ldr	r0, [r3]
 1770 0066 0023     		movs	r3, #0
 1771 0068 0022     		movs	r2, #0
 1772 006a 0021     		movs	r1, #0
 1773 006c FFF7FEFF 		bl	xQueueGenericSend
  21:Src/sensorops.c **** 
 1774              		.loc 3 21 0 discriminator 1
 1775 0070 D3E7     		b	.L93
 1776              	.L95:
 1777 0072 00BF     		.align	2
 1778              	.L94:
 1779 0074 C4000000 		.word	.LC20
 1780 0078 00000000 		.word	htim3
 1781 007c 00000000 		.word	spiMutexHandle
 1782 0080 00000000 		.word	EnvironmentData
 1783 0084 00000000 		.word	sensorValues
 1784              		.cfi_endproc
 1785              	.LFE156:
 1787              		.section	.rodata
 1788              		.align	2
 1789              	.LC21:
 1790 00d0 6D6F746F 		.ascii	"motorOps\015\012\000"
 1790      724F7073 
 1790      0D0A00
ARM GAS  /tmp/ccux5DbS.s 			page 42


 1791              		.section	.text.motorOps,"ax",%progbits
 1792              		.align	1
 1793              		.global	motorOps
 1794              		.syntax unified
 1795              		.thumb
 1796              		.thumb_func
 1797              		.fpu fpv4-sp-d16
 1799              	motorOps:
 1800              	.LFB157:
 1801              		.file 4 "Src/motorops.c"
   1:Src/motorops.c **** #include "motorops.h"
   2:Src/motorops.c **** #include "main.h"
   3:Src/motorops.c **** 
   4:Src/motorops.c **** 
   5:Src/motorops.c **** 
   6:Src/motorops.c **** void motorOps(void const * argument)
   7:Src/motorops.c **** {
 1802              		.loc 4 7 0
 1803              		.cfi_startproc
 1804              		@ args = 0, pretend = 0, frame = 16
 1805              		@ frame_needed = 1, uses_anonymous_args = 0
 1806 0000 80B5     		push	{r7, lr}
 1807              	.LCFI54:
 1808              		.cfi_def_cfa_offset 8
 1809              		.cfi_offset 7, -8
 1810              		.cfi_offset 14, -4
 1811 0002 84B0     		sub	sp, sp, #16
 1812              	.LCFI55:
 1813              		.cfi_def_cfa_offset 24
 1814 0004 00AF     		add	r7, sp, #0
 1815              	.LCFI56:
 1816              		.cfi_def_cfa_register 7
 1817 0006 7860     		str	r0, [r7, #4]
   8:Src/motorops.c **** 
   9:Src/motorops.c ****     int pwm = 45;
 1818              		.loc 4 9 0
 1819 0008 2D23     		movs	r3, #45
 1820 000a FB60     		str	r3, [r7, #12]
  10:Src/motorops.c **** 
  11:Src/motorops.c ****     mprintf("motorOps\r\n");
 1821              		.loc 4 11 0
 1822 000c 1A48     		ldr	r0, .L102
 1823 000e FFF7FEFF 		bl	mprintf
  12:Src/motorops.c **** 
  13:Src/motorops.c **** 
  14:Src/motorops.c **** 
  15:Src/motorops.c ****     __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, pwm);
 1824              		.loc 4 15 0
 1825 0012 1A4B     		ldr	r3, .L102+4
 1826 0014 1B68     		ldr	r3, [r3]
 1827 0016 FA68     		ldr	r2, [r7, #12]
 1828 0018 5A63     		str	r2, [r3, #52]
  16:Src/motorops.c ****     pwm++;
 1829              		.loc 4 16 0
 1830 001a FB68     		ldr	r3, [r7, #12]
 1831 001c 0133     		adds	r3, r3, #1
 1832 001e FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/ccux5DbS.s 			page 43


  17:Src/motorops.c ****     osDelay(100);
 1833              		.loc 4 17 0
 1834 0020 6420     		movs	r0, #100
 1835 0022 FFF7FEFF 		bl	osDelay
  18:Src/motorops.c **** 
  19:Src/motorops.c ****     if(pwm == 153)
 1836              		.loc 4 19 0
 1837 0026 FB68     		ldr	r3, [r7, #12]
 1838 0028 992B     		cmp	r3, #153
 1839 002a 01D1     		bne	.L97
  20:Src/motorops.c ****       pwm = 45;
 1840              		.loc 4 20 0
 1841 002c 2D23     		movs	r3, #45
 1842 002e FB60     		str	r3, [r7, #12]
 1843              	.L97:
  21:Src/motorops.c **** 
  22:Src/motorops.c **** 
  23:Src/motorops.c ****     while(1)
  24:Src/motorops.c ****     {
  25:Src/motorops.c **** 
  26:Src/motorops.c **** 
  27:Src/motorops.c **** 
  28:Src/motorops.c ****       if(motor1.direction == FORWARD)
 1844              		.loc 4 28 0
 1845 0030 134B     		ldr	r3, .L102+8
 1846 0032 1B68     		ldr	r3, [r3]
 1847 0034 012B     		cmp	r3, #1
 1848 0036 02D1     		bne	.L98
  29:Src/motorops.c ****       {
  30:Src/motorops.c ****         motor1Drive(FORWARD);
 1849              		.loc 4 30 0
 1850 0038 0120     		movs	r0, #1
 1851 003a FFF7FEFF 		bl	motor1Drive
 1852              	.L98:
  31:Src/motorops.c ****       }
  32:Src/motorops.c **** 
  33:Src/motorops.c ****       if(motor1.direction == BACKWARD)
 1853              		.loc 4 33 0
 1854 003e 104B     		ldr	r3, .L102+8
 1855 0040 1B68     		ldr	r3, [r3]
 1856 0042 022B     		cmp	r3, #2
 1857 0044 02D1     		bne	.L99
  34:Src/motorops.c ****       {
  35:Src/motorops.c ****         motor1Drive(BACKWARD);
 1858              		.loc 4 35 0
 1859 0046 0220     		movs	r0, #2
 1860 0048 FFF7FEFF 		bl	motor1Drive
 1861              	.L99:
  36:Src/motorops.c ****       }
  37:Src/motorops.c **** 
  38:Src/motorops.c ****       if(motor2.direction == FORWARD)
 1862              		.loc 4 38 0
 1863 004c 0D4B     		ldr	r3, .L102+12
 1864 004e 1B68     		ldr	r3, [r3]
 1865 0050 012B     		cmp	r3, #1
 1866 0052 02D1     		bne	.L100
  39:Src/motorops.c ****       {
ARM GAS  /tmp/ccux5DbS.s 			page 44


  40:Src/motorops.c ****         motor2Drive(FORWARD);
 1867              		.loc 4 40 0
 1868 0054 0120     		movs	r0, #1
 1869 0056 FFF7FEFF 		bl	motor2Drive
 1870              	.L100:
  41:Src/motorops.c ****       }
  42:Src/motorops.c **** 
  43:Src/motorops.c ****       if(motor2.direction == BACKWARD)
 1871              		.loc 4 43 0
 1872 005a 0A4B     		ldr	r3, .L102+12
 1873 005c 1B68     		ldr	r3, [r3]
 1874 005e 022B     		cmp	r3, #2
 1875 0060 02D1     		bne	.L101
  44:Src/motorops.c ****       {
  45:Src/motorops.c ****         motor2Drive(BACKWARD);
 1876              		.loc 4 45 0
 1877 0062 0220     		movs	r0, #2
 1878 0064 FFF7FEFF 		bl	motor2Drive
 1879              	.L101:
  46:Src/motorops.c ****       }
  47:Src/motorops.c **** 
  48:Src/motorops.c ****       osDelay(2 + motor1.speed);
 1880              		.loc 4 48 0
 1881 0068 054B     		ldr	r3, .L102+8
 1882 006a 5B68     		ldr	r3, [r3, #4]
 1883 006c 0233     		adds	r3, r3, #2
 1884 006e 1846     		mov	r0, r3
 1885 0070 FFF7FEFF 		bl	osDelay
  28:Src/motorops.c ****       {
 1886              		.loc 4 28 0
 1887 0074 DCE7     		b	.L97
 1888              	.L103:
 1889 0076 00BF     		.align	2
 1890              	.L102:
 1891 0078 D0000000 		.word	.LC21
 1892 007c 00000000 		.word	htim3
 1893 0080 00000000 		.word	motor1
 1894 0084 00000000 		.word	motor2
 1895              		.cfi_endproc
 1896              	.LFE157:
 1898              		.section	.text.vprint,"ax",%progbits
 1899              		.align	1
 1900              		.global	vprint
 1901              		.syntax unified
 1902              		.thumb
 1903              		.thumb_func
 1904              		.fpu fpv4-sp-d16
 1906              	vprint:
 1907              	.LFB158:
 1908              		.file 5 "Src/freertos.c"
   1:Src/freertos.c **** /**
   2:Src/freertos.c ****   ******************************************************************************
   3:Src/freertos.c ****   * File Name          : freertos.c
   4:Src/freertos.c ****   * Description        : Code for freertos applications
   5:Src/freertos.c ****   ******************************************************************************
   6:Src/freertos.c ****   * This notice applies to any and all portions of this file
   7:Src/freertos.c ****   * that are not between comment pairs USER CODE BEGIN and
ARM GAS  /tmp/ccux5DbS.s 			page 45


   8:Src/freertos.c ****   * USER CODE END. Other portions of this file, whether 
   9:Src/freertos.c ****   * inserted by the user or by software development tools
  10:Src/freertos.c ****   * are owned by their respective copyright owners.
  11:Src/freertos.c ****   *
  12:Src/freertos.c ****   * Copyright (c) 2018 STMicroelectronics International N.V. 
  13:Src/freertos.c ****   * All rights reserved.
  14:Src/freertos.c ****   *
  15:Src/freertos.c ****   * Redistribution and use in source and binary forms, with or without 
  16:Src/freertos.c ****   * modification, are permitted, provided that the following conditions are met:
  17:Src/freertos.c ****   *
  18:Src/freertos.c ****   * 1. Redistribution of source code must retain the above copyright notice, 
  19:Src/freertos.c ****   *    this list of conditions and the following disclaimer.
  20:Src/freertos.c ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  21:Src/freertos.c ****   *    this list of conditions and the following disclaimer in the documentation
  22:Src/freertos.c ****   *    and/or other materials provided with the distribution.
  23:Src/freertos.c ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  24:Src/freertos.c ****   *    contributors to this software may be used to endorse or promote products 
  25:Src/freertos.c ****   *    derived from this software without specific written permission.
  26:Src/freertos.c ****   * 4. This software, including modifications and/or derivative works of this 
  27:Src/freertos.c ****   *    software, must execute solely and exclusively on microcontroller or
  28:Src/freertos.c ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  29:Src/freertos.c ****   * 5. Redistribution and use of this software other than as permitted under 
  30:Src/freertos.c ****   *    this license is void and will automatically terminate your rights under 
  31:Src/freertos.c ****   *    this license. 
  32:Src/freertos.c ****   *
  33:Src/freertos.c ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  34:Src/freertos.c ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  35:Src/freertos.c ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  36:Src/freertos.c ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  37:Src/freertos.c ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  38:Src/freertos.c ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  39:Src/freertos.c ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  40:Src/freertos.c ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  41:Src/freertos.c ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  42:Src/freertos.c ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  43:Src/freertos.c ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  44:Src/freertos.c ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  45:Src/freertos.c ****   *
  46:Src/freertos.c ****   ******************************************************************************
  47:Src/freertos.c ****   */
  48:Src/freertos.c **** 
  49:Src/freertos.c **** /* Includes ------------------------------------------------------------------*/
  50:Src/freertos.c **** #include "freertos.h"
  51:Src/freertos.c **** 
  52:Src/freertos.c **** #include "gpsops.c"
  53:Src/freertos.c **** #include "spiops.c"
  54:Src/freertos.c **** #include "sensorops.c"
  55:Src/freertos.c **** #include "motorops.c"
  56:Src/freertos.c **** 
  57:Src/freertos.c **** #include <stdlib.h>
  58:Src/freertos.c **** 
  59:Src/freertos.c **** 
  60:Src/freertos.c **** 
  61:Src/freertos.c **** void vprint(const char *fmt, va_list argp)
  62:Src/freertos.c **** {
 1909              		.loc 5 62 0
 1910              		.cfi_startproc
ARM GAS  /tmp/ccux5DbS.s 			page 46


 1911              		@ args = 0, pretend = 0, frame = 160
 1912              		@ frame_needed = 1, uses_anonymous_args = 0
 1913 0000 80B5     		push	{r7, lr}
 1914              	.LCFI57:
 1915              		.cfi_def_cfa_offset 8
 1916              		.cfi_offset 7, -8
 1917              		.cfi_offset 14, -4
 1918 0002 A8B0     		sub	sp, sp, #160
 1919              	.LCFI58:
 1920              		.cfi_def_cfa_offset 168
 1921 0004 00AF     		add	r7, sp, #0
 1922              	.LCFI59:
 1923              		.cfi_def_cfa_register 7
 1924 0006 7860     		str	r0, [r7, #4]
 1925 0008 3960     		str	r1, [r7]
  63:Src/freertos.c ****     char string[150];
  64:Src/freertos.c **** 
  65:Src/freertos.c ****     if(0 < vsprintf(string,fmt,argp)) // build string
 1926              		.loc 5 65 0
 1927 000a 07F10803 		add	r3, r7, #8
 1928 000e 3A68     		ldr	r2, [r7]
 1929 0010 7968     		ldr	r1, [r7, #4]
 1930 0012 1846     		mov	r0, r3
 1931 0014 FFF7FEFF 		bl	vsprintf
 1932 0018 0346     		mov	r3, r0
 1933 001a 002B     		cmp	r3, #0
 1934 001c 0DDD     		ble	.L106
  66:Src/freertos.c ****        HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via 
 1935              		.loc 5 66 0
 1936 001e 07F10803 		add	r3, r7, #8
 1937 0022 1846     		mov	r0, r3
 1938 0024 FFF7FEFF 		bl	strlen
 1939 0028 0346     		mov	r3, r0
 1940 002a 9AB2     		uxth	r2, r3
 1941 002c 07F10801 		add	r1, r7, #8
 1942 0030 6FF07F43 		mvn	r3, #-16777216
 1943 0034 0348     		ldr	r0, .L107
 1944 0036 FFF7FEFF 		bl	HAL_UART_Transmit
 1945              	.L106:
  67:Src/freertos.c **** 
  68:Src/freertos.c **** }
 1946              		.loc 5 68 0
 1947 003a 00BF     		nop
 1948 003c A037     		adds	r7, r7, #160
 1949              	.LCFI60:
 1950              		.cfi_def_cfa_offset 8
 1951 003e BD46     		mov	sp, r7
 1952              	.LCFI61:
 1953              		.cfi_def_cfa_register 13
 1954              		@ sp needed
 1955 0040 80BD     		pop	{r7, pc}
 1956              	.L108:
 1957 0042 00BF     		.align	2
 1958              	.L107:
 1959 0044 00000000 		.word	huart1
 1960              		.cfi_endproc
 1961              	.LFE158:
ARM GAS  /tmp/ccux5DbS.s 			page 47


 1963              		.section	.text.mprintf,"ax",%progbits
 1964              		.align	1
 1965              		.global	mprintf
 1966              		.syntax unified
 1967              		.thumb
 1968              		.thumb_func
 1969              		.fpu fpv4-sp-d16
 1971              	mprintf:
 1972              	.LFB159:
  69:Src/freertos.c **** 
  70:Src/freertos.c **** 
  71:Src/freertos.c **** 
  72:Src/freertos.c **** void mprintf(const char *fmt, ...) // custom printf() function
  73:Src/freertos.c **** {
 1973              		.loc 5 73 0
 1974              		.cfi_startproc
 1975              		@ args = 4, pretend = 16, frame = 8
 1976              		@ frame_needed = 1, uses_anonymous_args = 1
 1977 0000 0FB4     		push	{r0, r1, r2, r3}
 1978              	.LCFI62:
 1979              		.cfi_def_cfa_offset 16
 1980              		.cfi_offset 0, -16
 1981              		.cfi_offset 1, -12
 1982              		.cfi_offset 2, -8
 1983              		.cfi_offset 3, -4
 1984 0002 80B5     		push	{r7, lr}
 1985              	.LCFI63:
 1986              		.cfi_def_cfa_offset 24
 1987              		.cfi_offset 7, -24
 1988              		.cfi_offset 14, -20
 1989 0004 82B0     		sub	sp, sp, #8
 1990              	.LCFI64:
 1991              		.cfi_def_cfa_offset 32
 1992 0006 00AF     		add	r7, sp, #0
 1993              	.LCFI65:
 1994              		.cfi_def_cfa_register 7
  74:Src/freertos.c **** 
  75:Src/freertos.c ****     xSemaphoreTake(uartMutexHandle, 100);
 1995              		.loc 5 75 0
 1996 0008 0D4B     		ldr	r3, .L110
 1997 000a 1868     		ldr	r0, [r3]
 1998 000c 0023     		movs	r3, #0
 1999 000e 6422     		movs	r2, #100
 2000 0010 0021     		movs	r1, #0
 2001 0012 FFF7FEFF 		bl	xQueueGenericReceive
  76:Src/freertos.c ****     va_list argp;
  77:Src/freertos.c ****     va_start(argp, fmt);
 2002              		.loc 5 77 0
 2003 0016 07F11403 		add	r3, r7, #20
 2004 001a 7B60     		str	r3, [r7, #4]
  78:Src/freertos.c ****     vprint(fmt, argp);
 2005              		.loc 5 78 0
 2006 001c 7968     		ldr	r1, [r7, #4]
 2007 001e 3869     		ldr	r0, [r7, #16]
 2008 0020 FFF7FEFF 		bl	vprint
  79:Src/freertos.c ****     va_end(argp);
  80:Src/freertos.c ****     xSemaphoreGive(uartMutexHandle);
ARM GAS  /tmp/ccux5DbS.s 			page 48


 2009              		.loc 5 80 0
 2010 0024 064B     		ldr	r3, .L110
 2011 0026 1868     		ldr	r0, [r3]
 2012 0028 0023     		movs	r3, #0
 2013 002a 0022     		movs	r2, #0
 2014 002c 0021     		movs	r1, #0
 2015 002e FFF7FEFF 		bl	xQueueGenericSend
  81:Src/freertos.c **** 
  82:Src/freertos.c **** }
 2016              		.loc 5 82 0
 2017 0032 00BF     		nop
 2018 0034 0837     		adds	r7, r7, #8
 2019              	.LCFI66:
 2020              		.cfi_def_cfa_offset 24
 2021 0036 BD46     		mov	sp, r7
 2022              	.LCFI67:
 2023              		.cfi_def_cfa_register 13
 2024              		@ sp needed
 2025 0038 BDE88040 		pop	{r7, lr}
 2026              	.LCFI68:
 2027              		.cfi_restore 14
 2028              		.cfi_restore 7
 2029              		.cfi_def_cfa_offset 16
 2030 003c 04B0     		add	sp, sp, #16
 2031              	.LCFI69:
 2032              		.cfi_restore 3
 2033              		.cfi_restore 2
 2034              		.cfi_restore 1
 2035              		.cfi_restore 0
 2036              		.cfi_def_cfa_offset 0
 2037 003e 7047     		bx	lr
 2038              	.L111:
 2039              		.align	2
 2040              	.L110:
 2041 0040 00000000 		.word	uartMutexHandle
 2042              		.cfi_endproc
 2043              	.LFE159:
 2045              		.section	.rodata
 2046 00db 00       		.align	2
 2047              	.LC0:
 2048 00dc 67707354 		.ascii	"gpsThread\000"
 2048      68726561 
 2048      6400
 2049 00e6 0000     		.align	2
 2050              	.LC22:
 2051 00e8 DC000000 		.word	.LC0
 2052 00ec 00000000 		.word	gpsOps
 2053 00f0 0000     		.short	0
 2054 00f2 0000     		.space	2
 2055 00f4 00000000 		.word	0
 2056 00f8 00040000 		.word	1024
 2057              		.align	2
 2058              	.LC2:
 2059 00fc 73656E73 		.ascii	"sensorThread\000"
 2059      6F725468 
 2059      72656164 
 2059      00
ARM GAS  /tmp/ccux5DbS.s 			page 49


 2060 0109 000000   		.align	2
 2061              	.LC23:
 2062 010c FC000000 		.word	.LC2
 2063 0110 00000000 		.word	sensorOps
 2064 0114 FFFF     		.short	-1
 2065 0116 0000     		.space	2
 2066 0118 00000000 		.word	0
 2067 011c 00020000 		.word	512
 2068              		.align	2
 2069              	.LC4:
 2070 0120 73706943 		.ascii	"spiComThread\000"
 2070      6F6D5468 
 2070      72656164 
 2070      00
 2071 012d 000000   		.align	2
 2072              	.LC24:
 2073 0130 20010000 		.word	.LC4
 2074 0134 00000000 		.word	spiComOps
 2075 0138 0100     		.short	1
 2076 013a 0000     		.space	2
 2077 013c 00000000 		.word	0
 2078 0140 00040000 		.word	1024
 2079              		.align	2
 2080              	.LC6:
 2081 0144 6D6F746F 		.ascii	"motorThread\000"
 2081      72546872 
 2081      65616400 
 2082              		.align	2
 2083              	.LC25:
 2084 0150 44010000 		.word	.LC6
 2085 0154 00000000 		.word	motorOps
 2086 0158 0000     		.short	0
 2087 015a 0000     		.space	2
 2088 015c 00000000 		.word	0
 2089 0160 00020000 		.word	512
 2090              		.section	.text.MX_FREERTOS_Init,"ax",%progbits
 2091              		.align	1
 2092              		.global	MX_FREERTOS_Init
 2093              		.syntax unified
 2094              		.thumb
 2095              		.thumb_func
 2096              		.fpu fpv4-sp-d16
 2098              	MX_FREERTOS_Init:
 2099              	.LFB160:
  83:Src/freertos.c **** 
  84:Src/freertos.c **** 
  85:Src/freertos.c **** 
  86:Src/freertos.c **** void MX_FREERTOS_Init(void)
  87:Src/freertos.c **** {
 2100              		.loc 5 87 0
 2101              		.cfi_startproc
 2102              		@ args = 0, pretend = 0, frame = 104
 2103              		@ frame_needed = 1, uses_anonymous_args = 0
 2104 0000 B0B5     		push	{r4, r5, r7, lr}
 2105              	.LCFI70:
 2106              		.cfi_def_cfa_offset 16
 2107              		.cfi_offset 4, -16
ARM GAS  /tmp/ccux5DbS.s 			page 50


 2108              		.cfi_offset 5, -12
 2109              		.cfi_offset 7, -8
 2110              		.cfi_offset 14, -4
 2111 0002 9AB0     		sub	sp, sp, #104
 2112              	.LCFI71:
 2113              		.cfi_def_cfa_offset 120
 2114 0004 00AF     		add	r7, sp, #0
 2115              	.LCFI72:
 2116              		.cfi_def_cfa_register 7
  88:Src/freertos.c **** 
  89:Src/freertos.c **** 
  90:Src/freertos.c ****   osMutexDef(spiMutex);
 2117              		.loc 5 90 0
 2118 0006 0023     		movs	r3, #0
 2119 0008 7B66     		str	r3, [r7, #100]
  91:Src/freertos.c ****   spiMutexHandle = osMutexCreate(osMutex(spiMutex));
 2120              		.loc 5 91 0
 2121 000a 07F16403 		add	r3, r7, #100
 2122 000e 1846     		mov	r0, r3
 2123 0010 FFF7FEFF 		bl	osMutexCreate
 2124 0014 0246     		mov	r2, r0
 2125 0016 4E4B     		ldr	r3, .L113
 2126 0018 1A60     		str	r2, [r3]
  92:Src/freertos.c **** 
  93:Src/freertos.c ****   osMutexDef(uartMutex);
 2127              		.loc 5 93 0
 2128 001a 0023     		movs	r3, #0
 2129 001c 3B66     		str	r3, [r7, #96]
  94:Src/freertos.c ****   uartMutexHandle = osMutexCreate(osMutex(uartMutex));
 2130              		.loc 5 94 0
 2131 001e 07F16003 		add	r3, r7, #96
 2132 0022 1846     		mov	r0, r3
 2133 0024 FFF7FEFF 		bl	osMutexCreate
 2134 0028 0246     		mov	r2, r0
 2135 002a 4A4B     		ldr	r3, .L113+4
 2136 002c 1A60     		str	r2, [r3]
  95:Src/freertos.c **** 
  96:Src/freertos.c ****   osMutexDef(memoryMutex);
 2137              		.loc 5 96 0
 2138 002e 0023     		movs	r3, #0
 2139 0030 FB65     		str	r3, [r7, #92]
  97:Src/freertos.c ****   memoryMutexHandle = osMutexCreate(osMutex(memoryMutex));
 2140              		.loc 5 97 0
 2141 0032 07F15C03 		add	r3, r7, #92
 2142 0036 1846     		mov	r0, r3
 2143 0038 FFF7FEFF 		bl	osMutexCreate
 2144 003c 0246     		mov	r2, r0
 2145 003e 464B     		ldr	r3, .L113+8
 2146 0040 1A60     		str	r2, [r3]
  98:Src/freertos.c **** 
  99:Src/freertos.c ****   osSemaphoreDef(uartSemaphore);
 2147              		.loc 5 99 0
 2148 0042 0023     		movs	r3, #0
 2149 0044 BB65     		str	r3, [r7, #88]
 100:Src/freertos.c ****   uartSemaphoreHandle = osSemaphoreCreate(osSemaphore(uartSemaphore), 1);
 2150              		.loc 5 100 0
 2151 0046 07F15803 		add	r3, r7, #88
ARM GAS  /tmp/ccux5DbS.s 			page 51


 2152 004a 0121     		movs	r1, #1
 2153 004c 1846     		mov	r0, r3
 2154 004e FFF7FEFF 		bl	osSemaphoreCreate
 2155 0052 0246     		mov	r2, r0
 2156 0054 414B     		ldr	r3, .L113+12
 2157 0056 1A60     		str	r2, [r3]
 101:Src/freertos.c **** 
 102:Src/freertos.c ****   /* definition and creation of spiSemaphore */
 103:Src/freertos.c ****   osSemaphoreDef(spiSemaphore);
 2158              		.loc 5 103 0
 2159 0058 0023     		movs	r3, #0
 2160 005a 7B65     		str	r3, [r7, #84]
 104:Src/freertos.c ****   spiSemaphoreHandle = osSemaphoreCreate(osSemaphore(spiSemaphore), 1);
 2161              		.loc 5 104 0
 2162 005c 07F15403 		add	r3, r7, #84
 2163 0060 0121     		movs	r1, #1
 2164 0062 1846     		mov	r0, r3
 2165 0064 FFF7FEFF 		bl	osSemaphoreCreate
 2166 0068 0246     		mov	r2, r0
 2167 006a 3D4B     		ldr	r3, .L113+16
 2168 006c 1A60     		str	r2, [r3]
 105:Src/freertos.c **** 
 106:Src/freertos.c ****   /* definition and creation of gpsThread */
 107:Src/freertos.c ****   osThreadDef(gpsThread, gpsOps, osPriorityNormal, 0, 1024);
 2169              		.loc 5 107 0
 2170 006e 3D4B     		ldr	r3, .L113+20
 2171 0070 07F14004 		add	r4, r7, #64
 2172 0074 1D46     		mov	r5, r3
 2173 0076 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2174 0078 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2175 007a 2B68     		ldr	r3, [r5]
 2176 007c 2360     		str	r3, [r4]
 108:Src/freertos.c ****   gpsThreadHandle = osThreadCreate(osThread(gpsThread), NULL);
 2177              		.loc 5 108 0
 2178 007e 07F14003 		add	r3, r7, #64
 2179 0082 0021     		movs	r1, #0
 2180 0084 1846     		mov	r0, r3
 2181 0086 FFF7FEFF 		bl	osThreadCreate
 2182 008a 0246     		mov	r2, r0
 2183 008c 364B     		ldr	r3, .L113+24
 2184 008e 1A60     		str	r2, [r3]
 109:Src/freertos.c **** 
 110:Src/freertos.c ****   /* definition and creation of sensorThread */
 111:Src/freertos.c ****   osThreadDef(sensorThread, sensorOps, osPriorityBelowNormal, 0, 512);
 2185              		.loc 5 111 0
 2186 0090 364B     		ldr	r3, .L113+28
 2187 0092 07F12C04 		add	r4, r7, #44
 2188 0096 1D46     		mov	r5, r3
 2189 0098 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2190 009a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2191 009c 2B68     		ldr	r3, [r5]
 2192 009e 2360     		str	r3, [r4]
 112:Src/freertos.c ****   sensorThreadHandle = osThreadCreate(osThread(sensorThread), NULL);
 2193              		.loc 5 112 0
 2194 00a0 07F12C03 		add	r3, r7, #44
 2195 00a4 0021     		movs	r1, #0
 2196 00a6 1846     		mov	r0, r3
ARM GAS  /tmp/ccux5DbS.s 			page 52


 2197 00a8 FFF7FEFF 		bl	osThreadCreate
 2198 00ac 0246     		mov	r2, r0
 2199 00ae 304B     		ldr	r3, .L113+32
 2200 00b0 1A60     		str	r2, [r3]
 113:Src/freertos.c **** 
 114:Src/freertos.c ****   /* definition and creation of spiComThread */
 115:Src/freertos.c ****   osThreadDef(spiComThread, spiComOps, osPriorityAboveNormal, 0, 1024);
 2201              		.loc 5 115 0
 2202 00b2 304B     		ldr	r3, .L113+36
 2203 00b4 07F11804 		add	r4, r7, #24
 2204 00b8 1D46     		mov	r5, r3
 2205 00ba 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2206 00bc 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2207 00be 2B68     		ldr	r3, [r5]
 2208 00c0 2360     		str	r3, [r4]
 116:Src/freertos.c ****   spiComThreadHandle = osThreadCreate(osThread(spiComThread), NULL);
 2209              		.loc 5 116 0
 2210 00c2 07F11803 		add	r3, r7, #24
 2211 00c6 0021     		movs	r1, #0
 2212 00c8 1846     		mov	r0, r3
 2213 00ca FFF7FEFF 		bl	osThreadCreate
 2214 00ce 0246     		mov	r2, r0
 2215 00d0 294B     		ldr	r3, .L113+40
 2216 00d2 1A60     		str	r2, [r3]
 117:Src/freertos.c **** 
 118:Src/freertos.c ****   osThreadDef(motorThread, motorOps, osPriorityNormal, 0, 512);
 2217              		.loc 5 118 0
 2218 00d4 294B     		ldr	r3, .L113+44
 2219 00d6 3C1D     		adds	r4, r7, #4
 2220 00d8 1D46     		mov	r5, r3
 2221 00da 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2222 00dc 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2223 00de 2B68     		ldr	r3, [r5]
 2224 00e0 2360     		str	r3, [r4]
 119:Src/freertos.c ****   motorThreadHandle = osThreadCreate(osThread(motorThread), NULL);
 2225              		.loc 5 119 0
 2226 00e2 3B1D     		adds	r3, r7, #4
 2227 00e4 0021     		movs	r1, #0
 2228 00e6 1846     		mov	r0, r3
 2229 00e8 FFF7FEFF 		bl	osThreadCreate
 2230 00ec 0246     		mov	r2, r0
 2231 00ee 244B     		ldr	r3, .L113+48
 2232 00f0 1A60     		str	r2, [r3]
 120:Src/freertos.c **** 
 121:Src/freertos.c **** 
 122:Src/freertos.c ****   EnvironmentData = malloc(sizeof(ENVIRONMENT_DATA_FORMAT));
 2233              		.loc 5 122 0
 2234 00f2 7820     		movs	r0, #120
 2235 00f4 FFF7FEFF 		bl	malloc
 2236 00f8 0346     		mov	r3, r0
 2237 00fa 1A46     		mov	r2, r3
 2238 00fc 214B     		ldr	r3, .L113+52
 2239 00fe 1A60     		str	r2, [r3]
 123:Src/freertos.c ****   ControlData = malloc(sizeof(CONTROL_DATA_FORMAT));
 2240              		.loc 5 123 0
 2241 0100 7820     		movs	r0, #120
 2242 0102 FFF7FEFF 		bl	malloc
ARM GAS  /tmp/ccux5DbS.s 			page 53


 2243 0106 0346     		mov	r3, r0
 2244 0108 1A46     		mov	r2, r3
 2245 010a 1F4B     		ldr	r3, .L113+56
 2246 010c 1A60     		str	r2, [r3]
 124:Src/freertos.c ****   UpdateFile = malloc(sizeof(UPDATE_FILE_FORMAT));
 2247              		.loc 5 124 0
 2248 010e 7420     		movs	r0, #116
 2249 0110 FFF7FEFF 		bl	malloc
 2250 0114 0346     		mov	r3, r0
 2251 0116 1A46     		mov	r2, r3
 2252 0118 1C4B     		ldr	r3, .L113+60
 2253 011a 1A60     		str	r2, [r3]
 125:Src/freertos.c **** 
 126:Src/freertos.c ****   SpiRxData = malloc(sizeof(SPI_TRANSFER_FORMAT));
 2254              		.loc 5 126 0
 2255 011c 7820     		movs	r0, #120
 2256 011e FFF7FEFF 		bl	malloc
 2257 0122 0346     		mov	r3, r0
 2258 0124 1A46     		mov	r2, r3
 2259 0126 1A4B     		ldr	r3, .L113+64
 2260 0128 1A60     		str	r2, [r3]
 127:Src/freertos.c **** 
 128:Src/freertos.c ****   SpiTxData = malloc(sizeof(SPI_TRANSFER_FORMAT));
 2261              		.loc 5 128 0
 2262 012a 7820     		movs	r0, #120
 2263 012c FFF7FEFF 		bl	malloc
 2264 0130 0346     		mov	r3, r0
 2265 0132 1A46     		mov	r2, r3
 2266 0134 174B     		ldr	r3, .L113+68
 2267 0136 1A60     		str	r2, [r3]
 129:Src/freertos.c ****   SpiCheckData = malloc(sizeof(SPI_TRANSFER_FORMAT));
 2268              		.loc 5 129 0
 2269 0138 7820     		movs	r0, #120
 2270 013a FFF7FEFF 		bl	malloc
 2271 013e 0346     		mov	r3, r0
 2272 0140 1A46     		mov	r2, r3
 2273 0142 154B     		ldr	r3, .L113+72
 2274 0144 1A60     		str	r2, [r3]
 130:Src/freertos.c **** 
 131:Src/freertos.c **** 
 132:Src/freertos.c **** }
 2275              		.loc 5 132 0
 2276 0146 00BF     		nop
 2277 0148 6837     		adds	r7, r7, #104
 2278              	.LCFI73:
 2279              		.cfi_def_cfa_offset 16
 2280 014a BD46     		mov	sp, r7
 2281              	.LCFI74:
 2282              		.cfi_def_cfa_register 13
 2283              		@ sp needed
 2284 014c B0BD     		pop	{r4, r5, r7, pc}
 2285              	.L114:
 2286 014e 00BF     		.align	2
 2287              	.L113:
 2288 0150 00000000 		.word	spiMutexHandle
 2289 0154 00000000 		.word	uartMutexHandle
 2290 0158 00000000 		.word	memoryMutexHandle
ARM GAS  /tmp/ccux5DbS.s 			page 54


 2291 015c 00000000 		.word	uartSemaphoreHandle
 2292 0160 00000000 		.word	spiSemaphoreHandle
 2293 0164 E8000000 		.word	.LC22
 2294 0168 00000000 		.word	gpsThreadHandle
 2295 016c 0C010000 		.word	.LC23
 2296 0170 00000000 		.word	sensorThreadHandle
 2297 0174 30010000 		.word	.LC24
 2298 0178 00000000 		.word	spiComThreadHandle
 2299 017c 50010000 		.word	.LC25
 2300 0180 00000000 		.word	motorThreadHandle
 2301 0184 00000000 		.word	EnvironmentData
 2302 0188 00000000 		.word	ControlData
 2303 018c 00000000 		.word	UpdateFile
 2304 0190 00000000 		.word	SpiRxData
 2305 0194 00000000 		.word	SpiTxData
 2306 0198 00000000 		.word	SpiCheckData
 2307              		.cfi_endproc
 2308              	.LFE160:
 2310              		.text
 2311              	.Letext0:
 2312              		.file 6 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stdarg.h"
 2313              		.file 7 "/usr/include/newlib/machine/_default_types.h"
 2314              		.file 8 "/usr/include/newlib/sys/lock.h"
 2315              		.file 9 "/usr/include/newlib/sys/_types.h"
 2316              		.file 10 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 2317              		.file 11 "/usr/include/newlib/sys/reent.h"
 2318              		.file 12 "<built-in>"
 2319              		.file 13 "/usr/include/newlib/sys/_stdint.h"
 2320              		.file 14 "Inc/main.h"
 2321              		.file 15 "Drivers/CMSIS/Include/core_cm7.h"
 2322              		.file 16 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 2323              		.file 17 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f746xx.h"
 2324              		.file 18 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 2325              		.file 19 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 2326              		.file 20 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_spi.h"
 2327              		.file 21 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim.h"
 2328              		.file 22 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_uart.h"
 2329              		.file 23 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h"
 2330              		.file 24 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 2331              		.file 25 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 2332              		.file 26 "Middlewares/Third_Party/FreeRTOS/Source/include/semphr.h"
 2333              		.file 27 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 2334              		.file 28 "Inc/gps.h"
 2335              		.file 29 "Inc/sensor.h"
 2336              		.file 30 "Inc/motor.h"
 2337              		.file 31 "Inc/usart.h"
 2338              		.file 32 "Inc/spi.h"
 2339              		.file 33 "Inc/tim.h"
 2340              		.file 34 "Inc/freertos.h"
ARM GAS  /tmp/ccux5DbS.s 			page 55


DEFINED SYMBOLS
                            *ABS*:0000000000000000 freertos.c
                            *COM*:00000000000001a0 gpsData
                            *COM*:0000000000000014 sensorValues
                            *COM*:0000000000000008 motor1
                            *COM*:0000000000000008 motor2
                            *COM*:0000000000000008 motor3
                            *COM*:0000000000000008 motor4
                            *COM*:0000000000000004 gpsThreadHandle
                            *COM*:0000000000000004 sensorThreadHandle
                            *COM*:0000000000000004 spiComThreadHandle
                            *COM*:0000000000000004 motorThreadHandle
                            *COM*:0000000000000004 spiMutexHandle
                            *COM*:0000000000000004 uartMutexHandle
                            *COM*:0000000000000004 memoryMutexHandle
                            *COM*:0000000000000004 spiSemaphoreHandle
                            *COM*:0000000000000004 uartSemaphoreHandle
                            *COM*:0000000000000004 SpiCheckData
                            *COM*:0000000000000004 SpiTxData
                            *COM*:0000000000000004 SpiRxData
                            *COM*:0000000000000004 EnvironmentData
                            *COM*:0000000000000004 ControlData
                            *COM*:0000000000000004 UpdateFile
                            *COM*:0000000000000001 rx_buf
     /tmp/ccux5DbS.s:40     .text.UART4_IRQHandler:0000000000000000 $t
     /tmp/ccux5DbS.s:47     .text.UART4_IRQHandler:0000000000000000 UART4_IRQHandler
     /tmp/ccux5DbS.s:77     .text.UART4_IRQHandler:000000000000001c $d
     /tmp/ccux5DbS.s:83     .rodata:0000000000000000 $d
     /tmp/ccux5DbS.s:90     .text.gpsOps:0000000000000000 $t
     /tmp/ccux5DbS.s:97     .text.gpsOps:0000000000000000 gpsOps
     /tmp/ccux5DbS.s:1971   .text.mprintf:0000000000000000 mprintf
     /tmp/ccux5DbS.s:204    .text.gpsOps:00000000000000a8 $d
     /tmp/ccux5DbS.s:220    .data.NextUpdateDataPackage:0000000000000000 NextUpdateDataPackage
     /tmp/ccux5DbS.s:217    .data.NextUpdateDataPackage:0000000000000000 $d
     /tmp/ccux5DbS.s:227    .data.CurrentUpdateDataPackage:0000000000000000 CurrentUpdateDataPackage
     /tmp/ccux5DbS.s:224    .data.CurrentUpdateDataPackage:0000000000000000 $d
     /tmp/ccux5DbS.s:230    .text.writeFlash:0000000000000000 $t
     /tmp/ccux5DbS.s:237    .text.writeFlash:0000000000000000 writeFlash
     /tmp/ccux5DbS.s:281    .text.readFlash:0000000000000000 $t
     /tmp/ccux5DbS.s:288    .text.readFlash:0000000000000000 readFlash
     /tmp/ccux5DbS.s:330    .text.SPI1_IRQHandler:0000000000000000 $t
     /tmp/ccux5DbS.s:337    .text.SPI1_IRQHandler:0000000000000000 SPI1_IRQHandler
     /tmp/ccux5DbS.s:366    .text.SPI1_IRQHandler:000000000000001c $d
     /tmp/ccux5DbS.s:376    .text.spiComOps:0000000000000000 $t
     /tmp/ccux5DbS.s:383    .text.spiComOps:0000000000000000 spiComOps
     /tmp/ccux5DbS.s:547    .text.checkIfUpdateData:0000000000000000 checkIfUpdateData
     /tmp/ccux5DbS.s:681    .text.confirmUpdateDataAccuracy:0000000000000000 confirmUpdateDataAccuracy
     /tmp/ccux5DbS.s:821    .text.putUpdateDataResponse:0000000000000000 putUpdateDataResponse
     /tmp/ccux5DbS.s:612    .text.checkIfControlData:0000000000000000 checkIfControlData
     /tmp/ccux5DbS.s:905    .text.putControlDataResponse:0000000000000000 putControlDataResponse
     /tmp/ccux5DbS.s:982    .text.putEnvironmentData:0000000000000000 putEnvironmentData
     /tmp/ccux5DbS.s:1069   .text.processUpdateData:0000000000000000 processUpdateData
     /tmp/ccux5DbS.s:1557   .text.processControlData:0000000000000000 processControlData
     /tmp/ccux5DbS.s:530    .text.spiComOps:00000000000000e4 $d
     /tmp/ccux5DbS.s:540    .text.checkIfUpdateData:0000000000000000 $t
     /tmp/ccux5DbS.s:599    .text.checkIfUpdateData:000000000000003c $d
     /tmp/ccux5DbS.s:605    .text.checkIfControlData:0000000000000000 $t
ARM GAS  /tmp/ccux5DbS.s 			page 56


     /tmp/ccux5DbS.s:668    .text.checkIfControlData:0000000000000038 $d
     /tmp/ccux5DbS.s:674    .text.confirmUpdateDataAccuracy:0000000000000000 $t
     /tmp/ccux5DbS.s:807    .text.confirmUpdateDataAccuracy:000000000000009c $d
     /tmp/ccux5DbS.s:814    .text.putUpdateDataResponse:0000000000000000 $t
     /tmp/ccux5DbS.s:891    .text.putUpdateDataResponse:0000000000000068 $d
     /tmp/ccux5DbS.s:898    .text.putControlDataResponse:0000000000000000 $t
     /tmp/ccux5DbS.s:968    .text.putControlDataResponse:0000000000000064 $d
     /tmp/ccux5DbS.s:975    .text.putEnvironmentData:0000000000000000 $t
     /tmp/ccux5DbS.s:1045   .text.putEnvironmentData:0000000000000064 $d
     /tmp/ccux5DbS.s:1062   .text.processUpdateData:0000000000000000 $t
     /tmp/ccux5DbS.s:1300   .text.processUpdateData:0000000000000190 $d
     /tmp/ccux5DbS.s:1321   .text.writeUpdateFileToFlash:0000000000000000 $t
     /tmp/ccux5DbS.s:1328   .text.writeUpdateFileToFlash:0000000000000000 writeUpdateFileToFlash
     /tmp/ccux5DbS.s:1522   .text.writeUpdateFileToFlash:0000000000000154 $d
     /tmp/ccux5DbS.s:1550   .text.processControlData:0000000000000000 $t
     /tmp/ccux5DbS.s:1677   .text.processControlData:00000000000000b4 $d
     /tmp/ccux5DbS.s:1692   .text.sensorOps:0000000000000000 $t
     /tmp/ccux5DbS.s:1699   .text.sensorOps:0000000000000000 sensorOps
     /tmp/ccux5DbS.s:1779   .text.sensorOps:0000000000000074 $d
     /tmp/ccux5DbS.s:1792   .text.motorOps:0000000000000000 $t
     /tmp/ccux5DbS.s:1799   .text.motorOps:0000000000000000 motorOps
     /tmp/ccux5DbS.s:1891   .text.motorOps:0000000000000078 $d
     /tmp/ccux5DbS.s:1899   .text.vprint:0000000000000000 $t
     /tmp/ccux5DbS.s:1906   .text.vprint:0000000000000000 vprint
     /tmp/ccux5DbS.s:1959   .text.vprint:0000000000000044 $d
     /tmp/ccux5DbS.s:1964   .text.mprintf:0000000000000000 $t
     /tmp/ccux5DbS.s:2041   .text.mprintf:0000000000000040 $d
     /tmp/ccux5DbS.s:2091   .text.MX_FREERTOS_Init:0000000000000000 $t
     /tmp/ccux5DbS.s:2098   .text.MX_FREERTOS_Init:0000000000000000 MX_FREERTOS_Init
     /tmp/ccux5DbS.s:2288   .text.MX_FREERTOS_Init:0000000000000150 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_UART_IRQHandler
xQueueGiveFromISR
huart4
gpsInit
xQueueGenericReceive
checkGpsData
xQueueGenericSend
HAL_GPIO_TogglePin
enableGps
receiveGpsData
HAL_UART_Receive_IT
HAL_FLASH_Program
HAL_SPI_IRQHandler
hspi1
HAL_FLASH_Unlock
FLASH_Erase_Sector
HAL_FLASH_Lock
HAL_SPI_TransmitReceive_IT
HAL_SPI_GetState
memcpy
osDelay
HAL_NVIC_SystemReset
sensorInit
HAL_TIM_PWM_Start
ARM GAS  /tmp/ccux5DbS.s 			page 57


readAllSensors
htim3
motor1Drive
motor2Drive
vsprintf
strlen
HAL_UART_Transmit
huart1
osMutexCreate
osSemaphoreCreate
osThreadCreate
malloc
