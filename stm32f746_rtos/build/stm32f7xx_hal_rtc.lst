ARM GAS  /tmp/ccrfV39P.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f7xx_hal_rtc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_RTC_Init,"ax",%progbits
  18              		.align	1
  19              		.global	HAL_RTC_Init
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	HAL_RTC_Init:
  26              	.LFB136:
  27              		.file 1 "Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c"
   1:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
   2:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ******************************************************************************
   3:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @file    stm32f7xx_hal_rtc.c
   4:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @author  MCD Application Team
   5:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief   RTC HAL module driver.
   6:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This file provides firmware functions to manage the following 
   7:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          functionalities of the Real Time Clock (RTC) peripheral:
   8:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *           + RTC Time and Date functions
  10:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *           + RTC Alarm functions
  11:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *           + Peripheral Control functions   
  12:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *           + Peripheral State functions
  13:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         
  14:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   @verbatim
  15:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ==============================================================================
  16:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ##### Backup Domain Operating Condition #####
  17:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ==============================================================================
  18:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] The real-time clock (RTC), the RTC backup registers, and the backup 
  19:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        SRAM (BKP SRAM) can be powered from the VBAT voltage when the main 
  20:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        VDD supply is powered off.
  21:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        To retain the content of the RTC backup registers, backup SRAM, and supply 
  22:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        the RTC when VDD is turned off, VBAT pin can be connected to an optional 
  23:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        standby voltage supplied by a battery or by another source.
  24:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
  25:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] To allow the RTC operating even when the main digital supply (VDD) is turned
  26:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        off, the VBAT pin powers the following blocks:
  27:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) The RTC
  28:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) The LSE oscillator
  29:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) The backup SRAM when the low power backup regulator is enabled
  30:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) PC13 to PC15 I/Os, plus PI8 I/O (when available)
  31:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
ARM GAS  /tmp/ccrfV39P.s 			page 2


  32:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] When the backup domain is supplied by VDD (analog switch connected to VDD),
  33:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        the following pins are available:
  34:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) PC14 and PC15 can be used as either GPIO or LSE pins
  35:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) PC13 can be used as a GPIO or as the RTC_AF1 pin
  36:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) PI8 can be used as a GPIO or as the RTC_AF2 pin
  37:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
  38:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] When the backup domain is supplied by VBAT (analog switch connected to VBAT 
  39:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        because VDD is not present), the following pins are available:
  40:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) PC14 and PC15 can be used as LSE pins only
  41:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) PC13 can be used as the RTC_AF1 pin 
  42:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) PI8 can be used as the RTC_AF2 pin
  43:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) PC1 can be used as the RTC_AF3 pin
  44:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              
  45:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                    ##### Backup Domain Reset #####
  46:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ==================================================================
  47:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] The backup domain reset sets all RTC registers and the RCC_BDCR register 
  48:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        to their reset values. The BKPSRAM is not affected by this reset. The only
  49:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        way to reset the BKPSRAM is through the Flash interface by requesting 
  50:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        a protection level change from 1 to 0.
  51:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] A backup domain reset is generated when one of the following events occurs:
  52:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) Software reset, triggered by setting the BDRST bit in the 
  53:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         RCC Backup domain control register (RCC_BDCR). 
  54:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) VDD or VBAT power on, if both supplies have previously been powered off.  
  55:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
  56:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                    ##### Backup Domain Access #####
  57:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ==================================================================
  58:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] After reset, the backup domain (RTC registers, RTC backup data 
  59:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        registers and backup SRAM) is protected against possible unwanted write 
  60:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        accesses. 
  61:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] To enable access to the RTC Domain and RTC registers, proceed as follows:
  62:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) Enable the Power Controller (PWR) APB1 interface clock using the
  63:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RCC_PWR_CLK_ENABLE() function.
  64:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) Enable access to RTC domain using the HAL_PWR_EnableBkUpAccess() function.
  65:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) Select the RTC clock source using the __HAL_RCC_RTC_CONFIG() function.
  66:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) Enable RTC Clock using the __HAL_RCC_RTC_ENABLE() function.
  67:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
  68:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
  69:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                   ##### How to use this driver #####
  70:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ==================================================================
  71:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] 
  72:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) Enable the RTC domain access (see description in the section above).
  73:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) Configure the RTC Prescaler (Asynchronous and Synchronous) and RTC hour 
  74:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         format using the HAL_RTC_Init() function.
  75:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
  76:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *** Time and Date configuration ***
  77:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ===================================
  78:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] 
  79:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) To configure the RTC Calendar (Time and Date) use the HAL_RTC_SetTime() 
  80:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         and HAL_RTC_SetDate() functions.
  81:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) To read the RTC Calendar, use the HAL_RTC_GetTime() and HAL_RTC_GetDate() functions. 
  82:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
  83:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *** Alarm configuration ***
  84:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ===========================
  85:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..]
  86:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) To configure the RTC Alarm use the HAL_RTC_SetAlarm() function. 
  87:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         You can also configure the RTC Alarm with interrupt mode using the HAL_RTC_SetAlarm_IT() fu
  88:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) To read the RTC Alarm, use the HAL_RTC_GetAlarm() function.
ARM GAS  /tmp/ccrfV39P.s 			page 3


  89:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
  90:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                   ##### RTC and low power modes #####
  91:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ==================================================================
  92:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] The MCU can be woken up from a low power mode by an RTC alternate 
  93:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        function.
  94:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] The RTC alternate functions are the RTC alarms (Alarm A and Alarm B), 
  95:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
  96:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        These RTC alternate functions can wake up the system from the Stop and 
  97:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        Standby low power modes.
  98:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] The system can also wake up from low power modes without depending 
  99:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        on an external interrupt (Auto-wakeup mode), by using the RTC alarm 
 100:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        or the RTC wakeup events.
 101:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] The RTC provides a programmable time base for waking up from the 
 102:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        Stop or Standby mode at regular intervals.
 103:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        Wakeup from STOP and STANDBY modes is possible only when the RTC clock source
 104:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        is LSE or LSI.
 105:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****      
 106:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    @endverbatim
 107:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ******************************************************************************
 108:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @attention
 109:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *
 110:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
 111:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *
 112:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * Redistribution and use in source and binary forms, with or without modification,
 113:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * are permitted provided that the following conditions are met:
 114:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 115:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *      this list of conditions and the following disclaimer.
 116:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 117:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *      this list of conditions and the following disclaimer in the documentation
 118:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *      and/or other materials provided with the distribution.
 119:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 120:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *      may be used to endorse or promote products derived from this software
 121:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *      without specific prior written permission.
 122:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *
 123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 124:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 125:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 126:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 127:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 128:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 129:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 130:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 131:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 132:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 133:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *
 134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ******************************************************************************
 135:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */ 
 136:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 137:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /* Includes ------------------------------------------------------------------*/
 138:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** #include "stm32f7xx_hal.h"
 139:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 140:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /** @addtogroup STM32F7xx_HAL_Driver
 141:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @{
 142:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 143:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 144:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /** @defgroup RTC RTC
 145:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief RTC HAL module driver
ARM GAS  /tmp/ccrfV39P.s 			page 4


 146:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @{
 147:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 148:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 149:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** #ifdef HAL_RTC_MODULE_ENABLED
 150:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 151:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 152:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /* Private define ------------------------------------------------------------*/
 153:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /* Private macro -------------------------------------------------------------*/
 154:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /* Private variables ---------------------------------------------------------*/
 155:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 156:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /* Private functions ---------------------------------------------------------*/
 157:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 158:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /** @defgroup RTC_Exported_Functions RTC Exported Functions
 159:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @{
 160:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 161:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 162:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /** @defgroup RTC_Group1 Initialization and de-initialization functions 
 163:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *  @brief    Initialization and Configuration functions 
 164:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *
 165:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @verbatim    
 166:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================
 167:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ##### Initialization and de-initialization functions #####
 168:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================
 169:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    [..] This section provides functions allowing to initialize and configure the 
 170:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****          RTC Prescaler (Synchronous and Asynchronous), RTC Hour format, disable 
 171:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****          RTC registers Write protection, enter and exit the RTC initialization mode, 
 172:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****          RTC registers synchronization check and reference clock detection enable.
 173:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****          (#) The RTC Prescaler is programmed to generate the RTC 1Hz time base. 
 174:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              It is split into 2 programmable prescalers to minimize power consumption.
 175:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              (++) A 7-bit asynchronous prescaler and a 13-bit synchronous prescaler.
 176:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              (++) When both prescalers are used, it is recommended to configure the 
 177:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  asynchronous prescaler to a high value to minimize power consumption.
 178:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****          (#) All RTC registers are Write protected. Writing to the RTC registers
 179:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              is enabled by writing a key into the Write Protection register, RTC_WPR.
 180:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****          (#) To configure the RTC Calendar, user application should enter 
 181:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              initialization mode. In this mode, the calendar counter is stopped 
 182:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              and its value can be updated. When the initialization sequence is 
 183:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              complete, the calendar restarts counting after 4 RTCCLK cycles.
 184:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****          (#) To read the calendar through the shadow registers after Calendar 
 185:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              initialization, calendar update or after wakeup from low power modes 
 186:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              the software must first clear the RSF flag. The software must then 
 187:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              wait until it is set again before reading the calendar, which means 
 188:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              that the calendar registers have been correctly copied into the 
 189:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              RTC_TR and RTC_DR shadow registers.The HAL_RTC_WaitForSynchro() function 
 190:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              implements the above software sequence (RSF clear and RSF check).
 191:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  
 192:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @endverbatim
 193:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @{
 194:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 195:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 196:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 197:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Initializes the RTC peripheral 
 198:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 199:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
 200:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 201:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 202:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
ARM GAS  /tmp/ccrfV39P.s 			page 5


 203:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
  28              		.loc 1 203 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 82B0     		sub	sp, sp, #8
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
 204:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the RTC peripheral state */
 205:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(hrtc == NULL)
  44              		.loc 1 205 0
  45 0008 7B68     		ldr	r3, [r7, #4]
  46 000a 002B     		cmp	r3, #0
  47 000c 01D1     		bne	.L2
 206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 207:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****      return HAL_ERROR;
  48              		.loc 1 207 0
  49 000e 0123     		movs	r3, #1
  50 0010 6BE0     		b	.L3
  51              	.L2:
 208:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 209:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 210:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
 211:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 212:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 213:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 214:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 215:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
 216:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 217:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 218:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 219:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(hrtc->State == HAL_RTC_STATE_RESET)
  52              		.loc 1 219 0
  53 0012 7B68     		ldr	r3, [r7, #4]
  54 0014 5B7F     		ldrb	r3, [r3, #29]
  55 0016 DBB2     		uxtb	r3, r3
  56 0018 002B     		cmp	r3, #0
  57 001a 05D1     		bne	.L4
 220:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 221:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Allocate lock resource and initialize it */
 222:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Lock = HAL_UNLOCKED;
  58              		.loc 1 222 0
  59 001c 7B68     		ldr	r3, [r7, #4]
  60 001e 0022     		movs	r2, #0
  61 0020 1A77     		strb	r2, [r3, #28]
 223:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Initialize RTC MSP */
 224:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     HAL_RTC_MspInit(hrtc);
  62              		.loc 1 224 0
ARM GAS  /tmp/ccrfV39P.s 			page 6


  63 0022 7868     		ldr	r0, [r7, #4]
  64 0024 FFF7FEFF 		bl	HAL_RTC_MspInit
  65              	.L4:
 225:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 226:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 227:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Set RTC state */  
 228:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;  
  66              		.loc 1 228 0
  67 0028 7B68     		ldr	r3, [r7, #4]
  68 002a 0222     		movs	r2, #2
  69 002c 5A77     		strb	r2, [r3, #29]
 229:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        
 230:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 231:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
  70              		.loc 1 231 0
  71 002e 7B68     		ldr	r3, [r7, #4]
  72 0030 1B68     		ldr	r3, [r3]
  73 0032 CA22     		movs	r2, #202
  74 0034 5A62     		str	r2, [r3, #36]
  75 0036 7B68     		ldr	r3, [r7, #4]
  76 0038 1B68     		ldr	r3, [r3]
  77 003a 5322     		movs	r2, #83
  78 003c 5A62     		str	r2, [r3, #36]
 232:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 233:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Set Initialization mode */
 234:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
  79              		.loc 1 234 0
  80 003e 7868     		ldr	r0, [r7, #4]
  81 0040 FFF7FEFF 		bl	RTC_EnterInitMode
  82 0044 0346     		mov	r3, r0
  83 0046 002B     		cmp	r3, #0
  84 0048 08D0     		beq	.L5
 235:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 236:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 237:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
  85              		.loc 1 237 0
  86 004a 7B68     		ldr	r3, [r7, #4]
  87 004c 1B68     		ldr	r3, [r3]
  88 004e FF22     		movs	r2, #255
  89 0050 5A62     		str	r2, [r3, #36]
 238:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 239:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Set RTC state */
 240:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
  90              		.loc 1 240 0
  91 0052 7B68     		ldr	r3, [r7, #4]
  92 0054 0422     		movs	r2, #4
  93 0056 5A77     		strb	r2, [r3, #29]
 241:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 242:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     return HAL_ERROR;
  94              		.loc 1 242 0
  95 0058 0123     		movs	r3, #1
  96 005a 46E0     		b	.L3
  97              	.L5:
 243:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   } 
 244:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
 245:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   { 
 246:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Clear RTC_CR FMT, OSEL and POL Bits */
ARM GAS  /tmp/ccrfV39P.s 			page 7


 247:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
  98              		.loc 1 247 0
  99 005c 7B68     		ldr	r3, [r7, #4]
 100 005e 1A68     		ldr	r2, [r3]
 101 0060 7B68     		ldr	r3, [r7, #4]
 102 0062 1B68     		ldr	r3, [r3]
 103 0064 9968     		ldr	r1, [r3, #8]
 104 0066 234B     		ldr	r3, .L6
 105 0068 0B40     		ands	r3, r3, r1
 106 006a 9360     		str	r3, [r2, #8]
 248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Set RTC_CR register */
 249:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutP
 107              		.loc 1 249 0
 108 006c 7B68     		ldr	r3, [r7, #4]
 109 006e 1B68     		ldr	r3, [r3]
 110 0070 7A68     		ldr	r2, [r7, #4]
 111 0072 1268     		ldr	r2, [r2]
 112 0074 9168     		ldr	r1, [r2, #8]
 113 0076 7A68     		ldr	r2, [r7, #4]
 114 0078 5068     		ldr	r0, [r2, #4]
 115 007a 7A68     		ldr	r2, [r7, #4]
 116 007c 1269     		ldr	r2, [r2, #16]
 117 007e 1043     		orrs	r0, r0, r2
 118 0080 7A68     		ldr	r2, [r7, #4]
 119 0082 5269     		ldr	r2, [r2, #20]
 120 0084 0243     		orrs	r2, r2, r0
 121 0086 0A43     		orrs	r2, r2, r1
 122 0088 9A60     		str	r2, [r3, #8]
 250:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 251:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the RTC PRER */
 252:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 123              		.loc 1 252 0
 124 008a 7B68     		ldr	r3, [r7, #4]
 125 008c 1B68     		ldr	r3, [r3]
 126 008e 7A68     		ldr	r2, [r7, #4]
 127 0090 D268     		ldr	r2, [r2, #12]
 128 0092 1A61     		str	r2, [r3, #16]
 253:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 129              		.loc 1 253 0
 130 0094 7B68     		ldr	r3, [r7, #4]
 131 0096 1B68     		ldr	r3, [r3]
 132 0098 7A68     		ldr	r2, [r7, #4]
 133 009a 1268     		ldr	r2, [r2]
 134 009c 1169     		ldr	r1, [r2, #16]
 135 009e 7A68     		ldr	r2, [r7, #4]
 136 00a0 9268     		ldr	r2, [r2, #8]
 137 00a2 1204     		lsls	r2, r2, #16
 138 00a4 0A43     		orrs	r2, r2, r1
 139 00a6 1A61     		str	r2, [r3, #16]
 254:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 255:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Exit Initialization mode */
 256:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 140              		.loc 1 256 0
 141 00a8 7B68     		ldr	r3, [r7, #4]
 142 00aa 1B68     		ldr	r3, [r3]
 143 00ac 7A68     		ldr	r2, [r7, #4]
 144 00ae 1268     		ldr	r2, [r2]
ARM GAS  /tmp/ccrfV39P.s 			page 8


 145 00b0 D268     		ldr	r2, [r2, #12]
 146 00b2 22F08002 		bic	r2, r2, #128
 147 00b6 DA60     		str	r2, [r3, #12]
 257:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 258:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 148              		.loc 1 258 0
 149 00b8 7B68     		ldr	r3, [r7, #4]
 150 00ba 1B68     		ldr	r3, [r3]
 151 00bc 7A68     		ldr	r2, [r7, #4]
 152 00be 1268     		ldr	r2, [r2]
 153 00c0 D26C     		ldr	r2, [r2, #76]
 154 00c2 22F00802 		bic	r2, r2, #8
 155 00c6 DA64     		str	r2, [r3, #76]
 259:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType); 
 156              		.loc 1 259 0
 157 00c8 7B68     		ldr	r3, [r7, #4]
 158 00ca 1B68     		ldr	r3, [r3]
 159 00cc 7A68     		ldr	r2, [r7, #4]
 160 00ce 1268     		ldr	r2, [r2]
 161 00d0 D16C     		ldr	r1, [r2, #76]
 162 00d2 7A68     		ldr	r2, [r7, #4]
 163 00d4 9269     		ldr	r2, [r2, #24]
 164 00d6 0A43     		orrs	r2, r2, r1
 165 00d8 DA64     		str	r2, [r3, #76]
 260:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 262:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 166              		.loc 1 262 0
 167 00da 7B68     		ldr	r3, [r7, #4]
 168 00dc 1B68     		ldr	r3, [r3]
 169 00de FF22     		movs	r2, #255
 170 00e0 5A62     		str	r2, [r3, #36]
 263:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 264:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Set RTC state */
 265:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_READY;
 171              		.loc 1 265 0
 172 00e2 7B68     		ldr	r3, [r7, #4]
 173 00e4 0122     		movs	r2, #1
 174 00e6 5A77     		strb	r2, [r3, #29]
 266:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 267:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     return HAL_OK;
 175              		.loc 1 267 0
 176 00e8 0023     		movs	r3, #0
 177              	.L3:
 268:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 269:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 178              		.loc 1 269 0
 179 00ea 1846     		mov	r0, r3
 180 00ec 0837     		adds	r7, r7, #8
 181              	.LCFI3:
 182              		.cfi_def_cfa_offset 8
 183 00ee BD46     		mov	sp, r7
 184              	.LCFI4:
 185              		.cfi_def_cfa_register 13
 186              		@ sp needed
 187 00f0 80BD     		pop	{r7, pc}
 188              	.L7:
ARM GAS  /tmp/ccrfV39P.s 			page 9


 189 00f2 00BF     		.align	2
 190              	.L6:
 191 00f4 BFFF8FFF 		.word	-7340097
 192              		.cfi_endproc
 193              	.LFE136:
 195              		.section	.text.HAL_RTC_DeInit,"ax",%progbits
 196              		.align	1
 197              		.global	HAL_RTC_DeInit
 198              		.syntax unified
 199              		.thumb
 200              		.thumb_func
 201              		.fpu fpv4-sp-d16
 203              	HAL_RTC_DeInit:
 204              	.LFB137:
 270:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 271:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 272:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  DeInitializes the RTC peripheral 
 273:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 274:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
 275:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @note   This function doesn't reset the RTC Backup Data registers.   
 276:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 277:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 278:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_DeInit(RTC_HandleTypeDef *hrtc)
 279:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 205              		.loc 1 279 0
 206              		.cfi_startproc
 207              		@ args = 0, pretend = 0, frame = 16
 208              		@ frame_needed = 1, uses_anonymous_args = 0
 209 0000 80B5     		push	{r7, lr}
 210              	.LCFI5:
 211              		.cfi_def_cfa_offset 8
 212              		.cfi_offset 7, -8
 213              		.cfi_offset 14, -4
 214 0002 84B0     		sub	sp, sp, #16
 215              	.LCFI6:
 216              		.cfi_def_cfa_offset 24
 217 0004 00AF     		add	r7, sp, #0
 218              	.LCFI7:
 219              		.cfi_def_cfa_register 7
 220 0006 7860     		str	r0, [r7, #4]
 280:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tickstart = 0;
 221              		.loc 1 280 0
 222 0008 0023     		movs	r3, #0
 223 000a FB60     		str	r3, [r7, #12]
 281:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 282:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
 283:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 284:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 285:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Set RTC state */
 286:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY; 
 224              		.loc 1 286 0
 225 000c 7B68     		ldr	r3, [r7, #4]
 226 000e 0222     		movs	r2, #2
 227 0010 5A77     		strb	r2, [r3, #29]
 287:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 288:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 289:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
ARM GAS  /tmp/ccrfV39P.s 			page 10


 228              		.loc 1 289 0
 229 0012 7B68     		ldr	r3, [r7, #4]
 230 0014 1B68     		ldr	r3, [r3]
 231 0016 CA22     		movs	r2, #202
 232 0018 5A62     		str	r2, [r3, #36]
 233 001a 7B68     		ldr	r3, [r7, #4]
 234 001c 1B68     		ldr	r3, [r3]
 235 001e 5322     		movs	r2, #83
 236 0020 5A62     		str	r2, [r3, #36]
 290:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 291:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Set Initialization mode */
 292:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
 237              		.loc 1 292 0
 238 0022 7868     		ldr	r0, [r7, #4]
 239 0024 FFF7FEFF 		bl	RTC_EnterInitMode
 240 0028 0346     		mov	r3, r0
 241 002a 002B     		cmp	r3, #0
 242 002c 08D0     		beq	.L9
 293:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 294:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 295:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 243              		.loc 1 295 0
 244 002e 7B68     		ldr	r3, [r7, #4]
 245 0030 1B68     		ldr	r3, [r3]
 246 0032 FF22     		movs	r2, #255
 247 0034 5A62     		str	r2, [r3, #36]
 296:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 297:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Set RTC state */
 298:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 248              		.loc 1 298 0
 249 0036 7B68     		ldr	r3, [r7, #4]
 250 0038 0422     		movs	r2, #4
 251 003a 5A77     		strb	r2, [r3, #29]
 299:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 300:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     return HAL_ERROR;
 252              		.loc 1 300 0
 253 003c 0123     		movs	r3, #1
 254 003e 84E0     		b	.L10
 255              	.L9:
 301:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }  
 302:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
 303:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 304:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Reset TR, DR and CR registers */
 305:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->TR = (uint32_t)0x00000000;
 256              		.loc 1 305 0
 257 0040 7B68     		ldr	r3, [r7, #4]
 258 0042 1B68     		ldr	r3, [r3]
 259 0044 0022     		movs	r2, #0
 260 0046 1A60     		str	r2, [r3]
 306:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->DR = (uint32_t)0x00002101;
 261              		.loc 1 306 0
 262 0048 7B68     		ldr	r3, [r7, #4]
 263 004a 1B68     		ldr	r3, [r3]
 264 004c 42F20112 		movw	r2, #8449
 265 0050 5A60     		str	r2, [r3, #4]
 307:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 308:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->CR &= (uint32_t)0x00000007;
ARM GAS  /tmp/ccrfV39P.s 			page 11


 266              		.loc 1 308 0
 267 0052 7B68     		ldr	r3, [r7, #4]
 268 0054 1B68     		ldr	r3, [r3]
 269 0056 7A68     		ldr	r2, [r7, #4]
 270 0058 1268     		ldr	r2, [r2]
 271 005a 9268     		ldr	r2, [r2, #8]
 272 005c 02F00702 		and	r2, r2, #7
 273 0060 9A60     		str	r2, [r3, #8]
 309:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 310:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
 311:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 274              		.loc 1 311 0
 275 0062 FFF7FEFF 		bl	HAL_GetTick
 276 0066 F860     		str	r0, [r7, #12]
 312:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 313:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Wait till WUTWF flag is set and if Time out is reached exit */
 314:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     while(((hrtc->Instance->ISR) & RTC_ISR_WUTWF) == (uint32_t)RESET)
 277              		.loc 1 314 0
 278 0068 10E0     		b	.L11
 279              	.L12:
 315:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 316:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 280              		.loc 1 316 0
 281 006a FFF7FEFF 		bl	HAL_GetTick
 282 006e 0246     		mov	r2, r0
 283 0070 FB68     		ldr	r3, [r7, #12]
 284 0072 D31A     		subs	r3, r2, r3
 285 0074 B3F57A7F 		cmp	r3, #1000
 286 0078 08D9     		bls	.L11
 317:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       { 
 318:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 319:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 287              		.loc 1 319 0
 288 007a 7B68     		ldr	r3, [r7, #4]
 289 007c 1B68     		ldr	r3, [r3]
 290 007e FF22     		movs	r2, #255
 291 0080 5A62     		str	r2, [r3, #36]
 320:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 321:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Set RTC state */
 322:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 292              		.loc 1 322 0
 293 0082 7B68     		ldr	r3, [r7, #4]
 294 0084 0322     		movs	r2, #3
 295 0086 5A77     		strb	r2, [r3, #29]
 323:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 324:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 296              		.loc 1 324 0
 297 0088 0323     		movs	r3, #3
 298 008a 5EE0     		b	.L10
 299              	.L11:
 314:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 300              		.loc 1 314 0
 301 008c 7B68     		ldr	r3, [r7, #4]
 302 008e 1B68     		ldr	r3, [r3]
 303 0090 DB68     		ldr	r3, [r3, #12]
 304 0092 03F00403 		and	r3, r3, #4
 305 0096 002B     		cmp	r3, #0
ARM GAS  /tmp/ccrfV39P.s 			page 12


 306 0098 E7D0     		beq	.L12
 325:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }      
 326:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 327:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 328:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Reset all RTC CR register bits */
 329:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->CR &= (uint32_t)0x00000000;
 307              		.loc 1 329 0
 308 009a 7B68     		ldr	r3, [r7, #4]
 309 009c 1B68     		ldr	r3, [r3]
 310 009e 9B68     		ldr	r3, [r3, #8]
 311 00a0 7B68     		ldr	r3, [r7, #4]
 312 00a2 1B68     		ldr	r3, [r3]
 313 00a4 0022     		movs	r2, #0
 314 00a6 9A60     		str	r2, [r3, #8]
 330:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->WUTR = (uint32_t)0x0000FFFF;
 315              		.loc 1 330 0
 316 00a8 7B68     		ldr	r3, [r7, #4]
 317 00aa 1B68     		ldr	r3, [r3]
 318 00ac 4FF6FF72 		movw	r2, #65535
 319 00b0 5A61     		str	r2, [r3, #20]
 331:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->PRER = (uint32_t)0x007F00FF;
 320              		.loc 1 331 0
 321 00b2 7B68     		ldr	r3, [r7, #4]
 322 00b4 1B68     		ldr	r3, [r3]
 323 00b6 274A     		ldr	r2, .L14
 324 00b8 1A61     		str	r2, [r3, #16]
 332:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = (uint32_t)0x00000000;
 325              		.loc 1 332 0
 326 00ba 7B68     		ldr	r3, [r7, #4]
 327 00bc 1B68     		ldr	r3, [r3]
 328 00be 0022     		movs	r2, #0
 329 00c0 DA61     		str	r2, [r3, #28]
 333:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = (uint32_t)0x00000000;
 330              		.loc 1 333 0
 331 00c2 7B68     		ldr	r3, [r7, #4]
 332 00c4 1B68     		ldr	r3, [r3]
 333 00c6 0022     		movs	r2, #0
 334 00c8 1A62     		str	r2, [r3, #32]
 334:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->SHIFTR = (uint32_t)0x00000000;
 335              		.loc 1 334 0
 336 00ca 7B68     		ldr	r3, [r7, #4]
 337 00cc 1B68     		ldr	r3, [r3]
 338 00ce 0022     		movs	r2, #0
 339 00d0 DA62     		str	r2, [r3, #44]
 335:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->CALR = (uint32_t)0x00000000;
 340              		.loc 1 335 0
 341 00d2 7B68     		ldr	r3, [r7, #4]
 342 00d4 1B68     		ldr	r3, [r3]
 343 00d6 0022     		movs	r2, #0
 344 00d8 DA63     		str	r2, [r3, #60]
 336:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = (uint32_t)0x00000000;
 345              		.loc 1 336 0
 346 00da 7B68     		ldr	r3, [r7, #4]
 347 00dc 1B68     		ldr	r3, [r3]
 348 00de 0022     		movs	r2, #0
 349 00e0 5A64     		str	r2, [r3, #68]
 337:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = (uint32_t)0x00000000;
ARM GAS  /tmp/ccrfV39P.s 			page 13


 350              		.loc 1 337 0
 351 00e2 7B68     		ldr	r3, [r7, #4]
 352 00e4 1B68     		ldr	r3, [r3]
 353 00e6 0022     		movs	r2, #0
 354 00e8 9A64     		str	r2, [r3, #72]
 338:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 339:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Reset ISR register and exit initialization mode */
 340:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ISR = (uint32_t)0x00000000;
 355              		.loc 1 340 0
 356 00ea 7B68     		ldr	r3, [r7, #4]
 357 00ec 1B68     		ldr	r3, [r3]
 358 00ee 0022     		movs	r2, #0
 359 00f0 DA60     		str	r2, [r3, #12]
 341:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 342:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Reset Tamper and alternate functions configuration register */
 343:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->TAMPCR = 0x00000000;
 360              		.loc 1 343 0
 361 00f2 7B68     		ldr	r3, [r7, #4]
 362 00f4 1B68     		ldr	r3, [r3]
 363 00f6 0022     		movs	r2, #0
 364 00f8 1A64     		str	r2, [r3, #64]
 344:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 345:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Reset Option register */
 346:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->OR = 0x00000000;
 365              		.loc 1 346 0
 366 00fa 7B68     		ldr	r3, [r7, #4]
 367 00fc 1B68     		ldr	r3, [r3]
 368 00fe 0022     		movs	r2, #0
 369 0100 DA64     		str	r2, [r3, #76]
 347:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 348:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 349:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 370              		.loc 1 349 0
 371 0102 7B68     		ldr	r3, [r7, #4]
 372 0104 1B68     		ldr	r3, [r3]
 373 0106 9B68     		ldr	r3, [r3, #8]
 374 0108 03F02003 		and	r3, r3, #32
 375 010c 002B     		cmp	r3, #0
 376 010e 0ED1     		bne	.L13
 350:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 351:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 377              		.loc 1 351 0
 378 0110 7868     		ldr	r0, [r7, #4]
 379 0112 FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 380 0116 0346     		mov	r3, r0
 381 0118 002B     		cmp	r3, #0
 382 011a 08D0     		beq	.L13
 352:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
 353:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 354:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 383              		.loc 1 354 0
 384 011c 7B68     		ldr	r3, [r7, #4]
 385 011e 1B68     		ldr	r3, [r3]
 386 0120 FF22     		movs	r2, #255
 387 0122 5A62     		str	r2, [r3, #36]
 355:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 356:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_ERROR;
ARM GAS  /tmp/ccrfV39P.s 			page 14


 388              		.loc 1 356 0
 389 0124 7B68     		ldr	r3, [r7, #4]
 390 0126 0422     		movs	r2, #4
 391 0128 5A77     		strb	r2, [r3, #29]
 357:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 358:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_ERROR;
 392              		.loc 1 358 0
 393 012a 0123     		movs	r3, #1
 394 012c 0DE0     		b	.L10
 395              	.L13:
 359:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }
 360:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }    
 361:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 362:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 363:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
 364:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 396              		.loc 1 364 0
 397 012e 7B68     		ldr	r3, [r7, #4]
 398 0130 1B68     		ldr	r3, [r3]
 399 0132 FF22     		movs	r2, #255
 400 0134 5A62     		str	r2, [r3, #36]
 365:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 366:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* De-Initialize RTC MSP */
 367:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   HAL_RTC_MspDeInit(hrtc);
 401              		.loc 1 367 0
 402 0136 7868     		ldr	r0, [r7, #4]
 403 0138 FFF7FEFF 		bl	HAL_RTC_MspDeInit
 368:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 369:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_RESET; 
 404              		.loc 1 369 0
 405 013c 7B68     		ldr	r3, [r7, #4]
 406 013e 0022     		movs	r2, #0
 407 0140 5A77     		strb	r2, [r3, #29]
 370:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 371:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Release Lock */
 372:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 408              		.loc 1 372 0
 409 0142 7B68     		ldr	r3, [r7, #4]
 410 0144 0022     		movs	r2, #0
 411 0146 1A77     		strb	r2, [r3, #28]
 373:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 374:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;
 412              		.loc 1 374 0
 413 0148 0023     		movs	r3, #0
 414              	.L10:
 375:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 415              		.loc 1 375 0
 416 014a 1846     		mov	r0, r3
 417 014c 1037     		adds	r7, r7, #16
 418              	.LCFI8:
 419              		.cfi_def_cfa_offset 8
 420 014e BD46     		mov	sp, r7
 421              	.LCFI9:
 422              		.cfi_def_cfa_register 13
 423              		@ sp needed
 424 0150 80BD     		pop	{r7, pc}
 425              	.L15:
ARM GAS  /tmp/ccrfV39P.s 			page 15


 426 0152 00BF     		.align	2
 427              	.L14:
 428 0154 FF007F00 		.word	8323327
 429              		.cfi_endproc
 430              	.LFE137:
 432              		.section	.text.HAL_RTC_MspInit,"ax",%progbits
 433              		.align	1
 434              		.weak	HAL_RTC_MspInit
 435              		.syntax unified
 436              		.thumb
 437              		.thumb_func
 438              		.fpu fpv4-sp-d16
 440              	HAL_RTC_MspInit:
 441              	.LFB138:
 376:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 377:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 378:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Initializes the RTC MSP.
 379:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 380:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.  
 381:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval None
 382:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 383:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** __weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
 384:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 442              		.loc 1 384 0
 443              		.cfi_startproc
 444              		@ args = 0, pretend = 0, frame = 8
 445              		@ frame_needed = 1, uses_anonymous_args = 0
 446              		@ link register save eliminated.
 447 0000 80B4     		push	{r7}
 448              	.LCFI10:
 449              		.cfi_def_cfa_offset 4
 450              		.cfi_offset 7, -4
 451 0002 83B0     		sub	sp, sp, #12
 452              	.LCFI11:
 453              		.cfi_def_cfa_offset 16
 454 0004 00AF     		add	r7, sp, #0
 455              	.LCFI12:
 456              		.cfi_def_cfa_register 7
 457 0006 7860     		str	r0, [r7, #4]
 385:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
 386:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   UNUSED(hrtc);
 387:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 388:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 389:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****             the HAL_RTC_MspInit could be implemented in the user file
 390:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    */ 
 391:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 458              		.loc 1 391 0
 459 0008 00BF     		nop
 460 000a 0C37     		adds	r7, r7, #12
 461              	.LCFI13:
 462              		.cfi_def_cfa_offset 4
 463 000c BD46     		mov	sp, r7
 464              	.LCFI14:
 465              		.cfi_def_cfa_register 13
 466              		@ sp needed
 467 000e 5DF8047B 		ldr	r7, [sp], #4
 468              	.LCFI15:
ARM GAS  /tmp/ccrfV39P.s 			page 16


 469              		.cfi_restore 7
 470              		.cfi_def_cfa_offset 0
 471 0012 7047     		bx	lr
 472              		.cfi_endproc
 473              	.LFE138:
 475              		.section	.text.HAL_RTC_MspDeInit,"ax",%progbits
 476              		.align	1
 477              		.weak	HAL_RTC_MspDeInit
 478              		.syntax unified
 479              		.thumb
 480              		.thumb_func
 481              		.fpu fpv4-sp-d16
 483              	HAL_RTC_MspDeInit:
 484              	.LFB139:
 392:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 393:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 394:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  DeInitializes the RTC MSP.
 395:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 396:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC. 
 397:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval None
 398:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 399:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** __weak void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
 400:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 485              		.loc 1 400 0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 8
 488              		@ frame_needed = 1, uses_anonymous_args = 0
 489              		@ link register save eliminated.
 490 0000 80B4     		push	{r7}
 491              	.LCFI16:
 492              		.cfi_def_cfa_offset 4
 493              		.cfi_offset 7, -4
 494 0002 83B0     		sub	sp, sp, #12
 495              	.LCFI17:
 496              		.cfi_def_cfa_offset 16
 497 0004 00AF     		add	r7, sp, #0
 498              	.LCFI18:
 499              		.cfi_def_cfa_register 7
 500 0006 7860     		str	r0, [r7, #4]
 401:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
 402:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   UNUSED(hrtc);
 403:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 404:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 405:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****             the HAL_RTC_MspDeInit could be implemented in the user file
 406:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    */ 
 407:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 501              		.loc 1 407 0
 502 0008 00BF     		nop
 503 000a 0C37     		adds	r7, r7, #12
 504              	.LCFI19:
 505              		.cfi_def_cfa_offset 4
 506 000c BD46     		mov	sp, r7
 507              	.LCFI20:
 508              		.cfi_def_cfa_register 13
 509              		@ sp needed
 510 000e 5DF8047B 		ldr	r7, [sp], #4
 511              	.LCFI21:
ARM GAS  /tmp/ccrfV39P.s 			page 17


 512              		.cfi_restore 7
 513              		.cfi_def_cfa_offset 0
 514 0012 7047     		bx	lr
 515              		.cfi_endproc
 516              	.LFE139:
 518              		.section	.text.HAL_RTC_SetTime,"ax",%progbits
 519              		.align	1
 520              		.global	HAL_RTC_SetTime
 521              		.syntax unified
 522              		.thumb
 523              		.thumb_func
 524              		.fpu fpv4-sp-d16
 526              	HAL_RTC_SetTime:
 527              	.LFB140:
 408:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 409:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 410:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @}
 411:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 412:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 413:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /** @defgroup RTC_Group2 RTC Time and Date functions
 414:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *  @brief   RTC Time and Date functions
 415:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *
 416:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @verbatim   
 417:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================
 418:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  ##### RTC Time and Date functions #####
 419:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================  
 420:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  
 421:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  [..] This section provides functions allowing to configure Time and Date features
 422:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 423:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @endverbatim
 424:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @{
 425:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 426:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 427:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 428:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Sets RTC current time.
 429:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 430:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
 431:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  sTime Pointer to Time structure
 432:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 433:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 434:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg FORMAT_BIN: Binary data format 
 435:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg FORMAT_BCD: BCD data format
 436:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 437:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 438:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
 439:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 528              		.loc 1 439 0
 529              		.cfi_startproc
 530              		@ args = 0, pretend = 0, frame = 24
 531              		@ frame_needed = 1, uses_anonymous_args = 0
 532 0000 90B5     		push	{r4, r7, lr}
 533              	.LCFI22:
 534              		.cfi_def_cfa_offset 12
 535              		.cfi_offset 4, -12
 536              		.cfi_offset 7, -8
 537              		.cfi_offset 14, -4
 538 0002 87B0     		sub	sp, sp, #28
ARM GAS  /tmp/ccrfV39P.s 			page 18


 539              	.LCFI23:
 540              		.cfi_def_cfa_offset 40
 541 0004 00AF     		add	r7, sp, #0
 542              	.LCFI24:
 543              		.cfi_def_cfa_register 7
 544 0006 F860     		str	r0, [r7, #12]
 545 0008 B960     		str	r1, [r7, #8]
 546 000a 7A60     		str	r2, [r7, #4]
 440:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tmpreg = 0;
 547              		.loc 1 440 0
 548 000c 0023     		movs	r3, #0
 549 000e 7B61     		str	r3, [r7, #20]
 441:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 442:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  /* Check the parameters */
 443:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 444:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 445:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 446:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 447:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Process Locked */ 
 448:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 550              		.loc 1 448 0
 551 0010 FB68     		ldr	r3, [r7, #12]
 552 0012 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 553 0014 012B     		cmp	r3, #1
 554 0016 01D1     		bne	.L19
 555              		.loc 1 448 0 is_stmt 0 discriminator 1
 556 0018 0223     		movs	r3, #2
 557 001a B0E0     		b	.L20
 558              	.L19:
 559              		.loc 1 448 0 discriminator 2
 560 001c FB68     		ldr	r3, [r7, #12]
 561 001e 0122     		movs	r2, #1
 562 0020 1A77     		strb	r2, [r3, #28]
 449:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 450:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 563              		.loc 1 450 0 is_stmt 1 discriminator 2
 564 0022 FB68     		ldr	r3, [r7, #12]
 565 0024 0222     		movs	r2, #2
 566 0026 5A77     		strb	r2, [r3, #29]
 451:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 452:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 567              		.loc 1 452 0 discriminator 2
 568 0028 7B68     		ldr	r3, [r7, #4]
 569 002a 002B     		cmp	r3, #0
 570 002c 26D1     		bne	.L21
 453:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 454:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 571              		.loc 1 454 0
 572 002e FB68     		ldr	r3, [r7, #12]
 573 0030 1B68     		ldr	r3, [r3]
 574 0032 9B68     		ldr	r3, [r3, #8]
 575 0034 03F04003 		and	r3, r3, #64
 576 0038 002B     		cmp	r3, #0
 577 003a 02D1     		bne	.L22
 455:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 456:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sTime->Hours));
 457:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
ARM GAS  /tmp/ccrfV39P.s 			page 19


 458:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     } 
 459:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
 460:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 461:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       sTime->TimeFormat = 0x00;
 578              		.loc 1 461 0
 579 003c BB68     		ldr	r3, [r7, #8]
 580 003e 0022     		movs	r2, #0
 581 0040 1A73     		strb	r2, [r3, #12]
 582              	.L22:
 462:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sTime->Hours));
 463:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 464:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sTime->Minutes));
 465:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sTime->Seconds));
 466:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 467:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 583              		.loc 1 467 0
 584 0042 BB68     		ldr	r3, [r7, #8]
 585 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 586 0046 1846     		mov	r0, r3
 587 0048 FFF7FEFF 		bl	RTC_ByteToBcd2
 588 004c 0346     		mov	r3, r0
 589 004e 1C04     		lsls	r4, r3, #16
 468:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 590              		.loc 1 468 0
 591 0050 BB68     		ldr	r3, [r7, #8]
 592 0052 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 593 0054 1846     		mov	r0, r3
 594 0056 FFF7FEFF 		bl	RTC_ByteToBcd2
 595 005a 0346     		mov	r3, r0
 596 005c 1B02     		lsls	r3, r3, #8
 467:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 597              		.loc 1 467 0
 598 005e 1C43     		orrs	r4, r4, r3
 469:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 599              		.loc 1 469 0
 600 0060 BB68     		ldr	r3, [r7, #8]
 601 0062 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 602 0064 1846     		mov	r0, r3
 603 0066 FFF7FEFF 		bl	RTC_ByteToBcd2
 604 006a 0346     		mov	r3, r0
 468:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 605              		.loc 1 468 0
 606 006c 44EA0302 		orr	r2, r4, r3
 470:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                         (((uint32_t)sTime->TimeFormat) << 16));  
 607              		.loc 1 470 0
 608 0070 BB68     		ldr	r3, [r7, #8]
 609 0072 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 610 0074 1B04     		lsls	r3, r3, #16
 467:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 611              		.loc 1 467 0
 612 0076 1343     		orrs	r3, r3, r2
 613 0078 7B61     		str	r3, [r7, #20]
 614 007a 20E0     		b	.L23
 615              	.L21:
 471:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 472:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
 473:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
ARM GAS  /tmp/ccrfV39P.s 			page 20


 474:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 616              		.loc 1 474 0
 617 007c FB68     		ldr	r3, [r7, #12]
 618 007e 1B68     		ldr	r3, [r3]
 619 0080 9B68     		ldr	r3, [r3, #8]
 620 0082 03F04003 		and	r3, r3, #64
 621 0086 002B     		cmp	r3, #0
 622 0088 07D0     		beq	.L24
 475:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 476:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sTime->Hours);
 623              		.loc 1 476 0
 624 008a BB68     		ldr	r3, [r7, #8]
 625 008c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 626 008e 1846     		mov	r0, r3
 627 0090 FFF7FEFF 		bl	RTC_Bcd2ToByte
 628 0094 0346     		mov	r3, r0
 629 0096 7B61     		str	r3, [r7, #20]
 630 0098 02E0     		b	.L25
 631              	.L24:
 477:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 478:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat)); 
 479:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     } 
 480:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
 481:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 482:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       sTime->TimeFormat = 0x00;
 632              		.loc 1 482 0
 633 009a BB68     		ldr	r3, [r7, #8]
 634 009c 0022     		movs	r2, #0
 635 009e 1A73     		strb	r2, [r3, #12]
 636              	.L25:
 483:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 484:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 485:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 486:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 487:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 637              		.loc 1 487 0
 638 00a0 BB68     		ldr	r3, [r7, #8]
 639 00a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 640 00a4 1A04     		lsls	r2, r3, #16
 488:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes) << 8) | \
 641              		.loc 1 488 0
 642 00a6 BB68     		ldr	r3, [r7, #8]
 643 00a8 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 644 00aa 1B02     		lsls	r3, r3, #8
 487:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes) << 8) | \
 645              		.loc 1 487 0
 646 00ac 1343     		orrs	r3, r3, r2
 489:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sTime->Seconds) | \
 647              		.loc 1 489 0
 648 00ae BA68     		ldr	r2, [r7, #8]
 649 00b0 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 488:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes) << 8) | \
 650              		.loc 1 488 0
 651 00b2 1A43     		orrs	r2, r2, r3
 490:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sTime->TimeFormat) << 16));   
 652              		.loc 1 490 0
 653 00b4 BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/ccrfV39P.s 			page 21


 654 00b6 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 655 00b8 1B04     		lsls	r3, r3, #16
 487:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes) << 8) | \
 656              		.loc 1 487 0
 657 00ba 1343     		orrs	r3, r3, r2
 658 00bc 7B61     		str	r3, [r7, #20]
 659              	.L23:
 491:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 492:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 493:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 494:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 660              		.loc 1 494 0
 661 00be FB68     		ldr	r3, [r7, #12]
 662 00c0 1B68     		ldr	r3, [r3]
 663 00c2 CA22     		movs	r2, #202
 664 00c4 5A62     		str	r2, [r3, #36]
 665 00c6 FB68     		ldr	r3, [r7, #12]
 666 00c8 1B68     		ldr	r3, [r3]
 667 00ca 5322     		movs	r2, #83
 668 00cc 5A62     		str	r2, [r3, #36]
 495:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 496:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Set Initialization mode */
 497:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
 669              		.loc 1 497 0
 670 00ce F868     		ldr	r0, [r7, #12]
 671 00d0 FFF7FEFF 		bl	RTC_EnterInitMode
 672 00d4 0346     		mov	r3, r0
 673 00d6 002B     		cmp	r3, #0
 674 00d8 0BD0     		beq	.L26
 498:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 499:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 500:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 675              		.loc 1 500 0
 676 00da FB68     		ldr	r3, [r7, #12]
 677 00dc 1B68     		ldr	r3, [r3]
 678 00de FF22     		movs	r2, #255
 679 00e0 5A62     		str	r2, [r3, #36]
 501:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 502:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Set RTC state */
 503:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 680              		.loc 1 503 0
 681 00e2 FB68     		ldr	r3, [r7, #12]
 682 00e4 0422     		movs	r2, #4
 683 00e6 5A77     		strb	r2, [r3, #29]
 504:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 505:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Process Unlocked */ 
 506:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
 684              		.loc 1 506 0
 685 00e8 FB68     		ldr	r3, [r7, #12]
 686 00ea 0022     		movs	r2, #0
 687 00ec 1A77     		strb	r2, [r3, #28]
 507:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 508:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     return HAL_ERROR;
 688              		.loc 1 508 0
 689 00ee 0123     		movs	r3, #1
 690 00f0 45E0     		b	.L20
 691              	.L26:
ARM GAS  /tmp/ccrfV39P.s 			page 22


 509:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   } 
 510:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
 511:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 512:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Set the RTC_TR register */
 513:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 692              		.loc 1 513 0
 693 00f2 FB68     		ldr	r3, [r7, #12]
 694 00f4 1A68     		ldr	r2, [r3]
 695 00f6 7969     		ldr	r1, [r7, #20]
 696 00f8 234B     		ldr	r3, .L28
 697 00fa 0B40     		ands	r3, r3, r1
 698 00fc 1360     		str	r3, [r2]
 514:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****      
 515:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Clear the bits to be configured */
 516:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 699              		.loc 1 516 0
 700 00fe FB68     		ldr	r3, [r7, #12]
 701 0100 1B68     		ldr	r3, [r3]
 702 0102 FA68     		ldr	r2, [r7, #12]
 703 0104 1268     		ldr	r2, [r2]
 704 0106 9268     		ldr	r2, [r2, #8]
 705 0108 22F48022 		bic	r2, r2, #262144
 706 010c 9A60     		str	r2, [r3, #8]
 517:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 518:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the RTC_CR register */
 519:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 707              		.loc 1 519 0
 708 010e FB68     		ldr	r3, [r7, #12]
 709 0110 1B68     		ldr	r3, [r3]
 710 0112 FA68     		ldr	r2, [r7, #12]
 711 0114 1268     		ldr	r2, [r2]
 712 0116 9168     		ldr	r1, [r2, #8]
 713 0118 BA68     		ldr	r2, [r7, #8]
 714 011a 1069     		ldr	r0, [r2, #16]
 715 011c BA68     		ldr	r2, [r7, #8]
 716 011e 5269     		ldr	r2, [r2, #20]
 717 0120 0243     		orrs	r2, r2, r0
 718 0122 0A43     		orrs	r2, r2, r1
 719 0124 9A60     		str	r2, [r3, #8]
 520:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 521:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Exit Initialization mode */
 522:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 720              		.loc 1 522 0
 721 0126 FB68     		ldr	r3, [r7, #12]
 722 0128 1B68     		ldr	r3, [r3]
 723 012a FA68     		ldr	r2, [r7, #12]
 724 012c 1268     		ldr	r2, [r2]
 725 012e D268     		ldr	r2, [r2, #12]
 726 0130 22F08002 		bic	r2, r2, #128
 727 0134 DA60     		str	r2, [r3, #12]
 523:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 524:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 525:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 728              		.loc 1 525 0
 729 0136 FB68     		ldr	r3, [r7, #12]
 730 0138 1B68     		ldr	r3, [r3]
 731 013a 9B68     		ldr	r3, [r3, #8]
ARM GAS  /tmp/ccrfV39P.s 			page 23


 732 013c 03F02003 		and	r3, r3, #32
 733 0140 002B     		cmp	r3, #0
 734 0142 11D1     		bne	.L27
 526:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 527:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 735              		.loc 1 527 0
 736 0144 F868     		ldr	r0, [r7, #12]
 737 0146 FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 738 014a 0346     		mov	r3, r0
 739 014c 002B     		cmp	r3, #0
 740 014e 0BD0     		beq	.L27
 528:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {        
 529:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 530:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 741              		.loc 1 530 0
 742 0150 FB68     		ldr	r3, [r7, #12]
 743 0152 1B68     		ldr	r3, [r3]
 744 0154 FF22     		movs	r2, #255
 745 0156 5A62     		str	r2, [r3, #36]
 531:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 532:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_ERROR;
 746              		.loc 1 532 0
 747 0158 FB68     		ldr	r3, [r7, #12]
 748 015a 0422     		movs	r2, #4
 749 015c 5A77     		strb	r2, [r3, #29]
 533:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 534:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */ 
 535:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 750              		.loc 1 535 0
 751 015e FB68     		ldr	r3, [r7, #12]
 752 0160 0022     		movs	r2, #0
 753 0162 1A77     		strb	r2, [r3, #28]
 536:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 537:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_ERROR;
 754              		.loc 1 537 0
 755 0164 0123     		movs	r3, #1
 756 0166 0AE0     		b	.L20
 757              	.L27:
 538:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }
 539:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 540:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 541:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 542:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 758              		.loc 1 542 0
 759 0168 FB68     		ldr	r3, [r7, #12]
 760 016a 1B68     		ldr	r3, [r3]
 761 016c FF22     		movs	r2, #255
 762 016e 5A62     		str	r2, [r3, #36]
 543:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 544:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    hrtc->State = HAL_RTC_STATE_READY;
 763              		.loc 1 544 0
 764 0170 FB68     		ldr	r3, [r7, #12]
 765 0172 0122     		movs	r2, #1
 766 0174 5A77     		strb	r2, [r3, #29]
 545:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 546:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    __HAL_UNLOCK(hrtc); 
 767              		.loc 1 546 0
ARM GAS  /tmp/ccrfV39P.s 			page 24


 768 0176 FB68     		ldr	r3, [r7, #12]
 769 0178 0022     		movs	r2, #0
 770 017a 1A77     		strb	r2, [r3, #28]
 547:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****      
 548:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    return HAL_OK;
 771              		.loc 1 548 0
 772 017c 0023     		movs	r3, #0
 773              	.L20:
 549:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 550:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 774              		.loc 1 550 0
 775 017e 1846     		mov	r0, r3
 776 0180 1C37     		adds	r7, r7, #28
 777              	.LCFI25:
 778              		.cfi_def_cfa_offset 12
 779 0182 BD46     		mov	sp, r7
 780              	.LCFI26:
 781              		.cfi_def_cfa_register 13
 782              		@ sp needed
 783 0184 90BD     		pop	{r4, r7, pc}
 784              	.L29:
 785 0186 00BF     		.align	2
 786              	.L28:
 787 0188 7F7F7F00 		.word	8355711
 788              		.cfi_endproc
 789              	.LFE140:
 791              		.section	.text.HAL_RTC_GetTime,"ax",%progbits
 792              		.align	1
 793              		.global	HAL_RTC_GetTime
 794              		.syntax unified
 795              		.thumb
 796              		.thumb_func
 797              		.fpu fpv4-sp-d16
 799              	HAL_RTC_GetTime:
 800              	.LFB141:
 551:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 552:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 553:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Gets RTC current time.
 554:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc RTC handle
 555:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  sTime Pointer to Time structure with Hours, Minutes and Seconds fields returned 
 556:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                with input format (BIN or BCD), also SubSeconds field returning the
 557:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                RTC_SSR register content and SecondFraction field the Synchronous pre-scaler
 558:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                factor to be used for second fraction ratio computation.
 559:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 560:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 561:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format 
 562:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
 563:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @note  You can use SubSeconds and SecondFraction (sTime structure fields returned) to convert S
 564:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *        value in second fraction ratio with time unit following generic formula:
 565:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *        Second fraction ratio * time_unit= [(SecondFraction-SubSeconds)/(SecondFraction+1)] * ti
 566:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *        This conversion can be performed only if no shift operation is pending (ie. SHFP=0) when
 567:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @note  You must call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values 
 568:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *        in the higher-order calendar shadow registers to ensure consistency between the time and
 569:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *        Reading RTC current time locks the values in calendar shadow registers until Current dat
 570:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *        to ensure consistency between the time and date values.
 571:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 572:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
ARM GAS  /tmp/ccrfV39P.s 			page 25


 573:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
 574:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 801              		.loc 1 574 0
 802              		.cfi_startproc
 803              		@ args = 0, pretend = 0, frame = 24
 804              		@ frame_needed = 1, uses_anonymous_args = 0
 805 0000 80B5     		push	{r7, lr}
 806              	.LCFI27:
 807              		.cfi_def_cfa_offset 8
 808              		.cfi_offset 7, -8
 809              		.cfi_offset 14, -4
 810 0002 86B0     		sub	sp, sp, #24
 811              	.LCFI28:
 812              		.cfi_def_cfa_offset 32
 813 0004 00AF     		add	r7, sp, #0
 814              	.LCFI29:
 815              		.cfi_def_cfa_register 7
 816 0006 F860     		str	r0, [r7, #12]
 817 0008 B960     		str	r1, [r7, #8]
 818 000a 7A60     		str	r2, [r7, #4]
 575:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tmpreg = 0;
 819              		.loc 1 575 0
 820 000c 0023     		movs	r3, #0
 821 000e 7B61     		str	r3, [r7, #20]
 576:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 577:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
 578:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 579:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 580:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Get subseconds values from the correspondent registers*/
 581:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 822              		.loc 1 581 0
 823 0010 FB68     		ldr	r3, [r7, #12]
 824 0012 1B68     		ldr	r3, [r3]
 825 0014 9A6A     		ldr	r2, [r3, #40]
 826 0016 BB68     		ldr	r3, [r7, #8]
 827 0018 5A60     		str	r2, [r3, #4]
 582:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 583:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Get SecondFraction structure field from the corresponding register field*/
 584:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 828              		.loc 1 584 0
 829 001a FB68     		ldr	r3, [r7, #12]
 830 001c 1B68     		ldr	r3, [r3]
 831 001e 1B69     		ldr	r3, [r3, #16]
 832 0020 C3F30E02 		ubfx	r2, r3, #0, #15
 833 0024 BB68     		ldr	r3, [r7, #8]
 834 0026 9A60     		str	r2, [r3, #8]
 585:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 586:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Get the TR register */
 587:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 835              		.loc 1 587 0
 836 0028 FB68     		ldr	r3, [r7, #12]
 837 002a 1B68     		ldr	r3, [r3]
 838 002c 1A68     		ldr	r2, [r3]
 839 002e 224B     		ldr	r3, .L33
 840 0030 1340     		ands	r3, r3, r2
 841 0032 7B61     		str	r3, [r7, #20]
 588:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
ARM GAS  /tmp/ccrfV39P.s 			page 26


 589:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Fill the structure fields with the read parameters */
 590:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 842              		.loc 1 590 0
 843 0034 7B69     		ldr	r3, [r7, #20]
 844 0036 1B0C     		lsrs	r3, r3, #16
 845 0038 DBB2     		uxtb	r3, r3
 846 003a 03F03F03 		and	r3, r3, #63
 847 003e DAB2     		uxtb	r2, r3
 848 0040 BB68     		ldr	r3, [r7, #8]
 849 0042 1A70     		strb	r2, [r3]
 591:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 850              		.loc 1 591 0
 851 0044 7B69     		ldr	r3, [r7, #20]
 852 0046 1B0A     		lsrs	r3, r3, #8
 853 0048 DBB2     		uxtb	r3, r3
 854 004a 03F07F03 		and	r3, r3, #127
 855 004e DAB2     		uxtb	r2, r3
 856 0050 BB68     		ldr	r3, [r7, #8]
 857 0052 5A70     		strb	r2, [r3, #1]
 592:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 858              		.loc 1 592 0
 859 0054 7B69     		ldr	r3, [r7, #20]
 860 0056 DBB2     		uxtb	r3, r3
 861 0058 03F07F03 		and	r3, r3, #127
 862 005c DAB2     		uxtb	r2, r3
 863 005e BB68     		ldr	r3, [r7, #8]
 864 0060 9A70     		strb	r2, [r3, #2]
 593:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 865              		.loc 1 593 0
 866 0062 7B69     		ldr	r3, [r7, #20]
 867 0064 1B0C     		lsrs	r3, r3, #16
 868 0066 DBB2     		uxtb	r3, r3
 869 0068 03F04003 		and	r3, r3, #64
 870 006c DAB2     		uxtb	r2, r3
 871 006e BB68     		ldr	r3, [r7, #8]
 872 0070 1A73     		strb	r2, [r3, #12]
 594:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 595:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the input parameters format */
 596:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 873              		.loc 1 596 0
 874 0072 7B68     		ldr	r3, [r7, #4]
 875 0074 002B     		cmp	r3, #0
 876 0076 1AD1     		bne	.L31
 597:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 598:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Convert the time structure parameters to Binary format */
 599:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 877              		.loc 1 599 0
 878 0078 BB68     		ldr	r3, [r7, #8]
 879 007a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 880 007c 1846     		mov	r0, r3
 881 007e FFF7FEFF 		bl	RTC_Bcd2ToByte
 882 0082 0346     		mov	r3, r0
 883 0084 1A46     		mov	r2, r3
 884 0086 BB68     		ldr	r3, [r7, #8]
 885 0088 1A70     		strb	r2, [r3]
 600:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 886              		.loc 1 600 0
ARM GAS  /tmp/ccrfV39P.s 			page 27


 887 008a BB68     		ldr	r3, [r7, #8]
 888 008c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 889 008e 1846     		mov	r0, r3
 890 0090 FFF7FEFF 		bl	RTC_Bcd2ToByte
 891 0094 0346     		mov	r3, r0
 892 0096 1A46     		mov	r2, r3
 893 0098 BB68     		ldr	r3, [r7, #8]
 894 009a 5A70     		strb	r2, [r3, #1]
 601:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 895              		.loc 1 601 0
 896 009c BB68     		ldr	r3, [r7, #8]
 897 009e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 898 00a0 1846     		mov	r0, r3
 899 00a2 FFF7FEFF 		bl	RTC_Bcd2ToByte
 900 00a6 0346     		mov	r3, r0
 901 00a8 1A46     		mov	r2, r3
 902 00aa BB68     		ldr	r3, [r7, #8]
 903 00ac 9A70     		strb	r2, [r3, #2]
 904              	.L31:
 602:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 603:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 604:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;
 905              		.loc 1 604 0
 906 00ae 0023     		movs	r3, #0
 605:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 907              		.loc 1 605 0
 908 00b0 1846     		mov	r0, r3
 909 00b2 1837     		adds	r7, r7, #24
 910              	.LCFI30:
 911              		.cfi_def_cfa_offset 8
 912 00b4 BD46     		mov	sp, r7
 913              	.LCFI31:
 914              		.cfi_def_cfa_register 13
 915              		@ sp needed
 916 00b6 80BD     		pop	{r7, pc}
 917              	.L34:
 918              		.align	2
 919              	.L33:
 920 00b8 7F7F7F00 		.word	8355711
 921              		.cfi_endproc
 922              	.LFE141:
 924              		.section	.text.HAL_RTC_SetDate,"ax",%progbits
 925              		.align	1
 926              		.global	HAL_RTC_SetDate
 927              		.syntax unified
 928              		.thumb
 929              		.thumb_func
 930              		.fpu fpv4-sp-d16
 932              	HAL_RTC_SetDate:
 933              	.LFB142:
 606:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 607:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 608:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Sets RTC current date.
 609:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 610:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
 611:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  sDate Pointer to date structure
 612:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Format specifies the format of the entered parameters.
ARM GAS  /tmp/ccrfV39P.s 			page 28


 613:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 614:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format 
 615:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
 616:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 617:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 618:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
 619:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 934              		.loc 1 619 0
 935              		.cfi_startproc
 936              		@ args = 0, pretend = 0, frame = 24
 937              		@ frame_needed = 1, uses_anonymous_args = 0
 938 0000 90B5     		push	{r4, r7, lr}
 939              	.LCFI32:
 940              		.cfi_def_cfa_offset 12
 941              		.cfi_offset 4, -12
 942              		.cfi_offset 7, -8
 943              		.cfi_offset 14, -4
 944 0002 87B0     		sub	sp, sp, #28
 945              	.LCFI33:
 946              		.cfi_def_cfa_offset 40
 947 0004 00AF     		add	r7, sp, #0
 948              	.LCFI34:
 949              		.cfi_def_cfa_register 7
 950 0006 F860     		str	r0, [r7, #12]
 951 0008 B960     		str	r1, [r7, #8]
 952 000a 7A60     		str	r2, [r7, #4]
 620:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t datetmpreg = 0;
 953              		.loc 1 620 0
 954 000c 0023     		movs	r3, #0
 955 000e 7B61     		str	r3, [r7, #20]
 621:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 622:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  /* Check the parameters */
 623:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 624:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 625:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  /* Process Locked */ 
 626:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  __HAL_LOCK(hrtc);
 956              		.loc 1 626 0
 957 0010 FB68     		ldr	r3, [r7, #12]
 958 0012 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 959 0014 012B     		cmp	r3, #1
 960 0016 01D1     		bne	.L36
 961              		.loc 1 626 0 is_stmt 0 discriminator 1
 962 0018 0223     		movs	r3, #2
 963 001a 92E0     		b	.L37
 964              	.L36:
 965              		.loc 1 626 0 discriminator 2
 966 001c FB68     		ldr	r3, [r7, #12]
 967 001e 0122     		movs	r2, #1
 968 0020 1A77     		strb	r2, [r3, #28]
 627:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 628:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY; 
 969              		.loc 1 628 0 is_stmt 1 discriminator 2
 970 0022 FB68     		ldr	r3, [r7, #12]
 971 0024 0222     		movs	r2, #2
 972 0026 5A77     		strb	r2, [r3, #29]
 629:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 630:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
ARM GAS  /tmp/ccrfV39P.s 			page 29


 973              		.loc 1 630 0 discriminator 2
 974 0028 7B68     		ldr	r3, [r7, #4]
 975 002a 002B     		cmp	r3, #0
 976 002c 0ED1     		bne	.L38
 977              		.loc 1 630 0 is_stmt 0 discriminator 1
 978 002e BB68     		ldr	r3, [r7, #8]
 979 0030 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 980 0032 03F01003 		and	r3, r3, #16
 981 0036 002B     		cmp	r3, #0
 982 0038 08D0     		beq	.L38
 631:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 632:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 983              		.loc 1 632 0 is_stmt 1
 984 003a BB68     		ldr	r3, [r7, #8]
 985 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 986 003e 23F01003 		bic	r3, r3, #16
 987 0042 DBB2     		uxtb	r3, r3
 988 0044 0A33     		adds	r3, r3, #10
 989 0046 DAB2     		uxtb	r2, r3
 990 0048 BB68     		ldr	r3, [r7, #8]
 991 004a 5A70     		strb	r2, [r3, #1]
 992              	.L38:
 633:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 634:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 635:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 636:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 637:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 993              		.loc 1 637 0
 994 004c 7B68     		ldr	r3, [r7, #4]
 995 004e 002B     		cmp	r3, #0
 996 0050 1CD1     		bne	.L39
 638:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {   
 639:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_YEAR(sDate->Year));
 640:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MONTH(sDate->Month));
 641:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_DATE(sDate->Date)); 
 642:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 643:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 997              		.loc 1 643 0
 998 0052 BB68     		ldr	r3, [r7, #8]
 999 0054 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1000 0056 1846     		mov	r0, r3
 1001 0058 FFF7FEFF 		bl	RTC_ByteToBcd2
 1002 005c 0346     		mov	r3, r0
 1003 005e 1C04     		lsls	r4, r3, #16
 644:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 1004              		.loc 1 644 0
 1005 0060 BB68     		ldr	r3, [r7, #8]
 1006 0062 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1007 0064 1846     		mov	r0, r3
 1008 0066 FFF7FEFF 		bl	RTC_ByteToBcd2
 1009 006a 0346     		mov	r3, r0
 1010 006c 1B02     		lsls	r3, r3, #8
 643:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 1011              		.loc 1 643 0
 1012 006e 1C43     		orrs	r4, r4, r3
 645:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 1013              		.loc 1 645 0
ARM GAS  /tmp/ccrfV39P.s 			page 30


 1014 0070 BB68     		ldr	r3, [r7, #8]
 1015 0072 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1016 0074 1846     		mov	r0, r3
 1017 0076 FFF7FEFF 		bl	RTC_ByteToBcd2
 1018 007a 0346     		mov	r3, r0
 644:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 1019              		.loc 1 644 0
 1020 007c 44EA0302 		orr	r2, r4, r3
 646:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  ((uint32_t)sDate->WeekDay << 13));   
 1021              		.loc 1 646 0
 1022 0080 BB68     		ldr	r3, [r7, #8]
 1023 0082 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1024 0084 5B03     		lsls	r3, r3, #13
 643:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 1025              		.loc 1 643 0
 1026 0086 1343     		orrs	r3, r3, r2
 1027 0088 7B61     		str	r3, [r7, #20]
 1028 008a 0EE0     		b	.L40
 1029              	.L39:
 647:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 648:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
 649:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {   
 650:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 651:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MONTH(sDate->Month));
 652:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_DATE(sDate->Date));
 653:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 654:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 1030              		.loc 1 654 0
 1031 008c BB68     		ldr	r3, [r7, #8]
 1032 008e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1033 0090 1A04     		lsls	r2, r3, #16
 655:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << 8) | \
 1034              		.loc 1 655 0
 1035 0092 BB68     		ldr	r3, [r7, #8]
 1036 0094 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1037 0096 1B02     		lsls	r3, r3, #8
 654:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << 8) | \
 1038              		.loc 1 654 0
 1039 0098 1343     		orrs	r3, r3, r2
 656:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                   ((uint32_t)sDate->Date) | \
 1040              		.loc 1 656 0
 1041 009a BA68     		ldr	r2, [r7, #8]
 1042 009c 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 655:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << 8) | \
 1043              		.loc 1 655 0
 1044 009e 1A43     		orrs	r2, r2, r3
 657:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                   (((uint32_t)sDate->WeekDay) << 13));  
 1045              		.loc 1 657 0
 1046 00a0 BB68     		ldr	r3, [r7, #8]
 1047 00a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1048 00a4 5B03     		lsls	r3, r3, #13
 654:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << 8) | \
 1049              		.loc 1 654 0
 1050 00a6 1343     		orrs	r3, r3, r2
 1051 00a8 7B61     		str	r3, [r7, #20]
 1052              	.L40:
 658:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
ARM GAS  /tmp/ccrfV39P.s 			page 31


 659:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 660:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 661:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 1053              		.loc 1 661 0
 1054 00aa FB68     		ldr	r3, [r7, #12]
 1055 00ac 1B68     		ldr	r3, [r3]
 1056 00ae CA22     		movs	r2, #202
 1057 00b0 5A62     		str	r2, [r3, #36]
 1058 00b2 FB68     		ldr	r3, [r7, #12]
 1059 00b4 1B68     		ldr	r3, [r3]
 1060 00b6 5322     		movs	r2, #83
 1061 00b8 5A62     		str	r2, [r3, #36]
 662:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 663:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Set Initialization mode */
 664:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
 1062              		.loc 1 664 0
 1063 00ba F868     		ldr	r0, [r7, #12]
 1064 00bc FFF7FEFF 		bl	RTC_EnterInitMode
 1065 00c0 0346     		mov	r3, r0
 1066 00c2 002B     		cmp	r3, #0
 1067 00c4 0BD0     		beq	.L41
 665:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 666:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 667:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 1068              		.loc 1 667 0
 1069 00c6 FB68     		ldr	r3, [r7, #12]
 1070 00c8 1B68     		ldr	r3, [r3]
 1071 00ca FF22     		movs	r2, #255
 1072 00cc 5A62     		str	r2, [r3, #36]
 668:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 669:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Set RTC state*/
 670:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 1073              		.loc 1 670 0
 1074 00ce FB68     		ldr	r3, [r7, #12]
 1075 00d0 0422     		movs	r2, #4
 1076 00d2 5A77     		strb	r2, [r3, #29]
 671:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 672:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Process Unlocked */ 
 673:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
 1077              		.loc 1 673 0
 1078 00d4 FB68     		ldr	r3, [r7, #12]
 1079 00d6 0022     		movs	r2, #0
 1080 00d8 1A77     		strb	r2, [r3, #28]
 674:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 675:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     return HAL_ERROR;
 1081              		.loc 1 675 0
 1082 00da 0123     		movs	r3, #1
 1083 00dc 31E0     		b	.L37
 1084              	.L41:
 676:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   } 
 677:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
 678:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Set the RTC_DR register */
 680:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 1085              		.loc 1 680 0
 1086 00de FB68     		ldr	r3, [r7, #12]
 1087 00e0 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/ccrfV39P.s 			page 32


 1088 00e2 7969     		ldr	r1, [r7, #20]
 1089 00e4 194B     		ldr	r3, .L43
 1090 00e6 0B40     		ands	r3, r3, r1
 1091 00e8 5360     		str	r3, [r2, #4]
 681:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 682:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Exit Initialization mode */
 683:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 1092              		.loc 1 683 0
 1093 00ea FB68     		ldr	r3, [r7, #12]
 1094 00ec 1B68     		ldr	r3, [r3]
 1095 00ee FA68     		ldr	r2, [r7, #12]
 1096 00f0 1268     		ldr	r2, [r2]
 1097 00f2 D268     		ldr	r2, [r2, #12]
 1098 00f4 22F08002 		bic	r2, r2, #128
 1099 00f8 DA60     		str	r2, [r3, #12]
 684:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 685:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 686:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 1100              		.loc 1 686 0
 1101 00fa FB68     		ldr	r3, [r7, #12]
 1102 00fc 1B68     		ldr	r3, [r3]
 1103 00fe 9B68     		ldr	r3, [r3, #8]
 1104 0100 03F02003 		and	r3, r3, #32
 1105 0104 002B     		cmp	r3, #0
 1106 0106 11D1     		bne	.L42
 687:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 688:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 1107              		.loc 1 688 0
 1108 0108 F868     		ldr	r0, [r7, #12]
 1109 010a FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 1110 010e 0346     		mov	r3, r0
 1111 0110 002B     		cmp	r3, #0
 1112 0112 0BD0     		beq	.L42
 689:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       { 
 690:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 691:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 1113              		.loc 1 691 0
 1114 0114 FB68     		ldr	r3, [r7, #12]
 1115 0116 1B68     		ldr	r3, [r3]
 1116 0118 FF22     		movs	r2, #255
 1117 011a 5A62     		str	r2, [r3, #36]
 692:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 693:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_ERROR;
 1118              		.loc 1 693 0
 1119 011c FB68     		ldr	r3, [r7, #12]
 1120 011e 0422     		movs	r2, #4
 1121 0120 5A77     		strb	r2, [r3, #29]
 694:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 695:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */ 
 696:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 1122              		.loc 1 696 0
 1123 0122 FB68     		ldr	r3, [r7, #12]
 1124 0124 0022     		movs	r2, #0
 1125 0126 1A77     		strb	r2, [r3, #28]
 697:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 698:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_ERROR;
 1126              		.loc 1 698 0
ARM GAS  /tmp/ccrfV39P.s 			page 33


 1127 0128 0123     		movs	r3, #1
 1128 012a 0AE0     		b	.L37
 1129              	.L42:
 699:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }
 700:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 701:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 702:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 703:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 1130              		.loc 1 703 0
 1131 012c FB68     		ldr	r3, [r7, #12]
 1132 012e 1B68     		ldr	r3, [r3]
 1133 0130 FF22     		movs	r2, #255
 1134 0132 5A62     		str	r2, [r3, #36]
 704:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 705:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_READY ;
 1135              		.loc 1 705 0
 1136 0134 FB68     		ldr	r3, [r7, #12]
 1137 0136 0122     		movs	r2, #1
 1138 0138 5A77     		strb	r2, [r3, #29]
 706:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 707:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Process Unlocked */ 
 708:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
 1139              		.loc 1 708 0
 1140 013a FB68     		ldr	r3, [r7, #12]
 1141 013c 0022     		movs	r2, #0
 1142 013e 1A77     		strb	r2, [r3, #28]
 709:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 710:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     return HAL_OK;    
 1143              		.loc 1 710 0
 1144 0140 0023     		movs	r3, #0
 1145              	.L37:
 711:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 712:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 1146              		.loc 1 712 0
 1147 0142 1846     		mov	r0, r3
 1148 0144 1C37     		adds	r7, r7, #28
 1149              	.LCFI35:
 1150              		.cfi_def_cfa_offset 12
 1151 0146 BD46     		mov	sp, r7
 1152              	.LCFI36:
 1153              		.cfi_def_cfa_register 13
 1154              		@ sp needed
 1155 0148 90BD     		pop	{r4, r7, pc}
 1156              	.L44:
 1157 014a 00BF     		.align	2
 1158              	.L43:
 1159 014c 3FFFFF00 		.word	16777023
 1160              		.cfi_endproc
 1161              	.LFE142:
 1163              		.section	.text.HAL_RTC_GetDate,"ax",%progbits
 1164              		.align	1
 1165              		.global	HAL_RTC_GetDate
 1166              		.syntax unified
 1167              		.thumb
 1168              		.thumb_func
 1169              		.fpu fpv4-sp-d16
 1171              	HAL_RTC_GetDate:
ARM GAS  /tmp/ccrfV39P.s 			page 34


 1172              	.LFB143:
 713:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 714:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 715:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Gets RTC current date.
 716:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 717:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
 718:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  sDate Pointer to Date structure
 719:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 720:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 721:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN:  Binary data format 
 722:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD:  BCD data format
 723:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @note You must call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values 
 724:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * in the higher-order calendar shadow registers to ensure consistency between the time and date v
 725:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * Reading RTC current time locks the values in calendar shadow registers until Current date is re
 726:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 727:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 728:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
 729:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 1173              		.loc 1 729 0
 1174              		.cfi_startproc
 1175              		@ args = 0, pretend = 0, frame = 24
 1176              		@ frame_needed = 1, uses_anonymous_args = 0
 1177 0000 80B5     		push	{r7, lr}
 1178              	.LCFI37:
 1179              		.cfi_def_cfa_offset 8
 1180              		.cfi_offset 7, -8
 1181              		.cfi_offset 14, -4
 1182 0002 86B0     		sub	sp, sp, #24
 1183              	.LCFI38:
 1184              		.cfi_def_cfa_offset 32
 1185 0004 00AF     		add	r7, sp, #0
 1186              	.LCFI39:
 1187              		.cfi_def_cfa_register 7
 1188 0006 F860     		str	r0, [r7, #12]
 1189 0008 B960     		str	r1, [r7, #8]
 1190 000a 7A60     		str	r2, [r7, #4]
 730:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t datetmpreg = 0;
 1191              		.loc 1 730 0
 1192 000c 0023     		movs	r3, #0
 1193 000e 7B61     		str	r3, [r7, #20]
 731:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 732:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
 733:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 734:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****           
 735:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Get the DR register */
 736:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 1194              		.loc 1 736 0
 1195 0010 FB68     		ldr	r3, [r7, #12]
 1196 0012 1B68     		ldr	r3, [r3]
 1197 0014 5A68     		ldr	r2, [r3, #4]
 1198 0016 214B     		ldr	r3, .L48
 1199 0018 1340     		ands	r3, r3, r2
 1200 001a 7B61     		str	r3, [r7, #20]
 737:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 738:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Fill the structure fields with the read parameters */
 739:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 1201              		.loc 1 739 0
ARM GAS  /tmp/ccrfV39P.s 			page 35


 1202 001c 7B69     		ldr	r3, [r7, #20]
 1203 001e 1B0C     		lsrs	r3, r3, #16
 1204 0020 DAB2     		uxtb	r2, r3
 1205 0022 BB68     		ldr	r3, [r7, #8]
 1206 0024 DA70     		strb	r2, [r3, #3]
 740:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1207              		.loc 1 740 0
 1208 0026 7B69     		ldr	r3, [r7, #20]
 1209 0028 1B0A     		lsrs	r3, r3, #8
 1210 002a DBB2     		uxtb	r3, r3
 1211 002c 03F01F03 		and	r3, r3, #31
 1212 0030 DAB2     		uxtb	r2, r3
 1213 0032 BB68     		ldr	r3, [r7, #8]
 1214 0034 5A70     		strb	r2, [r3, #1]
 741:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 1215              		.loc 1 741 0
 1216 0036 7B69     		ldr	r3, [r7, #20]
 1217 0038 DBB2     		uxtb	r3, r3
 1218 003a 03F03F03 		and	r3, r3, #63
 1219 003e DAB2     		uxtb	r2, r3
 1220 0040 BB68     		ldr	r3, [r7, #8]
 1221 0042 9A70     		strb	r2, [r3, #2]
 742:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 1222              		.loc 1 742 0
 1223 0044 7B69     		ldr	r3, [r7, #20]
 1224 0046 5B0B     		lsrs	r3, r3, #13
 1225 0048 DBB2     		uxtb	r3, r3
 1226 004a 03F00703 		and	r3, r3, #7
 1227 004e DAB2     		uxtb	r2, r3
 1228 0050 BB68     		ldr	r3, [r7, #8]
 1229 0052 1A70     		strb	r2, [r3]
 743:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 744:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the input parameters format */
 745:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 1230              		.loc 1 745 0
 1231 0054 7B68     		ldr	r3, [r7, #4]
 1232 0056 002B     		cmp	r3, #0
 1233 0058 1AD1     		bne	.L46
 746:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {    
 747:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Convert the date structure parameters to Binary format */
 748:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 1234              		.loc 1 748 0
 1235 005a BB68     		ldr	r3, [r7, #8]
 1236 005c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1237 005e 1846     		mov	r0, r3
 1238 0060 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1239 0064 0346     		mov	r3, r0
 1240 0066 1A46     		mov	r2, r3
 1241 0068 BB68     		ldr	r3, [r7, #8]
 1242 006a DA70     		strb	r2, [r3, #3]
 749:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 1243              		.loc 1 749 0
 1244 006c BB68     		ldr	r3, [r7, #8]
 1245 006e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1246 0070 1846     		mov	r0, r3
 1247 0072 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1248 0076 0346     		mov	r3, r0
ARM GAS  /tmp/ccrfV39P.s 			page 36


 1249 0078 1A46     		mov	r2, r3
 1250 007a BB68     		ldr	r3, [r7, #8]
 1251 007c 5A70     		strb	r2, [r3, #1]
 750:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 1252              		.loc 1 750 0
 1253 007e BB68     		ldr	r3, [r7, #8]
 1254 0080 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1255 0082 1846     		mov	r0, r3
 1256 0084 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1257 0088 0346     		mov	r3, r0
 1258 008a 1A46     		mov	r2, r3
 1259 008c BB68     		ldr	r3, [r7, #8]
 1260 008e 9A70     		strb	r2, [r3, #2]
 1261              	.L46:
 751:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 752:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;
 1262              		.loc 1 752 0
 1263 0090 0023     		movs	r3, #0
 753:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 1264              		.loc 1 753 0
 1265 0092 1846     		mov	r0, r3
 1266 0094 1837     		adds	r7, r7, #24
 1267              	.LCFI40:
 1268              		.cfi_def_cfa_offset 8
 1269 0096 BD46     		mov	sp, r7
 1270              	.LCFI41:
 1271              		.cfi_def_cfa_register 13
 1272              		@ sp needed
 1273 0098 80BD     		pop	{r7, pc}
 1274              	.L49:
 1275 009a 00BF     		.align	2
 1276              	.L48:
 1277 009c 3FFFFF00 		.word	16777023
 1278              		.cfi_endproc
 1279              	.LFE143:
 1281              		.section	.text.HAL_RTC_SetAlarm,"ax",%progbits
 1282              		.align	1
 1283              		.global	HAL_RTC_SetAlarm
 1284              		.syntax unified
 1285              		.thumb
 1286              		.thumb_func
 1287              		.fpu fpv4-sp-d16
 1289              	HAL_RTC_SetAlarm:
 1290              	.LFB144:
 754:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 755:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 756:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @}
 757:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 758:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 759:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /** @defgroup RTC_Group3 RTC Alarm functions
 760:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *  @brief   RTC Alarm functions
 761:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *
 762:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @verbatim   
 763:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================
 764:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  ##### RTC Alarm functions #####
 765:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================  
 766:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  
ARM GAS  /tmp/ccrfV39P.s 			page 37


 767:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  [..] This section provides functions allowing to configure Alarm feature
 768:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 769:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @endverbatim
 770:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @{
 771:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 772:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 773:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Sets the specified RTC Alarm.
 774:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 775:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
 776:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  sAlarm Pointer to Alarm structure
 777:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 778:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 779:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *             @arg FORMAT_BIN: Binary data format 
 780:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *             @arg FORMAT_BCD: BCD data format
 781:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 782:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 783:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Form
 784:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 1291              		.loc 1 784 0
 1292              		.cfi_startproc
 1293              		@ args = 0, pretend = 0, frame = 32
 1294              		@ frame_needed = 1, uses_anonymous_args = 0
 1295 0000 90B5     		push	{r4, r7, lr}
 1296              	.LCFI42:
 1297              		.cfi_def_cfa_offset 12
 1298              		.cfi_offset 4, -12
 1299              		.cfi_offset 7, -8
 1300              		.cfi_offset 14, -4
 1301 0002 89B0     		sub	sp, sp, #36
 1302              	.LCFI43:
 1303              		.cfi_def_cfa_offset 48
 1304 0004 00AF     		add	r7, sp, #0
 1305              	.LCFI44:
 1306              		.cfi_def_cfa_register 7
 1307 0006 F860     		str	r0, [r7, #12]
 1308 0008 B960     		str	r1, [r7, #8]
 1309 000a 7A60     		str	r2, [r7, #4]
 785:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tickstart = 0;
 1310              		.loc 1 785 0
 1311 000c 0023     		movs	r3, #0
 1312 000e BB61     		str	r3, [r7, #24]
 786:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tmpreg = 0, subsecondtmpreg = 0;
 1313              		.loc 1 786 0
 1314 0010 0023     		movs	r3, #0
 1315 0012 FB61     		str	r3, [r7, #28]
 1316 0014 0023     		movs	r3, #0
 1317 0016 7B61     		str	r3, [r7, #20]
 787:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
 789:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 790:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 791:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 792:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 793:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 794:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 795:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 796:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Process Locked */ 
ARM GAS  /tmp/ccrfV39P.s 			page 38


 797:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 1318              		.loc 1 797 0
 1319 0018 FB68     		ldr	r3, [r7, #12]
 1320 001a 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 1321 001c 012B     		cmp	r3, #1
 1322 001e 01D1     		bne	.L51
 1323              		.loc 1 797 0 is_stmt 0 discriminator 1
 1324 0020 0223     		movs	r3, #2
 1325 0022 1EE1     		b	.L52
 1326              	.L51:
 1327              		.loc 1 797 0 discriminator 2
 1328 0024 FB68     		ldr	r3, [r7, #12]
 1329 0026 0122     		movs	r2, #1
 1330 0028 1A77     		strb	r2, [r3, #28]
 798:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 799:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 1331              		.loc 1 799 0 is_stmt 1 discriminator 2
 1332 002a FB68     		ldr	r3, [r7, #12]
 1333 002c 0222     		movs	r2, #2
 1334 002e 5A77     		strb	r2, [r3, #29]
 800:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 801:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 1335              		.loc 1 801 0 discriminator 2
 1336 0030 7B68     		ldr	r3, [r7, #4]
 1337 0032 002B     		cmp	r3, #0
 1338 0034 37D1     		bne	.L53
 802:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 803:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1339              		.loc 1 803 0
 1340 0036 FB68     		ldr	r3, [r7, #12]
 1341 0038 1B68     		ldr	r3, [r3]
 1342 003a 9B68     		ldr	r3, [r3, #8]
 1343 003c 03F04003 		and	r3, r3, #64
 1344 0040 002B     		cmp	r3, #0
 1345 0042 02D1     		bne	.L54
 804:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 805:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 806:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 807:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     } 
 808:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
 809:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 810:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00;
 1346              		.loc 1 810 0
 1347 0044 BB68     		ldr	r3, [r7, #8]
 1348 0046 0022     		movs	r2, #0
 1349 0048 1A73     		strb	r2, [r3, #12]
 1350              	.L54:
 811:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 812:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 813:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 814:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 815:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 816:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 817:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 818:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 819:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 820:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
ARM GAS  /tmp/ccrfV39P.s 			page 39


 821:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 822:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
 823:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 824:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 825:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 1351              		.loc 1 825 0
 1352 004a BB68     		ldr	r3, [r7, #8]
 1353 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1354 004e 1846     		mov	r0, r3
 1355 0050 FFF7FEFF 		bl	RTC_ByteToBcd2
 1356 0054 0346     		mov	r3, r0
 1357 0056 1C04     		lsls	r4, r3, #16
 826:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 1358              		.loc 1 826 0
 1359 0058 BB68     		ldr	r3, [r7, #8]
 1360 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1361 005c 1846     		mov	r0, r3
 1362 005e FFF7FEFF 		bl	RTC_ByteToBcd2
 1363 0062 0346     		mov	r3, r0
 1364 0064 1B02     		lsls	r3, r3, #8
 825:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 1365              		.loc 1 825 0
 1366 0066 1C43     		orrs	r4, r4, r3
 827:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 1367              		.loc 1 827 0
 1368 0068 BB68     		ldr	r3, [r7, #8]
 1369 006a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1370 006c 1846     		mov	r0, r3
 1371 006e FFF7FEFF 		bl	RTC_ByteToBcd2
 1372 0072 0346     		mov	r3, r0
 826:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 1373              		.loc 1 826 0
 1374 0074 44EA0302 		orr	r2, r4, r3
 828:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 1375              		.loc 1 828 0
 1376 0078 BB68     		ldr	r3, [r7, #8]
 1377 007a 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1378 007c 1B04     		lsls	r3, r3, #16
 827:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 1379              		.loc 1 827 0
 1380 007e 42EA0304 		orr	r4, r2, r3
 829:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 1381              		.loc 1 829 0
 1382 0082 BB68     		ldr	r3, [r7, #8]
 1383 0084 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1384 0088 1846     		mov	r0, r3
 1385 008a FFF7FEFF 		bl	RTC_ByteToBcd2
 1386 008e 0346     		mov	r3, r0
 1387 0090 1B06     		lsls	r3, r3, #24
 828:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 1388              		.loc 1 828 0
 1389 0092 44EA0302 		orr	r2, r4, r3
 830:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1390              		.loc 1 830 0
 1391 0096 BB68     		ldr	r3, [r7, #8]
 1392 0098 1B6A     		ldr	r3, [r3, #32]
 829:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
ARM GAS  /tmp/ccrfV39P.s 			page 40


 1393              		.loc 1 829 0
 1394 009a 1A43     		orrs	r2, r2, r3
 831:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask)); 
 1395              		.loc 1 831 0
 1396 009c BB68     		ldr	r3, [r7, #8]
 1397 009e 9B69     		ldr	r3, [r3, #24]
 825:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 1398              		.loc 1 825 0
 1399 00a0 1343     		orrs	r3, r3, r2
 1400 00a2 FB61     		str	r3, [r7, #28]
 1401 00a4 40E0     		b	.L55
 1402              	.L53:
 832:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 833:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
 834:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 835:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1403              		.loc 1 835 0
 1404 00a6 FB68     		ldr	r3, [r7, #12]
 1405 00a8 1B68     		ldr	r3, [r3]
 1406 00aa 9B68     		ldr	r3, [r3, #8]
 1407 00ac 03F04003 		and	r3, r3, #64
 1408 00b0 002B     		cmp	r3, #0
 1409 00b2 07D0     		beq	.L56
 836:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 837:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 1410              		.loc 1 837 0
 1411 00b4 BB68     		ldr	r3, [r7, #8]
 1412 00b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1413 00b8 1846     		mov	r0, r3
 1414 00ba FFF7FEFF 		bl	RTC_Bcd2ToByte
 1415 00be 0346     		mov	r3, r0
 1416 00c0 FB61     		str	r3, [r7, #28]
 1417 00c2 02E0     		b	.L57
 1418              	.L56:
 838:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 839:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 840:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     } 
 841:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
 842:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 843:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00;
 1419              		.loc 1 843 0
 1420 00c4 BB68     		ldr	r3, [r7, #8]
 1421 00c6 0022     		movs	r2, #0
 1422 00c8 1A73     		strb	r2, [r3, #12]
 1423              	.L57:
 844:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 845:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 846:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 847:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 848:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 849:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 850:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 1424              		.loc 1 850 0
 1425 00ca BB68     		ldr	r3, [r7, #8]
 1426 00cc 1B6A     		ldr	r3, [r3, #32]
 1427 00ce 002B     		cmp	r3, #0
 1428 00d0 08D1     		bne	.L58
ARM GAS  /tmp/ccrfV39P.s 			page 41


 851:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 852:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 1429              		.loc 1 852 0
 1430 00d2 BB68     		ldr	r3, [r7, #8]
 1431 00d4 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1432 00d8 1846     		mov	r0, r3
 1433 00da FFF7FEFF 		bl	RTC_Bcd2ToByte
 1434 00de 0346     		mov	r3, r0
 1435 00e0 FB61     		str	r3, [r7, #28]
 1436 00e2 07E0     		b	.L59
 1437              	.L58:
 853:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
 854:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 855:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
 856:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 857:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 1438              		.loc 1 857 0
 1439 00e4 BB68     		ldr	r3, [r7, #8]
 1440 00e6 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1441 00ea 1846     		mov	r0, r3
 1442 00ec FFF7FEFF 		bl	RTC_Bcd2ToByte
 1443 00f0 0346     		mov	r3, r0
 1444 00f2 FB61     		str	r3, [r7, #28]
 1445              	.L59:
 858:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
 859:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }  
 860:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 861:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 1446              		.loc 1 861 0
 1447 00f4 BB68     		ldr	r3, [r7, #8]
 1448 00f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1449 00f8 1A04     		lsls	r2, r3, #16
 862:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 1450              		.loc 1 862 0
 1451 00fa BB68     		ldr	r3, [r7, #8]
 1452 00fc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1453 00fe 1B02     		lsls	r3, r3, #8
 861:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 1454              		.loc 1 861 0
 1455 0100 1343     		orrs	r3, r3, r2
 863:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 1456              		.loc 1 863 0
 1457 0102 BA68     		ldr	r2, [r7, #8]
 1458 0104 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 862:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 1459              		.loc 1 862 0
 1460 0106 1A43     		orrs	r2, r2, r3
 864:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 1461              		.loc 1 864 0
 1462 0108 BB68     		ldr	r3, [r7, #8]
 1463 010a 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1464 010c 1B04     		lsls	r3, r3, #16
 863:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 1465              		.loc 1 863 0
 1466 010e 1A43     		orrs	r2, r2, r3
 865:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 1467              		.loc 1 865 0
ARM GAS  /tmp/ccrfV39P.s 			page 42


 1468 0110 BB68     		ldr	r3, [r7, #8]
 1469 0112 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1470 0116 1B06     		lsls	r3, r3, #24
 864:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 1471              		.loc 1 864 0
 1472 0118 1A43     		orrs	r2, r2, r3
 866:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1473              		.loc 1 866 0
 1474 011a BB68     		ldr	r3, [r7, #8]
 1475 011c 1B6A     		ldr	r3, [r3, #32]
 865:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 1476              		.loc 1 865 0
 1477 011e 1A43     		orrs	r2, r2, r3
 867:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));   
 1478              		.loc 1 867 0
 1479 0120 BB68     		ldr	r3, [r7, #8]
 1480 0122 9B69     		ldr	r3, [r3, #24]
 861:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 1481              		.loc 1 861 0
 1482 0124 1343     		orrs	r3, r3, r2
 1483 0126 FB61     		str	r3, [r7, #28]
 1484              	.L55:
 868:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 869:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 870:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Configure the Alarm A or Alarm B Sub Second registers */
 871:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmS
 1485              		.loc 1 871 0
 1486 0128 BB68     		ldr	r3, [r7, #8]
 1487 012a 5A68     		ldr	r2, [r3, #4]
 1488 012c BB68     		ldr	r3, [r7, #8]
 1489 012e DB69     		ldr	r3, [r3, #28]
 1490 0130 1343     		orrs	r3, r3, r2
 1491 0132 7B61     		str	r3, [r7, #20]
 872:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 873:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 874:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 1492              		.loc 1 874 0
 1493 0134 FB68     		ldr	r3, [r7, #12]
 1494 0136 1B68     		ldr	r3, [r3]
 1495 0138 CA22     		movs	r2, #202
 1496 013a 5A62     		str	r2, [r3, #36]
 1497 013c FB68     		ldr	r3, [r7, #12]
 1498 013e 1B68     		ldr	r3, [r3]
 1499 0140 5322     		movs	r2, #83
 1500 0142 5A62     		str	r2, [r3, #36]
 875:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 876:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Configure the Alarm register */
 877:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(sAlarm->Alarm == RTC_ALARM_A)
 1501              		.loc 1 877 0
 1502 0144 BB68     		ldr	r3, [r7, #8]
 1503 0146 9B6A     		ldr	r3, [r3, #40]
 1504 0148 B3F5807F 		cmp	r3, #256
 1505 014c 3FD1     		bne	.L60
 878:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 879:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Disable the Alarm A interrupt */
 880:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
 1506              		.loc 1 880 0
ARM GAS  /tmp/ccrfV39P.s 			page 43


 1507 014e FB68     		ldr	r3, [r7, #12]
 1508 0150 1B68     		ldr	r3, [r3]
 1509 0152 FA68     		ldr	r2, [r7, #12]
 1510 0154 1268     		ldr	r2, [r2]
 1511 0156 9268     		ldr	r2, [r2, #8]
 1512 0158 22F48072 		bic	r2, r2, #256
 1513 015c 9A60     		str	r2, [r3, #8]
 881:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 882:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */ 
 883:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 1514              		.loc 1 883 0
 1515 015e FB68     		ldr	r3, [r7, #12]
 1516 0160 1B68     		ldr	r3, [r3]
 1517 0162 FA68     		ldr	r2, [r7, #12]
 1518 0164 1268     		ldr	r2, [r2]
 1519 0166 9268     		ldr	r2, [r2, #8]
 1520 0168 22F48052 		bic	r2, r2, #4096
 1521 016c 9A60     		str	r2, [r3, #8]
 884:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 885:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
 886:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 1522              		.loc 1 886 0
 1523 016e FFF7FEFF 		bl	HAL_GetTick
 1524 0172 B861     		str	r0, [r7, #24]
 887:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 888:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
 889:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 1525              		.loc 1 889 0
 1526 0174 13E0     		b	.L61
 1527              	.L62:
 890:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 891:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 1528              		.loc 1 891 0
 1529 0176 FFF7FEFF 		bl	HAL_GetTick
 1530 017a 0246     		mov	r2, r0
 1531 017c BB69     		ldr	r3, [r7, #24]
 1532 017e D31A     		subs	r3, r2, r3
 1533 0180 B3F57A7F 		cmp	r3, #1000
 1534 0184 0BD9     		bls	.L61
 892:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
 893:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 894:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1535              		.loc 1 894 0
 1536 0186 FB68     		ldr	r3, [r7, #12]
 1537 0188 1B68     		ldr	r3, [r3]
 1538 018a FF22     		movs	r2, #255
 1539 018c 5A62     		str	r2, [r3, #36]
 895:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 896:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 1540              		.loc 1 896 0
 1541 018e FB68     		ldr	r3, [r7, #12]
 1542 0190 0322     		movs	r2, #3
 1543 0192 5A77     		strb	r2, [r3, #29]
 897:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 898:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */ 
 899:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 1544              		.loc 1 899 0
ARM GAS  /tmp/ccrfV39P.s 			page 44


 1545 0194 FB68     		ldr	r3, [r7, #12]
 1546 0196 0022     		movs	r2, #0
 1547 0198 1A77     		strb	r2, [r3, #28]
 900:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 901:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 1548              		.loc 1 901 0
 1549 019a 0323     		movs	r3, #3
 1550 019c 61E0     		b	.L52
 1551              	.L61:
 889:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 1552              		.loc 1 889 0
 1553 019e FB68     		ldr	r3, [r7, #12]
 1554 01a0 1B68     		ldr	r3, [r3]
 1555 01a2 DB68     		ldr	r3, [r3, #12]
 1556 01a4 03F00103 		and	r3, r3, #1
 1557 01a8 002B     		cmp	r3, #0
 1558 01aa E4D0     		beq	.L62
 902:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }   
 903:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 904:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 905:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 1559              		.loc 1 905 0
 1560 01ac FB68     		ldr	r3, [r7, #12]
 1561 01ae 1B68     		ldr	r3, [r3]
 1562 01b0 FA69     		ldr	r2, [r7, #28]
 1563 01b2 DA61     		str	r2, [r3, #28]
 906:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm A Sub Second register */
 907:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = subsecondtmpreg;
 1564              		.loc 1 907 0
 1565 01b4 FB68     		ldr	r3, [r7, #12]
 1566 01b6 1B68     		ldr	r3, [r3]
 1567 01b8 7A69     		ldr	r2, [r7, #20]
 1568 01ba 5A64     		str	r2, [r3, #68]
 908:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
 909:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_ENABLE(hrtc);
 1569              		.loc 1 909 0
 1570 01bc FB68     		ldr	r3, [r7, #12]
 1571 01be 1B68     		ldr	r3, [r3]
 1572 01c0 FA68     		ldr	r2, [r7, #12]
 1573 01c2 1268     		ldr	r2, [r2]
 1574 01c4 9268     		ldr	r2, [r2, #8]
 1575 01c6 42F48072 		orr	r2, r2, #256
 1576 01ca 9A60     		str	r2, [r3, #8]
 1577 01cc 3EE0     		b	.L63
 1578              	.L60:
 910:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 911:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
 912:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 913:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Disable the Alarm B interrupt */
 914:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
 1579              		.loc 1 914 0
 1580 01ce FB68     		ldr	r3, [r7, #12]
 1581 01d0 1B68     		ldr	r3, [r3]
 1582 01d2 FA68     		ldr	r2, [r7, #12]
 1583 01d4 1268     		ldr	r2, [r2]
 1584 01d6 9268     		ldr	r2, [r2, #8]
 1585 01d8 22F40072 		bic	r2, r2, #512
ARM GAS  /tmp/ccrfV39P.s 			page 45


 1586 01dc 9A60     		str	r2, [r3, #8]
 915:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 916:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */ 
 917:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 1587              		.loc 1 917 0
 1588 01de FB68     		ldr	r3, [r7, #12]
 1589 01e0 1B68     		ldr	r3, [r3]
 1590 01e2 FA68     		ldr	r2, [r7, #12]
 1591 01e4 1268     		ldr	r2, [r2]
 1592 01e6 9268     		ldr	r2, [r2, #8]
 1593 01e8 22F40052 		bic	r2, r2, #8192
 1594 01ec 9A60     		str	r2, [r3, #8]
 918:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 919:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
 920:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 1595              		.loc 1 920 0
 1596 01ee FFF7FEFF 		bl	HAL_GetTick
 1597 01f2 B861     		str	r0, [r7, #24]
 921:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 922:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
 923:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 1598              		.loc 1 923 0
 1599 01f4 13E0     		b	.L64
 1600              	.L65:
 924:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 925:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 1601              		.loc 1 925 0
 1602 01f6 FFF7FEFF 		bl	HAL_GetTick
 1603 01fa 0246     		mov	r2, r0
 1604 01fc BB69     		ldr	r3, [r7, #24]
 1605 01fe D31A     		subs	r3, r2, r3
 1606 0200 B3F57A7F 		cmp	r3, #1000
 1607 0204 0BD9     		bls	.L64
 926:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
 927:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 928:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1608              		.loc 1 928 0
 1609 0206 FB68     		ldr	r3, [r7, #12]
 1610 0208 1B68     		ldr	r3, [r3]
 1611 020a FF22     		movs	r2, #255
 1612 020c 5A62     		str	r2, [r3, #36]
 929:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 930:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 1613              		.loc 1 930 0
 1614 020e FB68     		ldr	r3, [r7, #12]
 1615 0210 0322     		movs	r2, #3
 1616 0212 5A77     		strb	r2, [r3, #29]
 931:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 932:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */ 
 933:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 1617              		.loc 1 933 0
 1618 0214 FB68     		ldr	r3, [r7, #12]
 1619 0216 0022     		movs	r2, #0
 1620 0218 1A77     		strb	r2, [r3, #28]
 934:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 935:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 1621              		.loc 1 935 0
ARM GAS  /tmp/ccrfV39P.s 			page 46


 1622 021a 0323     		movs	r3, #3
 1623 021c 21E0     		b	.L52
 1624              	.L64:
 923:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 1625              		.loc 1 923 0
 1626 021e FB68     		ldr	r3, [r7, #12]
 1627 0220 1B68     		ldr	r3, [r3]
 1628 0222 DB68     		ldr	r3, [r3, #12]
 1629 0224 03F00203 		and	r3, r3, #2
 1630 0228 002B     		cmp	r3, #0
 1631 022a E4D0     		beq	.L65
 936:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }  
 937:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }    
 938:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 939:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 1632              		.loc 1 939 0
 1633 022c FB68     		ldr	r3, [r7, #12]
 1634 022e 1B68     		ldr	r3, [r3]
 1635 0230 FA69     		ldr	r2, [r7, #28]
 1636 0232 1A62     		str	r2, [r3, #32]
 940:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm B Sub Second register */
 941:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 1637              		.loc 1 941 0
 1638 0234 FB68     		ldr	r3, [r7, #12]
 1639 0236 1B68     		ldr	r3, [r3]
 1640 0238 7A69     		ldr	r2, [r7, #20]
 1641 023a 9A64     		str	r2, [r3, #72]
 942:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
 943:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_ENABLE(hrtc); 
 1642              		.loc 1 943 0
 1643 023c FB68     		ldr	r3, [r7, #12]
 1644 023e 1B68     		ldr	r3, [r3]
 1645 0240 FA68     		ldr	r2, [r7, #12]
 1646 0242 1268     		ldr	r2, [r2]
 1647 0244 9268     		ldr	r2, [r2, #8]
 1648 0246 42F40072 		orr	r2, r2, #512
 1649 024a 9A60     		str	r2, [r3, #8]
 1650              	.L63:
 944:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 945:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 946:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
 947:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);   
 1651              		.loc 1 947 0
 1652 024c FB68     		ldr	r3, [r7, #12]
 1653 024e 1B68     		ldr	r3, [r3]
 1654 0250 FF22     		movs	r2, #255
 1655 0252 5A62     		str	r2, [r3, #36]
 948:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 949:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Change RTC state */
 950:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 1656              		.loc 1 950 0
 1657 0254 FB68     		ldr	r3, [r7, #12]
 1658 0256 0122     		movs	r2, #1
 1659 0258 5A77     		strb	r2, [r3, #29]
 951:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 952:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Process Unlocked */ 
 953:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
ARM GAS  /tmp/ccrfV39P.s 			page 47


 1660              		.loc 1 953 0
 1661 025a FB68     		ldr	r3, [r7, #12]
 1662 025c 0022     		movs	r2, #0
 1663 025e 1A77     		strb	r2, [r3, #28]
 954:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;
 1664              		.loc 1 955 0
 1665 0260 0023     		movs	r3, #0
 1666              	.L52:
 956:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 1667              		.loc 1 956 0
 1668 0262 1846     		mov	r0, r3
 1669 0264 2437     		adds	r7, r7, #36
 1670              	.LCFI45:
 1671              		.cfi_def_cfa_offset 12
 1672 0266 BD46     		mov	sp, r7
 1673              	.LCFI46:
 1674              		.cfi_def_cfa_register 13
 1675              		@ sp needed
 1676 0268 90BD     		pop	{r4, r7, pc}
 1677              		.cfi_endproc
 1678              	.LFE144:
 1680              		.section	.text.HAL_RTC_SetAlarm_IT,"ax",%progbits
 1681              		.align	1
 1682              		.global	HAL_RTC_SetAlarm_IT
 1683              		.syntax unified
 1684              		.thumb
 1685              		.thumb_func
 1686              		.fpu fpv4-sp-d16
 1688              	HAL_RTC_SetAlarm_IT:
 1689              	.LFB145:
 957:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 958:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 959:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Sets the specified RTC Alarm with Interrupt 
 960:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 961:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
 962:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  sAlarm Pointer to Alarm structure
 963:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 964:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 965:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *             @arg FORMAT_BIN: Binary data format 
 966:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *             @arg FORMAT_BCD: BCD data format
 967:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
 968:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         is disabled (Use the HAL_RTC_DeactivateAlarm()).   
 969:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.   
 970:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 971:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 972:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t F
 973:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 1690              		.loc 1 973 0
 1691              		.cfi_startproc
 1692              		@ args = 0, pretend = 0, frame = 32
 1693              		@ frame_needed = 1, uses_anonymous_args = 0
 1694 0000 90B5     		push	{r4, r7, lr}
 1695              	.LCFI47:
 1696              		.cfi_def_cfa_offset 12
 1697              		.cfi_offset 4, -12
 1698              		.cfi_offset 7, -8
ARM GAS  /tmp/ccrfV39P.s 			page 48


 1699              		.cfi_offset 14, -4
 1700 0002 89B0     		sub	sp, sp, #36
 1701              	.LCFI48:
 1702              		.cfi_def_cfa_offset 48
 1703 0004 00AF     		add	r7, sp, #0
 1704              	.LCFI49:
 1705              		.cfi_def_cfa_register 7
 1706 0006 F860     		str	r0, [r7, #12]
 1707 0008 B960     		str	r1, [r7, #8]
 1708 000a 7A60     		str	r2, [r7, #4]
 974:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 1709              		.loc 1 974 0
 1710 000c 0023     		movs	r3, #0
 1711 000e FB61     		str	r3, [r7, #28]
 1712 0010 0023     		movs	r3, #0
 1713 0012 BB61     		str	r3, [r7, #24]
 975:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 1714              		.loc 1 975 0
 1715 0014 A14B     		ldr	r3, .L82
 1716 0016 1B68     		ldr	r3, [r3]
 1717 0018 A14A     		ldr	r2, .L82+4
 1718 001a A2FB0323 		umull	r2, r3, r2, r3
 1719 001e DB0A     		lsrs	r3, r3, #11
 1720 0020 4FF47A72 		mov	r2, #1000
 1721 0024 02FB03F3 		mul	r3, r2, r3
 1722 0028 7B61     		str	r3, [r7, #20]
 976:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 977:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
 978:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 979:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 980:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 981:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 982:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 983:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 984:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       
 985:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Process Locked */ 
 986:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 1723              		.loc 1 986 0
 1724 002a FB68     		ldr	r3, [r7, #12]
 1725 002c 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 1726 002e 012B     		cmp	r3, #1
 1727 0030 01D1     		bne	.L67
 1728              		.loc 1 986 0 is_stmt 0 discriminator 1
 1729 0032 0223     		movs	r3, #2
 1730 0034 2EE1     		b	.L68
 1731              	.L67:
 1732              		.loc 1 986 0 discriminator 2
 1733 0036 FB68     		ldr	r3, [r7, #12]
 1734 0038 0122     		movs	r2, #1
 1735 003a 1A77     		strb	r2, [r3, #28]
 987:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 988:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 1736              		.loc 1 988 0 is_stmt 1 discriminator 2
 1737 003c FB68     		ldr	r3, [r7, #12]
 1738 003e 0222     		movs	r2, #2
 1739 0040 5A77     		strb	r2, [r3, #29]
 989:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
ARM GAS  /tmp/ccrfV39P.s 			page 49


 990:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 1740              		.loc 1 990 0 discriminator 2
 1741 0042 7B68     		ldr	r3, [r7, #4]
 1742 0044 002B     		cmp	r3, #0
 1743 0046 37D1     		bne	.L69
 991:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 992:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1744              		.loc 1 992 0
 1745 0048 FB68     		ldr	r3, [r7, #12]
 1746 004a 1B68     		ldr	r3, [r3]
 1747 004c 9B68     		ldr	r3, [r3, #8]
 1748 004e 03F04003 		and	r3, r3, #64
 1749 0052 002B     		cmp	r3, #0
 1750 0054 02D1     		bne	.L70
 993:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 994:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 995:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 996:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     } 
 997:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
 998:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 999:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
 1751              		.loc 1 999 0
 1752 0056 BB68     		ldr	r3, [r7, #8]
 1753 0058 0022     		movs	r2, #0
 1754 005a 1A73     		strb	r2, [r3, #12]
 1755              	.L70:
1000:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
1001:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1002:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
1003:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
1004:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
1005:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1006:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1007:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
1008:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1009:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
1010:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1011:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
1012:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1013:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 1756              		.loc 1 1013 0
 1757 005c BB68     		ldr	r3, [r7, #8]
 1758 005e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1759 0060 1846     		mov	r0, r3
 1760 0062 FFF7FEFF 		bl	RTC_ByteToBcd2
 1761 0066 0346     		mov	r3, r0
 1762 0068 1C04     		lsls	r4, r3, #16
1014:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 1763              		.loc 1 1014 0
 1764 006a BB68     		ldr	r3, [r7, #8]
 1765 006c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1766 006e 1846     		mov	r0, r3
 1767 0070 FFF7FEFF 		bl	RTC_ByteToBcd2
 1768 0074 0346     		mov	r3, r0
 1769 0076 1B02     		lsls	r3, r3, #8
1013:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 1770              		.loc 1 1013 0
ARM GAS  /tmp/ccrfV39P.s 			page 50


 1771 0078 1C43     		orrs	r4, r4, r3
1015:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 1772              		.loc 1 1015 0
 1773 007a BB68     		ldr	r3, [r7, #8]
 1774 007c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1775 007e 1846     		mov	r0, r3
 1776 0080 FFF7FEFF 		bl	RTC_ByteToBcd2
 1777 0084 0346     		mov	r3, r0
1014:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 1778              		.loc 1 1014 0
 1779 0086 44EA0302 		orr	r2, r4, r3
1016:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 1780              		.loc 1 1016 0
 1781 008a BB68     		ldr	r3, [r7, #8]
 1782 008c 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1783 008e 1B04     		lsls	r3, r3, #16
1015:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 1784              		.loc 1 1015 0
 1785 0090 42EA0304 		orr	r4, r2, r3
1017:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 1786              		.loc 1 1017 0
 1787 0094 BB68     		ldr	r3, [r7, #8]
 1788 0096 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1789 009a 1846     		mov	r0, r3
 1790 009c FFF7FEFF 		bl	RTC_ByteToBcd2
 1791 00a0 0346     		mov	r3, r0
 1792 00a2 1B06     		lsls	r3, r3, #24
1016:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 1793              		.loc 1 1016 0
 1794 00a4 44EA0302 		orr	r2, r4, r3
1018:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1795              		.loc 1 1018 0
 1796 00a8 BB68     		ldr	r3, [r7, #8]
 1797 00aa 1B6A     		ldr	r3, [r3, #32]
1017:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 1798              		.loc 1 1017 0
 1799 00ac 1A43     		orrs	r2, r2, r3
1019:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask)); 
 1800              		.loc 1 1019 0
 1801 00ae BB68     		ldr	r3, [r7, #8]
 1802 00b0 9B69     		ldr	r3, [r3, #24]
1013:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 1803              		.loc 1 1013 0
 1804 00b2 1343     		orrs	r3, r3, r2
 1805 00b4 FB61     		str	r3, [r7, #28]
 1806 00b6 40E0     		b	.L71
 1807              	.L69:
1020:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1021:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
1022:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1023:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1808              		.loc 1 1023 0
 1809 00b8 FB68     		ldr	r3, [r7, #12]
 1810 00ba 1B68     		ldr	r3, [r3]
 1811 00bc 9B68     		ldr	r3, [r3, #8]
 1812 00be 03F04003 		and	r3, r3, #64
 1813 00c2 002B     		cmp	r3, #0
ARM GAS  /tmp/ccrfV39P.s 			page 51


 1814 00c4 07D0     		beq	.L72
1024:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1025:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 1815              		.loc 1 1025 0
 1816 00c6 BB68     		ldr	r3, [r7, #8]
 1817 00c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1818 00ca 1846     		mov	r0, r3
 1819 00cc FFF7FEFF 		bl	RTC_Bcd2ToByte
 1820 00d0 0346     		mov	r3, r0
 1821 00d2 FB61     		str	r3, [r7, #28]
 1822 00d4 02E0     		b	.L73
 1823              	.L72:
1026:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
1027:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1028:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     } 
1029:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
1030:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1031:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
 1824              		.loc 1 1031 0
 1825 00d6 BB68     		ldr	r3, [r7, #8]
 1826 00d8 0022     		movs	r2, #0
 1827 00da 1A73     		strb	r2, [r3, #12]
 1828              	.L73:
1032:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1033:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1034:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
1035:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
1036:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
1037:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
1038:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 1829              		.loc 1 1038 0
 1830 00dc BB68     		ldr	r3, [r7, #8]
 1831 00de 1B6A     		ldr	r3, [r3, #32]
 1832 00e0 002B     		cmp	r3, #0
 1833 00e2 08D1     		bne	.L74
1039:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1040:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 1834              		.loc 1 1040 0
 1835 00e4 BB68     		ldr	r3, [r7, #8]
 1836 00e6 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1837 00ea 1846     		mov	r0, r3
 1838 00ec FFF7FEFF 		bl	RTC_Bcd2ToByte
 1839 00f0 0346     		mov	r3, r0
 1840 00f2 FB61     		str	r3, [r7, #28]
 1841 00f4 07E0     		b	.L75
 1842              	.L74:
1041:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
1042:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1043:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
1044:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1045:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 1843              		.loc 1 1045 0
 1844 00f6 BB68     		ldr	r3, [r7, #8]
 1845 00f8 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1846 00fc 1846     		mov	r0, r3
 1847 00fe FFF7FEFF 		bl	RTC_Bcd2ToByte
 1848 0102 0346     		mov	r3, r0
ARM GAS  /tmp/ccrfV39P.s 			page 52


 1849 0104 FB61     		str	r3, [r7, #28]
 1850              	.L75:
1046:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
1047:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1048:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 1851              		.loc 1 1048 0
 1852 0106 BB68     		ldr	r3, [r7, #8]
 1853 0108 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1854 010a 1A04     		lsls	r2, r3, #16
1049:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 1855              		.loc 1 1049 0
 1856 010c BB68     		ldr	r3, [r7, #8]
 1857 010e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1858 0110 1B02     		lsls	r3, r3, #8
1048:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 1859              		.loc 1 1048 0
 1860 0112 1343     		orrs	r3, r3, r2
1050:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 1861              		.loc 1 1050 0
 1862 0114 BA68     		ldr	r2, [r7, #8]
 1863 0116 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
1049:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 1864              		.loc 1 1049 0
 1865 0118 1A43     		orrs	r2, r2, r3
1051:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 1866              		.loc 1 1051 0
 1867 011a BB68     		ldr	r3, [r7, #8]
 1868 011c 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1869 011e 1B04     		lsls	r3, r3, #16
1050:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 1870              		.loc 1 1050 0
 1871 0120 1A43     		orrs	r2, r2, r3
1052:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 1872              		.loc 1 1052 0
 1873 0122 BB68     		ldr	r3, [r7, #8]
 1874 0124 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1875 0128 1B06     		lsls	r3, r3, #24
1051:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 1876              		.loc 1 1051 0
 1877 012a 1A43     		orrs	r2, r2, r3
1053:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1878              		.loc 1 1053 0
 1879 012c BB68     		ldr	r3, [r7, #8]
 1880 012e 1B6A     		ldr	r3, [r3, #32]
1052:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 1881              		.loc 1 1052 0
 1882 0130 1A43     		orrs	r2, r2, r3
1054:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));     
 1883              		.loc 1 1054 0
 1884 0132 BB68     		ldr	r3, [r7, #8]
 1885 0134 9B69     		ldr	r3, [r3, #24]
1048:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 1886              		.loc 1 1048 0
 1887 0136 1343     		orrs	r3, r3, r2
 1888 0138 FB61     		str	r3, [r7, #28]
 1889              	.L71:
1055:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
ARM GAS  /tmp/ccrfV39P.s 			page 53


1056:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Configure the Alarm A or Alarm B Sub Second registers */
1057:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmS
 1890              		.loc 1 1057 0
 1891 013a BB68     		ldr	r3, [r7, #8]
 1892 013c 5A68     		ldr	r2, [r3, #4]
 1893 013e BB68     		ldr	r3, [r7, #8]
 1894 0140 DB69     		ldr	r3, [r3, #28]
 1895 0142 1343     		orrs	r3, r3, r2
 1896 0144 BB61     		str	r3, [r7, #24]
1058:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1059:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1060:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 1897              		.loc 1 1060 0
 1898 0146 FB68     		ldr	r3, [r7, #12]
 1899 0148 1B68     		ldr	r3, [r3]
 1900 014a CA22     		movs	r2, #202
 1901 014c 5A62     		str	r2, [r3, #36]
 1902 014e FB68     		ldr	r3, [r7, #12]
 1903 0150 1B68     		ldr	r3, [r3]
 1904 0152 5322     		movs	r2, #83
 1905 0154 5A62     		str	r2, [r3, #36]
1061:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1062:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Configure the Alarm register */
1063:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(sAlarm->Alarm == RTC_ALARM_A)
 1906              		.loc 1 1063 0
 1907 0156 BB68     		ldr	r3, [r7, #8]
 1908 0158 9B6A     		ldr	r3, [r3, #40]
 1909 015a B3F5807F 		cmp	r3, #256
 1910 015e 41D1     		bne	.L76
1064:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1065:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Disable the Alarm A interrupt */
1066:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
 1911              		.loc 1 1066 0
 1912 0160 FB68     		ldr	r3, [r7, #12]
 1913 0162 1B68     		ldr	r3, [r3]
 1914 0164 FA68     		ldr	r2, [r7, #12]
 1915 0166 1268     		ldr	r2, [r2]
 1916 0168 9268     		ldr	r2, [r2, #8]
 1917 016a 22F48072 		bic	r2, r2, #256
 1918 016e 9A60     		str	r2, [r3, #8]
1067:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1068:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Clear flag alarm A */
1069:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 1919              		.loc 1 1069 0
 1920 0170 FB68     		ldr	r3, [r7, #12]
 1921 0172 1B68     		ldr	r3, [r3]
 1922 0174 FA68     		ldr	r2, [r7, #12]
 1923 0176 1268     		ldr	r2, [r2]
 1924 0178 D268     		ldr	r2, [r2, #12]
 1925 017a D2B2     		uxtb	r2, r2
 1926 017c 62F4C072 		orn	r2, r2, #384
 1927 0180 DA60     		str	r2, [r3, #12]
 1928              	.L78:
1070:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1071:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
1072:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     do
1073:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
ARM GAS  /tmp/ccrfV39P.s 			page 54


1074:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if (count-- == 0U)
 1929              		.loc 1 1074 0
 1930 0182 7B69     		ldr	r3, [r7, #20]
 1931 0184 5A1E     		subs	r2, r3, #1
 1932 0186 7A61     		str	r2, [r7, #20]
 1933 0188 002B     		cmp	r3, #0
 1934 018a 0BD1     		bne	.L77
1075:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
1076:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1077:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1935              		.loc 1 1077 0
 1936 018c FB68     		ldr	r3, [r7, #12]
 1937 018e 1B68     		ldr	r3, [r3]
 1938 0190 FF22     		movs	r2, #255
 1939 0192 5A62     		str	r2, [r3, #36]
1078:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1079:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 1940              		.loc 1 1079 0
 1941 0194 FB68     		ldr	r3, [r7, #12]
 1942 0196 0322     		movs	r2, #3
 1943 0198 5A77     		strb	r2, [r3, #29]
1080:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1081:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */
1082:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 1944              		.loc 1 1082 0
 1945 019a FB68     		ldr	r3, [r7, #12]
 1946 019c 0022     		movs	r2, #0
 1947 019e 1A77     		strb	r2, [r3, #28]
1083:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1084:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 1948              		.loc 1 1084 0
 1949 01a0 0323     		movs	r3, #3
 1950 01a2 77E0     		b	.L68
 1951              	.L77:
1085:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }
1086:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     } 
1087:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 1952              		.loc 1 1087 0
 1953 01a4 FB68     		ldr	r3, [r7, #12]
 1954 01a6 1B68     		ldr	r3, [r3]
 1955 01a8 DB68     		ldr	r3, [r3, #12]
 1956 01aa 03F00103 		and	r3, r3, #1
 1957 01ae 002B     		cmp	r3, #0
 1958 01b0 E7D0     		beq	.L78
1088:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1089:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 1959              		.loc 1 1089 0
 1960 01b2 FB68     		ldr	r3, [r7, #12]
 1961 01b4 1B68     		ldr	r3, [r3]
 1962 01b6 FA69     		ldr	r2, [r7, #28]
 1963 01b8 DA61     		str	r2, [r3, #28]
1090:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm A Sub Second register */
1091:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = subsecondtmpreg;
 1964              		.loc 1 1091 0
 1965 01ba FB68     		ldr	r3, [r7, #12]
 1966 01bc 1B68     		ldr	r3, [r3]
 1967 01be BA69     		ldr	r2, [r7, #24]
ARM GAS  /tmp/ccrfV39P.s 			page 55


 1968 01c0 5A64     		str	r2, [r3, #68]
1092:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1093:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_ENABLE(hrtc);
 1969              		.loc 1 1093 0
 1970 01c2 FB68     		ldr	r3, [r7, #12]
 1971 01c4 1B68     		ldr	r3, [r3]
 1972 01c6 FA68     		ldr	r2, [r7, #12]
 1973 01c8 1268     		ldr	r2, [r2]
 1974 01ca 9268     		ldr	r2, [r2, #8]
 1975 01cc 42F48072 		orr	r2, r2, #256
 1976 01d0 9A60     		str	r2, [r3, #8]
1094:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
1095:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 1977              		.loc 1 1095 0
 1978 01d2 FB68     		ldr	r3, [r7, #12]
 1979 01d4 1B68     		ldr	r3, [r3]
 1980 01d6 FA68     		ldr	r2, [r7, #12]
 1981 01d8 1268     		ldr	r2, [r2]
 1982 01da 9268     		ldr	r2, [r2, #8]
 1983 01dc 42F48052 		orr	r2, r2, #4096
 1984 01e0 9A60     		str	r2, [r3, #8]
 1985 01e2 40E0     		b	.L79
 1986              	.L76:
1096:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1097:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
1098:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1099:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Disable the Alarm B interrupt */
1100:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
 1987              		.loc 1 1100 0
 1988 01e4 FB68     		ldr	r3, [r7, #12]
 1989 01e6 1B68     		ldr	r3, [r3]
 1990 01e8 FA68     		ldr	r2, [r7, #12]
 1991 01ea 1268     		ldr	r2, [r2]
 1992 01ec 9268     		ldr	r2, [r2, #8]
 1993 01ee 22F40072 		bic	r2, r2, #512
 1994 01f2 9A60     		str	r2, [r3, #8]
1101:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1102:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Clear flag alarm B */
1103:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 1995              		.loc 1 1103 0
 1996 01f4 FB68     		ldr	r3, [r7, #12]
 1997 01f6 1B68     		ldr	r3, [r3]
 1998 01f8 FA68     		ldr	r2, [r7, #12]
 1999 01fa 1268     		ldr	r2, [r2]
 2000 01fc D268     		ldr	r2, [r2, #12]
 2001 01fe D2B2     		uxtb	r2, r2
 2002 0200 62F42072 		orn	r2, r2, #640
 2003 0204 DA60     		str	r2, [r3, #12]
 2004              	.L81:
1104:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1105:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
1106:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     do
1107:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1108:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if (count-- == 0U)
 2005              		.loc 1 1108 0
 2006 0206 7B69     		ldr	r3, [r7, #20]
 2007 0208 5A1E     		subs	r2, r3, #1
ARM GAS  /tmp/ccrfV39P.s 			page 56


 2008 020a 7A61     		str	r2, [r7, #20]
 2009 020c 002B     		cmp	r3, #0
 2010 020e 0BD1     		bne	.L80
1109:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
1110:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1111:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2011              		.loc 1 1111 0
 2012 0210 FB68     		ldr	r3, [r7, #12]
 2013 0212 1B68     		ldr	r3, [r3]
 2014 0214 FF22     		movs	r2, #255
 2015 0216 5A62     		str	r2, [r3, #36]
1112:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1113:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 2016              		.loc 1 1113 0
 2017 0218 FB68     		ldr	r3, [r7, #12]
 2018 021a 0322     		movs	r2, #3
 2019 021c 5A77     		strb	r2, [r3, #29]
1114:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1115:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */
1116:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 2020              		.loc 1 1116 0
 2021 021e FB68     		ldr	r3, [r7, #12]
 2022 0220 0022     		movs	r2, #0
 2023 0222 1A77     		strb	r2, [r3, #28]
1117:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1118:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2024              		.loc 1 1118 0
 2025 0224 0323     		movs	r3, #3
 2026 0226 35E0     		b	.L68
 2027              	.L80:
1119:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }
1120:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     } 
1121:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 2028              		.loc 1 1121 0
 2029 0228 FB68     		ldr	r3, [r7, #12]
 2030 022a 1B68     		ldr	r3, [r3]
 2031 022c DB68     		ldr	r3, [r3, #12]
 2032 022e 03F00203 		and	r3, r3, #2
 2033 0232 002B     		cmp	r3, #0
 2034 0234 E7D0     		beq	.L81
1122:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
1123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 2035              		.loc 1 1123 0
 2036 0236 FB68     		ldr	r3, [r7, #12]
 2037 0238 1B68     		ldr	r3, [r3]
 2038 023a FA69     		ldr	r2, [r7, #28]
 2039 023c 1A62     		str	r2, [r3, #32]
1124:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm B Sub Second register */
1125:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 2040              		.loc 1 1125 0
 2041 023e FB68     		ldr	r3, [r7, #12]
 2042 0240 1B68     		ldr	r3, [r3]
 2043 0242 BA69     		ldr	r2, [r7, #24]
 2044 0244 9A64     		str	r2, [r3, #72]
1126:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1127:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_ENABLE(hrtc);
 2045              		.loc 1 1127 0
ARM GAS  /tmp/ccrfV39P.s 			page 57


 2046 0246 FB68     		ldr	r3, [r7, #12]
 2047 0248 1B68     		ldr	r3, [r3]
 2048 024a FA68     		ldr	r2, [r7, #12]
 2049 024c 1268     		ldr	r2, [r2]
 2050 024e 9268     		ldr	r2, [r2, #8]
 2051 0250 42F40072 		orr	r2, r2, #512
 2052 0254 9A60     		str	r2, [r3, #8]
1128:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
1129:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 2053              		.loc 1 1129 0
 2054 0256 FB68     		ldr	r3, [r7, #12]
 2055 0258 1B68     		ldr	r3, [r3]
 2056 025a FA68     		ldr	r2, [r7, #12]
 2057 025c 1268     		ldr	r2, [r2]
 2058 025e 9268     		ldr	r2, [r2, #8]
 2059 0260 42F40052 		orr	r2, r2, #8192
 2060 0264 9A60     		str	r2, [r3, #8]
 2061              	.L79:
1130:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1131:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1132:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* RTC Alarm Interrupt Configuration: EXTI configuration */
1133:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 2062              		.loc 1 1133 0
 2063 0266 0F4A     		ldr	r2, .L82+8
 2064 0268 0E4B     		ldr	r3, .L82+8
 2065 026a 1B68     		ldr	r3, [r3]
 2066 026c 43F40033 		orr	r3, r3, #131072
 2067 0270 1360     		str	r3, [r2]
1134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1135:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 2068              		.loc 1 1135 0
 2069 0272 0C4A     		ldr	r2, .L82+8
 2070 0274 0B4B     		ldr	r3, .L82+8
 2071 0276 9B68     		ldr	r3, [r3, #8]
 2072 0278 43F40033 		orr	r3, r3, #131072
 2073 027c 9360     		str	r3, [r2, #8]
1136:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1137:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1138:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 2074              		.loc 1 1138 0
 2075 027e FB68     		ldr	r3, [r7, #12]
 2076 0280 1B68     		ldr	r3, [r3]
 2077 0282 FF22     		movs	r2, #255
 2078 0284 5A62     		str	r2, [r3, #36]
1139:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1140:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 2079              		.loc 1 1140 0
 2080 0286 FB68     		ldr	r3, [r7, #12]
 2081 0288 0122     		movs	r2, #1
 2082 028a 5A77     		strb	r2, [r3, #29]
1141:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1142:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Process Unlocked */ 
1143:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);  
 2083              		.loc 1 1143 0
 2084 028c FB68     		ldr	r3, [r7, #12]
 2085 028e 0022     		movs	r2, #0
 2086 0290 1A77     		strb	r2, [r3, #28]
ARM GAS  /tmp/ccrfV39P.s 			page 58


1144:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1145:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;
 2087              		.loc 1 1145 0
 2088 0292 0023     		movs	r3, #0
 2089              	.L68:
1146:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 2090              		.loc 1 1146 0
 2091 0294 1846     		mov	r0, r3
 2092 0296 2437     		adds	r7, r7, #36
 2093              	.LCFI50:
 2094              		.cfi_def_cfa_offset 12
 2095 0298 BD46     		mov	sp, r7
 2096              	.LCFI51:
 2097              		.cfi_def_cfa_register 13
 2098              		@ sp needed
 2099 029a 90BD     		pop	{r4, r7, pc}
 2100              	.L83:
 2101              		.align	2
 2102              	.L82:
 2103 029c 00000000 		.word	SystemCoreClock
 2104 02a0 D34D6210 		.word	274877907
 2105 02a4 003C0140 		.word	1073822720
 2106              		.cfi_endproc
 2107              	.LFE145:
 2109              		.section	.text.HAL_RTC_DeactivateAlarm,"ax",%progbits
 2110              		.align	1
 2111              		.global	HAL_RTC_DeactivateAlarm
 2112              		.syntax unified
 2113              		.thumb
 2114              		.thumb_func
 2115              		.fpu fpv4-sp-d16
 2117              	HAL_RTC_DeactivateAlarm:
 2118              	.LFB146:
1147:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1148:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1149:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Deactive the specified RTC Alarm 
1150:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1151:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1152:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Alarm Specifies the Alarm.
1153:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1154:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_ALARM_A:  AlarmA
1155:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_ALARM_B:  AlarmB
1156:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
1157:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1158:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
1159:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 2119              		.loc 1 1159 0
 2120              		.cfi_startproc
 2121              		@ args = 0, pretend = 0, frame = 16
 2122              		@ frame_needed = 1, uses_anonymous_args = 0
 2123 0000 80B5     		push	{r7, lr}
 2124              	.LCFI52:
 2125              		.cfi_def_cfa_offset 8
 2126              		.cfi_offset 7, -8
 2127              		.cfi_offset 14, -4
 2128 0002 84B0     		sub	sp, sp, #16
 2129              	.LCFI53:
ARM GAS  /tmp/ccrfV39P.s 			page 59


 2130              		.cfi_def_cfa_offset 24
 2131 0004 00AF     		add	r7, sp, #0
 2132              	.LCFI54:
 2133              		.cfi_def_cfa_register 7
 2134 0006 7860     		str	r0, [r7, #4]
 2135 0008 3960     		str	r1, [r7]
1160:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tickstart = 0;
 2136              		.loc 1 1160 0
 2137 000a 0023     		movs	r3, #0
 2138 000c FB60     		str	r3, [r7, #12]
1161:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1162:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
1163:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(Alarm));
1164:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1165:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Process Locked */ 
1166:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 2139              		.loc 1 1166 0
 2140 000e 7B68     		ldr	r3, [r7, #4]
 2141 0010 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 2142 0012 012B     		cmp	r3, #1
 2143 0014 01D1     		bne	.L85
 2144              		.loc 1 1166 0 is_stmt 0 discriminator 1
 2145 0016 0223     		movs	r3, #2
 2146 0018 7BE0     		b	.L86
 2147              	.L85:
 2148              		.loc 1 1166 0 discriminator 2
 2149 001a 7B68     		ldr	r3, [r7, #4]
 2150 001c 0122     		movs	r2, #1
 2151 001e 1A77     		strb	r2, [r3, #28]
1167:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1168:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 2152              		.loc 1 1168 0 is_stmt 1 discriminator 2
 2153 0020 7B68     		ldr	r3, [r7, #4]
 2154 0022 0222     		movs	r2, #2
 2155 0024 5A77     		strb	r2, [r3, #29]
1169:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1170:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1171:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 2156              		.loc 1 1171 0 discriminator 2
 2157 0026 7B68     		ldr	r3, [r7, #4]
 2158 0028 1B68     		ldr	r3, [r3]
 2159 002a CA22     		movs	r2, #202
 2160 002c 5A62     		str	r2, [r3, #36]
 2161 002e 7B68     		ldr	r3, [r7, #4]
 2162 0030 1B68     		ldr	r3, [r3]
 2163 0032 5322     		movs	r2, #83
 2164 0034 5A62     		str	r2, [r3, #36]
1172:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1173:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(Alarm == RTC_ALARM_A)
 2165              		.loc 1 1173 0 discriminator 2
 2166 0036 3B68     		ldr	r3, [r7]
 2167 0038 B3F5807F 		cmp	r3, #256
 2168 003c 2FD1     		bne	.L87
1174:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1175:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* AlarmA */
1176:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
 2169              		.loc 1 1176 0
ARM GAS  /tmp/ccrfV39P.s 			page 60


 2170 003e 7B68     		ldr	r3, [r7, #4]
 2171 0040 1B68     		ldr	r3, [r3]
 2172 0042 7A68     		ldr	r2, [r7, #4]
 2173 0044 1268     		ldr	r2, [r2]
 2174 0046 9268     		ldr	r2, [r2, #8]
 2175 0048 22F48072 		bic	r2, r2, #256
 2176 004c 9A60     		str	r2, [r3, #8]
1177:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
1178:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */ 
1179:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 2177              		.loc 1 1179 0
 2178 004e 7B68     		ldr	r3, [r7, #4]
 2179 0050 1B68     		ldr	r3, [r3]
 2180 0052 7A68     		ldr	r2, [r7, #4]
 2181 0054 1268     		ldr	r2, [r2]
 2182 0056 9268     		ldr	r2, [r2, #8]
 2183 0058 22F48052 		bic	r2, r2, #4096
 2184 005c 9A60     		str	r2, [r3, #8]
1180:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1181:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
1182:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 2185              		.loc 1 1182 0
 2186 005e FFF7FEFF 		bl	HAL_GetTick
 2187 0062 F860     		str	r0, [r7, #12]
1183:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1184:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1185:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 2188              		.loc 1 1185 0
 2189 0064 13E0     		b	.L88
 2190              	.L89:
1186:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1187:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 2191              		.loc 1 1187 0
 2192 0066 FFF7FEFF 		bl	HAL_GetTick
 2193 006a 0246     		mov	r2, r0
 2194 006c FB68     		ldr	r3, [r7, #12]
 2195 006e D31A     		subs	r3, r2, r3
 2196 0070 B3F57A7F 		cmp	r3, #1000
 2197 0074 0BD9     		bls	.L88
1188:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       { 
1189:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1190:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2198              		.loc 1 1190 0
 2199 0076 7B68     		ldr	r3, [r7, #4]
 2200 0078 1B68     		ldr	r3, [r3]
 2201 007a FF22     		movs	r2, #255
 2202 007c 5A62     		str	r2, [r3, #36]
1191:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
1192:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 2203              		.loc 1 1192 0
 2204 007e 7B68     		ldr	r3, [r7, #4]
 2205 0080 0322     		movs	r2, #3
 2206 0082 5A77     		strb	r2, [r3, #29]
1193:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
1194:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */ 
1195:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 2207              		.loc 1 1195 0
ARM GAS  /tmp/ccrfV39P.s 			page 61


 2208 0084 7B68     		ldr	r3, [r7, #4]
 2209 0086 0022     		movs	r2, #0
 2210 0088 1A77     		strb	r2, [r3, #28]
1196:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
1197:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2211              		.loc 1 1197 0
 2212 008a 0323     		movs	r3, #3
 2213 008c 41E0     		b	.L86
 2214              	.L88:
1185:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 2215              		.loc 1 1185 0
 2216 008e 7B68     		ldr	r3, [r7, #4]
 2217 0090 1B68     		ldr	r3, [r3]
 2218 0092 DB68     		ldr	r3, [r3, #12]
 2219 0094 03F00103 		and	r3, r3, #1
 2220 0098 002B     		cmp	r3, #0
 2221 009a E4D0     		beq	.L89
 2222 009c 2EE0     		b	.L90
 2223              	.L87:
1198:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }      
1199:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1200:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1201:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
1202:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1203:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* AlarmB */
1204:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
 2224              		.loc 1 1204 0
 2225 009e 7B68     		ldr	r3, [r7, #4]
 2226 00a0 1B68     		ldr	r3, [r3]
 2227 00a2 7A68     		ldr	r2, [r7, #4]
 2228 00a4 1268     		ldr	r2, [r2]
 2229 00a6 9268     		ldr	r2, [r2, #8]
 2230 00a8 22F40072 		bic	r2, r2, #512
 2231 00ac 9A60     		str	r2, [r3, #8]
1205:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
1206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */ 
1207:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 2232              		.loc 1 1207 0
 2233 00ae 7B68     		ldr	r3, [r7, #4]
 2234 00b0 1B68     		ldr	r3, [r3]
 2235 00b2 7A68     		ldr	r2, [r7, #4]
 2236 00b4 1268     		ldr	r2, [r2]
 2237 00b6 9268     		ldr	r2, [r2, #8]
 2238 00b8 22F40052 		bic	r2, r2, #8192
 2239 00bc 9A60     		str	r2, [r3, #8]
1208:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1209:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
1210:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 2240              		.loc 1 1210 0
 2241 00be FFF7FEFF 		bl	HAL_GetTick
 2242 00c2 F860     		str	r0, [r7, #12]
1211:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1212:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1213:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 2243              		.loc 1 1213 0
 2244 00c4 13E0     		b	.L91
 2245              	.L92:
ARM GAS  /tmp/ccrfV39P.s 			page 62


1214:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1215:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 2246              		.loc 1 1215 0
 2247 00c6 FFF7FEFF 		bl	HAL_GetTick
 2248 00ca 0246     		mov	r2, r0
 2249 00cc FB68     		ldr	r3, [r7, #12]
 2250 00ce D31A     		subs	r3, r2, r3
 2251 00d0 B3F57A7F 		cmp	r3, #1000
 2252 00d4 0BD9     		bls	.L91
1216:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
1217:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1218:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2253              		.loc 1 1218 0
 2254 00d6 7B68     		ldr	r3, [r7, #4]
 2255 00d8 1B68     		ldr	r3, [r3]
 2256 00da FF22     		movs	r2, #255
 2257 00dc 5A62     		str	r2, [r3, #36]
1219:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
1220:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 2258              		.loc 1 1220 0
 2259 00de 7B68     		ldr	r3, [r7, #4]
 2260 00e0 0322     		movs	r2, #3
 2261 00e2 5A77     		strb	r2, [r3, #29]
1221:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
1222:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */ 
1223:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 2262              		.loc 1 1223 0
 2263 00e4 7B68     		ldr	r3, [r7, #4]
 2264 00e6 0022     		movs	r2, #0
 2265 00e8 1A77     		strb	r2, [r3, #28]
1224:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
1225:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2266              		.loc 1 1225 0
 2267 00ea 0323     		movs	r3, #3
 2268 00ec 11E0     		b	.L86
 2269              	.L91:
1213:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 2270              		.loc 1 1213 0
 2271 00ee 7B68     		ldr	r3, [r7, #4]
 2272 00f0 1B68     		ldr	r3, [r3]
 2273 00f2 DB68     		ldr	r3, [r3, #12]
 2274 00f4 03F00203 		and	r3, r3, #2
 2275 00f8 002B     		cmp	r3, #0
 2276 00fa E4D0     		beq	.L92
 2277              	.L90:
1226:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }    
1227:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1228:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1229:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1230:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2278              		.loc 1 1230 0
 2279 00fc 7B68     		ldr	r3, [r7, #4]
 2280 00fe 1B68     		ldr	r3, [r3]
 2281 0100 FF22     		movs	r2, #255
 2282 0102 5A62     		str	r2, [r3, #36]
1231:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1232:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY; 
ARM GAS  /tmp/ccrfV39P.s 			page 63


 2283              		.loc 1 1232 0
 2284 0104 7B68     		ldr	r3, [r7, #4]
 2285 0106 0122     		movs	r2, #1
 2286 0108 5A77     		strb	r2, [r3, #29]
1233:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1234:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Process Unlocked */ 
1235:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);  
 2287              		.loc 1 1235 0
 2288 010a 7B68     		ldr	r3, [r7, #4]
 2289 010c 0022     		movs	r2, #0
 2290 010e 1A77     		strb	r2, [r3, #28]
1236:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1237:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK; 
 2291              		.loc 1 1237 0
 2292 0110 0023     		movs	r3, #0
 2293              	.L86:
1238:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 2294              		.loc 1 1238 0
 2295 0112 1846     		mov	r0, r3
 2296 0114 1037     		adds	r7, r7, #16
 2297              	.LCFI55:
 2298              		.cfi_def_cfa_offset 8
 2299 0116 BD46     		mov	sp, r7
 2300              	.LCFI56:
 2301              		.cfi_def_cfa_register 13
 2302              		@ sp needed
 2303 0118 80BD     		pop	{r7, pc}
 2304              		.cfi_endproc
 2305              	.LFE146:
 2307              		.section	.text.HAL_RTC_GetAlarm,"ax",%progbits
 2308              		.align	1
 2309              		.global	HAL_RTC_GetAlarm
 2310              		.syntax unified
 2311              		.thumb
 2312              		.thumb_func
 2313              		.fpu fpv4-sp-d16
 2315              	HAL_RTC_GetAlarm:
 2316              	.LFB147:
1239:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****            
1240:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1241:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Gets the RTC Alarm value and masks.
1242:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1243:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1244:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  sAlarm Pointer to Date structure
1245:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Alarm Specifies the Alarm.
1246:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1247:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *             @arg RTC_ALARM_A: AlarmA
1248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *             @arg RTC_ALARM_B: AlarmB  
1249:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
1250:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1251:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BIN: Binary data format 
1252:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BCD: BCD data format
1253:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
1254:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1255:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alar
1256:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 2317              		.loc 1 1256 0
ARM GAS  /tmp/ccrfV39P.s 			page 64


 2318              		.cfi_startproc
 2319              		@ args = 0, pretend = 0, frame = 24
 2320              		@ frame_needed = 1, uses_anonymous_args = 0
 2321 0000 80B5     		push	{r7, lr}
 2322              	.LCFI57:
 2323              		.cfi_def_cfa_offset 8
 2324              		.cfi_offset 7, -8
 2325              		.cfi_offset 14, -4
 2326 0002 86B0     		sub	sp, sp, #24
 2327              	.LCFI58:
 2328              		.cfi_def_cfa_offset 32
 2329 0004 00AF     		add	r7, sp, #0
 2330              	.LCFI59:
 2331              		.cfi_def_cfa_register 7
 2332 0006 F860     		str	r0, [r7, #12]
 2333 0008 B960     		str	r1, [r7, #8]
 2334 000a 7A60     		str	r2, [r7, #4]
 2335 000c 3B60     		str	r3, [r7]
1257:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tmpreg = 0, subsecondtmpreg = 0;
 2336              		.loc 1 1257 0
 2337 000e 0023     		movs	r3, #0
 2338 0010 7B61     		str	r3, [r7, #20]
 2339 0012 0023     		movs	r3, #0
 2340 0014 3B61     		str	r3, [r7, #16]
1258:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1259:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
1260:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(Alarm));
1262:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1263:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(Alarm == RTC_ALARM_A)
 2341              		.loc 1 1263 0
 2342 0016 7B68     		ldr	r3, [r7, #4]
 2343 0018 B3F5807F 		cmp	r3, #256
 2344 001c 0ED1     		bne	.L94
1264:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1265:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* AlarmA */
1266:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sAlarm->Alarm = RTC_ALARM_A;
 2345              		.loc 1 1266 0
 2346 001e BB68     		ldr	r3, [r7, #8]
 2347 0020 4FF48072 		mov	r2, #256
 2348 0024 9A62     		str	r2, [r3, #40]
1267:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
1268:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 2349              		.loc 1 1268 0
 2350 0026 FB68     		ldr	r3, [r7, #12]
 2351 0028 1B68     		ldr	r3, [r3]
 2352 002a DB69     		ldr	r3, [r3, #28]
 2353 002c 7B61     		str	r3, [r7, #20]
1269:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 2354              		.loc 1 1269 0
 2355 002e FB68     		ldr	r3, [r7, #12]
 2356 0030 1B68     		ldr	r3, [r3]
 2357 0032 5B6C     		ldr	r3, [r3, #68]
 2358 0034 C3F30E03 		ubfx	r3, r3, #0, #15
 2359 0038 3B61     		str	r3, [r7, #16]
 2360 003a 0DE0     		b	.L95
 2361              	.L94:
ARM GAS  /tmp/ccrfV39P.s 			page 65


1270:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1271:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
1272:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1273:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sAlarm->Alarm = RTC_ALARM_B;
 2362              		.loc 1 1273 0
 2363 003c BB68     		ldr	r3, [r7, #8]
 2364 003e 4FF40072 		mov	r2, #512
 2365 0042 9A62     		str	r2, [r3, #40]
1274:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
1275:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 2366              		.loc 1 1275 0
 2367 0044 FB68     		ldr	r3, [r7, #12]
 2368 0046 1B68     		ldr	r3, [r3]
 2369 0048 1B6A     		ldr	r3, [r3, #32]
 2370 004a 7B61     		str	r3, [r7, #20]
1276:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 2371              		.loc 1 1276 0
 2372 004c FB68     		ldr	r3, [r7, #12]
 2373 004e 1B68     		ldr	r3, [r3]
 2374 0050 9B6C     		ldr	r3, [r3, #72]
 2375 0052 C3F30E03 		ubfx	r3, r3, #0, #15
 2376 0056 3B61     		str	r3, [r7, #16]
 2377              	.L95:
1277:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1278:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
1279:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Fill the structure with the read parameters */
1280:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16);
 2378              		.loc 1 1280 0
 2379 0058 7B69     		ldr	r3, [r7, #20]
 2380 005a 1B0C     		lsrs	r3, r3, #16
 2381 005c DBB2     		uxtb	r3, r3
 2382 005e 03F03F03 		and	r3, r3, #63
 2383 0062 DAB2     		uxtb	r2, r3
 2384 0064 BB68     		ldr	r3, [r7, #8]
 2385 0066 1A70     		strb	r2, [r3]
1281:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8);
 2386              		.loc 1 1281 0
 2387 0068 7B69     		ldr	r3, [r7, #20]
 2388 006a 1B0A     		lsrs	r3, r3, #8
 2389 006c DBB2     		uxtb	r3, r3
 2390 006e 03F07F03 		and	r3, r3, #127
 2391 0072 DAB2     		uxtb	r2, r3
 2392 0074 BB68     		ldr	r3, [r7, #8]
 2393 0076 5A70     		strb	r2, [r3, #1]
1282:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 2394              		.loc 1 1282 0
 2395 0078 7B69     		ldr	r3, [r7, #20]
 2396 007a DBB2     		uxtb	r3, r3
 2397 007c 03F07F03 		and	r3, r3, #127
 2398 0080 DAB2     		uxtb	r2, r3
 2399 0082 BB68     		ldr	r3, [r7, #8]
 2400 0084 9A70     		strb	r2, [r3, #2]
1283:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 2401              		.loc 1 1283 0
 2402 0086 7B69     		ldr	r3, [r7, #20]
 2403 0088 1B0C     		lsrs	r3, r3, #16
 2404 008a DBB2     		uxtb	r3, r3
ARM GAS  /tmp/ccrfV39P.s 			page 66


 2405 008c 03F04003 		and	r3, r3, #64
 2406 0090 DAB2     		uxtb	r2, r3
 2407 0092 BB68     		ldr	r3, [r7, #8]
 2408 0094 1A73     		strb	r2, [r3, #12]
1284:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 2409              		.loc 1 1284 0
 2410 0096 BB68     		ldr	r3, [r7, #8]
 2411 0098 3A69     		ldr	r2, [r7, #16]
 2412 009a 5A60     		str	r2, [r3, #4]
1285:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 2413              		.loc 1 1285 0
 2414 009c 7B69     		ldr	r3, [r7, #20]
 2415 009e 1B0E     		lsrs	r3, r3, #24
 2416 00a0 DBB2     		uxtb	r3, r3
 2417 00a2 03F03F03 		and	r3, r3, #63
 2418 00a6 DAB2     		uxtb	r2, r3
 2419 00a8 BB68     		ldr	r3, [r7, #8]
 2420 00aa 83F82420 		strb	r2, [r3, #36]
1286:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 2421              		.loc 1 1286 0
 2422 00ae 7B69     		ldr	r3, [r7, #20]
 2423 00b0 03F08042 		and	r2, r3, #1073741824
 2424 00b4 BB68     		ldr	r3, [r7, #8]
 2425 00b6 1A62     		str	r2, [r3, #32]
1287:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 2426              		.loc 1 1287 0
 2427 00b8 7B69     		ldr	r3, [r7, #20]
 2428 00ba 03F08032 		and	r2, r3, #-2139062144
 2429 00be BB68     		ldr	r3, [r7, #8]
 2430 00c0 9A61     		str	r2, [r3, #24]
1288:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
1289:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 2431              		.loc 1 1289 0
 2432 00c2 3B68     		ldr	r3, [r7]
 2433 00c4 002B     		cmp	r3, #0
 2434 00c6 25D1     		bne	.L96
1290:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1291:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 2435              		.loc 1 1291 0
 2436 00c8 BB68     		ldr	r3, [r7, #8]
 2437 00ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2438 00cc 1846     		mov	r0, r3
 2439 00ce FFF7FEFF 		bl	RTC_Bcd2ToByte
 2440 00d2 0346     		mov	r3, r0
 2441 00d4 1A46     		mov	r2, r3
 2442 00d6 BB68     		ldr	r3, [r7, #8]
 2443 00d8 1A70     		strb	r2, [r3]
1292:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 2444              		.loc 1 1292 0
 2445 00da BB68     		ldr	r3, [r7, #8]
 2446 00dc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2447 00de 1846     		mov	r0, r3
 2448 00e0 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2449 00e4 0346     		mov	r3, r0
 2450 00e6 1A46     		mov	r2, r3
 2451 00e8 BB68     		ldr	r3, [r7, #8]
 2452 00ea 5A70     		strb	r2, [r3, #1]
ARM GAS  /tmp/ccrfV39P.s 			page 67


1293:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 2453              		.loc 1 1293 0
 2454 00ec BB68     		ldr	r3, [r7, #8]
 2455 00ee 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2456 00f0 1846     		mov	r0, r3
 2457 00f2 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2458 00f6 0346     		mov	r3, r0
 2459 00f8 1A46     		mov	r2, r3
 2460 00fa BB68     		ldr	r3, [r7, #8]
 2461 00fc 9A70     		strb	r2, [r3, #2]
1294:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 2462              		.loc 1 1294 0
 2463 00fe BB68     		ldr	r3, [r7, #8]
 2464 0100 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 2465 0104 1846     		mov	r0, r3
 2466 0106 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2467 010a 0346     		mov	r3, r0
 2468 010c 1A46     		mov	r2, r3
 2469 010e BB68     		ldr	r3, [r7, #8]
 2470 0110 83F82420 		strb	r2, [r3, #36]
 2471              	.L96:
1295:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }  
1296:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
1297:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;
 2472              		.loc 1 1297 0
 2473 0114 0023     		movs	r3, #0
1298:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 2474              		.loc 1 1298 0
 2475 0116 1846     		mov	r0, r3
 2476 0118 1837     		adds	r7, r7, #24
 2477              	.LCFI60:
 2478              		.cfi_def_cfa_offset 8
 2479 011a BD46     		mov	sp, r7
 2480              	.LCFI61:
 2481              		.cfi_def_cfa_register 13
 2482              		@ sp needed
 2483 011c 80BD     		pop	{r7, pc}
 2484              		.cfi_endproc
 2485              	.LFE147:
 2487              		.section	.text.HAL_RTC_AlarmIRQHandler,"ax",%progbits
 2488              		.align	1
 2489              		.global	HAL_RTC_AlarmIRQHandler
 2490              		.syntax unified
 2491              		.thumb
 2492              		.thumb_func
 2493              		.fpu fpv4-sp-d16
 2495              	HAL_RTC_AlarmIRQHandler:
 2496              	.LFB148:
1299:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1300:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1301:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  This function handles Alarm interrupt request.
1302:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1303:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1304:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval None
1305:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1306:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
1307:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {  
ARM GAS  /tmp/ccrfV39P.s 			page 68


 2497              		.loc 1 1307 0
 2498              		.cfi_startproc
 2499              		@ args = 0, pretend = 0, frame = 8
 2500              		@ frame_needed = 1, uses_anonymous_args = 0
 2501 0000 80B5     		push	{r7, lr}
 2502              	.LCFI62:
 2503              		.cfi_def_cfa_offset 8
 2504              		.cfi_offset 7, -8
 2505              		.cfi_offset 14, -4
 2506 0002 82B0     		sub	sp, sp, #8
 2507              	.LCFI63:
 2508              		.cfi_def_cfa_offset 16
 2509 0004 00AF     		add	r7, sp, #0
 2510              	.LCFI64:
 2511              		.cfi_def_cfa_register 7
 2512 0006 7860     		str	r0, [r7, #4]
1308:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRA))
 2513              		.loc 1 1308 0
 2514 0008 7B68     		ldr	r3, [r7, #4]
 2515 000a 1B68     		ldr	r3, [r3]
 2516 000c DB68     		ldr	r3, [r3, #12]
 2517 000e 03F48073 		and	r3, r3, #256
 2518 0012 002B     		cmp	r3, #0
 2519 0014 12D0     		beq	.L99
1309:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1310:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get the status of the Interrupt */
1311:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRA) != (uint32_t)RESET)
 2520              		.loc 1 1311 0
 2521 0016 7B68     		ldr	r3, [r7, #4]
 2522 0018 1B68     		ldr	r3, [r3]
 2523 001a 9B68     		ldr	r3, [r3, #8]
 2524 001c 03F48053 		and	r3, r3, #4096
 2525 0020 002B     		cmp	r3, #0
 2526 0022 0BD0     		beq	.L99
1312:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1313:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       /* AlarmA callback */ 
1314:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       HAL_RTC_AlarmAEventCallback(hrtc);
 2527              		.loc 1 1314 0
 2528 0024 7868     		ldr	r0, [r7, #4]
 2529 0026 FFF7FEFF 		bl	HAL_RTC_AlarmAEventCallback
1315:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       
1316:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       /* Clear the Alarm interrupt pending bit */
1317:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 2530              		.loc 1 1317 0
 2531 002a 7B68     		ldr	r3, [r7, #4]
 2532 002c 1B68     		ldr	r3, [r3]
 2533 002e 7A68     		ldr	r2, [r7, #4]
 2534 0030 1268     		ldr	r2, [r2]
 2535 0032 D268     		ldr	r2, [r2, #12]
 2536 0034 D2B2     		uxtb	r2, r2
 2537 0036 62F4C072 		orn	r2, r2, #384
 2538 003a DA60     		str	r2, [r3, #12]
 2539              	.L99:
1318:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1319:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1320:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1321:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRB))
ARM GAS  /tmp/ccrfV39P.s 			page 69


 2540              		.loc 1 1321 0
 2541 003c 7B68     		ldr	r3, [r7, #4]
 2542 003e 1B68     		ldr	r3, [r3]
 2543 0040 DB68     		ldr	r3, [r3, #12]
 2544 0042 03F40073 		and	r3, r3, #512
 2545 0046 002B     		cmp	r3, #0
 2546 0048 12D0     		beq	.L100
1322:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1323:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get the status of the Interrupt */
1324:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRB) != (uint32_t)RESET)
 2547              		.loc 1 1324 0
 2548 004a 7B68     		ldr	r3, [r7, #4]
 2549 004c 1B68     		ldr	r3, [r3]
 2550 004e 9B68     		ldr	r3, [r3, #8]
 2551 0050 03F40053 		and	r3, r3, #8192
 2552 0054 002B     		cmp	r3, #0
 2553 0056 0BD0     		beq	.L100
1325:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1326:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       /* AlarmB callback */ 
1327:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       HAL_RTCEx_AlarmBEventCallback(hrtc);
 2554              		.loc 1 1327 0
 2555 0058 7868     		ldr	r0, [r7, #4]
 2556 005a FFF7FEFF 		bl	HAL_RTCEx_AlarmBEventCallback
1328:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       
1329:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       /* Clear the Alarm interrupt pending bit */
1330:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 2557              		.loc 1 1330 0
 2558 005e 7B68     		ldr	r3, [r7, #4]
 2559 0060 1B68     		ldr	r3, [r3]
 2560 0062 7A68     		ldr	r2, [r7, #4]
 2561 0064 1268     		ldr	r2, [r2]
 2562 0066 D268     		ldr	r2, [r2, #12]
 2563 0068 D2B2     		uxtb	r2, r2
 2564 006a 62F42072 		orn	r2, r2, #640
 2565 006e DA60     		str	r2, [r3, #12]
 2566              	.L100:
1331:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1332:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1333:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1334:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Clear the EXTI's line Flag for RTC Alarm */
1335:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 2567              		.loc 1 1335 0
 2568 0070 054B     		ldr	r3, .L101
 2569 0072 4FF40032 		mov	r2, #131072
 2570 0076 5A61     		str	r2, [r3, #20]
1336:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1337:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Change RTC state */
1338:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
 2571              		.loc 1 1338 0
 2572 0078 7B68     		ldr	r3, [r7, #4]
 2573 007a 0122     		movs	r2, #1
 2574 007c 5A77     		strb	r2, [r3, #29]
1339:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 2575              		.loc 1 1339 0
 2576 007e 00BF     		nop
 2577 0080 0837     		adds	r7, r7, #8
 2578              	.LCFI65:
ARM GAS  /tmp/ccrfV39P.s 			page 70


 2579              		.cfi_def_cfa_offset 8
 2580 0082 BD46     		mov	sp, r7
 2581              	.LCFI66:
 2582              		.cfi_def_cfa_register 13
 2583              		@ sp needed
 2584 0084 80BD     		pop	{r7, pc}
 2585              	.L102:
 2586 0086 00BF     		.align	2
 2587              	.L101:
 2588 0088 003C0140 		.word	1073822720
 2589              		.cfi_endproc
 2590              	.LFE148:
 2592              		.section	.text.HAL_RTC_AlarmAEventCallback,"ax",%progbits
 2593              		.align	1
 2594              		.weak	HAL_RTC_AlarmAEventCallback
 2595              		.syntax unified
 2596              		.thumb
 2597              		.thumb_func
 2598              		.fpu fpv4-sp-d16
 2600              	HAL_RTC_AlarmAEventCallback:
 2601              	.LFB149:
1340:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1341:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1342:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Alarm A callback.
1343:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1344:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1345:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval None
1346:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1347:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** __weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
1348:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 2602              		.loc 1 1348 0
 2603              		.cfi_startproc
 2604              		@ args = 0, pretend = 0, frame = 8
 2605              		@ frame_needed = 1, uses_anonymous_args = 0
 2606              		@ link register save eliminated.
 2607 0000 80B4     		push	{r7}
 2608              	.LCFI67:
 2609              		.cfi_def_cfa_offset 4
 2610              		.cfi_offset 7, -4
 2611 0002 83B0     		sub	sp, sp, #12
 2612              	.LCFI68:
 2613              		.cfi_def_cfa_offset 16
 2614 0004 00AF     		add	r7, sp, #0
 2615              	.LCFI69:
 2616              		.cfi_def_cfa_register 7
 2617 0006 7860     		str	r0, [r7, #4]
1349:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
1350:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   UNUSED(hrtc);
1351:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1352:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1353:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****             the HAL_RTC_AlarmAEventCallback could be implemented in the user file
1354:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    */
1355:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 2618              		.loc 1 1355 0
 2619 0008 00BF     		nop
 2620 000a 0C37     		adds	r7, r7, #12
 2621              	.LCFI70:
ARM GAS  /tmp/ccrfV39P.s 			page 71


 2622              		.cfi_def_cfa_offset 4
 2623 000c BD46     		mov	sp, r7
 2624              	.LCFI71:
 2625              		.cfi_def_cfa_register 13
 2626              		@ sp needed
 2627 000e 5DF8047B 		ldr	r7, [sp], #4
 2628              	.LCFI72:
 2629              		.cfi_restore 7
 2630              		.cfi_def_cfa_offset 0
 2631 0012 7047     		bx	lr
 2632              		.cfi_endproc
 2633              	.LFE149:
 2635              		.section	.text.HAL_RTC_PollForAlarmAEvent,"ax",%progbits
 2636              		.align	1
 2637              		.global	HAL_RTC_PollForAlarmAEvent
 2638              		.syntax unified
 2639              		.thumb
 2640              		.thumb_func
 2641              		.fpu fpv4-sp-d16
 2643              	HAL_RTC_PollForAlarmAEvent:
 2644              	.LFB150:
1356:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1357:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1358:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  This function handles AlarmA Polling request.
1359:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1360:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1361:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Timeout Timeout duration
1362:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
1363:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1364:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_PollForAlarmAEvent(RTC_HandleTypeDef *hrtc, uint32_t Timeout)
1365:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 2645              		.loc 1 1365 0
 2646              		.cfi_startproc
 2647              		@ args = 0, pretend = 0, frame = 16
 2648              		@ frame_needed = 1, uses_anonymous_args = 0
 2649 0000 80B5     		push	{r7, lr}
 2650              	.LCFI73:
 2651              		.cfi_def_cfa_offset 8
 2652              		.cfi_offset 7, -8
 2653              		.cfi_offset 14, -4
 2654 0002 84B0     		sub	sp, sp, #16
 2655              	.LCFI74:
 2656              		.cfi_def_cfa_offset 24
 2657 0004 00AF     		add	r7, sp, #0
 2658              	.LCFI75:
 2659              		.cfi_def_cfa_register 7
 2660 0006 7860     		str	r0, [r7, #4]
 2661 0008 3960     		str	r1, [r7]
1366:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tickstart = 0; 
 2662              		.loc 1 1366 0
 2663 000a 0023     		movs	r3, #0
 2664 000c FB60     		str	r3, [r7, #12]
1367:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1368:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
1369:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 2665              		.loc 1 1369 0
 2666 000e FFF7FEFF 		bl	HAL_GetTick
ARM GAS  /tmp/ccrfV39P.s 			page 72


 2667 0012 F860     		str	r0, [r7, #12]
1370:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1371:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) == RESET)
 2668              		.loc 1 1371 0
 2669 0014 13E0     		b	.L105
 2670              	.L108:
1372:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1373:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if(Timeout != HAL_MAX_DELAY)
 2671              		.loc 1 1373 0
 2672 0016 3B68     		ldr	r3, [r7]
 2673 0018 B3F1FF3F 		cmp	r3, #-1
 2674 001c 0FD0     		beq	.L105
1374:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1375:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 2675              		.loc 1 1375 0
 2676 001e 3B68     		ldr	r3, [r7]
 2677 0020 002B     		cmp	r3, #0
 2678 0022 07D0     		beq	.L106
 2679              		.loc 1 1375 0 is_stmt 0 discriminator 1
 2680 0024 FFF7FEFF 		bl	HAL_GetTick
 2681 0028 0246     		mov	r2, r0
 2682 002a FB68     		ldr	r3, [r7, #12]
 2683 002c D21A     		subs	r2, r2, r3
 2684 002e 3B68     		ldr	r3, [r7]
 2685 0030 9A42     		cmp	r2, r3
 2686 0032 04D9     		bls	.L105
 2687              	.L106:
1376:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
1377:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 2688              		.loc 1 1377 0 is_stmt 1
 2689 0034 7B68     		ldr	r3, [r7, #4]
 2690 0036 0322     		movs	r2, #3
 2691 0038 5A77     		strb	r2, [r3, #29]
1378:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2692              		.loc 1 1378 0
 2693 003a 0323     		movs	r3, #3
 2694 003c 13E0     		b	.L107
 2695              	.L105:
1371:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 2696              		.loc 1 1371 0
 2697 003e 7B68     		ldr	r3, [r7, #4]
 2698 0040 1B68     		ldr	r3, [r3]
 2699 0042 DB68     		ldr	r3, [r3, #12]
 2700 0044 03F48073 		and	r3, r3, #256
 2701 0048 002B     		cmp	r3, #0
 2702 004a E4D0     		beq	.L108
1379:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }
1380:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1381:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1382:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1383:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Clear the Alarm interrupt pending bit */
1384:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 2703              		.loc 1 1384 0
 2704 004c 7B68     		ldr	r3, [r7, #4]
 2705 004e 1B68     		ldr	r3, [r3]
 2706 0050 7A68     		ldr	r2, [r7, #4]
 2707 0052 1268     		ldr	r2, [r2]
ARM GAS  /tmp/ccrfV39P.s 			page 73


 2708 0054 D268     		ldr	r2, [r2, #12]
 2709 0056 D2B2     		uxtb	r2, r2
 2710 0058 62F4C072 		orn	r2, r2, #384
 2711 005c DA60     		str	r2, [r3, #12]
1385:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1386:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Change RTC state */
1387:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 2712              		.loc 1 1387 0
 2713 005e 7B68     		ldr	r3, [r7, #4]
 2714 0060 0122     		movs	r2, #1
 2715 0062 5A77     		strb	r2, [r3, #29]
1388:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1389:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;  
 2716              		.loc 1 1389 0
 2717 0064 0023     		movs	r3, #0
 2718              	.L107:
1390:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 2719              		.loc 1 1390 0
 2720 0066 1846     		mov	r0, r3
 2721 0068 1037     		adds	r7, r7, #16
 2722              	.LCFI76:
 2723              		.cfi_def_cfa_offset 8
 2724 006a BD46     		mov	sp, r7
 2725              	.LCFI77:
 2726              		.cfi_def_cfa_register 13
 2727              		@ sp needed
 2728 006c 80BD     		pop	{r7, pc}
 2729              		.cfi_endproc
 2730              	.LFE150:
 2732              		.section	.text.HAL_RTC_WaitForSynchro,"ax",%progbits
 2733              		.align	1
 2734              		.global	HAL_RTC_WaitForSynchro
 2735              		.syntax unified
 2736              		.thumb
 2737              		.thumb_func
 2738              		.fpu fpv4-sp-d16
 2740              	HAL_RTC_WaitForSynchro:
 2741              	.LFB151:
1391:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1392:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1393:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @}
1394:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1395:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1396:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /** @defgroup RTC_Group4 Peripheral Control functions 
1397:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *  @brief   Peripheral Control functions 
1398:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *
1399:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @verbatim   
1400:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================
1401:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                      ##### Peripheral Control functions #####
1402:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================  
1403:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     [..]
1404:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     This subsection provides functions allowing to
1405:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       (+) Wait for RTC Time and Date Synchronization
1406:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1407:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @endverbatim
1408:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @{
1409:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
ARM GAS  /tmp/ccrfV39P.s 			page 74


1410:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1411:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1412:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are 
1413:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         synchronized with RTC APB clock.
1414:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the 
1415:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function. 
1416:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar 
1417:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes 
1418:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         the software must first clear the RSF flag. 
1419:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         The software must then wait until it is set again before reading 
1420:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         the calendar, which means that the calendar registers have been 
1421:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
1422:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1423:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1424:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
1425:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1426:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
1427:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 2742              		.loc 1 1427 0
 2743              		.cfi_startproc
 2744              		@ args = 0, pretend = 0, frame = 16
 2745              		@ frame_needed = 1, uses_anonymous_args = 0
 2746 0000 80B5     		push	{r7, lr}
 2747              	.LCFI78:
 2748              		.cfi_def_cfa_offset 8
 2749              		.cfi_offset 7, -8
 2750              		.cfi_offset 14, -4
 2751 0002 84B0     		sub	sp, sp, #16
 2752              	.LCFI79:
 2753              		.cfi_def_cfa_offset 24
 2754 0004 00AF     		add	r7, sp, #0
 2755              	.LCFI80:
 2756              		.cfi_def_cfa_register 7
 2757 0006 7860     		str	r0, [r7, #4]
1428:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tickstart = 0;
 2758              		.loc 1 1428 0
 2759 0008 0023     		movs	r3, #0
 2760 000a FB60     		str	r3, [r7, #12]
1429:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1430:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Clear RSF flag */
1431:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 2761              		.loc 1 1431 0
 2762 000c 7B68     		ldr	r3, [r7, #4]
 2763 000e 1B68     		ldr	r3, [r3]
 2764 0010 7A68     		ldr	r2, [r7, #4]
 2765 0012 1268     		ldr	r2, [r2]
 2766 0014 D268     		ldr	r2, [r2, #12]
 2767 0016 22F0A002 		bic	r2, r2, #160
 2768 001a DA60     		str	r2, [r3, #12]
1432:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1433:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
1434:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 2769              		.loc 1 1434 0
 2770 001c FFF7FEFF 		bl	HAL_GetTick
 2771 0020 F860     		str	r0, [r7, #12]
1435:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1436:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Wait the registers to be synchronised */
ARM GAS  /tmp/ccrfV39P.s 			page 75


1437:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 2772              		.loc 1 1437 0
 2773 0022 09E0     		b	.L110
 2774              	.L112:
1438:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1439:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 2775              		.loc 1 1439 0
 2776 0024 FFF7FEFF 		bl	HAL_GetTick
 2777 0028 0246     		mov	r2, r0
 2778 002a FB68     		ldr	r3, [r7, #12]
 2779 002c D31A     		subs	r3, r2, r3
 2780 002e B3F57A7F 		cmp	r3, #1000
 2781 0032 01D9     		bls	.L110
1440:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {       
1441:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       return HAL_TIMEOUT;
 2782              		.loc 1 1441 0
 2783 0034 0323     		movs	r3, #3
 2784 0036 07E0     		b	.L111
 2785              	.L110:
1437:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 2786              		.loc 1 1437 0
 2787 0038 7B68     		ldr	r3, [r7, #4]
 2788 003a 1B68     		ldr	r3, [r3]
 2789 003c DB68     		ldr	r3, [r3, #12]
 2790 003e 03F02003 		and	r3, r3, #32
 2791 0042 002B     		cmp	r3, #0
 2792 0044 EED0     		beq	.L112
1442:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     } 
1443:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1444:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1445:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;
 2793              		.loc 1 1445 0
 2794 0046 0023     		movs	r3, #0
 2795              	.L111:
1446:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 2796              		.loc 1 1446 0
 2797 0048 1846     		mov	r0, r3
 2798 004a 1037     		adds	r7, r7, #16
 2799              	.LCFI81:
 2800              		.cfi_def_cfa_offset 8
 2801 004c BD46     		mov	sp, r7
 2802              	.LCFI82:
 2803              		.cfi_def_cfa_register 13
 2804              		@ sp needed
 2805 004e 80BD     		pop	{r7, pc}
 2806              		.cfi_endproc
 2807              	.LFE151:
 2809              		.section	.text.HAL_RTC_GetState,"ax",%progbits
 2810              		.align	1
 2811              		.global	HAL_RTC_GetState
 2812              		.syntax unified
 2813              		.thumb
 2814              		.thumb_func
 2815              		.fpu fpv4-sp-d16
 2817              	HAL_RTC_GetState:
 2818              	.LFB152:
1447:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
ARM GAS  /tmp/ccrfV39P.s 			page 76


1448:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1449:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @}
1450:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1451:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1452:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /** @defgroup RTC_Group5 Peripheral State functions 
1453:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *  @brief   Peripheral State functions 
1454:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *
1455:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @verbatim   
1456:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================
1457:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                      ##### Peripheral State functions #####
1458:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================  
1459:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     [..]
1460:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     This subsection provides functions allowing to
1461:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       (+) Get RTC state
1462:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1463:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @endverbatim
1464:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @{
1465:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1466:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1467:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Returns the RTC state.
1468:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1469:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1470:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL state
1471:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1472:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_RTCStateTypeDef HAL_RTC_GetState(RTC_HandleTypeDef* hrtc)
1473:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 2819              		.loc 1 1473 0
 2820              		.cfi_startproc
 2821              		@ args = 0, pretend = 0, frame = 8
 2822              		@ frame_needed = 1, uses_anonymous_args = 0
 2823              		@ link register save eliminated.
 2824 0000 80B4     		push	{r7}
 2825              	.LCFI83:
 2826              		.cfi_def_cfa_offset 4
 2827              		.cfi_offset 7, -4
 2828 0002 83B0     		sub	sp, sp, #12
 2829              	.LCFI84:
 2830              		.cfi_def_cfa_offset 16
 2831 0004 00AF     		add	r7, sp, #0
 2832              	.LCFI85:
 2833              		.cfi_def_cfa_register 7
 2834 0006 7860     		str	r0, [r7, #4]
1474:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return hrtc->State;
 2835              		.loc 1 1474 0
 2836 0008 7B68     		ldr	r3, [r7, #4]
 2837 000a 5B7F     		ldrb	r3, [r3, #29]
 2838 000c DBB2     		uxtb	r3, r3
1475:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 2839              		.loc 1 1475 0
 2840 000e 1846     		mov	r0, r3
 2841 0010 0C37     		adds	r7, r7, #12
 2842              	.LCFI86:
 2843              		.cfi_def_cfa_offset 4
 2844 0012 BD46     		mov	sp, r7
 2845              	.LCFI87:
 2846              		.cfi_def_cfa_register 13
 2847              		@ sp needed
ARM GAS  /tmp/ccrfV39P.s 			page 77


 2848 0014 5DF8047B 		ldr	r7, [sp], #4
 2849              	.LCFI88:
 2850              		.cfi_restore 7
 2851              		.cfi_def_cfa_offset 0
 2852 0018 7047     		bx	lr
 2853              		.cfi_endproc
 2854              	.LFE152:
 2856              		.section	.text.RTC_EnterInitMode,"ax",%progbits
 2857              		.align	1
 2858              		.global	RTC_EnterInitMode
 2859              		.syntax unified
 2860              		.thumb
 2861              		.thumb_func
 2862              		.fpu fpv4-sp-d16
 2864              	RTC_EnterInitMode:
 2865              	.LFB153:
1476:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1477:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1478:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @}
1479:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1480:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1481:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1482:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Enters the RTC Initialization mode.
1483:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the
1484:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
1485:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1486:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1487:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
1488:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1489:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
1490:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 2866              		.loc 1 1490 0
 2867              		.cfi_startproc
 2868              		@ args = 0, pretend = 0, frame = 16
 2869              		@ frame_needed = 1, uses_anonymous_args = 0
 2870 0000 80B5     		push	{r7, lr}
 2871              	.LCFI89:
 2872              		.cfi_def_cfa_offset 8
 2873              		.cfi_offset 7, -8
 2874              		.cfi_offset 14, -4
 2875 0002 84B0     		sub	sp, sp, #16
 2876              	.LCFI90:
 2877              		.cfi_def_cfa_offset 24
 2878 0004 00AF     		add	r7, sp, #0
 2879              	.LCFI91:
 2880              		.cfi_def_cfa_register 7
 2881 0006 7860     		str	r0, [r7, #4]
1491:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tickstart = 0; 
 2882              		.loc 1 1491 0
 2883 0008 0023     		movs	r3, #0
 2884 000a FB60     		str	r3, [r7, #12]
1492:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1493:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check if the Initialization mode is set */
1494:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 2885              		.loc 1 1494 0
 2886 000c 7B68     		ldr	r3, [r7, #4]
 2887 000e 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccrfV39P.s 			page 78


 2888 0010 DB68     		ldr	r3, [r3, #12]
 2889 0012 03F04003 		and	r3, r3, #64
 2890 0016 002B     		cmp	r3, #0
 2891 0018 19D1     		bne	.L116
1495:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1496:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Set the Initialization mode */
1497:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 2892              		.loc 1 1497 0
 2893 001a 7B68     		ldr	r3, [r7, #4]
 2894 001c 1B68     		ldr	r3, [r3]
 2895 001e 4FF0FF32 		mov	r2, #-1
 2896 0022 DA60     		str	r2, [r3, #12]
1498:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1499:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
1500:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 2897              		.loc 1 1500 0
 2898 0024 FFF7FEFF 		bl	HAL_GetTick
 2899 0028 F860     		str	r0, [r7, #12]
1501:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1502:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
1503:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 2900              		.loc 1 1503 0
 2901 002a 09E0     		b	.L117
 2902              	.L119:
1504:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1505:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 2903              		.loc 1 1505 0
 2904 002c FFF7FEFF 		bl	HAL_GetTick
 2905 0030 0246     		mov	r2, r0
 2906 0032 FB68     		ldr	r3, [r7, #12]
 2907 0034 D31A     		subs	r3, r2, r3
 2908 0036 B3F57A7F 		cmp	r3, #1000
 2909 003a 01D9     		bls	.L117
1506:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {       
1507:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2910              		.loc 1 1507 0
 2911 003c 0323     		movs	r3, #3
 2912 003e 07E0     		b	.L118
 2913              	.L117:
1503:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 2914              		.loc 1 1503 0
 2915 0040 7B68     		ldr	r3, [r7, #4]
 2916 0042 1B68     		ldr	r3, [r3]
 2917 0044 DB68     		ldr	r3, [r3, #12]
 2918 0046 03F04003 		and	r3, r3, #64
 2919 004a 002B     		cmp	r3, #0
 2920 004c EED0     		beq	.L119
 2921              	.L116:
1508:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       } 
1509:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1510:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1511:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1512:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;  
 2922              		.loc 1 1512 0
 2923 004e 0023     		movs	r3, #0
 2924              	.L118:
1513:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
ARM GAS  /tmp/ccrfV39P.s 			page 79


 2925              		.loc 1 1513 0
 2926 0050 1846     		mov	r0, r3
 2927 0052 1037     		adds	r7, r7, #16
 2928              	.LCFI92:
 2929              		.cfi_def_cfa_offset 8
 2930 0054 BD46     		mov	sp, r7
 2931              	.LCFI93:
 2932              		.cfi_def_cfa_register 13
 2933              		@ sp needed
 2934 0056 80BD     		pop	{r7, pc}
 2935              		.cfi_endproc
 2936              	.LFE153:
 2938              		.section	.text.RTC_ByteToBcd2,"ax",%progbits
 2939              		.align	1
 2940              		.global	RTC_ByteToBcd2
 2941              		.syntax unified
 2942              		.thumb
 2943              		.thumb_func
 2944              		.fpu fpv4-sp-d16
 2946              	RTC_ByteToBcd2:
 2947              	.LFB154:
1514:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1515:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1516:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1517:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
1518:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Value Byte to be converted
1519:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval Converted byte
1520:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1521:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** uint8_t RTC_ByteToBcd2(uint8_t Value)
1522:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 2948              		.loc 1 1522 0
 2949              		.cfi_startproc
 2950              		@ args = 0, pretend = 0, frame = 16
 2951              		@ frame_needed = 1, uses_anonymous_args = 0
 2952              		@ link register save eliminated.
 2953 0000 80B4     		push	{r7}
 2954              	.LCFI94:
 2955              		.cfi_def_cfa_offset 4
 2956              		.cfi_offset 7, -4
 2957 0002 85B0     		sub	sp, sp, #20
 2958              	.LCFI95:
 2959              		.cfi_def_cfa_offset 24
 2960 0004 00AF     		add	r7, sp, #0
 2961              	.LCFI96:
 2962              		.cfi_def_cfa_register 7
 2963 0006 0346     		mov	r3, r0
 2964 0008 FB71     		strb	r3, [r7, #7]
1523:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t bcdhigh = 0;
 2965              		.loc 1 1523 0
 2966 000a 0023     		movs	r3, #0
 2967 000c FB60     		str	r3, [r7, #12]
1524:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1525:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   while(Value >= 10)
 2968              		.loc 1 1525 0
 2969 000e 05E0     		b	.L121
 2970              	.L122:
1526:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
ARM GAS  /tmp/ccrfV39P.s 			page 80


1527:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     bcdhigh++;
 2971              		.loc 1 1527 0
 2972 0010 FB68     		ldr	r3, [r7, #12]
 2973 0012 0133     		adds	r3, r3, #1
 2974 0014 FB60     		str	r3, [r7, #12]
1528:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     Value -= 10;
 2975              		.loc 1 1528 0
 2976 0016 FB79     		ldrb	r3, [r7, #7]
 2977 0018 0A3B     		subs	r3, r3, #10
 2978 001a FB71     		strb	r3, [r7, #7]
 2979              	.L121:
1525:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 2980              		.loc 1 1525 0
 2981 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2982 001e 092B     		cmp	r3, #9
 2983 0020 F6D8     		bhi	.L122
1529:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1530:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1531:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return  ((uint8_t)(bcdhigh << 4) | Value);
 2984              		.loc 1 1531 0
 2985 0022 FB68     		ldr	r3, [r7, #12]
 2986 0024 DBB2     		uxtb	r3, r3
 2987 0026 1B01     		lsls	r3, r3, #4
 2988 0028 DAB2     		uxtb	r2, r3
 2989 002a FB79     		ldrb	r3, [r7, #7]
 2990 002c 1343     		orrs	r3, r3, r2
 2991 002e DBB2     		uxtb	r3, r3
1532:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 2992              		.loc 1 1532 0
 2993 0030 1846     		mov	r0, r3
 2994 0032 1437     		adds	r7, r7, #20
 2995              	.LCFI97:
 2996              		.cfi_def_cfa_offset 4
 2997 0034 BD46     		mov	sp, r7
 2998              	.LCFI98:
 2999              		.cfi_def_cfa_register 13
 3000              		@ sp needed
 3001 0036 5DF8047B 		ldr	r7, [sp], #4
 3002              	.LCFI99:
 3003              		.cfi_restore 7
 3004              		.cfi_def_cfa_offset 0
 3005 003a 7047     		bx	lr
 3006              		.cfi_endproc
 3007              	.LFE154:
 3009              		.section	.text.RTC_Bcd2ToByte,"ax",%progbits
 3010              		.align	1
 3011              		.global	RTC_Bcd2ToByte
 3012              		.syntax unified
 3013              		.thumb
 3014              		.thumb_func
 3015              		.fpu fpv4-sp-d16
 3017              	RTC_Bcd2ToByte:
 3018              	.LFB155:
1533:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1534:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1535:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Converts from 2 digit BCD to Binary.
1536:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Value BCD value to be converted
ARM GAS  /tmp/ccrfV39P.s 			page 81


1537:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval Converted word
1538:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1539:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** uint8_t RTC_Bcd2ToByte(uint8_t Value)
1540:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 3019              		.loc 1 1540 0
 3020              		.cfi_startproc
 3021              		@ args = 0, pretend = 0, frame = 16
 3022              		@ frame_needed = 1, uses_anonymous_args = 0
 3023              		@ link register save eliminated.
 3024 0000 80B4     		push	{r7}
 3025              	.LCFI100:
 3026              		.cfi_def_cfa_offset 4
 3027              		.cfi_offset 7, -4
 3028 0002 85B0     		sub	sp, sp, #20
 3029              	.LCFI101:
 3030              		.cfi_def_cfa_offset 24
 3031 0004 00AF     		add	r7, sp, #0
 3032              	.LCFI102:
 3033              		.cfi_def_cfa_register 7
 3034 0006 0346     		mov	r3, r0
 3035 0008 FB71     		strb	r3, [r7, #7]
1541:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tmp = 0;
 3036              		.loc 1 1541 0
 3037 000a 0023     		movs	r3, #0
 3038 000c FB60     		str	r3, [r7, #12]
1542:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 3039              		.loc 1 1542 0
 3040 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3041 0010 1B09     		lsrs	r3, r3, #4
 3042 0012 DBB2     		uxtb	r3, r3
 3043 0014 1A46     		mov	r2, r3
 3044 0016 1346     		mov	r3, r2
 3045 0018 9B00     		lsls	r3, r3, #2
 3046 001a 1344     		add	r3, r3, r2
 3047 001c 5B00     		lsls	r3, r3, #1
 3048 001e FB60     		str	r3, [r7, #12]
1543:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
 3049              		.loc 1 1543 0
 3050 0020 FB79     		ldrb	r3, [r7, #7]
 3051 0022 03F00F03 		and	r3, r3, #15
 3052 0026 DAB2     		uxtb	r2, r3
 3053 0028 FB68     		ldr	r3, [r7, #12]
 3054 002a DBB2     		uxtb	r3, r3
 3055 002c 1344     		add	r3, r3, r2
 3056 002e DBB2     		uxtb	r3, r3
1544:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 3057              		.loc 1 1544 0
 3058 0030 1846     		mov	r0, r3
 3059 0032 1437     		adds	r7, r7, #20
 3060              	.LCFI103:
 3061              		.cfi_def_cfa_offset 4
 3062 0034 BD46     		mov	sp, r7
 3063              	.LCFI104:
 3064              		.cfi_def_cfa_register 13
 3065              		@ sp needed
 3066 0036 5DF8047B 		ldr	r7, [sp], #4
 3067              	.LCFI105:
ARM GAS  /tmp/ccrfV39P.s 			page 82


 3068              		.cfi_restore 7
 3069              		.cfi_def_cfa_offset 0
 3070 003a 7047     		bx	lr
 3071              		.cfi_endproc
 3072              	.LFE155:
 3074              		.text
 3075              	.Letext0:
 3076              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 3077              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 3078              		.file 4 "Drivers/CMSIS/Include/core_cm7.h"
 3079              		.file 5 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 3080              		.file 6 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f746xx.h"
 3081              		.file 7 "/usr/include/newlib/sys/lock.h"
 3082              		.file 8 "/usr/include/newlib/sys/_types.h"
 3083              		.file 9 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 3084              		.file 10 "/usr/include/newlib/sys/reent.h"
 3085              		.file 11 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f7xx.h"
 3086              		.file 12 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 3087              		.file 13 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rtc.h"
ARM GAS  /tmp/ccrfV39P.s 			page 83


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f7xx_hal_rtc.c
     /tmp/ccrfV39P.s:18     .text.HAL_RTC_Init:0000000000000000 $t
     /tmp/ccrfV39P.s:25     .text.HAL_RTC_Init:0000000000000000 HAL_RTC_Init
     /tmp/ccrfV39P.s:440    .text.HAL_RTC_MspInit:0000000000000000 HAL_RTC_MspInit
     /tmp/ccrfV39P.s:2864   .text.RTC_EnterInitMode:0000000000000000 RTC_EnterInitMode
     /tmp/ccrfV39P.s:191    .text.HAL_RTC_Init:00000000000000f4 $d
     /tmp/ccrfV39P.s:196    .text.HAL_RTC_DeInit:0000000000000000 $t
     /tmp/ccrfV39P.s:203    .text.HAL_RTC_DeInit:0000000000000000 HAL_RTC_DeInit
     /tmp/ccrfV39P.s:2740   .text.HAL_RTC_WaitForSynchro:0000000000000000 HAL_RTC_WaitForSynchro
     /tmp/ccrfV39P.s:483    .text.HAL_RTC_MspDeInit:0000000000000000 HAL_RTC_MspDeInit
     /tmp/ccrfV39P.s:428    .text.HAL_RTC_DeInit:0000000000000154 $d
     /tmp/ccrfV39P.s:433    .text.HAL_RTC_MspInit:0000000000000000 $t
     /tmp/ccrfV39P.s:476    .text.HAL_RTC_MspDeInit:0000000000000000 $t
     /tmp/ccrfV39P.s:519    .text.HAL_RTC_SetTime:0000000000000000 $t
     /tmp/ccrfV39P.s:526    .text.HAL_RTC_SetTime:0000000000000000 HAL_RTC_SetTime
     /tmp/ccrfV39P.s:2946   .text.RTC_ByteToBcd2:0000000000000000 RTC_ByteToBcd2
     /tmp/ccrfV39P.s:3017   .text.RTC_Bcd2ToByte:0000000000000000 RTC_Bcd2ToByte
     /tmp/ccrfV39P.s:787    .text.HAL_RTC_SetTime:0000000000000188 $d
     /tmp/ccrfV39P.s:792    .text.HAL_RTC_GetTime:0000000000000000 $t
     /tmp/ccrfV39P.s:799    .text.HAL_RTC_GetTime:0000000000000000 HAL_RTC_GetTime
     /tmp/ccrfV39P.s:920    .text.HAL_RTC_GetTime:00000000000000b8 $d
     /tmp/ccrfV39P.s:925    .text.HAL_RTC_SetDate:0000000000000000 $t
     /tmp/ccrfV39P.s:932    .text.HAL_RTC_SetDate:0000000000000000 HAL_RTC_SetDate
     /tmp/ccrfV39P.s:1159   .text.HAL_RTC_SetDate:000000000000014c $d
     /tmp/ccrfV39P.s:1164   .text.HAL_RTC_GetDate:0000000000000000 $t
     /tmp/ccrfV39P.s:1171   .text.HAL_RTC_GetDate:0000000000000000 HAL_RTC_GetDate
     /tmp/ccrfV39P.s:1277   .text.HAL_RTC_GetDate:000000000000009c $d
     /tmp/ccrfV39P.s:1282   .text.HAL_RTC_SetAlarm:0000000000000000 $t
     /tmp/ccrfV39P.s:1289   .text.HAL_RTC_SetAlarm:0000000000000000 HAL_RTC_SetAlarm
     /tmp/ccrfV39P.s:1681   .text.HAL_RTC_SetAlarm_IT:0000000000000000 $t
     /tmp/ccrfV39P.s:1688   .text.HAL_RTC_SetAlarm_IT:0000000000000000 HAL_RTC_SetAlarm_IT
     /tmp/ccrfV39P.s:2103   .text.HAL_RTC_SetAlarm_IT:000000000000029c $d
     /tmp/ccrfV39P.s:2110   .text.HAL_RTC_DeactivateAlarm:0000000000000000 $t
     /tmp/ccrfV39P.s:2117   .text.HAL_RTC_DeactivateAlarm:0000000000000000 HAL_RTC_DeactivateAlarm
     /tmp/ccrfV39P.s:2308   .text.HAL_RTC_GetAlarm:0000000000000000 $t
     /tmp/ccrfV39P.s:2315   .text.HAL_RTC_GetAlarm:0000000000000000 HAL_RTC_GetAlarm
     /tmp/ccrfV39P.s:2488   .text.HAL_RTC_AlarmIRQHandler:0000000000000000 $t
     /tmp/ccrfV39P.s:2495   .text.HAL_RTC_AlarmIRQHandler:0000000000000000 HAL_RTC_AlarmIRQHandler
     /tmp/ccrfV39P.s:2600   .text.HAL_RTC_AlarmAEventCallback:0000000000000000 HAL_RTC_AlarmAEventCallback
     /tmp/ccrfV39P.s:2588   .text.HAL_RTC_AlarmIRQHandler:0000000000000088 $d
     /tmp/ccrfV39P.s:2593   .text.HAL_RTC_AlarmAEventCallback:0000000000000000 $t
     /tmp/ccrfV39P.s:2636   .text.HAL_RTC_PollForAlarmAEvent:0000000000000000 $t
     /tmp/ccrfV39P.s:2643   .text.HAL_RTC_PollForAlarmAEvent:0000000000000000 HAL_RTC_PollForAlarmAEvent
     /tmp/ccrfV39P.s:2733   .text.HAL_RTC_WaitForSynchro:0000000000000000 $t
     /tmp/ccrfV39P.s:2810   .text.HAL_RTC_GetState:0000000000000000 $t
     /tmp/ccrfV39P.s:2817   .text.HAL_RTC_GetState:0000000000000000 HAL_RTC_GetState
     /tmp/ccrfV39P.s:2857   .text.RTC_EnterInitMode:0000000000000000 $t
     /tmp/ccrfV39P.s:2939   .text.RTC_ByteToBcd2:0000000000000000 $t
     /tmp/ccrfV39P.s:3010   .text.RTC_Bcd2ToByte:0000000000000000 $t
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
SystemCoreClock
HAL_RTCEx_AlarmBEventCallback
