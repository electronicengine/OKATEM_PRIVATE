ARM GAS  /tmp/ccMf91lX.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	pxCurrentTCB
  18              		.section	.bss.pxCurrentTCB,"aw",%nobits
  19              		.align	2
  22              	pxCurrentTCB:
  23 0000 00000000 		.space	4
  24              		.section	.bss.pxReadyTasksLists,"aw",%nobits
  25              		.align	2
  28              	pxReadyTasksLists:
  29 0000 00000000 		.space	140
  29      00000000 
  29      00000000 
  29      00000000 
  29      00000000 
  30              		.section	.bss.xDelayedTaskList1,"aw",%nobits
  31              		.align	2
  34              	xDelayedTaskList1:
  35 0000 00000000 		.space	20
  35      00000000 
  35      00000000 
  35      00000000 
  35      00000000 
  36              		.section	.bss.xDelayedTaskList2,"aw",%nobits
  37              		.align	2
  40              	xDelayedTaskList2:
  41 0000 00000000 		.space	20
  41      00000000 
  41      00000000 
  41      00000000 
  41      00000000 
  42              		.section	.bss.pxDelayedTaskList,"aw",%nobits
  43              		.align	2
  46              	pxDelayedTaskList:
  47 0000 00000000 		.space	4
  48              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
  49              		.align	2
  52              	pxOverflowDelayedTaskList:
  53 0000 00000000 		.space	4
  54              		.section	.bss.xPendingReadyList,"aw",%nobits
  55              		.align	2
  58              	xPendingReadyList:
  59 0000 00000000 		.space	20
ARM GAS  /tmp/ccMf91lX.s 			page 2


  59      00000000 
  59      00000000 
  59      00000000 
  59      00000000 
  60              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
  61              		.align	2
  64              	xTasksWaitingTermination:
  65 0000 00000000 		.space	20
  65      00000000 
  65      00000000 
  65      00000000 
  65      00000000 
  66              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
  67              		.align	2
  70              	uxDeletedTasksWaitingCleanUp:
  71 0000 00000000 		.space	4
  72              		.section	.bss.xSuspendedTaskList,"aw",%nobits
  73              		.align	2
  76              	xSuspendedTaskList:
  77 0000 00000000 		.space	20
  77      00000000 
  77      00000000 
  77      00000000 
  77      00000000 
  78              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
  79              		.align	2
  82              	uxCurrentNumberOfTasks:
  83 0000 00000000 		.space	4
  84              		.section	.bss.xTickCount,"aw",%nobits
  85              		.align	2
  88              	xTickCount:
  89 0000 00000000 		.space	4
  90              		.section	.bss.uxTopReadyPriority,"aw",%nobits
  91              		.align	2
  94              	uxTopReadyPriority:
  95 0000 00000000 		.space	4
  96              		.section	.bss.xSchedulerRunning,"aw",%nobits
  97              		.align	2
 100              	xSchedulerRunning:
 101 0000 00000000 		.space	4
 102              		.section	.bss.uxPendedTicks,"aw",%nobits
 103              		.align	2
 106              	uxPendedTicks:
 107 0000 00000000 		.space	4
 108              		.section	.bss.xYieldPending,"aw",%nobits
 109              		.align	2
 112              	xYieldPending:
 113 0000 00000000 		.space	4
 114              		.section	.bss.xNumOfOverflows,"aw",%nobits
 115              		.align	2
 118              	xNumOfOverflows:
 119 0000 00000000 		.space	4
 120              		.section	.bss.uxTaskNumber,"aw",%nobits
 121              		.align	2
 124              	uxTaskNumber:
 125 0000 00000000 		.space	4
 126              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
ARM GAS  /tmp/ccMf91lX.s 			page 3


 127              		.align	2
 130              	xNextTaskUnblockTime:
 131 0000 00000000 		.space	4
 132              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 133              		.align	2
 136              	xIdleTaskHandle:
 137 0000 00000000 		.space	4
 138              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 139              		.align	2
 142              	uxSchedulerSuspended:
 143 0000 00000000 		.space	4
 144              		.section	.text.xTaskCreate,"ax",%progbits
 145              		.align	1
 146              		.global	xTaskCreate
 147              		.syntax unified
 148              		.thumb
 149              		.thumb_func
 150              		.fpu fpv4-sp-d16
 152              	xTaskCreate:
 153              	.LFB141:
 154              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
ARM GAS  /tmp/ccMf91lX.s 			page 4


  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "StackMacros.h"
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
ARM GAS  /tmp/ccMf91lX.s 			page 5


  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** settings allow a task to be created using either statically or dynamically
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** made to free the RAM that was allocated statically.
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB. */
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE ( ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && (
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
ARM GAS  /tmp/ccMf91lX.s 			page 6


 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccMf91lX.s 			page 7


 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccMf91lX.s 			page 8


 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack 
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
ARM GAS  /tmp/ccMf91lX.s 			page 9


 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments above the definition of
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static variables must be declared volatile. */
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
ARM GAS  /tmp/ccMf91lX.s 			page 10


 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle 
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFA
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_INITIALIZED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a t
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_INITIALIZED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of e
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint +e956 */
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void );
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
ARM GAS  /tmp/ccMf91lX.s 			page 11


 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask );
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvInitialiseTaskLists( void );
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static void prvDeleteTCB( TCB_t *pxTCB );
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvCheckTasksWaitingTermination( void );
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
ARM GAS  /tmp/ccMf91lX.s 			page 12


 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const Base
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArr
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcN
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte );
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static TickType_t prvGetExpectedIdleTime( void );
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
ARM GAS  /tmp/ccMf91lX.s 			page 13


 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName );
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ); /*lint !e971 Unqualified char types are allowed f
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB );
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for st
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccMf91lX.s 			page 14


 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( portUSING_MPU_WRAPPERS == 1 )
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				this task had a statically allocated stack in case it is
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				later deleted.  The TCB was allocated dynamically. */
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
ARM GAS  /tmp/ccMf91lX.s 			page 15


 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const uint16_t usStackDepth,
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for str
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 155              		.loc 1 682 0
 156              		.cfi_startproc
 157              		@ args = 8, pretend = 0, frame = 32
 158              		@ frame_needed = 1, uses_anonymous_args = 0
 159 0000 80B5     		push	{r7, lr}
 160              	.LCFI0:
 161              		.cfi_def_cfa_offset 8
 162              		.cfi_offset 7, -8
 163              		.cfi_offset 14, -4
 164 0002 8CB0     		sub	sp, sp, #48
 165              	.LCFI1:
 166              		.cfi_def_cfa_offset 56
 167 0004 04AF     		add	r7, sp, #16
 168              	.LCFI2:
 169              		.cfi_def_cfa 7, 40
 170 0006 F860     		str	r0, [r7, #12]
 171 0008 B960     		str	r1, [r7, #8]
 172 000a 3B60     		str	r3, [r7]
 173 000c 1346     		mov	r3, r2	@ movhi
 174 000e FB80     		strh	r3, [r7, #6]	@ movhi
 175              	.LBB90:
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
ARM GAS  /tmp/ccMf91lX.s 			page 16


 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 176              		.loc 1 716 0
 177 0010 FB88     		ldrh	r3, [r7, #6]
 178 0012 9B00     		lsls	r3, r3, #2
 179 0014 1846     		mov	r0, r3
 180 0016 FFF7FEFF 		bl	pvPortMalloc
 181 001a 7861     		str	r0, [r7, #20]
 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 182              		.loc 1 718 0
 183 001c 7B69     		ldr	r3, [r7, #20]
 184 001e 002B     		cmp	r3, #0
 185 0020 0ED0     		beq	.L2
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 186              		.loc 1 721 0
 187 0022 5420     		movs	r0, #84
 188 0024 FFF7FEFF 		bl	pvPortMalloc
 189 0028 F861     		str	r0, [r7, #28]
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 190              		.loc 1 723 0
 191 002a FB69     		ldr	r3, [r7, #28]
 192 002c 002B     		cmp	r3, #0
 193 002e 03D0     		beq	.L3
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 194              		.loc 1 726 0
 195 0030 FB69     		ldr	r3, [r7, #28]
 196 0032 7A69     		ldr	r2, [r7, #20]
 197 0034 1A63     		str	r2, [r3, #48]
 198 0036 05E0     		b	.L5
 199              	.L3:
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
ARM GAS  /tmp/ccMf91lX.s 			page 17


 200              		.loc 1 732 0
 201 0038 7869     		ldr	r0, [r7, #20]
 202 003a FFF7FEFF 		bl	vPortFree
 203 003e 01E0     		b	.L5
 204              	.L2:
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 205              		.loc 1 737 0
 206 0040 0023     		movs	r3, #0
 207 0042 FB61     		str	r3, [r7, #28]
 208              	.L5:
 209              	.LBE90:
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 210              		.loc 1 742 0
 211 0044 FB69     		ldr	r3, [r7, #28]
 212 0046 002B     		cmp	r3, #0
 213 0048 13D0     		beq	.L6
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 214              		.loc 1 752 0
 215 004a FA88     		ldrh	r2, [r7, #6]
 216 004c 0023     		movs	r3, #0
 217 004e 0393     		str	r3, [sp, #12]
 218 0050 FB69     		ldr	r3, [r7, #28]
 219 0052 0293     		str	r3, [sp, #8]
 220 0054 FB6A     		ldr	r3, [r7, #44]
 221 0056 0193     		str	r3, [sp, #4]
 222 0058 BB6A     		ldr	r3, [r7, #40]
 223 005a 0093     		str	r3, [sp]
 224 005c 3B68     		ldr	r3, [r7]
 225 005e B968     		ldr	r1, [r7, #8]
 226 0060 F868     		ldr	r0, [r7, #12]
 227 0062 FFF7FEFF 		bl	prvInitialiseNewTask
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 228              		.loc 1 753 0
 229 0066 F869     		ldr	r0, [r7, #28]
 230 0068 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 231              		.loc 1 754 0
 232 006c 0123     		movs	r3, #1
 233 006e BB61     		str	r3, [r7, #24]
 234 0070 02E0     		b	.L7
ARM GAS  /tmp/ccMf91lX.s 			page 18


 235              	.L6:
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 236              		.loc 1 758 0
 237 0072 4FF0FF33 		mov	r3, #-1
 238 0076 BB61     		str	r3, [r7, #24]
 239              	.L7:
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 240              		.loc 1 761 0
 241 0078 BB69     		ldr	r3, [r7, #24]
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 242              		.loc 1 762 0
 243 007a 1846     		mov	r0, r3
 244 007c 2037     		adds	r7, r7, #32
 245              	.LCFI3:
 246              		.cfi_def_cfa_offset 8
 247 007e BD46     		mov	sp, r7
 248              	.LCFI4:
 249              		.cfi_def_cfa_register 13
 250              		@ sp needed
 251 0080 80BD     		pop	{r7, pc}
 252              		.cfi_endproc
 253              	.LFE141:
 255              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 256              		.align	1
 257              		.syntax unified
 258              		.thumb
 259              		.thumb_func
 260              		.fpu fpv4-sp-d16
 262              	prvInitialiseNewTask:
 263              	.LFB142:
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed fo
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 264              		.loc 1 775 0
 265              		.cfi_startproc
 266              		@ args = 16, pretend = 0, frame = 32
 267              		@ frame_needed = 1, uses_anonymous_args = 0
 268 0000 80B5     		push	{r7, lr}
 269              	.LCFI5:
 270              		.cfi_def_cfa_offset 8
 271              		.cfi_offset 7, -8
 272              		.cfi_offset 14, -4
ARM GAS  /tmp/ccMf91lX.s 			page 19


 273 0002 88B0     		sub	sp, sp, #32
 274              	.LCFI6:
 275              		.cfi_def_cfa_offset 40
 276 0004 00AF     		add	r7, sp, #0
 277              	.LCFI7:
 278              		.cfi_def_cfa_register 7
 279 0006 F860     		str	r0, [r7, #12]
 280 0008 B960     		str	r1, [r7, #8]
 281 000a 7A60     		str	r2, [r7, #4]
 282 000c 3B60     		str	r3, [r7]
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INC
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 283              		.loc 1 807 0
 284 000e 3B6B     		ldr	r3, [r7, #48]
 285 0010 1A6B     		ldr	r2, [r3, #48]
 286 0012 7968     		ldr	r1, [r7, #4]
 287 0014 6FF04043 		mvn	r3, #-1073741824
 288 0018 0B44     		add	r3, r3, r1
 289 001a 9B00     		lsls	r3, r3, #2
 290 001c 1344     		add	r3, r3, r2
 291 001e BB61     		str	r3, [r7, #24]
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 292              		.loc 1 808 0
 293 0020 BB69     		ldr	r3, [r7, #24]
 294 0022 23F00703 		bic	r3, r3, #7
 295 0026 BB61     		str	r3, [r7, #24]
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccMf91lX.s 			page 20


 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 296              		.loc 1 811 0
 297 0028 BB69     		ldr	r3, [r7, #24]
 298 002a 03F00703 		and	r3, r3, #7
 299 002e 002B     		cmp	r3, #0
 300 0030 0BD0     		beq	.L10
 301              	.LBB91:
 302              	.LBB92:
 303              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
ARM GAS  /tmp/ccMf91lX.s 			page 21


  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef PORTMACRO_H
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define PORTMACRO_H
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifdef __cplusplus
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern "C" {
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * Port specific definitions.
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * given hardware and compiler.
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * These settings should not be altered.
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *-----------------------------------------------------------
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  */
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Type definitions. */
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portCHAR		char
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portFLOAT		float
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portDOUBLE		double
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portLONG		long
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSHORT		short
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portBASE_TYPE	long
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef long BaseType_t;
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef unsigned long UBaseType_t;
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	typedef uint16_t TickType_t;
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #else
ARM GAS  /tmp/ccMf91lX.s 			page 22


 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	typedef uint32_t TickType_t;
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	not need to be guarded with a critical section. */
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Architecture specifics. */
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Scheduler utilities. */
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portYIELD() 															\
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {																				\
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 																				\
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "isb" );													\
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Critical section management. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern void vPortEnterCritical( void );
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern void vPortExitCritical( void );
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** (which build with all the ports) will build. */
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Tickless idle/low power functionality. */
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
ARM GAS  /tmp/ccMf91lX.s 			page 23


 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Architecture specific optimisations. */
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Generic helper function. */
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	uint8_t ucReturn;
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		return ucReturn;
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Check the configuration. */
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#endif
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifdef configASSERT
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* portNOP() is not required by this port. */
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNOP()
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portINLINE	__inline
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef portFORCE_INLINE
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** BaseType_t xReturn;
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
ARM GAS  /tmp/ccMf91lX.s 			page 24


 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		xReturn = pdFALSE;
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	else
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		xReturn = pdTRUE;
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	return xReturn;
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 235:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** uint32_t ulNewBASEPRI;
 236:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile
 304              		.loc 2 237 0 discriminator 1
 305              		.syntax unified
 306              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 307 0032 4FF05003 			mov r3, #80												
 308 0036 72B6     		cpsid i													
 309 0038 83F31188 		msr basepri, r3											
 310 003c BFF36F8F 		isb														
 311 0040 BFF34F8F 		dsb														
 312 0044 62B6     		cpsie i													
 313              	
 314              	@ 0 "" 2
 315              		.thumb
 316              		.syntax unified
 317 0046 7B61     		str	r3, [r7, #20]
 318              	.L11:
 319              	.LBE92:
 320              	.LBE91:
 321              		.loc 1 811 0 discriminator 1
 322 0048 FEE7     		b	.L11
 323              	.L10:
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 324              		.loc 1 827 0
 325 004a 0023     		movs	r3, #0
ARM GAS  /tmp/ccMf91lX.s 			page 25


 326 004c FB61     		str	r3, [r7, #28]
 327 004e 12E0     		b	.L12
 328              	.L15:
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 329              		.loc 1 829 0
 330 0050 BA68     		ldr	r2, [r7, #8]
 331 0052 FB69     		ldr	r3, [r7, #28]
 332 0054 1344     		add	r3, r3, r2
 333 0056 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 334 0058 3A6B     		ldr	r2, [r7, #48]
 335 005a FB69     		ldr	r3, [r7, #28]
 336 005c 1344     		add	r3, r3, r2
 337 005e 3433     		adds	r3, r3, #52
 338 0060 0A46     		mov	r2, r1
 339 0062 1A70     		strb	r2, [r3]
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 340              		.loc 1 834 0
 341 0064 BA68     		ldr	r2, [r7, #8]
 342 0066 FB69     		ldr	r3, [r7, #28]
 343 0068 1344     		add	r3, r3, r2
 344 006a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 345 006c 002B     		cmp	r3, #0
 346 006e 06D0     		beq	.L18
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 347              		.loc 1 827 0 discriminator 2
 348 0070 FB69     		ldr	r3, [r7, #28]
 349 0072 0133     		adds	r3, r3, #1
 350 0074 FB61     		str	r3, [r7, #28]
 351              	.L12:
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 352              		.loc 1 827 0 is_stmt 0 discriminator 1
 353 0076 FB69     		ldr	r3, [r7, #28]
 354 0078 0F2B     		cmp	r3, #15
 355 007a E9D9     		bls	.L15
 356 007c 00E0     		b	.L14
 357              	.L18:
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			break;
 358              		.loc 1 836 0 is_stmt 1
 359 007e 00BF     		nop
 360              	.L14:
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 361              		.loc 1 846 0
ARM GAS  /tmp/ccMf91lX.s 			page 26


 362 0080 3B6B     		ldr	r3, [r7, #48]
 363 0082 0022     		movs	r2, #0
 364 0084 83F84320 		strb	r2, [r3, #67]
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 365              		.loc 1 850 0
 366 0088 BB6A     		ldr	r3, [r7, #40]
 367 008a 062B     		cmp	r3, #6
 368 008c 01D9     		bls	.L16
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 369              		.loc 1 852 0
 370 008e 0623     		movs	r3, #6
 371 0090 BB62     		str	r3, [r7, #40]
 372              	.L16:
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 373              		.loc 1 859 0
 374 0092 3B6B     		ldr	r3, [r7, #48]
 375 0094 BA6A     		ldr	r2, [r7, #40]
 376 0096 DA62     		str	r2, [r3, #44]
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 377              		.loc 1 862 0
 378 0098 3B6B     		ldr	r3, [r7, #48]
 379 009a BA6A     		ldr	r2, [r7, #40]
 380 009c 5A64     		str	r2, [r3, #68]
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 381              		.loc 1 863 0
 382 009e 3B6B     		ldr	r3, [r7, #48]
 383 00a0 0022     		movs	r2, #0
 384 00a2 9A64     		str	r2, [r3, #72]
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 385              		.loc 1 867 0
 386 00a4 3B6B     		ldr	r3, [r7, #48]
 387 00a6 0433     		adds	r3, r3, #4
 388 00a8 1846     		mov	r0, r3
 389 00aa FFF7FEFF 		bl	vListInitialiseItem
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 390              		.loc 1 868 0
 391 00ae 3B6B     		ldr	r3, [r7, #48]
 392 00b0 1833     		adds	r3, r3, #24
 393 00b2 1846     		mov	r0, r3
 394 00b4 FFF7FEFF 		bl	vListInitialiseItem
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
ARM GAS  /tmp/ccMf91lX.s 			page 27


 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 395              		.loc 1 872 0
 396 00b8 3B6B     		ldr	r3, [r7, #48]
 397 00ba 3A6B     		ldr	r2, [r7, #48]
 398 00bc 1A61     		str	r2, [r3, #16]
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 399              		.loc 1 875 0
 400 00be BB6A     		ldr	r3, [r7, #40]
 401 00c0 C3F10702 		rsb	r2, r3, #7
 402 00c4 3B6B     		ldr	r3, [r7, #48]
 403 00c6 9A61     		str	r2, [r3, #24]
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 404              		.loc 1 876 0
 405 00c8 3B6B     		ldr	r3, [r7, #48]
 406 00ca 3A6B     		ldr	r2, [r7, #48]
 407 00cc 5A62     		str	r2, [r3, #36]
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
ARM GAS  /tmp/ccMf91lX.s 			page 28


 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 408              		.loc 1 918 0
 409 00ce 3B6B     		ldr	r3, [r7, #48]
 410 00d0 0022     		movs	r2, #0
 411 00d2 DA64     		str	r2, [r3, #76]
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 412              		.loc 1 919 0
 413 00d4 3B6B     		ldr	r3, [r7, #48]
 414 00d6 0022     		movs	r2, #0
 415 00d8 83F85020 		strb	r2, [r3, #80]
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the	top of stack variable is updated. */
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 416              		.loc 1 946 0
 417 00dc 3A68     		ldr	r2, [r7]
 418 00de F968     		ldr	r1, [r7, #12]
 419 00e0 B869     		ldr	r0, [r7, #24]
 420 00e2 FFF7FEFF 		bl	pxPortInitialiseStack
 421 00e6 0246     		mov	r2, r0
 422 00e8 3B6B     		ldr	r3, [r7, #48]
 423 00ea 1A60     		str	r2, [r3]
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
 424              		.loc 1 950 0
 425 00ec FB6A     		ldr	r3, [r7, #44]
 426 00ee 002B     		cmp	r3, #0
 427 00f0 02D0     		beq	.L19
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccMf91lX.s 			page 29


 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 428              		.loc 1 954 0
 429 00f2 FB6A     		ldr	r3, [r7, #44]
 430 00f4 3A6B     		ldr	r2, [r7, #48]
 431 00f6 1A60     		str	r2, [r3]
 432              	.L19:
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 433              		.loc 1 960 0
 434 00f8 00BF     		nop
 435 00fa 2037     		adds	r7, r7, #32
 436              	.LCFI8:
 437              		.cfi_def_cfa_offset 8
 438 00fc BD46     		mov	sp, r7
 439              	.LCFI9:
 440              		.cfi_def_cfa_register 13
 441              		@ sp needed
 442 00fe 80BD     		pop	{r7, pc}
 443              		.cfi_endproc
 444              	.LFE142:
 446              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 447              		.align	1
 448              		.syntax unified
 449              		.thumb
 450              		.thumb_func
 451              		.fpu fpv4-sp-d16
 453              	prvAddNewTaskToReadyList:
 454              	.LFB143:
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 455              		.loc 1 964 0
 456              		.cfi_startproc
 457              		@ args = 0, pretend = 0, frame = 8
 458              		@ frame_needed = 1, uses_anonymous_args = 0
 459 0000 80B5     		push	{r7, lr}
 460              	.LCFI10:
 461              		.cfi_def_cfa_offset 8
 462              		.cfi_offset 7, -8
 463              		.cfi_offset 14, -4
 464 0002 82B0     		sub	sp, sp, #8
 465              	.LCFI11:
 466              		.cfi_def_cfa_offset 16
 467 0004 00AF     		add	r7, sp, #0
 468              	.LCFI12:
 469              		.cfi_def_cfa_register 7
 470 0006 7860     		str	r0, [r7, #4]
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
ARM GAS  /tmp/ccMf91lX.s 			page 30


 471              		.loc 1 967 0
 472 0008 FFF7FEFF 		bl	vPortEnterCritical
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 473              		.loc 1 969 0
 474 000c 2A4B     		ldr	r3, .L25
 475 000e 1B68     		ldr	r3, [r3]
 476 0010 0133     		adds	r3, r3, #1
 477 0012 294A     		ldr	r2, .L25
 478 0014 1360     		str	r3, [r2]
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 479              		.loc 1 970 0
 480 0016 294B     		ldr	r3, .L25+4
 481 0018 1B68     		ldr	r3, [r3]
 482 001a 002B     		cmp	r3, #0
 483 001c 09D1     		bne	.L21
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 484              		.loc 1 974 0
 485 001e 274A     		ldr	r2, .L25+4
 486 0020 7B68     		ldr	r3, [r7, #4]
 487 0022 1360     		str	r3, [r2]
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 488              		.loc 1 976 0
 489 0024 244B     		ldr	r3, .L25
 490 0026 1B68     		ldr	r3, [r3]
 491 0028 012B     		cmp	r3, #1
 492 002a 10D1     		bne	.L22
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
 493              		.loc 1 981 0
 494 002c FFF7FEFF 		bl	prvInitialiseTaskLists
 495 0030 0DE0     		b	.L22
 496              	.L21:
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 497              		.loc 1 993 0
 498 0032 234B     		ldr	r3, .L25+8
 499 0034 1B68     		ldr	r3, [r3]
 500 0036 002B     		cmp	r3, #0
 501 0038 09D1     		bne	.L22
ARM GAS  /tmp/ccMf91lX.s 			page 31


 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 502              		.loc 1 995 0
 503 003a 204B     		ldr	r3, .L25+4
 504 003c 1B68     		ldr	r3, [r3]
 505 003e DA6A     		ldr	r2, [r3, #44]
 506 0040 7B68     		ldr	r3, [r7, #4]
 507 0042 DB6A     		ldr	r3, [r3, #44]
 508 0044 9A42     		cmp	r2, r3
 509 0046 02D8     		bhi	.L22
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 510              		.loc 1 997 0
 511 0048 1C4A     		ldr	r2, .L25+4
 512 004a 7B68     		ldr	r3, [r7, #4]
 513 004c 1360     		str	r3, [r2]
 514              	.L22:
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
 515              		.loc 1 1010 0
 516 004e 1D4B     		ldr	r3, .L25+12
 517 0050 1B68     		ldr	r3, [r3]
 518 0052 0133     		adds	r3, r3, #1
 519 0054 1B4A     		ldr	r2, .L25+12
 520 0056 1360     		str	r3, [r2]
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
 521              		.loc 1 1020 0
 522 0058 7B68     		ldr	r3, [r7, #4]
 523 005a DB6A     		ldr	r3, [r3, #44]
 524 005c 0122     		movs	r2, #1
 525 005e 9A40     		lsls	r2, r2, r3
 526 0060 194B     		ldr	r3, .L25+16
 527 0062 1B68     		ldr	r3, [r3]
 528 0064 1343     		orrs	r3, r3, r2
 529 0066 184A     		ldr	r2, .L25+16
 530 0068 1360     		str	r3, [r2]
 531 006a 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccMf91lX.s 			page 32


 532 006c DA6A     		ldr	r2, [r3, #44]
 533 006e 1346     		mov	r3, r2
 534 0070 9B00     		lsls	r3, r3, #2
 535 0072 1344     		add	r3, r3, r2
 536 0074 9B00     		lsls	r3, r3, #2
 537 0076 154A     		ldr	r2, .L25+20
 538 0078 1A44     		add	r2, r2, r3
 539 007a 7B68     		ldr	r3, [r7, #4]
 540 007c 0433     		adds	r3, r3, #4
 541 007e 1946     		mov	r1, r3
 542 0080 1046     		mov	r0, r2
 543 0082 FFF7FEFF 		bl	vListInsertEnd
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 544              		.loc 1 1024 0
 545 0086 FFF7FEFF 		bl	vPortExitCritical
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
 546              		.loc 1 1026 0
 547 008a 0D4B     		ldr	r3, .L25+8
 548 008c 1B68     		ldr	r3, [r3]
 549 008e 002B     		cmp	r3, #0
 550 0090 0ED0     		beq	.L24
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 551              		.loc 1 1030 0
 552 0092 0A4B     		ldr	r3, .L25+4
 553 0094 1B68     		ldr	r3, [r3]
 554 0096 DA6A     		ldr	r2, [r3, #44]
 555 0098 7B68     		ldr	r3, [r7, #4]
 556 009a DB6A     		ldr	r3, [r3, #44]
 557 009c 9A42     		cmp	r2, r3
 558 009e 07D2     		bcs	.L24
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
 559              		.loc 1 1032 0
 560 00a0 0B4B     		ldr	r3, .L25+24
 561 00a2 4FF08052 		mov	r2, #268435456
 562 00a6 1A60     		str	r2, [r3]
 563              		.syntax unified
 564              	@ 1032 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 565 00a8 BFF34F8F 		dsb
 566              	@ 0 "" 2
 567              	@ 1032 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 568 00ac BFF36F8F 		isb
 569              	@ 0 "" 2
 570              		.thumb
 571              		.syntax unified
 572              	.L24:
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccMf91lX.s 			page 33


1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 573              		.loc 1 1043 0
 574 00b0 00BF     		nop
 575 00b2 0837     		adds	r7, r7, #8
 576              	.LCFI13:
 577              		.cfi_def_cfa_offset 8
 578 00b4 BD46     		mov	sp, r7
 579              	.LCFI14:
 580              		.cfi_def_cfa_register 13
 581              		@ sp needed
 582 00b6 80BD     		pop	{r7, pc}
 583              	.L26:
 584              		.align	2
 585              	.L25:
 586 00b8 00000000 		.word	uxCurrentNumberOfTasks
 587 00bc 00000000 		.word	pxCurrentTCB
 588 00c0 00000000 		.word	xSchedulerRunning
 589 00c4 00000000 		.word	uxTaskNumber
 590 00c8 00000000 		.word	uxTopReadyPriority
 591 00cc 00000000 		.word	pxReadyTasksLists
 592 00d0 04ED00E0 		.word	-536810236
 593              		.cfi_endproc
 594              	.LFE143:
 596              		.section	.text.vTaskDelete,"ax",%progbits
 597              		.align	1
 598              		.global	vTaskDelete
 599              		.syntax unified
 600              		.thumb
 601              		.thumb_func
 602              		.fpu fpv4-sp-d16
 604              	vTaskDelete:
 605              	.LFB144:
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 606              		.loc 1 1049 0
 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 16
 609              		@ frame_needed = 1, uses_anonymous_args = 0
 610 0000 80B5     		push	{r7, lr}
 611              	.LCFI15:
 612              		.cfi_def_cfa_offset 8
 613              		.cfi_offset 7, -8
 614              		.cfi_offset 14, -4
 615 0002 84B0     		sub	sp, sp, #16
 616              	.LCFI16:
 617              		.cfi_def_cfa_offset 24
 618 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccMf91lX.s 			page 34


 619              	.LCFI17:
 620              		.cfi_def_cfa_register 7
 621 0006 7860     		str	r0, [r7, #4]
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 622              		.loc 1 1052 0
 623 0008 FFF7FEFF 		bl	vPortEnterCritical
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 624              		.loc 1 1056 0
 625 000c 7B68     		ldr	r3, [r7, #4]
 626 000e 002B     		cmp	r3, #0
 627 0010 02D1     		bne	.L28
 628              		.loc 1 1056 0 is_stmt 0 discriminator 1
 629 0012 394B     		ldr	r3, .L39
 630 0014 1B68     		ldr	r3, [r3]
 631 0016 00E0     		b	.L29
 632              	.L28:
 633              		.loc 1 1056 0 discriminator 2
 634 0018 7B68     		ldr	r3, [r7, #4]
 635              	.L29:
 636              		.loc 1 1056 0 discriminator 4
 637 001a FB60     		str	r3, [r7, #12]
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 638              		.loc 1 1059 0 is_stmt 1 discriminator 4
 639 001c FB68     		ldr	r3, [r7, #12]
 640 001e 0433     		adds	r3, r3, #4
 641 0020 1846     		mov	r0, r3
 642 0022 FFF7FEFF 		bl	uxListRemove
 643 0026 0346     		mov	r3, r0
 644 0028 002B     		cmp	r3, #0
 645 002a 15D1     		bne	.L30
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 646              		.loc 1 1061 0
 647 002c FB68     		ldr	r3, [r7, #12]
 648 002e DA6A     		ldr	r2, [r3, #44]
 649 0030 3249     		ldr	r1, .L39+4
 650 0032 1346     		mov	r3, r2
 651 0034 9B00     		lsls	r3, r3, #2
 652 0036 1344     		add	r3, r3, r2
 653 0038 9B00     		lsls	r3, r3, #2
 654 003a 0B44     		add	r3, r3, r1
 655 003c 1B68     		ldr	r3, [r3]
 656 003e 002B     		cmp	r3, #0
 657 0040 0AD1     		bne	.L30
 658              		.loc 1 1061 0 is_stmt 0 discriminator 1
 659 0042 FB68     		ldr	r3, [r7, #12]
 660 0044 DB6A     		ldr	r3, [r3, #44]
 661 0046 0122     		movs	r2, #1
 662 0048 02FA03F3 		lsl	r3, r2, r3
 663 004c DA43     		mvns	r2, r3
ARM GAS  /tmp/ccMf91lX.s 			page 35


 664 004e 2C4B     		ldr	r3, .L39+8
 665 0050 1B68     		ldr	r3, [r3]
 666 0052 1340     		ands	r3, r3, r2
 667 0054 2A4A     		ldr	r2, .L39+8
 668 0056 1360     		str	r3, [r2]
 669              	.L30:
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 670              		.loc 1 1069 0 is_stmt 1
 671 0058 FB68     		ldr	r3, [r7, #12]
 672 005a 9B6A     		ldr	r3, [r3, #40]
 673 005c 002B     		cmp	r3, #0
 674 005e 04D0     		beq	.L32
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 675              		.loc 1 1071 0
 676 0060 FB68     		ldr	r3, [r7, #12]
 677 0062 1833     		adds	r3, r3, #24
 678 0064 1846     		mov	r0, r3
 679 0066 FFF7FEFF 		bl	uxListRemove
 680              	.L32:
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 681              		.loc 1 1082 0
 682 006a 264B     		ldr	r3, .L39+12
 683 006c 1B68     		ldr	r3, [r3]
 684 006e 0133     		adds	r3, r3, #1
 685 0070 244A     		ldr	r2, .L39+12
 686 0072 1360     		str	r3, [r2]
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 687              		.loc 1 1084 0
 688 0074 204B     		ldr	r3, .L39
 689 0076 1B68     		ldr	r3, [r3]
 690 0078 FA68     		ldr	r2, [r7, #12]
 691 007a 9A42     		cmp	r2, r3
 692 007c 0BD1     		bne	.L33
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
ARM GAS  /tmp/ccMf91lX.s 			page 36


1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 693              		.loc 1 1091 0
 694 007e FB68     		ldr	r3, [r7, #12]
 695 0080 0433     		adds	r3, r3, #4
 696 0082 1946     		mov	r1, r3
 697 0084 2048     		ldr	r0, .L39+16
 698 0086 FFF7FEFF 		bl	vListInsertEnd
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
 699              		.loc 1 1096 0
 700 008a 204B     		ldr	r3, .L39+20
 701 008c 1B68     		ldr	r3, [r3]
 702 008e 0133     		adds	r3, r3, #1
 703 0090 1E4A     		ldr	r2, .L39+20
 704 0092 1360     		str	r3, [r2]
 705 0094 09E0     		b	.L34
 706              	.L33:
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 707              		.loc 1 1107 0
 708 0096 1E4B     		ldr	r3, .L39+24
 709 0098 1B68     		ldr	r3, [r3]
 710 009a 013B     		subs	r3, r3, #1
 711 009c 1C4A     		ldr	r2, .L39+24
 712 009e 1360     		str	r3, [r2]
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 713              		.loc 1 1108 0
 714 00a0 F868     		ldr	r0, [r7, #12]
 715 00a2 FFF7FEFF 		bl	prvDeleteTCB
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 716              		.loc 1 1112 0
 717 00a6 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 718              	.L34:
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 719              		.loc 1 1117 0
 720 00aa FFF7FEFF 		bl	vPortExitCritical
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccMf91lX.s 			page 37


1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 721              		.loc 1 1121 0
 722 00ae 194B     		ldr	r3, .L39+28
 723 00b0 1B68     		ldr	r3, [r3]
 724 00b2 002B     		cmp	r3, #0
 725 00b4 1CD0     		beq	.L38
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 726              		.loc 1 1123 0
 727 00b6 104B     		ldr	r3, .L39
 728 00b8 1B68     		ldr	r3, [r3]
 729 00ba FA68     		ldr	r2, [r7, #12]
 730 00bc 9A42     		cmp	r2, r3
 731 00be 17D1     		bne	.L38
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 732              		.loc 1 1125 0
 733 00c0 154B     		ldr	r3, .L39+32
 734 00c2 1B68     		ldr	r3, [r3]
 735 00c4 002B     		cmp	r3, #0
 736 00c6 0BD0     		beq	.L36
 737              	.LBB93:
 738              	.LBB94:
 739              		.loc 2 237 0 discriminator 1
 740              		.syntax unified
 741              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 742 00c8 4FF05003 			mov r3, #80												
 743 00cc 72B6     		cpsid i													
 744 00ce 83F31188 		msr basepri, r3											
 745 00d2 BFF36F8F 		isb														
 746 00d6 BFF34F8F 		dsb														
 747 00da 62B6     		cpsie i													
 748              	
 749              	@ 0 "" 2
 750              		.thumb
 751              		.syntax unified
 752 00dc BB60     		str	r3, [r7, #8]
 753              	.L37:
 754              	.LBE94:
 755              	.LBE93:
 756              		.loc 1 1125 0 discriminator 1
 757 00de FEE7     		b	.L37
 758              	.L36:
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 759              		.loc 1 1126 0
 760 00e0 0E4B     		ldr	r3, .L39+36
 761 00e2 4FF08052 		mov	r2, #268435456
 762 00e6 1A60     		str	r2, [r3]
 763              		.syntax unified
 764              	@ 1126 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 765 00e8 BFF34F8F 		dsb
 766              	@ 0 "" 2
 767              	@ 1126 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 768 00ec BFF36F8F 		isb
 769              	@ 0 "" 2
ARM GAS  /tmp/ccMf91lX.s 			page 38


 770              		.thumb
 771              		.syntax unified
 772              	.L38:
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 773              		.loc 1 1133 0
 774 00f0 00BF     		nop
 775 00f2 1037     		adds	r7, r7, #16
 776              	.LCFI18:
 777              		.cfi_def_cfa_offset 8
 778 00f4 BD46     		mov	sp, r7
 779              	.LCFI19:
 780              		.cfi_def_cfa_register 13
 781              		@ sp needed
 782 00f6 80BD     		pop	{r7, pc}
 783              	.L40:
 784              		.align	2
 785              	.L39:
 786 00f8 00000000 		.word	pxCurrentTCB
 787 00fc 00000000 		.word	pxReadyTasksLists
 788 0100 00000000 		.word	uxTopReadyPriority
 789 0104 00000000 		.word	uxTaskNumber
 790 0108 00000000 		.word	xTasksWaitingTermination
 791 010c 00000000 		.word	uxDeletedTasksWaitingCleanUp
 792 0110 00000000 		.word	uxCurrentNumberOfTasks
 793 0114 00000000 		.word	xSchedulerRunning
 794 0118 00000000 		.word	uxSchedulerSuspended
 795 011c 04ED00E0 		.word	-536810236
 796              		.cfi_endproc
 797              	.LFE144:
 799              		.section	.text.vTaskDelay,"ax",%progbits
 800              		.align	1
 801              		.global	vTaskDelay
 802              		.syntax unified
 803              		.thumb
 804              		.thumb_func
 805              		.fpu fpv4-sp-d16
 807              	vTaskDelay:
 808              	.LFB145:
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
ARM GAS  /tmp/ccMf91lX.s 			page 39


1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccMf91lX.s 			page 40


1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 809              		.loc 1 1225 0
 810              		.cfi_startproc
 811              		@ args = 0, pretend = 0, frame = 16
 812              		@ frame_needed = 1, uses_anonymous_args = 0
 813 0000 80B5     		push	{r7, lr}
 814              	.LCFI20:
 815              		.cfi_def_cfa_offset 8
 816              		.cfi_offset 7, -8
 817              		.cfi_offset 14, -4
 818 0002 84B0     		sub	sp, sp, #16
 819              	.LCFI21:
 820              		.cfi_def_cfa_offset 24
 821 0004 00AF     		add	r7, sp, #0
 822              	.LCFI22:
 823              		.cfi_def_cfa_register 7
 824 0006 7860     		str	r0, [r7, #4]
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 825              		.loc 1 1226 0
 826 0008 0023     		movs	r3, #0
 827 000a FB60     		str	r3, [r7, #12]
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 828              		.loc 1 1229 0
 829 000c 7B68     		ldr	r3, [r7, #4]
 830 000e 002B     		cmp	r3, #0
 831 0010 18D0     		beq	.L42
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 832              		.loc 1 1231 0
 833 0012 144B     		ldr	r3, .L47
 834 0014 1B68     		ldr	r3, [r3]
 835 0016 002B     		cmp	r3, #0
 836 0018 0BD0     		beq	.L43
 837              	.LBB95:
ARM GAS  /tmp/ccMf91lX.s 			page 41


 838              	.LBB96:
 839              		.loc 2 237 0 discriminator 1
 840              		.syntax unified
 841              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 842 001a 4FF05003 			mov r3, #80												
 843 001e 72B6     		cpsid i													
 844 0020 83F31188 		msr basepri, r3											
 845 0024 BFF36F8F 		isb														
 846 0028 BFF34F8F 		dsb														
 847 002c 62B6     		cpsie i													
 848              	
 849              	@ 0 "" 2
 850              		.thumb
 851              		.syntax unified
 852 002e BB60     		str	r3, [r7, #8]
 853              	.L44:
 854              	.LBE96:
 855              	.LBE95:
 856              		.loc 1 1231 0 discriminator 1
 857 0030 FEE7     		b	.L44
 858              	.L43:
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 859              		.loc 1 1232 0
 860 0032 FFF7FEFF 		bl	vTaskSuspendAll
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 861              		.loc 1 1243 0
 862 0036 0021     		movs	r1, #0
 863 0038 7868     		ldr	r0, [r7, #4]
 864 003a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 865              		.loc 1 1245 0
 866 003e FFF7FEFF 		bl	xTaskResumeAll
 867 0042 F860     		str	r0, [r7, #12]
 868              	.L42:
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 869              		.loc 1 1254 0
 870 0044 FB68     		ldr	r3, [r7, #12]
 871 0046 002B     		cmp	r3, #0
ARM GAS  /tmp/ccMf91lX.s 			page 42


 872 0048 07D1     		bne	.L46
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 873              		.loc 1 1256 0
 874 004a 074B     		ldr	r3, .L47+4
 875 004c 4FF08052 		mov	r2, #268435456
 876 0050 1A60     		str	r2, [r3]
 877              		.syntax unified
 878              	@ 1256 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 879 0052 BFF34F8F 		dsb
 880              	@ 0 "" 2
 881              	@ 1256 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 882 0056 BFF36F8F 		isb
 883              	@ 0 "" 2
 884              		.thumb
 885              		.syntax unified
 886              	.L46:
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 887              		.loc 1 1262 0
 888 005a 00BF     		nop
 889 005c 1037     		adds	r7, r7, #16
 890              	.LCFI23:
 891              		.cfi_def_cfa_offset 8
 892 005e BD46     		mov	sp, r7
 893              	.LCFI24:
 894              		.cfi_def_cfa_register 13
 895              		@ sp needed
 896 0060 80BD     		pop	{r7, pc}
 897              	.L48:
 898 0062 00BF     		.align	2
 899              	.L47:
 900 0064 00000000 		.word	uxSchedulerSuspended
 901 0068 04ED00E0 		.word	-536810236
 902              		.cfi_endproc
 903              	.LFE145:
 905              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 906              		.align	1
 907              		.global	uxTaskPriorityGet
 908              		.syntax unified
 909              		.thumb
 910              		.thumb_func
 911              		.fpu fpv4-sp-d16
 913              	uxTaskPriorityGet:
 914              	.LFB146:
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccMf91lX.s 			page 43


1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxStateList;
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eSuspended;
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
ARM GAS  /tmp/ccMf91lX.s 			page 44


1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 915              		.loc 1 1341 0
 916              		.cfi_startproc
 917              		@ args = 0, pretend = 0, frame = 16
 918              		@ frame_needed = 1, uses_anonymous_args = 0
 919 0000 80B5     		push	{r7, lr}
 920              	.LCFI25:
 921              		.cfi_def_cfa_offset 8
 922              		.cfi_offset 7, -8
 923              		.cfi_offset 14, -4
 924 0002 84B0     		sub	sp, sp, #16
 925              	.LCFI26:
 926              		.cfi_def_cfa_offset 24
 927 0004 00AF     		add	r7, sp, #0
 928              	.LCFI27:
 929              		.cfi_def_cfa_register 7
 930 0006 7860     		str	r0, [r7, #4]
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 931              		.loc 1 1345 0
 932 0008 FFF7FEFF 		bl	vPortEnterCritical
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 933              		.loc 1 1349 0
 934 000c 7B68     		ldr	r3, [r7, #4]
 935 000e 002B     		cmp	r3, #0
 936 0010 02D1     		bne	.L50
 937              		.loc 1 1349 0 is_stmt 0 discriminator 1
 938 0012 074B     		ldr	r3, .L53
 939 0014 1B68     		ldr	r3, [r3]
 940 0016 00E0     		b	.L51
 941              	.L50:
 942              		.loc 1 1349 0 discriminator 2
 943 0018 7B68     		ldr	r3, [r7, #4]
 944              	.L51:
 945              		.loc 1 1349 0 discriminator 4
 946 001a FB60     		str	r3, [r7, #12]
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 947              		.loc 1 1350 0 is_stmt 1 discriminator 4
 948 001c FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccMf91lX.s 			page 45


 949 001e DB6A     		ldr	r3, [r3, #44]
 950 0020 BB60     		str	r3, [r7, #8]
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 951              		.loc 1 1352 0 discriminator 4
 952 0022 FFF7FEFF 		bl	vPortExitCritical
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 953              		.loc 1 1354 0 discriminator 4
 954 0026 BB68     		ldr	r3, [r7, #8]
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 955              		.loc 1 1355 0 discriminator 4
 956 0028 1846     		mov	r0, r3
 957 002a 1037     		adds	r7, r7, #16
 958              	.LCFI28:
 959              		.cfi_def_cfa_offset 8
 960 002c BD46     		mov	sp, r7
 961              	.LCFI29:
 962              		.cfi_def_cfa_register 13
 963              		@ sp needed
 964 002e 80BD     		pop	{r7, pc}
 965              	.L54:
 966              		.align	2
 967              	.L53:
 968 0030 00000000 		.word	pxCurrentTCB
 969              		.cfi_endproc
 970              	.LFE146:
 972              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 973              		.align	1
 974              		.global	uxTaskPriorityGetFromISR
 975              		.syntax unified
 976              		.thumb
 977              		.thumb_func
 978              		.fpu fpv4-sp-d16
 980              	uxTaskPriorityGetFromISR:
 981              	.LFB147:
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 982              		.loc 1 1363 0
 983              		.cfi_startproc
 984              		@ args = 0, pretend = 0, frame = 32
 985              		@ frame_needed = 1, uses_anonymous_args = 0
 986 0000 80B5     		push	{r7, lr}
 987              	.LCFI30:
 988              		.cfi_def_cfa_offset 8
 989              		.cfi_offset 7, -8
 990              		.cfi_offset 14, -4
 991 0002 88B0     		sub	sp, sp, #32
 992              	.LCFI31:
 993              		.cfi_def_cfa_offset 40
 994 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccMf91lX.s 			page 46


 995              	.LCFI32:
 996              		.cfi_def_cfa_register 7
 997 0006 7860     		str	r0, [r7, #4]
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 998              		.loc 1 1383 0
 999 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1000              	.LBB97:
 1001              	.LBB98:
 238:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 239:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsid i													\n" \
 241:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	msr basepri, %0											\n" \
 242:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	isb														\n" \
 243:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	dsb														\n" \
 244:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsie i													\n" \
 245:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 246:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	);
 247:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 248:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 249:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 250:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 251:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 252:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 254:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 255:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile
 1002              		.loc 2 255 0
 1003              		.syntax unified
 1004              	@ 255 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1005 000c EFF31182 			mrs r2, basepri											
 1006 0010 4FF05003 		mov r3, #80												
 1007 0014 72B6     		cpsid i													
 1008 0016 83F31188 		msr basepri, r3											
 1009 001a BFF36F8F 		isb														
 1010 001e BFF34F8F 		dsb														
 1011 0022 62B6     		cpsie i													
 1012              	
 1013              	@ 0 "" 2
ARM GAS  /tmp/ccMf91lX.s 			page 47


 1014              		.thumb
 1015              		.syntax unified
 1016 0024 3A61     		str	r2, [r7, #16]
 1017 0026 FB60     		str	r3, [r7, #12]
 256:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 257:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	mrs %0, basepri											\n" \
 258:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	mov %1, %2												\n"	\
 259:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsid i													\n" \
 260:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	msr basepri, %1											\n" \
 261:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	isb														\n" \
 262:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	dsb														\n" \
 263:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsie i													\n" \
 264:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 265:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	);
 266:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 267:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 268:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	warnings. */
 269:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	return ulOriginalBASEPRI;
 1018              		.loc 2 269 0
 1019 0028 3B69     		ldr	r3, [r7, #16]
 1020              	.LBE98:
 1021              	.LBE97:
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1022              		.loc 1 1385 0
 1023 002a FB61     		str	r3, [r7, #28]
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1024              		.loc 1 1389 0
 1025 002c 7B68     		ldr	r3, [r7, #4]
 1026 002e 002B     		cmp	r3, #0
 1027 0030 02D1     		bne	.L57
 1028              		.loc 1 1389 0 is_stmt 0 discriminator 1
 1029 0032 094B     		ldr	r3, .L60
 1030 0034 1B68     		ldr	r3, [r3]
 1031 0036 00E0     		b	.L58
 1032              	.L57:
 1033              		.loc 1 1389 0 discriminator 2
 1034 0038 7B68     		ldr	r3, [r7, #4]
 1035              	.L58:
 1036              		.loc 1 1389 0 discriminator 4
 1037 003a BB61     		str	r3, [r7, #24]
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1038              		.loc 1 1390 0 is_stmt 1 discriminator 4
 1039 003c BB69     		ldr	r3, [r7, #24]
 1040 003e DB6A     		ldr	r3, [r3, #44]
 1041 0040 7B61     		str	r3, [r7, #20]
 1042 0042 FB69     		ldr	r3, [r7, #28]
 1043 0044 BB60     		str	r3, [r7, #8]
 1044              	.LBB99:
 1045              	.LBB100:
 270:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 271:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 272:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 273:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
ARM GAS  /tmp/ccMf91lX.s 			page 48


 274:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 275:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile
 1046              		.loc 2 275 0 discriminator 4
 1047 0046 BB68     		ldr	r3, [r7, #8]
 1048              		.syntax unified
 1049              	@ 275 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1050 0048 83F31188 			msr basepri, r3	
 1051              	@ 0 "" 2
 1052              		.thumb
 1053              		.syntax unified
 1054              	.LBE100:
 1055              	.LBE99:
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1056              		.loc 1 1394 0 discriminator 4
 1057 004c 7B69     		ldr	r3, [r7, #20]
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1058              		.loc 1 1395 0 discriminator 4
 1059 004e 1846     		mov	r0, r3
 1060 0050 2037     		adds	r7, r7, #32
 1061              	.LCFI33:
 1062              		.cfi_def_cfa_offset 8
 1063 0052 BD46     		mov	sp, r7
 1064              	.LCFI34:
 1065              		.cfi_def_cfa_register 13
 1066              		@ sp needed
 1067 0054 80BD     		pop	{r7, pc}
 1068              	.L61:
 1069 0056 00BF     		.align	2
 1070              	.L60:
 1071 0058 00000000 		.word	pxCurrentTCB
 1072              		.cfi_endproc
 1073              	.LFE147:
 1075              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1076              		.align	1
 1077              		.global	vTaskPrioritySet
 1078              		.syntax unified
 1079              		.thumb
 1080              		.thumb_func
 1081              		.fpu fpv4-sp-d16
 1083              	vTaskPrioritySet:
 1084              	.LFB148:
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1085              		.loc 1 1403 0
 1086              		.cfi_startproc
 1087              		@ args = 0, pretend = 0, frame = 32
 1088              		@ frame_needed = 1, uses_anonymous_args = 0
 1089 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccMf91lX.s 			page 49


 1090              	.LCFI35:
 1091              		.cfi_def_cfa_offset 8
 1092              		.cfi_offset 7, -8
 1093              		.cfi_offset 14, -4
 1094 0002 88B0     		sub	sp, sp, #32
 1095              	.LCFI36:
 1096              		.cfi_def_cfa_offset 40
 1097 0004 00AF     		add	r7, sp, #0
 1098              	.LCFI37:
 1099              		.cfi_def_cfa_register 7
 1100 0006 7860     		str	r0, [r7, #4]
 1101 0008 3960     		str	r1, [r7]
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1102              		.loc 1 1406 0
 1103 000a 0023     		movs	r3, #0
 1104 000c FB61     		str	r3, [r7, #28]
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 1105              		.loc 1 1408 0
 1106 000e 3B68     		ldr	r3, [r7]
 1107 0010 062B     		cmp	r3, #6
 1108 0012 0BD9     		bls	.L63
 1109              	.LBB101:
 1110              	.LBB102:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1111              		.loc 2 237 0 discriminator 1
 1112              		.syntax unified
 1113              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1114 0014 4FF05003 			mov r3, #80												
 1115 0018 72B6     		cpsid i													
 1116 001a 83F31188 		msr basepri, r3											
 1117 001e BFF36F8F 		isb														
 1118 0022 BFF34F8F 		dsb														
 1119 0026 62B6     		cpsie i													
 1120              	
 1121              	@ 0 "" 2
 1122              		.thumb
 1123              		.syntax unified
 1124 0028 FB60     		str	r3, [r7, #12]
 1125              	.L64:
 1126              	.LBE102:
 1127              	.LBE101:
 1128              		.loc 1 1408 0 discriminator 1
 1129 002a FEE7     		b	.L64
 1130              	.L63:
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1131              		.loc 1 1411 0
 1132 002c 3B68     		ldr	r3, [r7]
 1133 002e 062B     		cmp	r3, #6
 1134 0030 01D9     		bls	.L65
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1135              		.loc 1 1413 0
ARM GAS  /tmp/ccMf91lX.s 			page 50


 1136 0032 0623     		movs	r3, #6
 1137 0034 3B60     		str	r3, [r7]
 1138              	.L65:
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1139              		.loc 1 1420 0
 1140 0036 FFF7FEFF 		bl	vPortEnterCritical
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1141              		.loc 1 1424 0
 1142 003a 7B68     		ldr	r3, [r7, #4]
 1143 003c 002B     		cmp	r3, #0
 1144 003e 02D1     		bne	.L66
 1145              		.loc 1 1424 0 is_stmt 0 discriminator 1
 1146 0040 434B     		ldr	r3, .L77
 1147 0042 1B68     		ldr	r3, [r3]
 1148 0044 00E0     		b	.L67
 1149              	.L66:
 1150              		.loc 1 1424 0 discriminator 2
 1151 0046 7B68     		ldr	r3, [r7, #4]
 1152              	.L67:
 1153              		.loc 1 1424 0 discriminator 4
 1154 0048 BB61     		str	r3, [r7, #24]
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 1155              		.loc 1 1430 0 is_stmt 1 discriminator 4
 1156 004a BB69     		ldr	r3, [r7, #24]
 1157 004c 5B6C     		ldr	r3, [r3, #68]
 1158 004e 7B61     		str	r3, [r7, #20]
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 1159              		.loc 1 1438 0 discriminator 4
 1160 0050 7A69     		ldr	r2, [r7, #20]
 1161 0052 3B68     		ldr	r3, [r7]
 1162 0054 9A42     		cmp	r2, r3
 1163 0056 74D0     		beq	.L68
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
ARM GAS  /tmp/ccMf91lX.s 			page 51


 1164              		.loc 1 1442 0
 1165 0058 3A68     		ldr	r2, [r7]
 1166 005a 7B69     		ldr	r3, [r7, #20]
 1167 005c 9A42     		cmp	r2, r3
 1168 005e 0DD9     		bls	.L69
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 1169              		.loc 1 1444 0
 1170 0060 3B4B     		ldr	r3, .L77
 1171 0062 1B68     		ldr	r3, [r3]
 1172 0064 BA69     		ldr	r2, [r7, #24]
 1173 0066 9A42     		cmp	r2, r3
 1174 0068 0FD0     		beq	.L70
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1175              		.loc 1 1449 0
 1176 006a 394B     		ldr	r3, .L77
 1177 006c 1B68     		ldr	r3, [r3]
 1178 006e DA6A     		ldr	r2, [r3, #44]
 1179 0070 3B68     		ldr	r3, [r7]
 1180 0072 9A42     		cmp	r2, r3
 1181 0074 09D8     		bhi	.L70
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
 1182              		.loc 1 1451 0
 1183 0076 0123     		movs	r3, #1
 1184 0078 FB61     		str	r3, [r7, #28]
 1185 007a 06E0     		b	.L70
 1186              	.L69:
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 1187              		.loc 1 1465 0
 1188 007c 344B     		ldr	r3, .L77
 1189 007e 1B68     		ldr	r3, [r3]
 1190 0080 BA69     		ldr	r2, [r7, #24]
 1191 0082 9A42     		cmp	r2, r3
 1192 0084 01D1     		bne	.L70
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
ARM GAS  /tmp/ccMf91lX.s 			page 52


 1193              		.loc 1 1470 0
 1194 0086 0123     		movs	r3, #1
 1195 0088 FB61     		str	r3, [r7, #28]
 1196              	.L70:
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1197              		.loc 1 1482 0
 1198 008a BB69     		ldr	r3, [r7, #24]
 1199 008c DB6A     		ldr	r3, [r3, #44]
 1200 008e 3B61     		str	r3, [r7, #16]
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1201              		.loc 1 1488 0
 1202 0090 BB69     		ldr	r3, [r7, #24]
 1203 0092 5A6C     		ldr	r2, [r3, #68]
 1204 0094 BB69     		ldr	r3, [r7, #24]
 1205 0096 DB6A     		ldr	r3, [r3, #44]
 1206 0098 9A42     		cmp	r2, r3
 1207 009a 02D1     		bne	.L71
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 1208              		.loc 1 1490 0
 1209 009c BB69     		ldr	r3, [r7, #24]
 1210 009e 3A68     		ldr	r2, [r7]
 1211 00a0 DA62     		str	r2, [r3, #44]
 1212              	.L71:
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 1213              		.loc 1 1498 0
 1214 00a2 BB69     		ldr	r3, [r7, #24]
 1215 00a4 3A68     		ldr	r2, [r7]
 1216 00a6 5A64     		str	r2, [r3, #68]
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/ccMf91lX.s 			page 53


1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1217              		.loc 1 1508 0
 1218 00a8 BB69     		ldr	r3, [r7, #24]
 1219 00aa 9B69     		ldr	r3, [r3, #24]
 1220 00ac 002B     		cmp	r3, #0
 1221 00ae 04DB     		blt	.L72
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
 1222              		.loc 1 1510 0
 1223 00b0 3B68     		ldr	r3, [r7]
 1224 00b2 C3F10702 		rsb	r2, r3, #7
 1225 00b6 BB69     		ldr	r3, [r7, #24]
 1226 00b8 9A61     		str	r2, [r3, #24]
 1227              	.L72:
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change it's priority variable. However, if
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
 1228              		.loc 1 1521 0
 1229 00ba BB69     		ldr	r3, [r7, #24]
 1230 00bc 5969     		ldr	r1, [r3, #20]
 1231 00be 3A69     		ldr	r2, [r7, #16]
 1232 00c0 1346     		mov	r3, r2
 1233 00c2 9B00     		lsls	r3, r3, #2
 1234 00c4 1344     		add	r3, r3, r2
 1235 00c6 9B00     		lsls	r3, r3, #2
 1236 00c8 224A     		ldr	r2, .L77+4
 1237 00ca 1344     		add	r3, r3, r2
 1238 00cc 9942     		cmp	r1, r3
 1239 00ce 01D1     		bne	.L73
 1240              		.loc 1 1521 0 is_stmt 0 discriminator 1
 1241 00d0 0123     		movs	r3, #1
 1242 00d2 00E0     		b	.L74
 1243              	.L73:
 1244              		.loc 1 1521 0 discriminator 2
 1245 00d4 0023     		movs	r3, #0
 1246              	.L74:
 1247              		.loc 1 1521 0 discriminator 4
 1248 00d6 002B     		cmp	r3, #0
 1249 00d8 28D0     		beq	.L75
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					can do this even if the scheduler is suspended. */
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1250              		.loc 1 1526 0 is_stmt 1
ARM GAS  /tmp/ccMf91lX.s 			page 54


 1251 00da BB69     		ldr	r3, [r7, #24]
 1252 00dc 0433     		adds	r3, r3, #4
 1253 00de 1846     		mov	r0, r3
 1254 00e0 FFF7FEFF 		bl	uxListRemove
 1255 00e4 0346     		mov	r3, r0
 1256 00e6 002B     		cmp	r3, #0
 1257 00e8 09D1     		bne	.L76
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 1258              		.loc 1 1531 0
 1259 00ea 0122     		movs	r2, #1
 1260 00ec 3B69     		ldr	r3, [r7, #16]
 1261 00ee 02FA03F3 		lsl	r3, r2, r3
 1262 00f2 DA43     		mvns	r2, r3
 1263 00f4 184B     		ldr	r3, .L77+8
 1264 00f6 1B68     		ldr	r3, [r3]
 1265 00f8 1340     		ands	r3, r3, r2
 1266 00fa 174A     		ldr	r2, .L77+8
 1267 00fc 1360     		str	r3, [r2]
 1268              	.L76:
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1269              		.loc 1 1537 0
 1270 00fe BB69     		ldr	r3, [r7, #24]
 1271 0100 DB6A     		ldr	r3, [r3, #44]
 1272 0102 0122     		movs	r2, #1
 1273 0104 9A40     		lsls	r2, r2, r3
 1274 0106 144B     		ldr	r3, .L77+8
 1275 0108 1B68     		ldr	r3, [r3]
 1276 010a 1343     		orrs	r3, r3, r2
 1277 010c 124A     		ldr	r2, .L77+8
 1278 010e 1360     		str	r3, [r2]
 1279 0110 BB69     		ldr	r3, [r7, #24]
 1280 0112 DA6A     		ldr	r2, [r3, #44]
 1281 0114 1346     		mov	r3, r2
 1282 0116 9B00     		lsls	r3, r3, #2
 1283 0118 1344     		add	r3, r3, r2
 1284 011a 9B00     		lsls	r3, r3, #2
 1285 011c 0D4A     		ldr	r2, .L77+4
 1286 011e 1A44     		add	r2, r2, r3
 1287 0120 BB69     		ldr	r3, [r7, #24]
 1288 0122 0433     		adds	r3, r3, #4
 1289 0124 1946     		mov	r1, r3
 1290 0126 1046     		mov	r0, r2
 1291 0128 FFF7FEFF 		bl	vListInsertEnd
 1292              	.L75:
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccMf91lX.s 			page 55


1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
 1293              		.loc 1 1544 0
 1294 012c FB69     		ldr	r3, [r7, #28]
 1295 012e 002B     		cmp	r3, #0
 1296 0130 07D0     		beq	.L68
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1297              		.loc 1 1546 0
 1298 0132 0A4B     		ldr	r3, .L77+12
 1299 0134 4FF08052 		mov	r2, #268435456
 1300 0138 1A60     		str	r2, [r3]
 1301              		.syntax unified
 1302              	@ 1546 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1303 013a BFF34F8F 		dsb
 1304              	@ 0 "" 2
 1305              	@ 1546 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1306 013e BFF36F8F 		isb
 1307              	@ 0 "" 2
 1308              		.thumb
 1309              		.syntax unified
 1310              	.L68:
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1311              		.loc 1 1558 0
 1312 0142 FFF7FEFF 		bl	vPortExitCritical
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1313              		.loc 1 1559 0
 1314 0146 00BF     		nop
 1315 0148 2037     		adds	r7, r7, #32
 1316              	.LCFI38:
 1317              		.cfi_def_cfa_offset 8
 1318 014a BD46     		mov	sp, r7
 1319              	.LCFI39:
 1320              		.cfi_def_cfa_register 13
 1321              		@ sp needed
 1322 014c 80BD     		pop	{r7, pc}
 1323              	.L78:
 1324 014e 00BF     		.align	2
 1325              	.L77:
 1326 0150 00000000 		.word	pxCurrentTCB
 1327 0154 00000000 		.word	pxReadyTasksLists
 1328 0158 00000000 		.word	uxTopReadyPriority
 1329 015c 04ED00E0 		.word	-536810236
 1330              		.cfi_endproc
 1331              	.LFE148:
ARM GAS  /tmp/ccMf91lX.s 			page 56


 1333              		.section	.text.vTaskSuspend,"ax",%progbits
 1334              		.align	1
 1335              		.global	vTaskSuspend
 1336              		.syntax unified
 1337              		.thumb
 1338              		.thumb_func
 1339              		.fpu fpv4-sp-d16
 1341              	vTaskSuspend:
 1342              	.LFB149:
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1343              		.loc 1 1567 0
 1344              		.cfi_startproc
 1345              		@ args = 0, pretend = 0, frame = 16
 1346              		@ frame_needed = 1, uses_anonymous_args = 0
 1347 0000 80B5     		push	{r7, lr}
 1348              	.LCFI40:
 1349              		.cfi_def_cfa_offset 8
 1350              		.cfi_offset 7, -8
 1351              		.cfi_offset 14, -4
 1352 0002 84B0     		sub	sp, sp, #16
 1353              	.LCFI41:
 1354              		.cfi_def_cfa_offset 24
 1355 0004 00AF     		add	r7, sp, #0
 1356              	.LCFI42:
 1357              		.cfi_def_cfa_register 7
 1358 0006 7860     		str	r0, [r7, #4]
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1359              		.loc 1 1570 0
 1360 0008 FFF7FEFF 		bl	vPortEnterCritical
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1361              		.loc 1 1574 0
 1362 000c 7B68     		ldr	r3, [r7, #4]
 1363 000e 002B     		cmp	r3, #0
 1364 0010 02D1     		bne	.L80
 1365              		.loc 1 1574 0 is_stmt 0 discriminator 1
 1366 0012 384B     		ldr	r3, .L93
 1367 0014 1B68     		ldr	r3, [r3]
 1368 0016 00E0     		b	.L81
 1369              	.L80:
 1370              		.loc 1 1574 0 discriminator 2
 1371 0018 7B68     		ldr	r3, [r7, #4]
 1372              	.L81:
 1373              		.loc 1 1574 0 discriminator 4
 1374 001a FB60     		str	r3, [r7, #12]
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccMf91lX.s 			page 57


1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1375              		.loc 1 1580 0 is_stmt 1 discriminator 4
 1376 001c FB68     		ldr	r3, [r7, #12]
 1377 001e 0433     		adds	r3, r3, #4
 1378 0020 1846     		mov	r0, r3
 1379 0022 FFF7FEFF 		bl	uxListRemove
 1380 0026 0346     		mov	r3, r0
 1381 0028 002B     		cmp	r3, #0
 1382 002a 15D1     		bne	.L82
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 1383              		.loc 1 1582 0
 1384 002c FB68     		ldr	r3, [r7, #12]
 1385 002e DA6A     		ldr	r2, [r3, #44]
 1386 0030 3149     		ldr	r1, .L93+4
 1387 0032 1346     		mov	r3, r2
 1388 0034 9B00     		lsls	r3, r3, #2
 1389 0036 1344     		add	r3, r3, r2
 1390 0038 9B00     		lsls	r3, r3, #2
 1391 003a 0B44     		add	r3, r3, r1
 1392 003c 1B68     		ldr	r3, [r3]
 1393 003e 002B     		cmp	r3, #0
 1394 0040 0AD1     		bne	.L82
 1395              		.loc 1 1582 0 is_stmt 0 discriminator 1
 1396 0042 FB68     		ldr	r3, [r7, #12]
 1397 0044 DB6A     		ldr	r3, [r3, #44]
 1398 0046 0122     		movs	r2, #1
 1399 0048 02FA03F3 		lsl	r3, r2, r3
 1400 004c DA43     		mvns	r2, r3
 1401 004e 2B4B     		ldr	r3, .L93+8
 1402 0050 1B68     		ldr	r3, [r3]
 1403 0052 1340     		ands	r3, r3, r2
 1404 0054 294A     		ldr	r2, .L93+8
 1405 0056 1360     		str	r3, [r2]
 1406              	.L82:
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1407              		.loc 1 1590 0 is_stmt 1
 1408 0058 FB68     		ldr	r3, [r7, #12]
 1409 005a 9B6A     		ldr	r3, [r3, #40]
 1410 005c 002B     		cmp	r3, #0
 1411 005e 04D0     		beq	.L84
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1412              		.loc 1 1592 0
 1413 0060 FB68     		ldr	r3, [r7, #12]
 1414 0062 1833     		adds	r3, r3, #24
ARM GAS  /tmp/ccMf91lX.s 			page 58


 1415 0064 1846     		mov	r0, r3
 1416 0066 FFF7FEFF 		bl	uxListRemove
 1417              	.L84:
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1418              		.loc 1 1599 0
 1419 006a FB68     		ldr	r3, [r7, #12]
 1420 006c 0433     		adds	r3, r3, #4
 1421 006e 1946     		mov	r1, r3
 1422 0070 2348     		ldr	r0, .L93+12
 1423 0072 FFF7FEFF 		bl	vListInsertEnd
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1424              		.loc 1 1601 0
 1425 0076 FFF7FEFF 		bl	vPortExitCritical
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 1426              		.loc 1 1603 0
 1427 007a 224B     		ldr	r3, .L93+16
 1428 007c 1B68     		ldr	r3, [r3]
 1429 007e 002B     		cmp	r3, #0
 1430 0080 05D0     		beq	.L85
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1431              		.loc 1 1607 0
 1432 0082 FFF7FEFF 		bl	vPortEnterCritical
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 1433              		.loc 1 1609 0
 1434 0086 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1435              		.loc 1 1611 0
 1436 008a FFF7FEFF 		bl	vPortExitCritical
 1437              	.L85:
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1438              		.loc 1 1618 0
 1439 008e 194B     		ldr	r3, .L93
 1440 0090 1B68     		ldr	r3, [r3]
 1441 0092 FA68     		ldr	r2, [r7, #12]
 1442 0094 9A42     		cmp	r2, r3
 1443 0096 28D1     		bne	.L92
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
ARM GAS  /tmp/ccMf91lX.s 			page 59


 1444              		.loc 1 1620 0
 1445 0098 1A4B     		ldr	r3, .L93+16
 1446 009a 1B68     		ldr	r3, [r3]
 1447 009c 002B     		cmp	r3, #0
 1448 009e 18D0     		beq	.L87
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 1449              		.loc 1 1623 0
 1450 00a0 194B     		ldr	r3, .L93+20
 1451 00a2 1B68     		ldr	r3, [r3]
 1452 00a4 002B     		cmp	r3, #0
 1453 00a6 0BD0     		beq	.L88
 1454              	.LBB103:
 1455              	.LBB104:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1456              		.loc 2 237 0 discriminator 1
 1457              		.syntax unified
 1458              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1459 00a8 4FF05003 			mov r3, #80												
 1460 00ac 72B6     		cpsid i													
 1461 00ae 83F31188 		msr basepri, r3											
 1462 00b2 BFF36F8F 		isb														
 1463 00b6 BFF34F8F 		dsb														
 1464 00ba 62B6     		cpsie i													
 1465              	
 1466              	@ 0 "" 2
 1467              		.thumb
 1468              		.syntax unified
 1469 00bc BB60     		str	r3, [r7, #8]
 1470              	.L89:
 1471              	.LBE104:
 1472              	.LBE103:
 1473              		.loc 1 1623 0 discriminator 1
 1474 00be FEE7     		b	.L89
 1475              	.L88:
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1476              		.loc 1 1624 0
 1477 00c0 124B     		ldr	r3, .L93+24
 1478 00c2 4FF08052 		mov	r2, #268435456
 1479 00c6 1A60     		str	r2, [r3]
 1480              		.syntax unified
 1481              	@ 1624 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1482 00c8 BFF34F8F 		dsb
 1483              	@ 0 "" 2
 1484              	@ 1624 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1485 00cc BFF36F8F 		isb
 1486              	@ 0 "" 2
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
ARM GAS  /tmp/ccMf91lX.s 			page 60


1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1487              		.loc 1 1649 0
 1488              		.thumb
 1489              		.syntax unified
 1490 00d0 0BE0     		b	.L92
 1491              	.L87:
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1492              		.loc 1 1631 0
 1493 00d2 0B4B     		ldr	r3, .L93+12
 1494 00d4 1A68     		ldr	r2, [r3]
 1495 00d6 0E4B     		ldr	r3, .L93+28
 1496 00d8 1B68     		ldr	r3, [r3]
 1497 00da 9A42     		cmp	r2, r3
 1498 00dc 03D1     		bne	.L91
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1499              		.loc 1 1637 0
 1500 00de 054B     		ldr	r3, .L93
 1501 00e0 0022     		movs	r2, #0
 1502 00e2 1A60     		str	r2, [r3]
 1503              		.loc 1 1649 0
 1504 00e4 01E0     		b	.L92
 1505              	.L91:
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1506              		.loc 1 1641 0
 1507 00e6 FFF7FEFF 		bl	vTaskSwitchContext
 1508              	.L92:
 1509              		.loc 1 1649 0
 1510 00ea 00BF     		nop
 1511 00ec 1037     		adds	r7, r7, #16
 1512              	.LCFI43:
 1513              		.cfi_def_cfa_offset 8
 1514 00ee BD46     		mov	sp, r7
 1515              	.LCFI44:
 1516              		.cfi_def_cfa_register 13
 1517              		@ sp needed
 1518 00f0 80BD     		pop	{r7, pc}
 1519              	.L94:
 1520 00f2 00BF     		.align	2
 1521              	.L93:
 1522 00f4 00000000 		.word	pxCurrentTCB
 1523 00f8 00000000 		.word	pxReadyTasksLists
 1524 00fc 00000000 		.word	uxTopReadyPriority
ARM GAS  /tmp/ccMf91lX.s 			page 61


 1525 0100 00000000 		.word	xSuspendedTaskList
 1526 0104 00000000 		.word	xSchedulerRunning
 1527 0108 00000000 		.word	uxSchedulerSuspended
 1528 010c 04ED00E0 		.word	-536810236
 1529 0110 00000000 		.word	uxCurrentNumberOfTasks
 1530              		.cfi_endproc
 1531              	.LFE149:
 1533              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 1534              		.align	1
 1535              		.syntax unified
 1536              		.thumb
 1537              		.thumb_func
 1538              		.fpu fpv4-sp-d16
 1540              	prvTaskIsTaskSuspended:
 1541              	.LFB150:
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1542              		.loc 1 1657 0
 1543              		.cfi_startproc
 1544              		@ args = 0, pretend = 0, frame = 24
 1545              		@ frame_needed = 1, uses_anonymous_args = 0
 1546              		@ link register save eliminated.
 1547 0000 80B4     		push	{r7}
 1548              	.LCFI45:
 1549              		.cfi_def_cfa_offset 4
 1550              		.cfi_offset 7, -4
 1551 0002 87B0     		sub	sp, sp, #28
 1552              	.LCFI46:
 1553              		.cfi_def_cfa_offset 32
 1554 0004 00AF     		add	r7, sp, #0
 1555              	.LCFI47:
 1556              		.cfi_def_cfa_register 7
 1557 0006 7860     		str	r0, [r7, #4]
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 1558              		.loc 1 1658 0
 1559 0008 0023     		movs	r3, #0
 1560 000a 7B61     		str	r3, [r7, #20]
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 1561              		.loc 1 1659 0
 1562 000c 7B68     		ldr	r3, [r7, #4]
 1563 000e 3B61     		str	r3, [r7, #16]
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
 1564              		.loc 1 1665 0
 1565 0010 7B68     		ldr	r3, [r7, #4]
 1566 0012 002B     		cmp	r3, #0
 1567 0014 0BD1     		bne	.L96
ARM GAS  /tmp/ccMf91lX.s 			page 62


 1568              	.LBB105:
 1569              	.LBB106:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1570              		.loc 2 237 0 discriminator 1
 1571              		.syntax unified
 1572              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1573 0016 4FF05003 			mov r3, #80												
 1574 001a 72B6     		cpsid i													
 1575 001c 83F31188 		msr basepri, r3											
 1576 0020 BFF36F8F 		isb														
 1577 0024 BFF34F8F 		dsb														
 1578 0028 62B6     		cpsie i													
 1579              	
 1580              	@ 0 "" 2
 1581              		.thumb
 1582              		.syntax unified
 1583 002a FB60     		str	r3, [r7, #12]
 1584              	.L97:
 1585              	.LBE106:
 1586              	.LBE105:
 1587              		.loc 1 1665 0 discriminator 1
 1588 002c FEE7     		b	.L97
 1589              	.L96:
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 1590              		.loc 1 1668 0
 1591 002e 3B69     		ldr	r3, [r7, #16]
 1592 0030 5B69     		ldr	r3, [r3, #20]
 1593 0032 0F4A     		ldr	r2, .L104
 1594 0034 9342     		cmp	r3, r2
 1595 0036 01D1     		bne	.L98
 1596              		.loc 1 1668 0 is_stmt 0 discriminator 1
 1597 0038 0123     		movs	r3, #1
 1598 003a 00E0     		b	.L99
 1599              	.L98:
 1600              		.loc 1 1668 0 discriminator 2
 1601 003c 0023     		movs	r3, #0
 1602              	.L99:
 1603              		.loc 1 1668 0 discriminator 4
 1604 003e 002B     		cmp	r3, #0
 1605 0040 0FD0     		beq	.L100
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 1606              		.loc 1 1671 0 is_stmt 1
 1607 0042 3B69     		ldr	r3, [r7, #16]
 1608 0044 9B6A     		ldr	r3, [r3, #40]
 1609 0046 0B4A     		ldr	r2, .L104+4
 1610 0048 9342     		cmp	r3, r2
 1611 004a 0AD0     		beq	.L100
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 1612              		.loc 1 1675 0
 1613 004c 3B69     		ldr	r3, [r7, #16]
ARM GAS  /tmp/ccMf91lX.s 			page 63


 1614 004e 9B6A     		ldr	r3, [r3, #40]
 1615 0050 002B     		cmp	r3, #0
 1616 0052 01D1     		bne	.L101
 1617              		.loc 1 1675 0 is_stmt 0 discriminator 1
 1618 0054 0123     		movs	r3, #1
 1619 0056 00E0     		b	.L102
 1620              	.L101:
 1621              		.loc 1 1675 0 discriminator 2
 1622 0058 0023     		movs	r3, #0
 1623              	.L102:
 1624              		.loc 1 1675 0 discriminator 4
 1625 005a 002B     		cmp	r3, #0
 1626 005c 01D0     		beq	.L100
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 1627              		.loc 1 1677 0 is_stmt 1
 1628 005e 0123     		movs	r3, #1
 1629 0060 7B61     		str	r3, [r7, #20]
 1630              	.L100:
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 1631              		.loc 1 1694 0
 1632 0062 7B69     		ldr	r3, [r7, #20]
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1633              		.loc 1 1695 0
 1634 0064 1846     		mov	r0, r3
 1635 0066 1C37     		adds	r7, r7, #28
 1636              	.LCFI48:
 1637              		.cfi_def_cfa_offset 4
 1638 0068 BD46     		mov	sp, r7
 1639              	.LCFI49:
 1640              		.cfi_def_cfa_register 13
 1641              		@ sp needed
 1642 006a 5DF8047B 		ldr	r7, [sp], #4
 1643              	.LCFI50:
 1644              		.cfi_restore 7
 1645              		.cfi_def_cfa_offset 0
 1646 006e 7047     		bx	lr
 1647              	.L105:
 1648              		.align	2
 1649              	.L104:
 1650 0070 00000000 		.word	xSuspendedTaskList
ARM GAS  /tmp/ccMf91lX.s 			page 64


 1651 0074 00000000 		.word	xPendingReadyList
 1652              		.cfi_endproc
 1653              	.LFE150:
 1655              		.section	.text.vTaskResume,"ax",%progbits
 1656              		.align	1
 1657              		.global	vTaskResume
 1658              		.syntax unified
 1659              		.thumb
 1660              		.thumb_func
 1661              		.fpu fpv4-sp-d16
 1663              	vTaskResume:
 1664              	.LFB151:
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1665              		.loc 1 1703 0
 1666              		.cfi_startproc
 1667              		@ args = 0, pretend = 0, frame = 16
 1668              		@ frame_needed = 1, uses_anonymous_args = 0
 1669 0000 80B5     		push	{r7, lr}
 1670              	.LCFI51:
 1671              		.cfi_def_cfa_offset 8
 1672              		.cfi_offset 7, -8
 1673              		.cfi_offset 14, -4
 1674 0002 84B0     		sub	sp, sp, #16
 1675              	.LCFI52:
 1676              		.cfi_def_cfa_offset 24
 1677 0004 00AF     		add	r7, sp, #0
 1678              	.LCFI53:
 1679              		.cfi_def_cfa_register 7
 1680 0006 7860     		str	r0, [r7, #4]
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1681              		.loc 1 1704 0
 1682 0008 7B68     		ldr	r3, [r7, #4]
 1683 000a FB60     		str	r3, [r7, #12]
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 1684              		.loc 1 1707 0
 1685 000c 7B68     		ldr	r3, [r7, #4]
 1686 000e 002B     		cmp	r3, #0
 1687 0010 0BD1     		bne	.L107
 1688              	.LBB107:
 1689              	.LBB108:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1690              		.loc 2 237 0 discriminator 1
 1691              		.syntax unified
 1692              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1693 0012 4FF05003 			mov r3, #80												
 1694 0016 72B6     		cpsid i													
 1695 0018 83F31188 		msr basepri, r3											
 1696 001c BFF36F8F 		isb														
ARM GAS  /tmp/ccMf91lX.s 			page 65


 1697 0020 BFF34F8F 		dsb														
 1698 0024 62B6     		cpsie i													
 1699              	
 1700              	@ 0 "" 2
 1701              		.thumb
 1702              		.syntax unified
 1703 0026 BB60     		str	r3, [r7, #8]
 1704              	.L108:
 1705              	.LBE108:
 1706              	.LBE107:
 1707              		.loc 1 1707 0 discriminator 1
 1708 0028 FEE7     		b	.L108
 1709              	.L107:
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 1710              		.loc 1 1711 0
 1711 002a FB68     		ldr	r3, [r7, #12]
 1712 002c 002B     		cmp	r3, #0
 1713 002e 39D0     		beq	.L111
 1714              		.loc 1 1711 0 is_stmt 0 discriminator 1
 1715 0030 1E4B     		ldr	r3, .L112
 1716 0032 1B68     		ldr	r3, [r3]
 1717 0034 FA68     		ldr	r2, [r7, #12]
 1718 0036 9A42     		cmp	r2, r3
 1719 0038 34D0     		beq	.L111
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1720              		.loc 1 1713 0 is_stmt 1
 1721 003a FFF7FEFF 		bl	vPortEnterCritical
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 1722              		.loc 1 1715 0
 1723 003e F868     		ldr	r0, [r7, #12]
 1724 0040 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1725 0044 0346     		mov	r3, r0
 1726 0046 002B     		cmp	r3, #0
 1727 0048 2AD0     		beq	.L110
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* As we are in a critical section we can access the ready
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					lists even if the scheduler is suspended. */
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 1728              		.loc 1 1721 0
 1729 004a FB68     		ldr	r3, [r7, #12]
 1730 004c 0433     		adds	r3, r3, #4
 1731 004e 1846     		mov	r0, r3
 1732 0050 FFF7FEFF 		bl	uxListRemove
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1733              		.loc 1 1722 0
 1734 0054 FB68     		ldr	r3, [r7, #12]
 1735 0056 DB6A     		ldr	r3, [r3, #44]
 1736 0058 0122     		movs	r2, #1
 1737 005a 9A40     		lsls	r2, r2, r3
 1738 005c 144B     		ldr	r3, .L112+4
ARM GAS  /tmp/ccMf91lX.s 			page 66


 1739 005e 1B68     		ldr	r3, [r3]
 1740 0060 1343     		orrs	r3, r3, r2
 1741 0062 134A     		ldr	r2, .L112+4
 1742 0064 1360     		str	r3, [r2]
 1743 0066 FB68     		ldr	r3, [r7, #12]
 1744 0068 DA6A     		ldr	r2, [r3, #44]
 1745 006a 1346     		mov	r3, r2
 1746 006c 9B00     		lsls	r3, r3, #2
 1747 006e 1344     		add	r3, r3, r2
 1748 0070 9B00     		lsls	r3, r3, #2
 1749 0072 104A     		ldr	r2, .L112+8
 1750 0074 1A44     		add	r2, r2, r3
 1751 0076 FB68     		ldr	r3, [r7, #12]
 1752 0078 0433     		adds	r3, r3, #4
 1753 007a 1946     		mov	r1, r3
 1754 007c 1046     		mov	r0, r2
 1755 007e FFF7FEFF 		bl	vListInsertEnd
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* We may have just resumed a higher priority task. */
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1756              		.loc 1 1725 0
 1757 0082 FB68     		ldr	r3, [r7, #12]
 1758 0084 DA6A     		ldr	r2, [r3, #44]
 1759 0086 094B     		ldr	r3, .L112
 1760 0088 1B68     		ldr	r3, [r3]
 1761 008a DB6A     		ldr	r3, [r3, #44]
 1762 008c 9A42     		cmp	r2, r3
 1763 008e 07D3     		bcc	.L110
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 1764              		.loc 1 1730 0
 1765 0090 094B     		ldr	r3, .L112+12
 1766 0092 4FF08052 		mov	r2, #268435456
 1767 0096 1A60     		str	r2, [r3]
 1768              		.syntax unified
 1769              	@ 1730 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1770 0098 BFF34F8F 		dsb
 1771              	@ 0 "" 2
 1772              	@ 1730 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1773 009c BFF36F8F 		isb
 1774              	@ 0 "" 2
 1775              		.thumb
 1776              		.syntax unified
 1777              	.L110:
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/ccMf91lX.s 			page 67


1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1778              		.loc 1 1742 0
 1779 00a0 FFF7FEFF 		bl	vPortExitCritical
 1780              	.L111:
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1781              		.loc 1 1748 0
 1782 00a4 00BF     		nop
 1783 00a6 1037     		adds	r7, r7, #16
 1784              	.LCFI54:
 1785              		.cfi_def_cfa_offset 8
 1786 00a8 BD46     		mov	sp, r7
 1787              	.LCFI55:
 1788              		.cfi_def_cfa_register 13
 1789              		@ sp needed
 1790 00aa 80BD     		pop	{r7, pc}
 1791              	.L113:
 1792              		.align	2
 1793              	.L112:
 1794 00ac 00000000 		.word	pxCurrentTCB
 1795 00b0 00000000 		.word	uxTopReadyPriority
 1796 00b4 00000000 		.word	pxReadyTasksLists
 1797 00b8 04ED00E0 		.word	-536810236
 1798              		.cfi_endproc
 1799              	.LFE151:
 1801              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1802              		.align	1
 1803              		.global	xTaskResumeFromISR
 1804              		.syntax unified
 1805              		.thumb
 1806              		.thumb_func
 1807              		.fpu fpv4-sp-d16
 1809              	xTaskResumeFromISR:
 1810              	.LFB152:
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1811              		.loc 1 1757 0
 1812              		.cfi_startproc
 1813              		@ args = 0, pretend = 0, frame = 40
 1814              		@ frame_needed = 1, uses_anonymous_args = 0
 1815 0000 80B5     		push	{r7, lr}
 1816              	.LCFI56:
 1817              		.cfi_def_cfa_offset 8
 1818              		.cfi_offset 7, -8
 1819              		.cfi_offset 14, -4
ARM GAS  /tmp/ccMf91lX.s 			page 68


 1820 0002 8AB0     		sub	sp, sp, #40
 1821              	.LCFI57:
 1822              		.cfi_def_cfa_offset 48
 1823 0004 00AF     		add	r7, sp, #0
 1824              	.LCFI58:
 1825              		.cfi_def_cfa_register 7
 1826 0006 7860     		str	r0, [r7, #4]
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1827              		.loc 1 1758 0
 1828 0008 0023     		movs	r3, #0
 1829 000a 7B62     		str	r3, [r7, #36]
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1830              		.loc 1 1759 0
 1831 000c 7B68     		ldr	r3, [r7, #4]
 1832 000e 3B62     		str	r3, [r7, #32]
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 1833              		.loc 1 1762 0
 1834 0010 7B68     		ldr	r3, [r7, #4]
 1835 0012 002B     		cmp	r3, #0
 1836 0014 0BD1     		bne	.L115
 1837              	.LBB109:
 1838              	.LBB110:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1839              		.loc 2 237 0 discriminator 1
 1840              		.syntax unified
 1841              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1842 0016 4FF05003 			mov r3, #80												
 1843 001a 72B6     		cpsid i													
 1844 001c 83F31188 		msr basepri, r3											
 1845 0020 BFF36F8F 		isb														
 1846 0024 BFF34F8F 		dsb														
 1847 0028 62B6     		cpsie i													
 1848              	
 1849              	@ 0 "" 2
 1850              		.thumb
 1851              		.syntax unified
 1852 002a BB61     		str	r3, [r7, #24]
 1853              	.L116:
 1854              	.LBE110:
 1855              	.LBE109:
 1856              		.loc 1 1762 0 discriminator 1
 1857 002c FEE7     		b	.L116
 1858              	.L115:
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
ARM GAS  /tmp/ccMf91lX.s 			page 69


1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1859              		.loc 1 1780 0
 1860 002e FFF7FEFF 		bl	vPortValidateInterruptPriority
 1861              	.LBB111:
 1862              	.LBB112:
 255:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1863              		.loc 2 255 0
 1864              		.syntax unified
 1865              	@ 255 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1866 0032 EFF31182 			mrs r2, basepri											
 1867 0036 4FF05003 		mov r3, #80												
 1868 003a 72B6     		cpsid i													
 1869 003c 83F31188 		msr basepri, r3											
 1870 0040 BFF36F8F 		isb														
 1871 0044 BFF34F8F 		dsb														
 1872 0048 62B6     		cpsie i													
 1873              	
 1874              	@ 0 "" 2
 1875              		.thumb
 1876              		.syntax unified
 1877 004a 7A61     		str	r2, [r7, #20]
 1878 004c 3B61     		str	r3, [r7, #16]
 269:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 1879              		.loc 2 269 0
 1880 004e 7B69     		ldr	r3, [r7, #20]
 1881              	.LBE112:
 1882              	.LBE111:
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1883              		.loc 1 1782 0
 1884 0050 FB61     		str	r3, [r7, #28]
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 1885              		.loc 1 1784 0
 1886 0052 386A     		ldr	r0, [r7, #32]
 1887 0054 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1888 0058 0346     		mov	r3, r0
 1889 005a 002B     		cmp	r3, #0
 1890 005c 2FD0     		beq	.L118
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 1891              		.loc 1 1789 0
 1892 005e 1D4B     		ldr	r3, .L123
 1893 0060 1B68     		ldr	r3, [r3]
 1894 0062 002B     		cmp	r3, #0
 1895 0064 25D1     		bne	.L119
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
ARM GAS  /tmp/ccMf91lX.s 			page 70


1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1896              		.loc 1 1793 0
 1897 0066 3B6A     		ldr	r3, [r7, #32]
 1898 0068 DA6A     		ldr	r2, [r3, #44]
 1899 006a 1B4B     		ldr	r3, .L123+4
 1900 006c 1B68     		ldr	r3, [r3]
 1901 006e DB6A     		ldr	r3, [r3, #44]
 1902 0070 9A42     		cmp	r2, r3
 1903 0072 01D3     		bcc	.L120
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 1904              		.loc 1 1795 0
 1905 0074 0123     		movs	r3, #1
 1906 0076 7B62     		str	r3, [r7, #36]
 1907              	.L120:
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1908              		.loc 1 1802 0
 1909 0078 3B6A     		ldr	r3, [r7, #32]
 1910 007a 0433     		adds	r3, r3, #4
 1911 007c 1846     		mov	r0, r3
 1912 007e FFF7FEFF 		bl	uxListRemove
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1913              		.loc 1 1803 0
 1914 0082 3B6A     		ldr	r3, [r7, #32]
 1915 0084 DB6A     		ldr	r3, [r3, #44]
 1916 0086 0122     		movs	r2, #1
 1917 0088 9A40     		lsls	r2, r2, r3
 1918 008a 144B     		ldr	r3, .L123+8
 1919 008c 1B68     		ldr	r3, [r3]
 1920 008e 1343     		orrs	r3, r3, r2
 1921 0090 124A     		ldr	r2, .L123+8
 1922 0092 1360     		str	r3, [r2]
 1923 0094 3B6A     		ldr	r3, [r7, #32]
 1924 0096 DA6A     		ldr	r2, [r3, #44]
 1925 0098 1346     		mov	r3, r2
 1926 009a 9B00     		lsls	r3, r3, #2
 1927 009c 1344     		add	r3, r3, r2
 1928 009e 9B00     		lsls	r3, r3, #2
 1929 00a0 0F4A     		ldr	r2, .L123+12
 1930 00a2 1A44     		add	r2, r2, r3
 1931 00a4 3B6A     		ldr	r3, [r7, #32]
 1932 00a6 0433     		adds	r3, r3, #4
 1933 00a8 1946     		mov	r1, r3
 1934 00aa 1046     		mov	r0, r2
 1935 00ac FFF7FEFF 		bl	vListInsertEnd
 1936 00b0 05E0     		b	.L118
 1937              	.L119:
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
ARM GAS  /tmp/ccMf91lX.s 			page 71


1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1938              		.loc 1 1810 0
 1939 00b2 3B6A     		ldr	r3, [r7, #32]
 1940 00b4 1833     		adds	r3, r3, #24
 1941 00b6 1946     		mov	r1, r3
 1942 00b8 0A48     		ldr	r0, .L123+16
 1943 00ba FFF7FEFF 		bl	vListInsertEnd
 1944              	.L118:
 1945 00be FB69     		ldr	r3, [r7, #28]
 1946 00c0 FB60     		str	r3, [r7, #12]
 1947              	.LBB113:
 1948              	.LBB114:
 1949              		.loc 2 275 0
 1950 00c2 FB68     		ldr	r3, [r7, #12]
 1951              		.syntax unified
 1952              	@ 275 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1953 00c4 83F31188 			msr basepri, r3	
 1954              	@ 0 "" 2
 1955              		.thumb
 1956              		.syntax unified
 1957              	.LBE114:
 1958              	.LBE113:
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
 1959              		.loc 1 1820 0
 1960 00c8 7B6A     		ldr	r3, [r7, #36]
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1961              		.loc 1 1821 0
 1962 00ca 1846     		mov	r0, r3
 1963 00cc 2837     		adds	r7, r7, #40
 1964              	.LCFI59:
 1965              		.cfi_def_cfa_offset 8
 1966 00ce BD46     		mov	sp, r7
 1967              	.LCFI60:
 1968              		.cfi_def_cfa_register 13
 1969              		@ sp needed
 1970 00d0 80BD     		pop	{r7, pc}
 1971              	.L124:
 1972 00d2 00BF     		.align	2
 1973              	.L123:
 1974 00d4 00000000 		.word	uxSchedulerSuspended
 1975 00d8 00000000 		.word	pxCurrentTCB
 1976 00dc 00000000 		.word	uxTopReadyPriority
 1977 00e0 00000000 		.word	pxReadyTasksLists
 1978 00e4 00000000 		.word	xPendingReadyList
 1979              		.cfi_endproc
 1980              	.LFE152:
ARM GAS  /tmp/ccMf91lX.s 			page 72


 1982              		.section	.rodata
 1983              		.align	2
 1984              	.LC0:
 1985 0000 49444C45 		.ascii	"IDLE\000"
 1985      00
 1986              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1987              		.align	1
 1988              		.global	vTaskStartScheduler
 1989              		.syntax unified
 1990              		.thumb
 1991              		.thumb_func
 1992              		.fpu fpv4-sp-d16
 1994              	vTaskStartScheduler:
 1995              	.LFB153:
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 1996              		.loc 1 1827 0
 1997              		.cfi_startproc
 1998              		@ args = 0, pretend = 0, frame = 16
 1999              		@ frame_needed = 1, uses_anonymous_args = 0
 2000 0000 80B5     		push	{r7, lr}
 2001              	.LCFI61:
 2002              		.cfi_def_cfa_offset 8
 2003              		.cfi_offset 7, -8
 2004              		.cfi_offset 14, -4
 2005 0002 86B0     		sub	sp, sp, #24
 2006              	.LCFI62:
 2007              		.cfi_def_cfa_offset 32
 2008 0004 02AF     		add	r7, sp, #8
 2009              	.LCFI63:
 2010              		.cfi_def_cfa 7, 24
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												"IDLE",
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL,
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccMf91lX.s 			page 73


1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
 2011              		.loc 1 1860 0
 2012 0006 1D4B     		ldr	r3, .L130
 2013 0008 0193     		str	r3, [sp, #4]
 2014 000a 0023     		movs	r3, #0
 2015 000c 0093     		str	r3, [sp]
 2016 000e 0023     		movs	r3, #0
 2017 0010 8022     		movs	r2, #128
 2018 0012 1B49     		ldr	r1, .L130+4
 2019 0014 1B48     		ldr	r0, .L130+8
 2020 0016 FFF7FEFF 		bl	xTaskCreate
 2021 001a F860     		str	r0, [r7, #12]
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 2022              		.loc 1 1881 0
 2023 001c FB68     		ldr	r3, [r7, #12]
 2024 001e 012B     		cmp	r3, #1
 2025 0020 17D1     		bne	.L126
 2026              	.LBB115:
 2027              	.LBB116:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2028              		.loc 2 237 0
 2029              		.syntax unified
 2030              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2031 0022 4FF05003 			mov r3, #80												
 2032 0026 72B6     		cpsid i													
 2033 0028 83F31188 		msr basepri, r3											
 2034 002c BFF36F8F 		isb														
ARM GAS  /tmp/ccMf91lX.s 			page 74


 2035 0030 BFF34F8F 		dsb														
 2036 0034 62B6     		cpsie i													
 2037              	
 2038              	@ 0 "" 2
 2039              		.thumb
 2040              		.syntax unified
 2041 0036 BB60     		str	r3, [r7, #8]
 2042              	.LBE116:
 2043              	.LBE115:
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 2044              		.loc 1 1898 0
 2045 0038 134B     		ldr	r3, .L130+12
 2046 003a 4FF0FF32 		mov	r2, #-1
 2047 003e 1A60     		str	r2, [r3]
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2048              		.loc 1 1899 0
 2049 0040 124B     		ldr	r3, .L130+16
 2050 0042 0122     		movs	r2, #1
 2051 0044 1A60     		str	r2, [r3]
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 2052              		.loc 1 1900 0
 2053 0046 124B     		ldr	r3, .L130+20
 2054 0048 0022     		movs	r2, #0
 2055 004a 1A60     		str	r2, [r3]
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base. */
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 2056              		.loc 1 1909 0
 2057 004c FFF7FEFF 		bl	xPortStartScheduler
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccMf91lX.s 			page 75


1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2058              		.loc 1 1930 0
 2059 0050 0FE0     		b	.L129
 2060              	.L126:
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2061              		.loc 1 1924 0
 2062 0052 FB68     		ldr	r3, [r7, #12]
 2063 0054 B3F1FF3F 		cmp	r3, #-1
 2064 0058 0BD1     		bne	.L129
 2065              	.LBB117:
 2066              	.LBB118:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2067              		.loc 2 237 0 discriminator 1
 2068              		.syntax unified
 2069              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2070 005a 4FF05003 			mov r3, #80												
 2071 005e 72B6     		cpsid i													
 2072 0060 83F31188 		msr basepri, r3											
 2073 0064 BFF36F8F 		isb														
 2074 0068 BFF34F8F 		dsb														
 2075 006c 62B6     		cpsie i													
 2076              	
 2077              	@ 0 "" 2
 2078              		.thumb
 2079              		.syntax unified
 2080 006e 7B60     		str	r3, [r7, #4]
 2081              	.L128:
 2082              	.LBE118:
 2083              	.LBE117:
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2084              		.loc 1 1924 0 discriminator 2
 2085 0070 FEE7     		b	.L128
 2086              	.L129:
 2087              		.loc 1 1930 0
 2088 0072 00BF     		nop
 2089 0074 1037     		adds	r7, r7, #16
 2090              	.LCFI64:
 2091              		.cfi_def_cfa_offset 8
 2092 0076 BD46     		mov	sp, r7
 2093              	.LCFI65:
 2094              		.cfi_def_cfa_register 13
 2095              		@ sp needed
 2096 0078 80BD     		pop	{r7, pc}
ARM GAS  /tmp/ccMf91lX.s 			page 76


 2097              	.L131:
 2098 007a 00BF     		.align	2
 2099              	.L130:
 2100 007c 00000000 		.word	xIdleTaskHandle
 2101 0080 00000000 		.word	.LC0
 2102 0084 00000000 		.word	prvIdleTask
 2103 0088 00000000 		.word	xNextTaskUnblockTime
 2104 008c 00000000 		.word	xSchedulerRunning
 2105 0090 00000000 		.word	xTickCount
 2106              		.cfi_endproc
 2107              	.LFE153:
 2109              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2110              		.align	1
 2111              		.global	vTaskEndScheduler
 2112              		.syntax unified
 2113              		.thumb
 2114              		.thumb_func
 2115              		.fpu fpv4-sp-d16
 2117              	vTaskEndScheduler:
 2118              	.LFB154:
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2119              		.loc 1 1934 0
 2120              		.cfi_startproc
 2121              		@ args = 0, pretend = 0, frame = 8
 2122              		@ frame_needed = 1, uses_anonymous_args = 0
 2123 0000 80B5     		push	{r7, lr}
 2124              	.LCFI66:
 2125              		.cfi_def_cfa_offset 8
 2126              		.cfi_offset 7, -8
 2127              		.cfi_offset 14, -4
 2128 0002 82B0     		sub	sp, sp, #8
 2129              	.LCFI67:
 2130              		.cfi_def_cfa_offset 16
 2131 0004 00AF     		add	r7, sp, #0
 2132              	.LCFI68:
 2133              		.cfi_def_cfa_register 7
 2134              	.LBB119:
 2135              	.LBB120:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2136              		.loc 2 237 0
 2137              		.syntax unified
 2138              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2139 0006 4FF05003 			mov r3, #80												
 2140 000a 72B6     		cpsid i													
 2141 000c 83F31188 		msr basepri, r3											
 2142 0010 BFF36F8F 		isb														
 2143 0014 BFF34F8F 		dsb														
 2144 0018 62B6     		cpsie i													
 2145              	
 2146              	@ 0 "" 2
 2147              		.thumb
 2148              		.syntax unified
 2149 001a 7B60     		str	r3, [r7, #4]
 2150              	.LBE120:
ARM GAS  /tmp/ccMf91lX.s 			page 77


 2151              	.LBE119:
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 2152              		.loc 1 1939 0
 2153 001c 044B     		ldr	r3, .L133
 2154 001e 0022     		movs	r2, #0
 2155 0020 1A60     		str	r2, [r3]
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 2156              		.loc 1 1940 0
 2157 0022 FFF7FEFF 		bl	vPortEndScheduler
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2158              		.loc 1 1941 0
 2159 0026 00BF     		nop
 2160 0028 0837     		adds	r7, r7, #8
 2161              	.LCFI69:
 2162              		.cfi_def_cfa_offset 8
 2163 002a BD46     		mov	sp, r7
 2164              	.LCFI70:
 2165              		.cfi_def_cfa_register 13
 2166              		@ sp needed
 2167 002c 80BD     		pop	{r7, pc}
 2168              	.L134:
 2169 002e 00BF     		.align	2
 2170              	.L133:
 2171 0030 00000000 		.word	xSchedulerRunning
 2172              		.cfi_endproc
 2173              	.LFE154:
 2175              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2176              		.align	1
 2177              		.global	vTaskSuspendAll
 2178              		.syntax unified
 2179              		.thumb
 2180              		.thumb_func
 2181              		.fpu fpv4-sp-d16
 2183              	vTaskSuspendAll:
 2184              	.LFB155:
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2185              		.loc 1 1945 0
 2186              		.cfi_startproc
 2187              		@ args = 0, pretend = 0, frame = 0
 2188              		@ frame_needed = 1, uses_anonymous_args = 0
 2189              		@ link register save eliminated.
 2190 0000 80B4     		push	{r7}
 2191              	.LCFI71:
 2192              		.cfi_def_cfa_offset 4
 2193              		.cfi_offset 7, -4
 2194 0002 00AF     		add	r7, sp, #0
 2195              	.LCFI72:
 2196              		.cfi_def_cfa_register 7
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
ARM GAS  /tmp/ccMf91lX.s 			page 78


1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
 2197              		.loc 1 1950 0
 2198 0004 044B     		ldr	r3, .L136
 2199 0006 1B68     		ldr	r3, [r3]
 2200 0008 0133     		adds	r3, r3, #1
 2201 000a 034A     		ldr	r2, .L136
 2202 000c 1360     		str	r3, [r2]
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2203              		.loc 1 1951 0
 2204 000e 00BF     		nop
 2205 0010 BD46     		mov	sp, r7
 2206              	.LCFI73:
 2207              		.cfi_def_cfa_register 13
 2208              		@ sp needed
 2209 0012 5DF8047B 		ldr	r7, [sp], #4
 2210              	.LCFI74:
 2211              		.cfi_restore 7
 2212              		.cfi_def_cfa_offset 0
 2213 0016 7047     		bx	lr
 2214              	.L137:
 2215              		.align	2
 2216              	.L136:
 2217 0018 00000000 		.word	uxSchedulerSuspended
 2218              		.cfi_endproc
 2219              	.LFE155:
 2221              		.section	.text.xTaskResumeAll,"ax",%progbits
 2222              		.align	1
 2223              		.global	xTaskResumeAll
 2224              		.syntax unified
 2225              		.thumb
 2226              		.thumb_func
 2227              		.fpu fpv4-sp-d16
 2229              	xTaskResumeAll:
 2230              	.LFB156:
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
ARM GAS  /tmp/ccMf91lX.s 			page 79


1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2231              		.loc 1 2018 0
 2232              		.cfi_startproc
 2233              		@ args = 0, pretend = 0, frame = 16
 2234              		@ frame_needed = 1, uses_anonymous_args = 0
 2235 0000 80B5     		push	{r7, lr}
 2236              	.LCFI75:
 2237              		.cfi_def_cfa_offset 8
 2238              		.cfi_offset 7, -8
 2239              		.cfi_offset 14, -4
 2240 0002 84B0     		sub	sp, sp, #16
 2241              	.LCFI76:
ARM GAS  /tmp/ccMf91lX.s 			page 80


 2242              		.cfi_def_cfa_offset 24
 2243 0004 00AF     		add	r7, sp, #0
 2244              	.LCFI77:
 2245              		.cfi_def_cfa_register 7
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2246              		.loc 1 2019 0
 2247 0006 0023     		movs	r3, #0
 2248 0008 FB60     		str	r3, [r7, #12]
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2249              		.loc 1 2020 0
 2250 000a 0023     		movs	r3, #0
 2251 000c BB60     		str	r3, [r7, #8]
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 2252              		.loc 1 2024 0
 2253 000e 424B     		ldr	r3, .L149
 2254 0010 1B68     		ldr	r3, [r3]
 2255 0012 002B     		cmp	r3, #0
 2256 0014 0BD1     		bne	.L139
 2257              	.LBB121:
 2258              	.LBB122:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2259              		.loc 2 237 0 discriminator 1
 2260              		.syntax unified
 2261              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2262 0016 4FF05003 			mov r3, #80												
 2263 001a 72B6     		cpsid i													
 2264 001c 83F31188 		msr basepri, r3											
 2265 0020 BFF36F8F 		isb														
 2266 0024 BFF34F8F 		dsb														
 2267 0028 62B6     		cpsie i													
 2268              	
 2269              	@ 0 "" 2
 2270              		.thumb
 2271              		.syntax unified
 2272 002a 3B60     		str	r3, [r7]
 2273              	.L140:
 2274              	.LBE122:
 2275              	.LBE121:
 2276              		.loc 1 2024 0 discriminator 1
 2277 002c FEE7     		b	.L140
 2278              	.L139:
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 2279              		.loc 1 2031 0
 2280 002e FFF7FEFF 		bl	vPortEnterCritical
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
 2281              		.loc 1 2033 0
 2282 0032 394B     		ldr	r3, .L149
ARM GAS  /tmp/ccMf91lX.s 			page 81


 2283 0034 1B68     		ldr	r3, [r3]
 2284 0036 013B     		subs	r3, r3, #1
 2285 0038 374A     		ldr	r2, .L149
 2286 003a 1360     		str	r3, [r2]
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2287              		.loc 1 2035 0
 2288 003c 364B     		ldr	r3, .L149
 2289 003e 1B68     		ldr	r3, [r3]
 2290 0040 002B     		cmp	r3, #0
 2291 0042 61D1     		bne	.L141
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2292              		.loc 1 2037 0
 2293 0044 354B     		ldr	r3, .L149+4
 2294 0046 1B68     		ldr	r3, [r3]
 2295 0048 002B     		cmp	r3, #0
 2296 004a 5DD0     		beq	.L141
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2297              		.loc 1 2041 0
 2298 004c 2EE0     		b	.L142
 2299              	.L143:
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 2300              		.loc 1 2043 0
 2301 004e 344B     		ldr	r3, .L149+8
 2302 0050 DB68     		ldr	r3, [r3, #12]
 2303 0052 DB68     		ldr	r3, [r3, #12]
 2304 0054 FB60     		str	r3, [r7, #12]
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2305              		.loc 1 2044 0
 2306 0056 FB68     		ldr	r3, [r7, #12]
 2307 0058 1833     		adds	r3, r3, #24
 2308 005a 1846     		mov	r0, r3
 2309 005c FFF7FEFF 		bl	uxListRemove
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2310              		.loc 1 2045 0
 2311 0060 FB68     		ldr	r3, [r7, #12]
 2312 0062 0433     		adds	r3, r3, #4
 2313 0064 1846     		mov	r0, r3
 2314 0066 FFF7FEFF 		bl	uxListRemove
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2315              		.loc 1 2046 0
 2316 006a FB68     		ldr	r3, [r7, #12]
 2317 006c DB6A     		ldr	r3, [r3, #44]
 2318 006e 0122     		movs	r2, #1
 2319 0070 9A40     		lsls	r2, r2, r3
 2320 0072 2C4B     		ldr	r3, .L149+12
 2321 0074 1B68     		ldr	r3, [r3]
 2322 0076 1343     		orrs	r3, r3, r2
 2323 0078 2A4A     		ldr	r2, .L149+12
 2324 007a 1360     		str	r3, [r2]
 2325 007c FB68     		ldr	r3, [r7, #12]
 2326 007e DA6A     		ldr	r2, [r3, #44]
ARM GAS  /tmp/ccMf91lX.s 			page 82


 2327 0080 1346     		mov	r3, r2
 2328 0082 9B00     		lsls	r3, r3, #2
 2329 0084 1344     		add	r3, r3, r2
 2330 0086 9B00     		lsls	r3, r3, #2
 2331 0088 274A     		ldr	r2, .L149+16
 2332 008a 1A44     		add	r2, r2, r3
 2333 008c FB68     		ldr	r3, [r7, #12]
 2334 008e 0433     		adds	r3, r3, #4
 2335 0090 1946     		mov	r1, r3
 2336 0092 1046     		mov	r0, r2
 2337 0094 FFF7FEFF 		bl	vListInsertEnd
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2338              		.loc 1 2050 0
 2339 0098 FB68     		ldr	r3, [r7, #12]
 2340 009a DA6A     		ldr	r2, [r3, #44]
 2341 009c 234B     		ldr	r3, .L149+20
 2342 009e 1B68     		ldr	r3, [r3]
 2343 00a0 DB6A     		ldr	r3, [r3, #44]
 2344 00a2 9A42     		cmp	r2, r3
 2345 00a4 02D3     		bcc	.L142
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
 2346              		.loc 1 2052 0
 2347 00a6 224B     		ldr	r3, .L149+24
 2348 00a8 0122     		movs	r2, #1
 2349 00aa 1A60     		str	r2, [r3]
 2350              	.L142:
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2351              		.loc 1 2041 0
 2352 00ac 1C4B     		ldr	r3, .L149+8
 2353 00ae 1B68     		ldr	r3, [r3]
 2354 00b0 002B     		cmp	r3, #0
 2355 00b2 CCD1     		bne	.L143
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
 2356              		.loc 1 2060 0
 2357 00b4 FB68     		ldr	r3, [r7, #12]
 2358 00b6 002B     		cmp	r3, #0
 2359 00b8 01D0     		beq	.L144
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
 2360              		.loc 1 2068 0
ARM GAS  /tmp/ccMf91lX.s 			page 83


 2361 00ba FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2362              	.L144:
 2363              	.LBB123:
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 2364              		.loc 1 2076 0
 2365 00be 1D4B     		ldr	r3, .L149+28
 2366 00c0 1B68     		ldr	r3, [r3]
 2367 00c2 7B60     		str	r3, [r7, #4]
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
 2368              		.loc 1 2078 0
 2369 00c4 7B68     		ldr	r3, [r7, #4]
 2370 00c6 002B     		cmp	r3, #0
 2371 00c8 10D0     		beq	.L145
 2372              	.L147:
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
 2373              		.loc 1 2082 0
 2374 00ca FFF7FEFF 		bl	xTaskIncrementTick
 2375 00ce 0346     		mov	r3, r0
 2376 00d0 002B     		cmp	r3, #0
 2377 00d2 02D0     		beq	.L146
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
 2378              		.loc 1 2084 0
 2379 00d4 164B     		ldr	r3, .L149+24
 2380 00d6 0122     		movs	r2, #1
 2381 00d8 1A60     		str	r2, [r3]
 2382              	.L146:
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
 2383              		.loc 1 2090 0
 2384 00da 7B68     		ldr	r3, [r7, #4]
 2385 00dc 013B     		subs	r3, r3, #1
 2386 00de 7B60     		str	r3, [r7, #4]
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 2387              		.loc 1 2091 0
 2388 00e0 7B68     		ldr	r3, [r7, #4]
 2389 00e2 002B     		cmp	r3, #0
 2390 00e4 F1D1     		bne	.L147
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
 2391              		.loc 1 2093 0
 2392 00e6 134B     		ldr	r3, .L149+28
ARM GAS  /tmp/ccMf91lX.s 			page 84


 2393 00e8 0022     		movs	r2, #0
 2394 00ea 1A60     		str	r2, [r3]
 2395              	.L145:
 2396              	.LBE123:
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
 2397              		.loc 1 2101 0
 2398 00ec 104B     		ldr	r3, .L149+24
 2399 00ee 1B68     		ldr	r3, [r3]
 2400 00f0 002B     		cmp	r3, #0
 2401 00f2 09D0     		beq	.L141
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
 2402              		.loc 1 2105 0
 2403 00f4 0123     		movs	r3, #1
 2404 00f6 BB60     		str	r3, [r7, #8]
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 2405              		.loc 1 2108 0
 2406 00f8 0F4B     		ldr	r3, .L149+32
 2407 00fa 4FF08052 		mov	r2, #268435456
 2408 00fe 1A60     		str	r2, [r3]
 2409              		.syntax unified
 2410              	@ 2108 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2411 0100 BFF34F8F 		dsb
 2412              	@ 0 "" 2
 2413              	@ 2108 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2414 0104 BFF36F8F 		isb
 2415              	@ 0 "" 2
 2416              		.thumb
 2417              		.syntax unified
 2418              	.L141:
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 2419              		.loc 1 2121 0
 2420 0108 FFF7FEFF 		bl	vPortExitCritical
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccMf91lX.s 			page 85


2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
 2421              		.loc 1 2123 0
 2422 010c BB68     		ldr	r3, [r7, #8]
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2423              		.loc 1 2124 0
 2424 010e 1846     		mov	r0, r3
 2425 0110 1037     		adds	r7, r7, #16
 2426              	.LCFI78:
 2427              		.cfi_def_cfa_offset 8
 2428 0112 BD46     		mov	sp, r7
 2429              	.LCFI79:
 2430              		.cfi_def_cfa_register 13
 2431              		@ sp needed
 2432 0114 80BD     		pop	{r7, pc}
 2433              	.L150:
 2434 0116 00BF     		.align	2
 2435              	.L149:
 2436 0118 00000000 		.word	uxSchedulerSuspended
 2437 011c 00000000 		.word	uxCurrentNumberOfTasks
 2438 0120 00000000 		.word	xPendingReadyList
 2439 0124 00000000 		.word	uxTopReadyPriority
 2440 0128 00000000 		.word	pxReadyTasksLists
 2441 012c 00000000 		.word	pxCurrentTCB
 2442 0130 00000000 		.word	xYieldPending
 2443 0134 00000000 		.word	uxPendedTicks
 2444 0138 04ED00E0 		.word	-536810236
 2445              		.cfi_endproc
 2446              	.LFE156:
 2448              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2449              		.align	1
 2450              		.global	xTaskGetTickCount
 2451              		.syntax unified
 2452              		.thumb
 2453              		.thumb_func
 2454              		.fpu fpv4-sp-d16
 2456              	xTaskGetTickCount:
 2457              	.LFB157:
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2458              		.loc 1 2128 0
 2459              		.cfi_startproc
 2460              		@ args = 0, pretend = 0, frame = 8
 2461              		@ frame_needed = 1, uses_anonymous_args = 0
 2462              		@ link register save eliminated.
 2463 0000 80B4     		push	{r7}
 2464              	.LCFI80:
 2465              		.cfi_def_cfa_offset 4
 2466              		.cfi_offset 7, -4
 2467 0002 83B0     		sub	sp, sp, #12
 2468              	.LCFI81:
 2469              		.cfi_def_cfa_offset 16
 2470 0004 00AF     		add	r7, sp, #0
 2471              	.LCFI82:
 2472              		.cfi_def_cfa_register 7
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
ARM GAS  /tmp/ccMf91lX.s 			page 86


2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
 2473              		.loc 1 2134 0
 2474 0006 054B     		ldr	r3, .L153
 2475 0008 1B68     		ldr	r3, [r3]
 2476 000a 7B60     		str	r3, [r7, #4]
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
 2477              		.loc 1 2138 0
 2478 000c 7B68     		ldr	r3, [r7, #4]
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2479              		.loc 1 2139 0
 2480 000e 1846     		mov	r0, r3
 2481 0010 0C37     		adds	r7, r7, #12
 2482              	.LCFI83:
 2483              		.cfi_def_cfa_offset 4
 2484 0012 BD46     		mov	sp, r7
 2485              	.LCFI84:
 2486              		.cfi_def_cfa_register 13
 2487              		@ sp needed
 2488 0014 5DF8047B 		ldr	r7, [sp], #4
 2489              	.LCFI85:
 2490              		.cfi_restore 7
 2491              		.cfi_def_cfa_offset 0
 2492 0018 7047     		bx	lr
 2493              	.L154:
 2494 001a 00BF     		.align	2
 2495              	.L153:
 2496 001c 00000000 		.word	xTickCount
 2497              		.cfi_endproc
 2498              	.LFE157:
 2500              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2501              		.align	1
 2502              		.global	xTaskGetTickCountFromISR
 2503              		.syntax unified
 2504              		.thumb
 2505              		.thumb_func
 2506              		.fpu fpv4-sp-d16
 2508              	xTaskGetTickCountFromISR:
 2509              	.LFB158:
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2510              		.loc 1 2143 0
 2511              		.cfi_startproc
 2512              		@ args = 0, pretend = 0, frame = 8
 2513              		@ frame_needed = 1, uses_anonymous_args = 0
 2514 0000 80B5     		push	{r7, lr}
 2515              	.LCFI86:
 2516              		.cfi_def_cfa_offset 8
 2517              		.cfi_offset 7, -8
ARM GAS  /tmp/ccMf91lX.s 			page 87


 2518              		.cfi_offset 14, -4
 2519 0002 82B0     		sub	sp, sp, #8
 2520              	.LCFI87:
 2521              		.cfi_def_cfa_offset 16
 2522 0004 00AF     		add	r7, sp, #0
 2523              	.LCFI88:
 2524              		.cfi_def_cfa_register 7
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2525              		.loc 1 2161 0
 2526 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 2527              		.loc 1 2163 0
 2528 000a 0023     		movs	r3, #0
 2529 000c 7B60     		str	r3, [r7, #4]
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
 2530              		.loc 1 2165 0
 2531 000e 044B     		ldr	r3, .L157
 2532 0010 1B68     		ldr	r3, [r3]
 2533 0012 3B60     		str	r3, [r7]
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 2534              		.loc 1 2169 0
 2535 0014 3B68     		ldr	r3, [r7]
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2536              		.loc 1 2170 0
 2537 0016 1846     		mov	r0, r3
 2538 0018 0837     		adds	r7, r7, #8
 2539              	.LCFI89:
 2540              		.cfi_def_cfa_offset 8
 2541 001a BD46     		mov	sp, r7
 2542              	.LCFI90:
 2543              		.cfi_def_cfa_register 13
 2544              		@ sp needed
 2545 001c 80BD     		pop	{r7, pc}
 2546              	.L158:
 2547 001e 00BF     		.align	2
ARM GAS  /tmp/ccMf91lX.s 			page 88


 2548              	.L157:
 2549 0020 00000000 		.word	xTickCount
 2550              		.cfi_endproc
 2551              	.LFE158:
 2553              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2554              		.align	1
 2555              		.global	uxTaskGetNumberOfTasks
 2556              		.syntax unified
 2557              		.thumb
 2558              		.thumb_func
 2559              		.fpu fpv4-sp-d16
 2561              	uxTaskGetNumberOfTasks:
 2562              	.LFB159:
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2563              		.loc 1 2174 0
 2564              		.cfi_startproc
 2565              		@ args = 0, pretend = 0, frame = 0
 2566              		@ frame_needed = 1, uses_anonymous_args = 0
 2567              		@ link register save eliminated.
 2568 0000 80B4     		push	{r7}
 2569              	.LCFI91:
 2570              		.cfi_def_cfa_offset 4
 2571              		.cfi_offset 7, -4
 2572 0002 00AF     		add	r7, sp, #0
 2573              	.LCFI92:
 2574              		.cfi_def_cfa_register 7
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
 2575              		.loc 1 2177 0
 2576 0004 034B     		ldr	r3, .L161
 2577 0006 1B68     		ldr	r3, [r3]
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2578              		.loc 1 2178 0
 2579 0008 1846     		mov	r0, r3
 2580 000a BD46     		mov	sp, r7
 2581              	.LCFI93:
 2582              		.cfi_def_cfa_register 13
 2583              		@ sp needed
 2584 000c 5DF8047B 		ldr	r7, [sp], #4
 2585              	.LCFI94:
 2586              		.cfi_restore 7
 2587              		.cfi_def_cfa_offset 0
 2588 0010 7047     		bx	lr
 2589              	.L162:
 2590 0012 00BF     		.align	2
 2591              	.L161:
 2592 0014 00000000 		.word	uxCurrentNumberOfTasks
 2593              		.cfi_endproc
 2594              	.LFE159:
 2596              		.section	.text.pcTaskGetName,"ax",%progbits
 2597              		.align	1
 2598              		.global	pcTaskGetName
 2599              		.syntax unified
ARM GAS  /tmp/ccMf91lX.s 			page 89


 2600              		.thumb
 2601              		.thumb_func
 2602              		.fpu fpv4-sp-d16
 2604              	pcTaskGetName:
 2605              	.LFB160:
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2606              		.loc 1 2182 0
 2607              		.cfi_startproc
 2608              		@ args = 0, pretend = 0, frame = 16
 2609              		@ frame_needed = 1, uses_anonymous_args = 0
 2610              		@ link register save eliminated.
 2611 0000 80B4     		push	{r7}
 2612              	.LCFI95:
 2613              		.cfi_def_cfa_offset 4
 2614              		.cfi_offset 7, -4
 2615 0002 85B0     		sub	sp, sp, #20
 2616              	.LCFI96:
 2617              		.cfi_def_cfa_offset 24
 2618 0004 00AF     		add	r7, sp, #0
 2619              	.LCFI97:
 2620              		.cfi_def_cfa_register 7
 2621 0006 7860     		str	r0, [r7, #4]
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 2622              		.loc 1 2187 0
 2623 0008 7B68     		ldr	r3, [r7, #4]
 2624 000a 002B     		cmp	r3, #0
 2625 000c 02D1     		bne	.L164
 2626              		.loc 1 2187 0 is_stmt 0 discriminator 1
 2627 000e 0E4B     		ldr	r3, .L169
 2628 0010 1B68     		ldr	r3, [r3]
 2629 0012 00E0     		b	.L165
 2630              	.L164:
 2631              		.loc 1 2187 0 discriminator 2
 2632 0014 7B68     		ldr	r3, [r7, #4]
 2633              	.L165:
 2634              		.loc 1 2187 0 discriminator 4
 2635 0016 FB60     		str	r3, [r7, #12]
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2636              		.loc 1 2188 0 is_stmt 1 discriminator 4
 2637 0018 FB68     		ldr	r3, [r7, #12]
 2638 001a 002B     		cmp	r3, #0
 2639 001c 0BD1     		bne	.L166
 2640              	.LBB124:
 2641              	.LBB125:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2642              		.loc 2 237 0 discriminator 1
 2643              		.syntax unified
 2644              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2645 001e 4FF05003 			mov r3, #80												
 2646 0022 72B6     		cpsid i													
ARM GAS  /tmp/ccMf91lX.s 			page 90


 2647 0024 83F31188 		msr basepri, r3											
 2648 0028 BFF36F8F 		isb														
 2649 002c BFF34F8F 		dsb														
 2650 0030 62B6     		cpsie i													
 2651              	
 2652              	@ 0 "" 2
 2653              		.thumb
 2654              		.syntax unified
 2655 0032 BB60     		str	r3, [r7, #8]
 2656              	.L167:
 2657              	.LBE125:
 2658              	.LBE124:
 2659              		.loc 1 2188 0 discriminator 1
 2660 0034 FEE7     		b	.L167
 2661              	.L166:
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2662              		.loc 1 2189 0
 2663 0036 FB68     		ldr	r3, [r7, #12]
 2664 0038 3433     		adds	r3, r3, #52
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2665              		.loc 1 2190 0
 2666 003a 1846     		mov	r0, r3
 2667 003c 1437     		adds	r7, r7, #20
 2668              	.LCFI98:
 2669              		.cfi_def_cfa_offset 4
 2670 003e BD46     		mov	sp, r7
 2671              	.LCFI99:
 2672              		.cfi_def_cfa_register 13
 2673              		@ sp needed
 2674 0040 5DF8047B 		ldr	r7, [sp], #4
 2675              	.LCFI100:
 2676              		.cfi_restore 7
 2677              		.cfi_def_cfa_offset 0
 2678 0044 7047     		bx	lr
 2679              	.L170:
 2680 0046 00BF     		.align	2
 2681              	.L169:
 2682 0048 00000000 		.word	pxCurrentTCB
 2683              		.cfi_endproc
 2684              	.LFE160:
 2686              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2687              		.align	1
 2688              		.global	xTaskIncrementTick
 2689              		.syntax unified
 2690              		.thumb
 2691              		.thumb_func
 2692              		.fpu fpv4-sp-d16
 2694              	xTaskIncrementTick:
 2695              	.LFB161:
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
ARM GAS  /tmp/ccMf91lX.s 			page 91


2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == 0x00 )
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccMf91lX.s 			page 92


2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccMf91lX.s 			page 93


2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/ccMf91lX.s 			page 94


2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccMf91lX.s 			page 95


2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/ccMf91lX.s 			page 96


2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTaskResumeAll();
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2696              		.loc 1 2500 0
 2697              		.cfi_startproc
 2698              		@ args = 0, pretend = 0, frame = 24
 2699              		@ frame_needed = 1, uses_anonymous_args = 0
 2700 0000 80B5     		push	{r7, lr}
 2701              	.LCFI101:
 2702              		.cfi_def_cfa_offset 8
 2703              		.cfi_offset 7, -8
 2704              		.cfi_offset 14, -4
 2705 0002 86B0     		sub	sp, sp, #24
 2706              	.LCFI102:
 2707              		.cfi_def_cfa_offset 32
 2708 0004 00AF     		add	r7, sp, #0
 2709              	.LCFI103:
 2710              		.cfi_def_cfa_register 7
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 2711              		.loc 1 2503 0
 2712 0006 0023     		movs	r3, #0
 2713 0008 7B61     		str	r3, [r7, #20]
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2714              		.loc 1 2509 0
 2715 000a 514B     		ldr	r3, .L188
 2716 000c 1B68     		ldr	r3, [r3]
 2717 000e 002B     		cmp	r3, #0
 2718 0010 40F08E80 		bne	.L172
 2719              	.LBB126:
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + 1;
 2720              		.loc 1 2513 0
 2721 0014 4F4B     		ldr	r3, .L188+4
 2722 0016 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccMf91lX.s 			page 97


 2723 0018 0133     		adds	r3, r3, #1
 2724 001a 3B61     		str	r3, [r7, #16]
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
 2725              		.loc 1 2517 0
 2726 001c 4D4A     		ldr	r2, .L188+4
 2727 001e 3B69     		ldr	r3, [r7, #16]
 2728 0020 1360     		str	r3, [r2]
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U )
 2729              		.loc 1 2519 0
 2730 0022 3B69     		ldr	r3, [r7, #16]
 2731 0024 002B     		cmp	r3, #0
 2732 0026 21D1     		bne	.L173
 2733              	.LBB127:
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
 2734              		.loc 1 2521 0
 2735 0028 4B4B     		ldr	r3, .L188+8
 2736 002a 1B68     		ldr	r3, [r3]
 2737 002c 1B68     		ldr	r3, [r3]
 2738 002e 002B     		cmp	r3, #0
 2739 0030 0BD0     		beq	.L174
 2740              	.LBB128:
 2741              	.LBB129:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2742              		.loc 2 237 0 discriminator 1
 2743              		.syntax unified
 2744              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2745 0032 4FF05003 			mov r3, #80												
 2746 0036 72B6     		cpsid i													
 2747 0038 83F31188 		msr basepri, r3											
 2748 003c BFF36F8F 		isb														
 2749 0040 BFF34F8F 		dsb														
 2750 0044 62B6     		cpsie i													
 2751              	
 2752              	@ 0 "" 2
 2753              		.thumb
 2754              		.syntax unified
 2755 0046 3B60     		str	r3, [r7]
 2756              	.L175:
 2757              	.LBE129:
 2758              	.LBE128:
 2759              		.loc 1 2521 0 discriminator 1
 2760 0048 FEE7     		b	.L175
 2761              	.L174:
 2762              		.loc 1 2521 0 is_stmt 0 discriminator 2
 2763 004a 434B     		ldr	r3, .L188+8
 2764 004c 1B68     		ldr	r3, [r3]
 2765 004e FB60     		str	r3, [r7, #12]
 2766 0050 424B     		ldr	r3, .L188+12
 2767 0052 1B68     		ldr	r3, [r3]
 2768 0054 404A     		ldr	r2, .L188+8
 2769 0056 1360     		str	r3, [r2]
 2770 0058 404A     		ldr	r2, .L188+12
ARM GAS  /tmp/ccMf91lX.s 			page 98


 2771 005a FB68     		ldr	r3, [r7, #12]
 2772 005c 1360     		str	r3, [r2]
 2773 005e 404B     		ldr	r3, .L188+16
 2774 0060 1B68     		ldr	r3, [r3]
 2775 0062 0133     		adds	r3, r3, #1
 2776 0064 3E4A     		ldr	r2, .L188+16
 2777 0066 1360     		str	r3, [r2]
 2778 0068 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2779              	.L173:
 2780              	.LBE127:
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
 2781              		.loc 1 2532 0 is_stmt 1
 2782 006c 3D4B     		ldr	r3, .L188+20
 2783 006e 1B68     		ldr	r3, [r3]
 2784 0070 3A69     		ldr	r2, [r7, #16]
 2785 0072 9A42     		cmp	r2, r3
 2786 0074 4DD3     		bcc	.L176
 2787              	.L183:
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 2788              		.loc 1 2536 0
 2789 0076 384B     		ldr	r3, .L188+8
 2790 0078 1B68     		ldr	r3, [r3]
 2791 007a 1B68     		ldr	r3, [r3]
 2792 007c 002B     		cmp	r3, #0
 2793 007e 01D1     		bne	.L177
 2794              		.loc 1 2536 0 is_stmt 0 discriminator 1
 2795 0080 0123     		movs	r3, #1
 2796 0082 00E0     		b	.L178
 2797              	.L177:
 2798              		.loc 1 2536 0 discriminator 2
 2799 0084 0023     		movs	r3, #0
 2800              	.L178:
 2801              		.loc 1 2536 0 discriminator 4
 2802 0086 002B     		cmp	r3, #0
 2803 0088 04D0     		beq	.L179
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
 2804              		.loc 1 2543 0 is_stmt 1
 2805 008a 364B     		ldr	r3, .L188+20
ARM GAS  /tmp/ccMf91lX.s 			page 99


 2806 008c 4FF0FF32 		mov	r2, #-1
 2807 0090 1A60     		str	r2, [r3]
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 2808              		.loc 1 2544 0
 2809 0092 3EE0     		b	.L176
 2810              	.L179:
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 2811              		.loc 1 2552 0
 2812 0094 304B     		ldr	r3, .L188+8
 2813 0096 1B68     		ldr	r3, [r3]
 2814 0098 DB68     		ldr	r3, [r3, #12]
 2815 009a DB68     		ldr	r3, [r3, #12]
 2816 009c BB60     		str	r3, [r7, #8]
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2817              		.loc 1 2553 0
 2818 009e BB68     		ldr	r3, [r7, #8]
 2819 00a0 5B68     		ldr	r3, [r3, #4]
 2820 00a2 7B60     		str	r3, [r7, #4]
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
 2821              		.loc 1 2555 0
 2822 00a4 3A69     		ldr	r2, [r7, #16]
 2823 00a6 7B68     		ldr	r3, [r7, #4]
 2824 00a8 9A42     		cmp	r2, r3
 2825 00aa 03D2     		bcs	.L180
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
 2826              		.loc 1 2562 0
 2827 00ac 2D4A     		ldr	r2, .L188+20
 2828 00ae 7B68     		ldr	r3, [r7, #4]
 2829 00b0 1360     		str	r3, [r2]
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
 2830              		.loc 1 2563 0
 2831 00b2 2EE0     		b	.L176
 2832              	.L180:
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2833              		.loc 1 2571 0
 2834 00b4 BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/ccMf91lX.s 			page 100


 2835 00b6 0433     		adds	r3, r3, #4
 2836 00b8 1846     		mov	r0, r3
 2837 00ba FFF7FEFF 		bl	uxListRemove
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 2838              		.loc 1 2575 0
 2839 00be BB68     		ldr	r3, [r7, #8]
 2840 00c0 9B6A     		ldr	r3, [r3, #40]
 2841 00c2 002B     		cmp	r3, #0
 2842 00c4 04D0     		beq	.L181
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2843              		.loc 1 2577 0
 2844 00c6 BB68     		ldr	r3, [r7, #8]
 2845 00c8 1833     		adds	r3, r3, #24
 2846 00ca 1846     		mov	r0, r3
 2847 00cc FFF7FEFF 		bl	uxListRemove
 2848              	.L181:
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2849              		.loc 1 2586 0
 2850 00d0 BB68     		ldr	r3, [r7, #8]
 2851 00d2 DB6A     		ldr	r3, [r3, #44]
 2852 00d4 0122     		movs	r2, #1
 2853 00d6 9A40     		lsls	r2, r2, r3
 2854 00d8 234B     		ldr	r3, .L188+24
 2855 00da 1B68     		ldr	r3, [r3]
 2856 00dc 1343     		orrs	r3, r3, r2
 2857 00de 224A     		ldr	r2, .L188+24
 2858 00e0 1360     		str	r3, [r2]
 2859 00e2 BB68     		ldr	r3, [r7, #8]
 2860 00e4 DA6A     		ldr	r2, [r3, #44]
 2861 00e6 1346     		mov	r3, r2
 2862 00e8 9B00     		lsls	r3, r3, #2
 2863 00ea 1344     		add	r3, r3, r2
 2864 00ec 9B00     		lsls	r3, r3, #2
 2865 00ee 1F4A     		ldr	r2, .L188+28
 2866 00f0 1A44     		add	r2, r2, r3
 2867 00f2 BB68     		ldr	r3, [r7, #8]
 2868 00f4 0433     		adds	r3, r3, #4
 2869 00f6 1946     		mov	r1, r3
 2870 00f8 1046     		mov	r0, r2
 2871 00fa FFF7FEFF 		bl	vListInsertEnd
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  /tmp/ccMf91lX.s 			page 101


2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2872              		.loc 1 2596 0
 2873 00fe BB68     		ldr	r3, [r7, #8]
 2874 0100 DA6A     		ldr	r2, [r3, #44]
 2875 0102 1B4B     		ldr	r3, .L188+32
 2876 0104 1B68     		ldr	r3, [r3]
 2877 0106 DB6A     		ldr	r3, [r3, #44]
 2878 0108 9A42     		cmp	r2, r3
 2879 010a B4D3     		bcc	.L183
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
 2880              		.loc 1 2598 0
 2881 010c 0123     		movs	r3, #1
 2882 010e 7B61     		str	r3, [r7, #20]
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2883              		.loc 1 2536 0
 2884 0110 B1E7     		b	.L183
 2885              	.L176:
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
 2886              		.loc 1 2615 0
 2887 0112 174B     		ldr	r3, .L188+32
 2888 0114 1B68     		ldr	r3, [r3]
 2889 0116 DA6A     		ldr	r2, [r3, #44]
 2890 0118 1449     		ldr	r1, .L188+28
 2891 011a 1346     		mov	r3, r2
 2892 011c 9B00     		lsls	r3, r3, #2
 2893 011e 1344     		add	r3, r3, r2
 2894 0120 9B00     		lsls	r3, r3, #2
 2895 0122 0B44     		add	r3, r3, r1
 2896 0124 1B68     		ldr	r3, [r3]
 2897 0126 012B     		cmp	r3, #1
 2898 0128 07D9     		bls	.L185
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 2899              		.loc 1 2617 0
 2900 012a 0123     		movs	r3, #1
 2901 012c 7B61     		str	r3, [r7, #20]
ARM GAS  /tmp/ccMf91lX.s 			page 102


 2902 012e 04E0     		b	.L185
 2903              	.L172:
 2904              	.LBE126:
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
 2905              		.loc 1 2643 0
 2906 0130 104B     		ldr	r3, .L188+36
 2907 0132 1B68     		ldr	r3, [r3]
 2908 0134 0133     		adds	r3, r3, #1
 2909 0136 0F4A     		ldr	r2, .L188+36
 2910 0138 1360     		str	r3, [r2]
 2911              	.L185:
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
 2912              		.loc 1 2656 0
 2913 013a 0F4B     		ldr	r3, .L188+40
 2914 013c 1B68     		ldr	r3, [r3]
 2915 013e 002B     		cmp	r3, #0
 2916 0140 01D0     		beq	.L186
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
 2917              		.loc 1 2658 0
ARM GAS  /tmp/ccMf91lX.s 			page 103


 2918 0142 0123     		movs	r3, #1
 2919 0144 7B61     		str	r3, [r7, #20]
 2920              	.L186:
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
 2921              		.loc 1 2667 0
 2922 0146 7B69     		ldr	r3, [r7, #20]
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2923              		.loc 1 2668 0
 2924 0148 1846     		mov	r0, r3
 2925 014a 1837     		adds	r7, r7, #24
 2926              	.LCFI104:
 2927              		.cfi_def_cfa_offset 8
 2928 014c BD46     		mov	sp, r7
 2929              	.LCFI105:
 2930              		.cfi_def_cfa_register 13
 2931              		@ sp needed
 2932 014e 80BD     		pop	{r7, pc}
 2933              	.L189:
 2934              		.align	2
 2935              	.L188:
 2936 0150 00000000 		.word	uxSchedulerSuspended
 2937 0154 00000000 		.word	xTickCount
 2938 0158 00000000 		.word	pxDelayedTaskList
 2939 015c 00000000 		.word	pxOverflowDelayedTaskList
 2940 0160 00000000 		.word	xNumOfOverflows
 2941 0164 00000000 		.word	xNextTaskUnblockTime
 2942 0168 00000000 		.word	uxTopReadyPriority
 2943 016c 00000000 		.word	pxReadyTasksLists
 2944 0170 00000000 		.word	pxCurrentTCB
 2945 0174 00000000 		.word	uxPendedTicks
 2946 0178 00000000 		.word	xYieldPending
 2947              		.cfi_endproc
 2948              	.LFE161:
 2950              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2951              		.align	1
 2952              		.global	vTaskSwitchContext
 2953              		.syntax unified
 2954              		.thumb
 2955              		.thumb_func
 2956              		.fpu fpv4-sp-d16
 2958              	vTaskSwitchContext:
 2959              	.LFB162:
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
ARM GAS  /tmp/ccMf91lX.s 			page 104


2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccMf91lX.s 			page 105


2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2960              		.loc 1 2762 0
 2961              		.cfi_startproc
 2962              		@ args = 0, pretend = 0, frame = 24
 2963              		@ frame_needed = 1, uses_anonymous_args = 0
 2964              		@ link register save eliminated.
 2965 0000 80B4     		push	{r7}
 2966              	.LCFI106:
 2967              		.cfi_def_cfa_offset 4
 2968              		.cfi_offset 7, -4
 2969 0002 87B0     		sub	sp, sp, #28
 2970              	.LCFI107:
 2971              		.cfi_def_cfa_offset 32
 2972 0004 00AF     		add	r7, sp, #0
 2973              	.LCFI108:
 2974              		.cfi_def_cfa_register 7
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2975              		.loc 1 2763 0
 2976 0006 274B     		ldr	r3, .L198
 2977 0008 1B68     		ldr	r3, [r3]
 2978 000a 002B     		cmp	r3, #0
 2979 000c 03D0     		beq	.L191
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 2980              		.loc 1 2767 0
 2981 000e 264B     		ldr	r3, .L198+4
ARM GAS  /tmp/ccMf91lX.s 			page 106


 2982 0010 0122     		movs	r2, #1
 2983 0012 1A60     		str	r2, [r3]
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				protection here so count values are only valid until the timer
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				against suspect run time stat counter implementations - which
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				are provided by the application, not the kernel. */
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2984              		.loc 1 2817 0
 2985 0014 40E0     		b	.L197
 2986              	.L191:
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2987              		.loc 1 2771 0
ARM GAS  /tmp/ccMf91lX.s 			page 107


 2988 0016 244B     		ldr	r3, .L198+4
 2989 0018 0022     		movs	r2, #0
 2990 001a 1A60     		str	r2, [r3]
 2991              	.LBB130:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2992              		.loc 1 2806 0
 2993 001c 234B     		ldr	r3, .L198+8
 2994 001e 1B68     		ldr	r3, [r3]
 2995 0020 FB60     		str	r3, [r7, #12]
 2996              	.LBB131:
 2997              	.LBB132:
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		return ucReturn;
 2998              		.loc 2 176 0
 2999 0022 FB68     		ldr	r3, [r7, #12]
 3000              		.syntax unified
 3001              	@ 176 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3002 0024 B3FA83F3 		clz r3, r3
 3003              	@ 0 "" 2
 3004              		.thumb
 3005              		.syntax unified
 3006 0028 FB72     		strb	r3, [r7, #11]
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 3007              		.loc 2 177 0
 3008 002a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 3009              	.LBE132:
 3010              	.LBE131:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3011              		.loc 1 2806 0
 3012 002c C3F11F03 		rsb	r3, r3, #31
 3013 0030 7B61     		str	r3, [r7, #20]
 3014 0032 1F49     		ldr	r1, .L198+12
 3015 0034 7A69     		ldr	r2, [r7, #20]
 3016 0036 1346     		mov	r3, r2
 3017 0038 9B00     		lsls	r3, r3, #2
 3018 003a 1344     		add	r3, r3, r2
 3019 003c 9B00     		lsls	r3, r3, #2
 3020 003e 0B44     		add	r3, r3, r1
 3021 0040 1B68     		ldr	r3, [r3]
 3022 0042 002B     		cmp	r3, #0
 3023 0044 0BD1     		bne	.L194
 3024              	.LBB133:
 3025              	.LBB134:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3026              		.loc 2 237 0 discriminator 1
 3027              		.syntax unified
 3028              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3029 0046 4FF05003 			mov r3, #80												
 3030 004a 72B6     		cpsid i													
 3031 004c 83F31188 		msr basepri, r3											
 3032 0050 BFF36F8F 		isb														
 3033 0054 BFF34F8F 		dsb														
 3034 0058 62B6     		cpsie i													
 3035              	
 3036              	@ 0 "" 2
 3037              		.thumb
 3038              		.syntax unified
 3039 005a 7B60     		str	r3, [r7, #4]
ARM GAS  /tmp/ccMf91lX.s 			page 108


 3040              	.L195:
 3041              	.LBE134:
 3042              	.LBE133:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3043              		.loc 1 2806 0 discriminator 1
 3044 005c FEE7     		b	.L195
 3045              	.L194:
 3046              	.LBB135:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3047              		.loc 1 2806 0 is_stmt 0 discriminator 2
 3048 005e 7A69     		ldr	r2, [r7, #20]
 3049 0060 1346     		mov	r3, r2
 3050 0062 9B00     		lsls	r3, r3, #2
 3051 0064 1344     		add	r3, r3, r2
 3052 0066 9B00     		lsls	r3, r3, #2
 3053 0068 114A     		ldr	r2, .L198+12
 3054 006a 1344     		add	r3, r3, r2
 3055 006c 3B61     		str	r3, [r7, #16]
 3056 006e 3B69     		ldr	r3, [r7, #16]
 3057 0070 5B68     		ldr	r3, [r3, #4]
 3058 0072 5A68     		ldr	r2, [r3, #4]
 3059 0074 3B69     		ldr	r3, [r7, #16]
 3060 0076 5A60     		str	r2, [r3, #4]
 3061 0078 3B69     		ldr	r3, [r7, #16]
 3062 007a 5A68     		ldr	r2, [r3, #4]
 3063 007c 3B69     		ldr	r3, [r7, #16]
 3064 007e 0833     		adds	r3, r3, #8
 3065 0080 9A42     		cmp	r2, r3
 3066 0082 04D1     		bne	.L196
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3067              		.loc 1 2806 0 discriminator 3
 3068 0084 3B69     		ldr	r3, [r7, #16]
 3069 0086 5B68     		ldr	r3, [r3, #4]
 3070 0088 5A68     		ldr	r2, [r3, #4]
 3071 008a 3B69     		ldr	r3, [r7, #16]
 3072 008c 5A60     		str	r2, [r3, #4]
 3073              	.L196:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3074              		.loc 1 2806 0 discriminator 5
 3075 008e 3B69     		ldr	r3, [r7, #16]
 3076 0090 5B68     		ldr	r3, [r3, #4]
 3077 0092 DB68     		ldr	r3, [r3, #12]
 3078 0094 074A     		ldr	r2, .L198+16
 3079 0096 1360     		str	r3, [r2]
 3080              	.L197:
 3081              	.LBE135:
 3082              	.LBE130:
 3083              		.loc 1 2817 0 is_stmt 1
 3084 0098 00BF     		nop
 3085 009a 1C37     		adds	r7, r7, #28
 3086              	.LCFI109:
 3087              		.cfi_def_cfa_offset 4
 3088 009c BD46     		mov	sp, r7
 3089              	.LCFI110:
 3090              		.cfi_def_cfa_register 13
 3091              		@ sp needed
 3092 009e 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/ccMf91lX.s 			page 109


 3093              	.LCFI111:
 3094              		.cfi_restore 7
 3095              		.cfi_def_cfa_offset 0
 3096 00a2 7047     		bx	lr
 3097              	.L199:
 3098              		.align	2
 3099              	.L198:
 3100 00a4 00000000 		.word	uxSchedulerSuspended
 3101 00a8 00000000 		.word	xYieldPending
 3102 00ac 00000000 		.word	uxTopReadyPriority
 3103 00b0 00000000 		.word	pxReadyTasksLists
 3104 00b4 00000000 		.word	pxCurrentTCB
 3105              		.cfi_endproc
 3106              	.LFE162:
 3108              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3109              		.align	1
 3110              		.global	vTaskPlaceOnEventList
 3111              		.syntax unified
 3112              		.thumb
 3113              		.thumb_func
 3114              		.fpu fpv4-sp-d16
 3116              	vTaskPlaceOnEventList:
 3117              	.LFB163:
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3118              		.loc 1 2821 0
 3119              		.cfi_startproc
 3120              		@ args = 0, pretend = 0, frame = 16
 3121              		@ frame_needed = 1, uses_anonymous_args = 0
 3122 0000 80B5     		push	{r7, lr}
 3123              	.LCFI112:
 3124              		.cfi_def_cfa_offset 8
 3125              		.cfi_offset 7, -8
 3126              		.cfi_offset 14, -4
 3127 0002 84B0     		sub	sp, sp, #16
 3128              	.LCFI113:
 3129              		.cfi_def_cfa_offset 24
 3130 0004 00AF     		add	r7, sp, #0
 3131              	.LCFI114:
 3132              		.cfi_def_cfa_register 7
 3133 0006 7860     		str	r0, [r7, #4]
 3134 0008 3960     		str	r1, [r7]
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3135              		.loc 1 2822 0
 3136 000a 7B68     		ldr	r3, [r7, #4]
 3137 000c 002B     		cmp	r3, #0
 3138 000e 0BD1     		bne	.L201
 3139              	.LBB136:
 3140              	.LBB137:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3141              		.loc 2 237 0 discriminator 1
 3142              		.syntax unified
 3143              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3144 0010 4FF05003 			mov r3, #80												
 3145 0014 72B6     		cpsid i													
ARM GAS  /tmp/ccMf91lX.s 			page 110


 3146 0016 83F31188 		msr basepri, r3											
 3147 001a BFF36F8F 		isb														
 3148 001e BFF34F8F 		dsb														
 3149 0022 62B6     		cpsie i													
 3150              	
 3151              	@ 0 "" 2
 3152              		.thumb
 3153              		.syntax unified
 3154 0024 FB60     		str	r3, [r7, #12]
 3155              	.L202:
 3156              	.LBE137:
 3157              	.LBE136:
 3158              		.loc 1 2822 0 discriminator 1
 3159 0026 FEE7     		b	.L202
 3160              	.L201:
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3161              		.loc 1 2831 0
 3162 0028 074B     		ldr	r3, .L203
 3163 002a 1B68     		ldr	r3, [r3]
 3164 002c 1833     		adds	r3, r3, #24
 3165 002e 1946     		mov	r1, r3
 3166 0030 7868     		ldr	r0, [r7, #4]
 3167 0032 FFF7FEFF 		bl	vListInsert
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 3168              		.loc 1 2833 0
 3169 0036 0121     		movs	r1, #1
 3170 0038 3868     		ldr	r0, [r7]
 3171 003a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3172              		.loc 1 2834 0
 3173 003e 00BF     		nop
 3174 0040 1037     		adds	r7, r7, #16
 3175              	.LCFI115:
 3176              		.cfi_def_cfa_offset 8
 3177 0042 BD46     		mov	sp, r7
 3178              	.LCFI116:
 3179              		.cfi_def_cfa_register 13
 3180              		@ sp needed
 3181 0044 80BD     		pop	{r7, pc}
 3182              	.L204:
 3183 0046 00BF     		.align	2
 3184              	.L203:
 3185 0048 00000000 		.word	pxCurrentTCB
 3186              		.cfi_endproc
 3187              	.LFE163:
 3189              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3190              		.align	1
 3191              		.global	vTaskPlaceOnUnorderedEventList
ARM GAS  /tmp/ccMf91lX.s 			page 111


 3192              		.syntax unified
 3193              		.thumb
 3194              		.thumb_func
 3195              		.fpu fpv4-sp-d16
 3197              	vTaskPlaceOnUnorderedEventList:
 3198              	.LFB164:
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3199              		.loc 1 2838 0
 3200              		.cfi_startproc
 3201              		@ args = 0, pretend = 0, frame = 24
 3202              		@ frame_needed = 1, uses_anonymous_args = 0
 3203 0000 80B5     		push	{r7, lr}
 3204              	.LCFI117:
 3205              		.cfi_def_cfa_offset 8
 3206              		.cfi_offset 7, -8
 3207              		.cfi_offset 14, -4
 3208 0002 86B0     		sub	sp, sp, #24
 3209              	.LCFI118:
 3210              		.cfi_def_cfa_offset 32
 3211 0004 00AF     		add	r7, sp, #0
 3212              	.LCFI119:
 3213              		.cfi_def_cfa_register 7
 3214 0006 F860     		str	r0, [r7, #12]
 3215 0008 B960     		str	r1, [r7, #8]
 3216 000a 7A60     		str	r2, [r7, #4]
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3217              		.loc 1 2839 0
 3218 000c FB68     		ldr	r3, [r7, #12]
 3219 000e 002B     		cmp	r3, #0
 3220 0010 0BD1     		bne	.L206
 3221              	.LBB138:
 3222              	.LBB139:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3223              		.loc 2 237 0 discriminator 1
 3224              		.syntax unified
 3225              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3226 0012 4FF05003 			mov r3, #80												
 3227 0016 72B6     		cpsid i													
 3228 0018 83F31188 		msr basepri, r3											
 3229 001c BFF36F8F 		isb														
 3230 0020 BFF34F8F 		dsb														
 3231 0024 62B6     		cpsie i													
 3232              	
 3233              	@ 0 "" 2
 3234              		.thumb
 3235              		.syntax unified
 3236 0026 7B61     		str	r3, [r7, #20]
 3237              	.L207:
 3238              	.LBE139:
 3239              	.LBE138:
 3240              		.loc 1 2839 0 discriminator 1
 3241 0028 FEE7     		b	.L207
 3242              	.L206:
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccMf91lX.s 			page 112


2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
 3243              		.loc 1 2843 0
 3244 002a 124B     		ldr	r3, .L210
 3245 002c 1B68     		ldr	r3, [r3]
 3246 002e 002B     		cmp	r3, #0
 3247 0030 0BD1     		bne	.L208
 3248              	.LBB140:
 3249              	.LBB141:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3250              		.loc 2 237 0 discriminator 1
 3251              		.syntax unified
 3252              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3253 0032 4FF05003 			mov r3, #80												
 3254 0036 72B6     		cpsid i													
 3255 0038 83F31188 		msr basepri, r3											
 3256 003c BFF36F8F 		isb														
 3257 0040 BFF34F8F 		dsb														
 3258 0044 62B6     		cpsie i													
 3259              	
 3260              	@ 0 "" 2
 3261              		.thumb
 3262              		.syntax unified
 3263 0046 3B61     		str	r3, [r7, #16]
 3264              	.L209:
 3265              	.LBE141:
 3266              	.LBE140:
 3267              		.loc 1 2843 0 discriminator 2
 3268 0048 FEE7     		b	.L209
 3269              	.L208:
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 3270              		.loc 1 2848 0
 3271 004a 0B4B     		ldr	r3, .L210+4
 3272 004c 1B68     		ldr	r3, [r3]
 3273 004e BA68     		ldr	r2, [r7, #8]
 3274 0050 42F00042 		orr	r2, r2, #-2147483648
 3275 0054 9A61     		str	r2, [r3, #24]
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3276              		.loc 1 2855 0
 3277 0056 084B     		ldr	r3, .L210+4
 3278 0058 1B68     		ldr	r3, [r3]
 3279 005a 1833     		adds	r3, r3, #24
 3280 005c 1946     		mov	r1, r3
 3281 005e F868     		ldr	r0, [r7, #12]
 3282 0060 FFF7FEFF 		bl	vListInsertEnd
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccMf91lX.s 			page 113


2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 3283              		.loc 1 2857 0
 3284 0064 0121     		movs	r1, #1
 3285 0066 7868     		ldr	r0, [r7, #4]
 3286 0068 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3287              		.loc 1 2858 0
 3288 006c 00BF     		nop
 3289 006e 1837     		adds	r7, r7, #24
 3290              	.LCFI120:
 3291              		.cfi_def_cfa_offset 8
 3292 0070 BD46     		mov	sp, r7
 3293              	.LCFI121:
 3294              		.cfi_def_cfa_register 13
 3295              		@ sp needed
 3296 0072 80BD     		pop	{r7, pc}
 3297              	.L211:
 3298              		.align	2
 3299              	.L210:
 3300 0074 00000000 		.word	uxSchedulerSuspended
 3301 0078 00000000 		.word	pxCurrentTCB
 3302              		.cfi_endproc
 3303              	.LFE164:
 3305              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3306              		.align	1
 3307              		.global	xTaskRemoveFromEventList
 3308              		.syntax unified
 3309              		.thumb
 3310              		.thumb_func
 3311              		.fpu fpv4-sp-d16
 3313              	xTaskRemoveFromEventList:
 3314              	.LFB165:
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccMf91lX.s 			page 114


2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3315              		.loc 1 2895 0
 3316              		.cfi_startproc
 3317              		@ args = 0, pretend = 0, frame = 24
 3318              		@ frame_needed = 1, uses_anonymous_args = 0
 3319 0000 80B5     		push	{r7, lr}
 3320              	.LCFI122:
 3321              		.cfi_def_cfa_offset 8
 3322              		.cfi_offset 7, -8
 3323              		.cfi_offset 14, -4
 3324 0002 86B0     		sub	sp, sp, #24
 3325              	.LCFI123:
 3326              		.cfi_def_cfa_offset 32
 3327 0004 00AF     		add	r7, sp, #0
 3328              	.LCFI124:
 3329              		.cfi_def_cfa_register 7
 3330 0006 7860     		str	r0, [r7, #4]
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 3331              		.loc 1 2912 0
 3332 0008 7B68     		ldr	r3, [r7, #4]
 3333 000a DB68     		ldr	r3, [r3, #12]
 3334 000c DB68     		ldr	r3, [r3, #12]
 3335 000e 3B61     		str	r3, [r7, #16]
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3336              		.loc 1 2913 0
 3337 0010 3B69     		ldr	r3, [r7, #16]
 3338 0012 002B     		cmp	r3, #0
 3339 0014 0BD1     		bne	.L213
 3340              	.LBB142:
 3341              	.LBB143:
ARM GAS  /tmp/ccMf91lX.s 			page 115


 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3342              		.loc 2 237 0 discriminator 1
 3343              		.syntax unified
 3344              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3345 0016 4FF05003 			mov r3, #80												
 3346 001a 72B6     		cpsid i													
 3347 001c 83F31188 		msr basepri, r3											
 3348 0020 BFF36F8F 		isb														
 3349 0024 BFF34F8F 		dsb														
 3350 0028 62B6     		cpsie i													
 3351              	
 3352              	@ 0 "" 2
 3353              		.thumb
 3354              		.syntax unified
 3355 002a FB60     		str	r3, [r7, #12]
 3356              	.L214:
 3357              	.LBE143:
 3358              	.LBE142:
 3359              		.loc 1 2913 0 discriminator 1
 3360 002c FEE7     		b	.L214
 3361              	.L213:
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3362              		.loc 1 2914 0
 3363 002e 3B69     		ldr	r3, [r7, #16]
 3364 0030 1833     		adds	r3, r3, #24
 3365 0032 1846     		mov	r0, r3
 3366 0034 FFF7FEFF 		bl	uxListRemove
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3367              		.loc 1 2916 0
 3368 0038 1D4B     		ldr	r3, .L220
 3369 003a 1B68     		ldr	r3, [r3]
 3370 003c 002B     		cmp	r3, #0
 3371 003e 1CD1     		bne	.L215
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 3372              		.loc 1 2918 0
 3373 0040 3B69     		ldr	r3, [r7, #16]
 3374 0042 0433     		adds	r3, r3, #4
 3375 0044 1846     		mov	r0, r3
 3376 0046 FFF7FEFF 		bl	uxListRemove
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3377              		.loc 1 2919 0
 3378 004a 3B69     		ldr	r3, [r7, #16]
 3379 004c DB6A     		ldr	r3, [r3, #44]
 3380 004e 0122     		movs	r2, #1
 3381 0050 9A40     		lsls	r2, r2, r3
 3382 0052 184B     		ldr	r3, .L220+4
 3383 0054 1B68     		ldr	r3, [r3]
 3384 0056 1343     		orrs	r3, r3, r2
 3385 0058 164A     		ldr	r2, .L220+4
 3386 005a 1360     		str	r3, [r2]
 3387 005c 3B69     		ldr	r3, [r7, #16]
 3388 005e DA6A     		ldr	r2, [r3, #44]
 3389 0060 1346     		mov	r3, r2
 3390 0062 9B00     		lsls	r3, r3, #2
 3391 0064 1344     		add	r3, r3, r2
ARM GAS  /tmp/ccMf91lX.s 			page 116


 3392 0066 9B00     		lsls	r3, r3, #2
 3393 0068 134A     		ldr	r2, .L220+8
 3394 006a 1A44     		add	r2, r2, r3
 3395 006c 3B69     		ldr	r3, [r7, #16]
 3396 006e 0433     		adds	r3, r3, #4
 3397 0070 1946     		mov	r1, r3
 3398 0072 1046     		mov	r0, r2
 3399 0074 FFF7FEFF 		bl	vListInsertEnd
 3400 0078 05E0     		b	.L216
 3401              	.L215:
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 3402              		.loc 1 2925 0
 3403 007a 3B69     		ldr	r3, [r7, #16]
 3404 007c 1833     		adds	r3, r3, #24
 3405 007e 1946     		mov	r1, r3
 3406 0080 0E48     		ldr	r0, .L220+12
 3407 0082 FFF7FEFF 		bl	vListInsertEnd
 3408              	.L216:
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3409              		.loc 1 2928 0
 3410 0086 3B69     		ldr	r3, [r7, #16]
 3411 0088 DA6A     		ldr	r2, [r3, #44]
 3412 008a 0D4B     		ldr	r3, .L220+16
 3413 008c 1B68     		ldr	r3, [r3]
 3414 008e DB6A     		ldr	r3, [r3, #44]
 3415 0090 9A42     		cmp	r2, r3
 3416 0092 05D9     		bls	.L217
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
 3417              		.loc 1 2933 0
 3418 0094 0123     		movs	r3, #1
 3419 0096 7B61     		str	r3, [r7, #20]
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 3420              		.loc 1 2937 0
 3421 0098 0A4B     		ldr	r3, .L220+20
 3422 009a 0122     		movs	r2, #1
 3423 009c 1A60     		str	r2, [r3]
 3424 009e 01E0     		b	.L218
 3425              	.L217:
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
 3426              		.loc 1 2941 0
ARM GAS  /tmp/ccMf91lX.s 			page 117


 3427 00a0 0023     		movs	r3, #0
 3428 00a2 7B61     		str	r3, [r7, #20]
 3429              	.L218:
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 3430              		.loc 1 2958 0
 3431 00a4 7B69     		ldr	r3, [r7, #20]
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3432              		.loc 1 2959 0
 3433 00a6 1846     		mov	r0, r3
 3434 00a8 1837     		adds	r7, r7, #24
 3435              	.LCFI125:
 3436              		.cfi_def_cfa_offset 8
 3437 00aa BD46     		mov	sp, r7
 3438              	.LCFI126:
 3439              		.cfi_def_cfa_register 13
 3440              		@ sp needed
 3441 00ac 80BD     		pop	{r7, pc}
 3442              	.L221:
 3443 00ae 00BF     		.align	2
 3444              	.L220:
 3445 00b0 00000000 		.word	uxSchedulerSuspended
 3446 00b4 00000000 		.word	uxTopReadyPriority
 3447 00b8 00000000 		.word	pxReadyTasksLists
 3448 00bc 00000000 		.word	xPendingReadyList
 3449 00c0 00000000 		.word	pxCurrentTCB
 3450 00c4 00000000 		.word	xYieldPending
 3451              		.cfi_endproc
 3452              	.LFE165:
 3454              		.section	.text.xTaskRemoveFromUnorderedEventList,"ax",%progbits
 3455              		.align	1
 3456              		.global	xTaskRemoveFromUnorderedEventList
 3457              		.syntax unified
 3458              		.thumb
 3459              		.thumb_func
 3460              		.fpu fpv4-sp-d16
 3462              	xTaskRemoveFromUnorderedEventList:
 3463              	.LFB166:
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemV
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
ARM GAS  /tmp/ccMf91lX.s 			page 118


 3464              		.loc 1 2963 0
 3465              		.cfi_startproc
 3466              		@ args = 0, pretend = 0, frame = 24
 3467              		@ frame_needed = 1, uses_anonymous_args = 0
 3468 0000 80B5     		push	{r7, lr}
 3469              	.LCFI127:
 3470              		.cfi_def_cfa_offset 8
 3471              		.cfi_offset 7, -8
 3472              		.cfi_offset 14, -4
 3473 0002 86B0     		sub	sp, sp, #24
 3474              	.LCFI128:
 3475              		.cfi_def_cfa_offset 32
 3476 0004 00AF     		add	r7, sp, #0
 3477              	.LCFI129:
 3478              		.cfi_def_cfa_register 7
 3479 0006 7860     		str	r0, [r7, #4]
 3480 0008 3960     		str	r1, [r7]
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
 3481              		.loc 1 2969 0
 3482 000a 2D4B     		ldr	r3, .L230
 3483 000c 1B68     		ldr	r3, [r3]
 3484 000e 002B     		cmp	r3, #0
 3485 0010 0BD1     		bne	.L223
 3486              	.LBB144:
 3487              	.LBB145:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3488              		.loc 2 237 0 discriminator 1
 3489              		.syntax unified
 3490              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3491 0012 4FF05003 			mov r3, #80												
 3492 0016 72B6     		cpsid i													
 3493 0018 83F31188 		msr basepri, r3											
 3494 001c BFF36F8F 		isb														
 3495 0020 BFF34F8F 		dsb														
 3496 0024 62B6     		cpsie i													
 3497              	
 3498              	@ 0 "" 2
 3499              		.thumb
 3500              		.syntax unified
 3501 0026 FB60     		str	r3, [r7, #12]
 3502              	.L224:
 3503              	.LBE145:
 3504              	.LBE144:
 3505              		.loc 1 2969 0 discriminator 1
 3506 0028 FEE7     		b	.L224
 3507              	.L223:
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 3508              		.loc 1 2972 0
 3509 002a 3B68     		ldr	r3, [r7]
 3510 002c 43F00042 		orr	r2, r3, #-2147483648
ARM GAS  /tmp/ccMf91lX.s 			page 119


 3511 0030 7B68     		ldr	r3, [r7, #4]
 3512 0032 1A60     		str	r2, [r3]
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 3513              		.loc 1 2976 0
 3514 0034 7B68     		ldr	r3, [r7, #4]
 3515 0036 DB68     		ldr	r3, [r3, #12]
 3516 0038 3B61     		str	r3, [r7, #16]
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3517              		.loc 1 2977 0
 3518 003a 3B69     		ldr	r3, [r7, #16]
 3519 003c 002B     		cmp	r3, #0
 3520 003e 0BD1     		bne	.L225
 3521              	.LBB146:
 3522              	.LBB147:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3523              		.loc 2 237 0 discriminator 1
 3524              		.syntax unified
 3525              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3526 0040 4FF05003 			mov r3, #80												
 3527 0044 72B6     		cpsid i													
 3528 0046 83F31188 		msr basepri, r3											
 3529 004a BFF36F8F 		isb														
 3530 004e BFF34F8F 		dsb														
 3531 0052 62B6     		cpsie i													
 3532              	
 3533              	@ 0 "" 2
 3534              		.thumb
 3535              		.syntax unified
 3536 0054 BB60     		str	r3, [r7, #8]
 3537              	.L226:
 3538              	.LBE147:
 3539              	.LBE146:
 3540              		.loc 1 2977 0 discriminator 2
 3541 0056 FEE7     		b	.L226
 3542              	.L225:
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3543              		.loc 1 2978 0
 3544 0058 7868     		ldr	r0, [r7, #4]
 3545 005a FFF7FEFF 		bl	uxListRemove
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 3546              		.loc 1 2983 0
 3547 005e 3B69     		ldr	r3, [r7, #16]
 3548 0060 0433     		adds	r3, r3, #4
 3549 0062 1846     		mov	r0, r3
 3550 0064 FFF7FEFF 		bl	uxListRemove
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3551              		.loc 1 2984 0
 3552 0068 3B69     		ldr	r3, [r7, #16]
 3553 006a DB6A     		ldr	r3, [r3, #44]
 3554 006c 0122     		movs	r2, #1
ARM GAS  /tmp/ccMf91lX.s 			page 120


 3555 006e 9A40     		lsls	r2, r2, r3
 3556 0070 144B     		ldr	r3, .L230+4
 3557 0072 1B68     		ldr	r3, [r3]
 3558 0074 1343     		orrs	r3, r3, r2
 3559 0076 134A     		ldr	r2, .L230+4
 3560 0078 1360     		str	r3, [r2]
 3561 007a 3B69     		ldr	r3, [r7, #16]
 3562 007c DA6A     		ldr	r2, [r3, #44]
 3563 007e 1346     		mov	r3, r2
 3564 0080 9B00     		lsls	r3, r3, #2
 3565 0082 1344     		add	r3, r3, r2
 3566 0084 9B00     		lsls	r3, r3, #2
 3567 0086 104A     		ldr	r2, .L230+8
 3568 0088 1A44     		add	r2, r2, r3
 3569 008a 3B69     		ldr	r3, [r7, #16]
 3570 008c 0433     		adds	r3, r3, #4
 3571 008e 1946     		mov	r1, r3
 3572 0090 1046     		mov	r0, r2
 3573 0092 FFF7FEFF 		bl	vListInsertEnd
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3574              		.loc 1 2986 0
 3575 0096 3B69     		ldr	r3, [r7, #16]
 3576 0098 DA6A     		ldr	r2, [r3, #44]
 3577 009a 0C4B     		ldr	r3, .L230+12
 3578 009c 1B68     		ldr	r3, [r3]
 3579 009e DB6A     		ldr	r3, [r3, #44]
 3580 00a0 9A42     		cmp	r2, r3
 3581 00a2 05D9     		bls	.L227
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a higher priority than the calling task.  This allows
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task to know if it should force a context
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch now. */
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
 3582              		.loc 1 2992 0
 3583 00a4 0123     		movs	r3, #1
 3584 00a6 7B61     		str	r3, [r7, #20]
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 3585              		.loc 1 2996 0
 3586 00a8 094B     		ldr	r3, .L230+16
 3587 00aa 0122     		movs	r2, #1
 3588 00ac 1A60     		str	r2, [r3]
 3589 00ae 01E0     		b	.L228
 3590              	.L227:
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
 3591              		.loc 1 3000 0
 3592 00b0 0023     		movs	r3, #0
 3593 00b2 7B61     		str	r3, [r7, #20]
 3594              	.L228:
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccMf91lX.s 			page 121


3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 3595              		.loc 1 3003 0
 3596 00b4 7B69     		ldr	r3, [r7, #20]
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3597              		.loc 1 3004 0
 3598 00b6 1846     		mov	r0, r3
 3599 00b8 1837     		adds	r7, r7, #24
 3600              	.LCFI130:
 3601              		.cfi_def_cfa_offset 8
 3602 00ba BD46     		mov	sp, r7
 3603              	.LCFI131:
 3604              		.cfi_def_cfa_register 13
 3605              		@ sp needed
 3606 00bc 80BD     		pop	{r7, pc}
 3607              	.L231:
 3608 00be 00BF     		.align	2
 3609              	.L230:
 3610 00c0 00000000 		.word	uxSchedulerSuspended
 3611 00c4 00000000 		.word	uxTopReadyPriority
 3612 00c8 00000000 		.word	pxReadyTasksLists
 3613 00cc 00000000 		.word	pxCurrentTCB
 3614 00d0 00000000 		.word	xYieldPending
 3615              		.cfi_endproc
 3616              	.LFE166:
 3618              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3619              		.align	1
 3620              		.global	vTaskSetTimeOutState
 3621              		.syntax unified
 3622              		.thumb
 3623              		.thumb_func
 3624              		.fpu fpv4-sp-d16
 3626              	vTaskSetTimeOutState:
 3627              	.LFB167:
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3628              		.loc 1 3008 0
 3629              		.cfi_startproc
 3630              		@ args = 0, pretend = 0, frame = 16
 3631              		@ frame_needed = 1, uses_anonymous_args = 0
 3632              		@ link register save eliminated.
 3633 0000 80B4     		push	{r7}
 3634              	.LCFI132:
 3635              		.cfi_def_cfa_offset 4
 3636              		.cfi_offset 7, -4
 3637 0002 85B0     		sub	sp, sp, #20
 3638              	.LCFI133:
 3639              		.cfi_def_cfa_offset 24
 3640 0004 00AF     		add	r7, sp, #0
 3641              	.LCFI134:
 3642              		.cfi_def_cfa_register 7
 3643 0006 7860     		str	r0, [r7, #4]
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3644              		.loc 1 3009 0
 3645 0008 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccMf91lX.s 			page 122


 3646 000a 002B     		cmp	r3, #0
 3647 000c 0BD1     		bne	.L233
 3648              	.LBB148:
 3649              	.LBB149:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3650              		.loc 2 237 0 discriminator 1
 3651              		.syntax unified
 3652              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3653 000e 4FF05003 			mov r3, #80												
 3654 0012 72B6     		cpsid i													
 3655 0014 83F31188 		msr basepri, r3											
 3656 0018 BFF36F8F 		isb														
 3657 001c BFF34F8F 		dsb														
 3658 0020 62B6     		cpsie i													
 3659              	
 3660              	@ 0 "" 2
 3661              		.thumb
 3662              		.syntax unified
 3663 0022 FB60     		str	r3, [r7, #12]
 3664              	.L234:
 3665              	.LBE149:
 3666              	.LBE148:
 3667              		.loc 1 3009 0 discriminator 1
 3668 0024 FEE7     		b	.L234
 3669              	.L233:
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 3670              		.loc 1 3010 0
 3671 0026 074B     		ldr	r3, .L235
 3672 0028 1A68     		ldr	r2, [r3]
 3673 002a 7B68     		ldr	r3, [r7, #4]
 3674 002c 1A60     		str	r2, [r3]
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3675              		.loc 1 3011 0
 3676 002e 064B     		ldr	r3, .L235+4
 3677 0030 1A68     		ldr	r2, [r3]
 3678 0032 7B68     		ldr	r3, [r7, #4]
 3679 0034 5A60     		str	r2, [r3, #4]
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3680              		.loc 1 3012 0
 3681 0036 00BF     		nop
 3682 0038 1437     		adds	r7, r7, #20
 3683              	.LCFI135:
 3684              		.cfi_def_cfa_offset 4
 3685 003a BD46     		mov	sp, r7
 3686              	.LCFI136:
 3687              		.cfi_def_cfa_register 13
 3688              		@ sp needed
 3689 003c 5DF8047B 		ldr	r7, [sp], #4
 3690              	.LCFI137:
 3691              		.cfi_restore 7
 3692              		.cfi_def_cfa_offset 0
 3693 0040 7047     		bx	lr
 3694              	.L236:
 3695 0042 00BF     		.align	2
 3696              	.L235:
 3697 0044 00000000 		.word	xNumOfOverflows
 3698 0048 00000000 		.word	xTickCount
ARM GAS  /tmp/ccMf91lX.s 			page 123


 3699              		.cfi_endproc
 3700              	.LFE167:
 3702              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3703              		.align	1
 3704              		.global	xTaskCheckForTimeOut
 3705              		.syntax unified
 3706              		.thumb
 3707              		.thumb_func
 3708              		.fpu fpv4-sp-d16
 3710              	xTaskCheckForTimeOut:
 3711              	.LFB168:
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3712              		.loc 1 3016 0
 3713              		.cfi_startproc
 3714              		@ args = 0, pretend = 0, frame = 24
 3715              		@ frame_needed = 1, uses_anonymous_args = 0
 3716 0000 80B5     		push	{r7, lr}
 3717              	.LCFI138:
 3718              		.cfi_def_cfa_offset 8
 3719              		.cfi_offset 7, -8
 3720              		.cfi_offset 14, -4
 3721 0002 86B0     		sub	sp, sp, #24
 3722              	.LCFI139:
 3723              		.cfi_def_cfa_offset 32
 3724 0004 00AF     		add	r7, sp, #0
 3725              	.LCFI140:
 3726              		.cfi_def_cfa_register 7
 3727 0006 7860     		str	r0, [r7, #4]
 3728 0008 3960     		str	r1, [r7]
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3729              		.loc 1 3019 0
 3730 000a 7B68     		ldr	r3, [r7, #4]
 3731 000c 002B     		cmp	r3, #0
 3732 000e 0BD1     		bne	.L238
 3733              	.LBB150:
 3734              	.LBB151:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3735              		.loc 2 237 0 discriminator 1
 3736              		.syntax unified
 3737              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3738 0010 4FF05003 			mov r3, #80												
 3739 0014 72B6     		cpsid i													
 3740 0016 83F31188 		msr basepri, r3											
 3741 001a BFF36F8F 		isb														
 3742 001e BFF34F8F 		dsb														
 3743 0022 62B6     		cpsie i													
 3744              	
 3745              	@ 0 "" 2
 3746              		.thumb
 3747              		.syntax unified
 3748 0024 FB60     		str	r3, [r7, #12]
 3749              	.L239:
ARM GAS  /tmp/ccMf91lX.s 			page 124


 3750              	.LBE151:
 3751              	.LBE150:
 3752              		.loc 1 3019 0 discriminator 1
 3753 0026 FEE7     		b	.L239
 3754              	.L238:
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3755              		.loc 1 3020 0
 3756 0028 3B68     		ldr	r3, [r7]
 3757 002a 002B     		cmp	r3, #0
 3758 002c 0BD1     		bne	.L240
 3759              	.LBB152:
 3760              	.LBB153:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3761              		.loc 2 237 0 discriminator 1
 3762              		.syntax unified
 3763              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3764 002e 4FF05003 			mov r3, #80												
 3765 0032 72B6     		cpsid i													
 3766 0034 83F31188 		msr basepri, r3											
 3767 0038 BFF36F8F 		isb														
 3768 003c BFF34F8F 		dsb														
 3769 0040 62B6     		cpsie i													
 3770              	
 3771              	@ 0 "" 2
 3772              		.thumb
 3773              		.syntax unified
 3774 0042 BB60     		str	r3, [r7, #8]
 3775              	.L241:
 3776              	.LBE153:
 3777              	.LBE152:
 3778              		.loc 1 3020 0 discriminator 2
 3779 0044 FEE7     		b	.L241
 3780              	.L240:
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 3781              		.loc 1 3022 0
 3782 0046 FFF7FEFF 		bl	vPortEnterCritical
 3783              	.LBB154:
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
 3784              		.loc 1 3025 0
 3785 004a 1C4B     		ldr	r3, .L247
 3786 004c 1B68     		ldr	r3, [r3]
 3787 004e 3B61     		str	r3, [r7, #16]
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccMf91lX.s 			page 125


3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 3788              		.loc 1 3039 0
 3789 0050 3B68     		ldr	r3, [r7]
 3790 0052 1B68     		ldr	r3, [r3]
 3791 0054 B3F1FF3F 		cmp	r3, #-1
 3792 0058 02D1     		bne	.L242
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 3793              		.loc 1 3044 0
 3794 005a 0023     		movs	r3, #0
 3795 005c 7B61     		str	r3, [r7, #20]
 3796 005e 26E0     		b	.L243
 3797              	.L242:
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 3798              		.loc 1 3049 0
 3799 0060 7B68     		ldr	r3, [r7, #4]
 3800 0062 1A68     		ldr	r2, [r3]
 3801 0064 164B     		ldr	r3, .L247+4
 3802 0066 1B68     		ldr	r3, [r3]
 3803 0068 9A42     		cmp	r2, r3
 3804 006a 07D0     		beq	.L244
 3805              		.loc 1 3049 0 is_stmt 0 discriminator 1
 3806 006c 7B68     		ldr	r3, [r7, #4]
 3807 006e 5A68     		ldr	r2, [r3, #4]
 3808 0070 3B69     		ldr	r3, [r7, #16]
 3809 0072 9A42     		cmp	r2, r3
 3810 0074 02D8     		bhi	.L244
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 3811              		.loc 1 3056 0 is_stmt 1
 3812 0076 0123     		movs	r3, #1
 3813 0078 7B61     		str	r3, [r7, #20]
 3814 007a 18E0     		b	.L243
 3815              	.L244:
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /
 3816              		.loc 1 3058 0
 3817 007c 7B68     		ldr	r3, [r7, #4]
 3818 007e 5B68     		ldr	r3, [r3, #4]
 3819 0080 3A69     		ldr	r2, [r7, #16]
 3820 0082 D21A     		subs	r2, r2, r3
 3821 0084 3B68     		ldr	r3, [r7]
 3822 0086 1B68     		ldr	r3, [r3]
 3823 0088 9A42     		cmp	r2, r3
ARM GAS  /tmp/ccMf91lX.s 			page 126


 3824 008a 0ED2     		bcs	.L245
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 3825              		.loc 1 3061 0
 3826 008c 3B68     		ldr	r3, [r7]
 3827 008e 1A68     		ldr	r2, [r3]
 3828 0090 7B68     		ldr	r3, [r7, #4]
 3829 0092 5968     		ldr	r1, [r3, #4]
 3830 0094 3B69     		ldr	r3, [r7, #16]
 3831 0096 CB1A     		subs	r3, r1, r3
 3832 0098 1A44     		add	r2, r2, r3
 3833 009a 3B68     		ldr	r3, [r7]
 3834 009c 1A60     		str	r2, [r3]
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 3835              		.loc 1 3062 0
 3836 009e 7868     		ldr	r0, [r7, #4]
 3837 00a0 FFF7FEFF 		bl	vTaskSetTimeOutState
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 3838              		.loc 1 3063 0
 3839 00a4 0023     		movs	r3, #0
 3840 00a6 7B61     		str	r3, [r7, #20]
 3841 00a8 01E0     		b	.L243
 3842              	.L245:
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 3843              		.loc 1 3067 0
 3844 00aa 0123     		movs	r3, #1
 3845 00ac 7B61     		str	r3, [r7, #20]
 3846              	.L243:
 3847              	.LBE154:
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 3848              		.loc 1 3070 0
 3849 00ae FFF7FEFF 		bl	vPortExitCritical
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 3850              		.loc 1 3072 0
 3851 00b2 7B69     		ldr	r3, [r7, #20]
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3852              		.loc 1 3073 0
 3853 00b4 1846     		mov	r0, r3
 3854 00b6 1837     		adds	r7, r7, #24
 3855              	.LCFI141:
 3856              		.cfi_def_cfa_offset 8
 3857 00b8 BD46     		mov	sp, r7
 3858              	.LCFI142:
 3859              		.cfi_def_cfa_register 13
 3860              		@ sp needed
 3861 00ba 80BD     		pop	{r7, pc}
 3862              	.L248:
 3863              		.align	2
 3864              	.L247:
 3865 00bc 00000000 		.word	xTickCount
ARM GAS  /tmp/ccMf91lX.s 			page 127


 3866 00c0 00000000 		.word	xNumOfOverflows
 3867              		.cfi_endproc
 3868              	.LFE168:
 3870              		.section	.text.vTaskMissedYield,"ax",%progbits
 3871              		.align	1
 3872              		.global	vTaskMissedYield
 3873              		.syntax unified
 3874              		.thumb
 3875              		.thumb_func
 3876              		.fpu fpv4-sp-d16
 3878              	vTaskMissedYield:
 3879              	.LFB169:
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3880              		.loc 1 3077 0
 3881              		.cfi_startproc
 3882              		@ args = 0, pretend = 0, frame = 0
 3883              		@ frame_needed = 1, uses_anonymous_args = 0
 3884              		@ link register save eliminated.
 3885 0000 80B4     		push	{r7}
 3886              	.LCFI143:
 3887              		.cfi_def_cfa_offset 4
 3888              		.cfi_offset 7, -4
 3889 0002 00AF     		add	r7, sp, #0
 3890              	.LCFI144:
 3891              		.cfi_def_cfa_register 7
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 3892              		.loc 1 3078 0
 3893 0004 034B     		ldr	r3, .L250
 3894 0006 0122     		movs	r2, #1
 3895 0008 1A60     		str	r2, [r3]
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3896              		.loc 1 3079 0
 3897 000a 00BF     		nop
 3898 000c BD46     		mov	sp, r7
 3899              	.LCFI145:
 3900              		.cfi_def_cfa_register 13
 3901              		@ sp needed
 3902 000e 5DF8047B 		ldr	r7, [sp], #4
 3903              	.LCFI146:
 3904              		.cfi_restore 7
 3905              		.cfi_def_cfa_offset 0
 3906 0012 7047     		bx	lr
 3907              	.L251:
 3908              		.align	2
 3909              	.L250:
 3910 0014 00000000 		.word	xYieldPending
 3911              		.cfi_endproc
 3912              	.LFE169:
 3914              		.section	.text.prvIdleTask,"ax",%progbits
 3915              		.align	1
 3916              		.syntax unified
 3917              		.thumb
 3918              		.thumb_func
 3919              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccMf91lX.s 			page 128


 3921              	prvIdleTask:
 3922              	.LFB170:
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3923              		.loc 1 3132 0
 3924              		.cfi_startproc
ARM GAS  /tmp/ccMf91lX.s 			page 129


 3925              		@ args = 0, pretend = 0, frame = 8
 3926              		@ frame_needed = 1, uses_anonymous_args = 0
 3927 0000 80B5     		push	{r7, lr}
 3928              	.LCFI147:
 3929              		.cfi_def_cfa_offset 8
 3930              		.cfi_offset 7, -8
 3931              		.cfi_offset 14, -4
 3932 0002 82B0     		sub	sp, sp, #8
 3933              	.LCFI148:
 3934              		.cfi_def_cfa_offset 16
 3935 0004 00AF     		add	r7, sp, #0
 3936              	.LCFI149:
 3937              		.cfi_def_cfa_register 7
 3938 0006 7860     		str	r0, [r7, #4]
 3939              	.L254:
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
 3940              		.loc 1 3143 0
 3941 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 3942              		.loc 1 3166 0
 3943 000c 064B     		ldr	r3, .L255
 3944 000e 1B68     		ldr	r3, [r3]
 3945 0010 012B     		cmp	r3, #1
 3946 0012 F9D9     		bls	.L254
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccMf91lX.s 			page 130


3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
 3947              		.loc 1 3168 0
 3948 0014 054B     		ldr	r3, .L255+4
 3949 0016 4FF08052 		mov	r2, #268435456
 3950 001a 1A60     		str	r2, [r3]
 3951              		.syntax unified
 3952              	@ 3168 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3953 001c BFF34F8F 		dsb
 3954              	@ 0 "" 2
 3955              	@ 3168 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3956 0020 BFF36F8F 		isb
 3957              	@ 0 "" 2
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3958              		.loc 1 3143 0
 3959              		.thumb
 3960              		.syntax unified
 3961 0024 F0E7     		b	.L254
 3962              	.L256:
 3963 0026 00BF     		.align	2
 3964              	.L255:
 3965 0028 00000000 		.word	pxReadyTasksLists
 3966 002c 04ED00E0 		.word	-536810236
 3967              		.cfi_endproc
 3968              	.LFE170:
 3970              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 3971              		.align	1
 3972              		.syntax unified
 3973              		.thumb
 3974              		.thumb_func
 3975              		.fpu fpv4-sp-d16
 3977              	prvInitialiseTaskLists:
 3978              	.LFB171:
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
ARM GAS  /tmp/ccMf91lX.s 			page 131


3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccMf91lX.s 			page 132


3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccMf91lX.s 			page 133


3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3979              		.loc 1 3334 0
 3980              		.cfi_startproc
 3981              		@ args = 0, pretend = 0, frame = 8
 3982              		@ frame_needed = 1, uses_anonymous_args = 0
 3983 0000 80B5     		push	{r7, lr}
 3984              	.LCFI150:
 3985              		.cfi_def_cfa_offset 8
 3986              		.cfi_offset 7, -8
 3987              		.cfi_offset 14, -4
 3988 0002 82B0     		sub	sp, sp, #8
 3989              	.LCFI151:
 3990              		.cfi_def_cfa_offset 16
 3991 0004 00AF     		add	r7, sp, #0
 3992              	.LCFI152:
 3993              		.cfi_def_cfa_register 7
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
 3994              		.loc 1 3337 0
 3995 0006 0023     		movs	r3, #0
 3996 0008 7B60     		str	r3, [r7, #4]
 3997 000a 0CE0     		b	.L258
 3998              	.L259:
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 3999              		.loc 1 3339 0 discriminator 3
 4000 000c 7A68     		ldr	r2, [r7, #4]
 4001 000e 1346     		mov	r3, r2
 4002 0010 9B00     		lsls	r3, r3, #2
 4003 0012 1344     		add	r3, r3, r2
ARM GAS  /tmp/ccMf91lX.s 			page 134


 4004 0014 9B00     		lsls	r3, r3, #2
 4005 0016 124A     		ldr	r2, .L260
 4006 0018 1344     		add	r3, r3, r2
 4007 001a 1846     		mov	r0, r3
 4008 001c FFF7FEFF 		bl	vListInitialise
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4009              		.loc 1 3337 0 discriminator 3
 4010 0020 7B68     		ldr	r3, [r7, #4]
 4011 0022 0133     		adds	r3, r3, #1
 4012 0024 7B60     		str	r3, [r7, #4]
 4013              	.L258:
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4014              		.loc 1 3337 0 is_stmt 0 discriminator 1
 4015 0026 7B68     		ldr	r3, [r7, #4]
 4016 0028 062B     		cmp	r3, #6
 4017 002a EFD9     		bls	.L259
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 4018              		.loc 1 3342 0 is_stmt 1
 4019 002c 0D48     		ldr	r0, .L260+4
 4020 002e FFF7FEFF 		bl	vListInitialise
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 4021              		.loc 1 3343 0
 4022 0032 0D48     		ldr	r0, .L260+8
 4023 0034 FFF7FEFF 		bl	vListInitialise
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 4024              		.loc 1 3344 0
 4025 0038 0C48     		ldr	r0, .L260+12
 4026 003a FFF7FEFF 		bl	vListInitialise
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 4027              		.loc 1 3348 0
 4028 003e 0C48     		ldr	r0, .L260+16
 4029 0040 FFF7FEFF 		bl	vListInitialise
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 4030              		.loc 1 3354 0
 4031 0044 0B48     		ldr	r0, .L260+20
 4032 0046 FFF7FEFF 		bl	vListInitialise
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 4033              		.loc 1 3360 0
 4034 004a 0B4B     		ldr	r3, .L260+24
 4035 004c 054A     		ldr	r2, .L260+4
 4036 004e 1A60     		str	r2, [r3]
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
ARM GAS  /tmp/ccMf91lX.s 			page 135


 4037              		.loc 1 3361 0
 4038 0050 0A4B     		ldr	r3, .L260+28
 4039 0052 054A     		ldr	r2, .L260+8
 4040 0054 1A60     		str	r2, [r3]
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4041              		.loc 1 3362 0
 4042 0056 00BF     		nop
 4043 0058 0837     		adds	r7, r7, #8
 4044              	.LCFI153:
 4045              		.cfi_def_cfa_offset 8
 4046 005a BD46     		mov	sp, r7
 4047              	.LCFI154:
 4048              		.cfi_def_cfa_register 13
 4049              		@ sp needed
 4050 005c 80BD     		pop	{r7, pc}
 4051              	.L261:
 4052 005e 00BF     		.align	2
 4053              	.L260:
 4054 0060 00000000 		.word	pxReadyTasksLists
 4055 0064 00000000 		.word	xDelayedTaskList1
 4056 0068 00000000 		.word	xDelayedTaskList2
 4057 006c 00000000 		.word	xPendingReadyList
 4058 0070 00000000 		.word	xTasksWaitingTermination
 4059 0074 00000000 		.word	xSuspendedTaskList
 4060 0078 00000000 		.word	pxDelayedTaskList
 4061 007c 00000000 		.word	pxOverflowDelayedTaskList
 4062              		.cfi_endproc
 4063              	.LFE171:
 4065              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 4066              		.align	1
 4067              		.syntax unified
 4068              		.thumb
 4069              		.thumb_func
 4070              		.fpu fpv4-sp-d16
 4072              	prvCheckTasksWaitingTermination:
 4073              	.LFB172:
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4074              		.loc 1 3366 0
 4075              		.cfi_startproc
 4076              		@ args = 0, pretend = 0, frame = 8
 4077              		@ frame_needed = 1, uses_anonymous_args = 0
 4078 0000 80B5     		push	{r7, lr}
 4079              	.LCFI155:
 4080              		.cfi_def_cfa_offset 8
 4081              		.cfi_offset 7, -8
 4082              		.cfi_offset 14, -4
 4083 0002 82B0     		sub	sp, sp, #8
 4084              	.LCFI156:
 4085              		.cfi_def_cfa_offset 16
 4086 0004 00AF     		add	r7, sp, #0
 4087              	.LCFI157:
 4088              		.cfi_def_cfa_register 7
 4089              	.LBB155:
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccMf91lX.s 			page 136


3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xListIsEmpty;
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		too often in the idle task. */
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 4090              		.loc 1 3376 0
 4091 0006 28E0     		b	.L263
 4092              	.L264:
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 4093              		.loc 1 3378 0
 4094 0008 FFF7FEFF 		bl	vTaskSuspendAll
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 4095              		.loc 1 3380 0
 4096 000c 174B     		ldr	r3, .L265
 4097 000e 1B68     		ldr	r3, [r3]
 4098 0010 002B     		cmp	r3, #0
 4099 0012 0CBF     		ite	eq
 4100 0014 0123     		moveq	r3, #1
 4101 0016 0023     		movne	r3, #0
 4102 0018 DBB2     		uxtb	r3, r3
 4103 001a 7B60     		str	r3, [r7, #4]
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xTaskResumeAll();
 4104              		.loc 1 3382 0
 4105 001c FFF7FEFF 		bl	xTaskResumeAll
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xListIsEmpty == pdFALSE )
 4106              		.loc 1 3384 0
 4107 0020 7B68     		ldr	r3, [r7, #4]
 4108 0022 002B     		cmp	r3, #0
 4109 0024 19D1     		bne	.L263
 4110              	.LBB156:
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				TCB_t *pxTCB;
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
 4111              		.loc 1 3388 0
 4112 0026 FFF7FEFF 		bl	vPortEnterCritical
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 4113              		.loc 1 3390 0
 4114 002a 104B     		ldr	r3, .L265
 4115 002c DB68     		ldr	r3, [r3, #12]
 4116 002e DB68     		ldr	r3, [r3, #12]
 4117 0030 3B60     		str	r3, [r7]
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 4118              		.loc 1 3391 0
 4119 0032 3B68     		ldr	r3, [r7]
 4120 0034 0433     		adds	r3, r3, #4
 4121 0036 1846     		mov	r0, r3
 4122 0038 FFF7FEFF 		bl	uxListRemove
ARM GAS  /tmp/ccMf91lX.s 			page 137


3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
 4123              		.loc 1 3392 0
 4124 003c 0C4B     		ldr	r3, .L265+4
 4125 003e 1B68     		ldr	r3, [r3]
 4126 0040 013B     		subs	r3, r3, #1
 4127 0042 0B4A     		ldr	r2, .L265+4
 4128 0044 1360     		str	r3, [r2]
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
 4129              		.loc 1 3393 0
 4130 0046 0B4B     		ldr	r3, .L265+8
 4131 0048 1B68     		ldr	r3, [r3]
 4132 004a 013B     		subs	r3, r3, #1
 4133 004c 094A     		ldr	r2, .L265+8
 4134 004e 1360     		str	r3, [r2]
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
 4135              		.loc 1 3395 0
 4136 0050 FFF7FEFF 		bl	vPortExitCritical
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 4137              		.loc 1 3397 0
 4138 0054 3868     		ldr	r0, [r7]
 4139 0056 FFF7FEFF 		bl	prvDeleteTCB
 4140              	.L263:
 4141              	.LBE156:
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4142              		.loc 1 3376 0
 4143 005a 064B     		ldr	r3, .L265+8
 4144 005c 1B68     		ldr	r3, [r3]
 4145 005e 002B     		cmp	r3, #0
 4146 0060 D2D1     		bne	.L264
 4147              	.LBE155:
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4148              		.loc 1 3406 0
 4149 0062 00BF     		nop
 4150 0064 0837     		adds	r7, r7, #8
 4151              	.LCFI158:
 4152              		.cfi_def_cfa_offset 8
 4153 0066 BD46     		mov	sp, r7
 4154              	.LCFI159:
 4155              		.cfi_def_cfa_register 13
 4156              		@ sp needed
 4157 0068 80BD     		pop	{r7, pc}
 4158              	.L266:
 4159 006a 00BF     		.align	2
 4160              	.L265:
 4161 006c 00000000 		.word	xTasksWaitingTermination
 4162 0070 00000000 		.word	uxCurrentNumberOfTasks
 4163 0074 00000000 		.word	uxDeletedTasksWaitingCleanUp
ARM GAS  /tmp/ccMf91lX.s 			page 138


 4164              		.cfi_endproc
 4165              	.LFE172:
 4167              		.section	.text.prvDeleteTCB,"ax",%progbits
 4168              		.align	1
 4169              		.syntax unified
 4170              		.thumb
 4171              		.thumb_func
 4172              		.fpu fpv4-sp-d16
 4174              	prvDeleteTCB:
 4175              	.LFB173:
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the suspended list then there is a chance it is
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			actually just blocked indefinitely - so really it should be reported as
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being in the Blocked state. */
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTaskStatus->eCurrentState == eSuspended )
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTaskStatus->eCurrentState = eBlocked;
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xTaskResumeAll();
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* INCLUDE_vTaskSuspend */
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
ARM GAS  /tmp/ccMf91lX.s 			page 139


3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the value
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		of eState passed into this function is eInvalid - otherwise the state is
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		just set to whatever is passed in. */
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eState;
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
ARM GAS  /tmp/ccMf91lX.s 			page 140


3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( uint16_t ) ulCount;
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
ARM GAS  /tmp/ccMf91lX.s 			page 141


3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4176              		.loc 1 3582 0
 4177              		.cfi_startproc
 4178              		@ args = 0, pretend = 0, frame = 8
 4179              		@ frame_needed = 1, uses_anonymous_args = 0
 4180 0000 80B5     		push	{r7, lr}
 4181              	.LCFI160:
 4182              		.cfi_def_cfa_offset 8
 4183              		.cfi_offset 7, -8
 4184              		.cfi_offset 14, -4
 4185 0002 82B0     		sub	sp, sp, #8
 4186              	.LCFI161:
 4187              		.cfi_def_cfa_offset 16
 4188 0004 00AF     		add	r7, sp, #0
 4189              	.LCFI162:
 4190              		.cfi_def_cfa_register 7
 4191 0006 7860     		str	r0, [r7, #4]
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
 4192              		.loc 1 3600 0
 4193 0008 7B68     		ldr	r3, [r7, #4]
 4194 000a 1B6B     		ldr	r3, [r3, #48]
 4195 000c 1846     		mov	r0, r3
 4196 000e FFF7FEFF 		bl	vPortFree
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
 4197              		.loc 1 3601 0
 4198 0012 7868     		ldr	r0, [r7, #4]
ARM GAS  /tmp/ccMf91lX.s 			page 142


 4199 0014 FFF7FEFF 		bl	vPortFree
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4200              		.loc 1 3630 0
 4201 0018 00BF     		nop
 4202 001a 0837     		adds	r7, r7, #8
 4203              	.LCFI163:
 4204              		.cfi_def_cfa_offset 8
 4205 001c BD46     		mov	sp, r7
 4206              	.LCFI164:
 4207              		.cfi_def_cfa_register 13
 4208              		@ sp needed
 4209 001e 80BD     		pop	{r7, pc}
 4210              		.cfi_endproc
 4211              	.LFE173:
 4213              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 4214              		.align	1
 4215              		.syntax unified
 4216              		.thumb
 4217              		.thumb_func
 4218              		.fpu fpv4-sp-d16
 4220              	prvResetNextTaskUnblockTime:
 4221              	.LFB174:
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4222              		.loc 1 3636 0
ARM GAS  /tmp/ccMf91lX.s 			page 143


 4223              		.cfi_startproc
 4224              		@ args = 0, pretend = 0, frame = 8
 4225              		@ frame_needed = 1, uses_anonymous_args = 0
 4226              		@ link register save eliminated.
 4227 0000 80B4     		push	{r7}
 4228              	.LCFI165:
 4229              		.cfi_def_cfa_offset 4
 4230              		.cfi_offset 7, -4
 4231 0002 83B0     		sub	sp, sp, #12
 4232              	.LCFI166:
 4233              		.cfi_def_cfa_offset 16
 4234 0004 00AF     		add	r7, sp, #0
 4235              	.LCFI167:
 4236              		.cfi_def_cfa_register 7
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 4237              		.loc 1 3639 0
 4238 0006 0F4B     		ldr	r3, .L274
 4239 0008 1B68     		ldr	r3, [r3]
 4240 000a 1B68     		ldr	r3, [r3]
 4241 000c 002B     		cmp	r3, #0
 4242 000e 01D1     		bne	.L269
 4243              		.loc 1 3639 0 is_stmt 0 discriminator 1
 4244 0010 0123     		movs	r3, #1
 4245 0012 00E0     		b	.L270
 4246              	.L269:
 4247              		.loc 1 3639 0 discriminator 2
 4248 0014 0023     		movs	r3, #0
 4249              	.L270:
 4250              		.loc 1 3639 0 discriminator 4
 4251 0016 002B     		cmp	r3, #0
 4252 0018 04D0     		beq	.L271
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 4253              		.loc 1 3645 0 is_stmt 1
 4254 001a 0B4B     		ldr	r3, .L274+4
 4255 001c 4FF0FF32 		mov	r2, #-1
 4256 0020 1A60     		str	r2, [r3]
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4257              		.loc 1 3656 0
 4258 0022 08E0     		b	.L273
 4259              	.L271:
ARM GAS  /tmp/ccMf91lX.s 			page 144


3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 4260              		.loc 1 3653 0
 4261 0024 074B     		ldr	r3, .L274
 4262 0026 1B68     		ldr	r3, [r3]
 4263 0028 DB68     		ldr	r3, [r3, #12]
 4264 002a DB68     		ldr	r3, [r3, #12]
 4265 002c 7B60     		str	r3, [r7, #4]
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4266              		.loc 1 3654 0
 4267 002e 7B68     		ldr	r3, [r7, #4]
 4268 0030 5B68     		ldr	r3, [r3, #4]
 4269 0032 054A     		ldr	r2, .L274+4
 4270 0034 1360     		str	r3, [r2]
 4271              	.L273:
 4272              		.loc 1 3656 0
 4273 0036 00BF     		nop
 4274 0038 0C37     		adds	r7, r7, #12
 4275              	.LCFI168:
 4276              		.cfi_def_cfa_offset 4
 4277 003a BD46     		mov	sp, r7
 4278              	.LCFI169:
 4279              		.cfi_def_cfa_register 13
 4280              		@ sp needed
 4281 003c 5DF8047B 		ldr	r7, [sp], #4
 4282              	.LCFI170:
 4283              		.cfi_restore 7
 4284              		.cfi_def_cfa_offset 0
 4285 0040 7047     		bx	lr
 4286              	.L275:
 4287 0042 00BF     		.align	2
 4288              	.L274:
 4289 0044 00000000 		.word	pxDelayedTaskList
 4290 0048 00000000 		.word	xNextTaskUnblockTime
 4291              		.cfi_endproc
 4292              	.LFE174:
 4294              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4295              		.align	1
 4296              		.global	xTaskGetCurrentTaskHandle
 4297              		.syntax unified
 4298              		.thumb
 4299              		.thumb_func
 4300              		.fpu fpv4-sp-d16
 4302              	xTaskGetCurrentTaskHandle:
 4303              	.LFB175:
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4304              		.loc 1 3662 0
 4305              		.cfi_startproc
 4306              		@ args = 0, pretend = 0, frame = 8
 4307              		@ frame_needed = 1, uses_anonymous_args = 0
 4308              		@ link register save eliminated.
 4309 0000 80B4     		push	{r7}
 4310              	.LCFI171:
ARM GAS  /tmp/ccMf91lX.s 			page 145


 4311              		.cfi_def_cfa_offset 4
 4312              		.cfi_offset 7, -4
 4313 0002 83B0     		sub	sp, sp, #12
 4314              	.LCFI172:
 4315              		.cfi_def_cfa_offset 16
 4316 0004 00AF     		add	r7, sp, #0
 4317              	.LCFI173:
 4318              		.cfi_def_cfa_register 7
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
 4319              		.loc 1 3668 0
 4320 0006 054B     		ldr	r3, .L278
 4321 0008 1B68     		ldr	r3, [r3]
 4322 000a 7B60     		str	r3, [r7, #4]
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 4323              		.loc 1 3670 0
 4324 000c 7B68     		ldr	r3, [r7, #4]
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4325              		.loc 1 3671 0
 4326 000e 1846     		mov	r0, r3
 4327 0010 0C37     		adds	r7, r7, #12
 4328              	.LCFI174:
 4329              		.cfi_def_cfa_offset 4
 4330 0012 BD46     		mov	sp, r7
 4331              	.LCFI175:
 4332              		.cfi_def_cfa_register 13
 4333              		@ sp needed
 4334 0014 5DF8047B 		ldr	r7, [sp], #4
 4335              	.LCFI176:
 4336              		.cfi_restore 7
 4337              		.cfi_def_cfa_offset 0
 4338 0018 7047     		bx	lr
 4339              	.L279:
 4340 001a 00BF     		.align	2
 4341              	.L278:
 4342 001c 00000000 		.word	pxCurrentTCB
 4343              		.cfi_endproc
 4344              	.LFE175:
 4346              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 4347              		.align	1
 4348              		.global	xTaskGetSchedulerState
 4349              		.syntax unified
 4350              		.thumb
 4351              		.thumb_func
 4352              		.fpu fpv4-sp-d16
 4354              	xTaskGetSchedulerState:
 4355              	.LFB176:
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
ARM GAS  /tmp/ccMf91lX.s 			page 146


3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4356              		.loc 1 3679 0
 4357              		.cfi_startproc
 4358              		@ args = 0, pretend = 0, frame = 8
 4359              		@ frame_needed = 1, uses_anonymous_args = 0
 4360              		@ link register save eliminated.
 4361 0000 80B4     		push	{r7}
 4362              	.LCFI177:
 4363              		.cfi_def_cfa_offset 4
 4364              		.cfi_offset 7, -4
 4365 0002 83B0     		sub	sp, sp, #12
 4366              	.LCFI178:
 4367              		.cfi_def_cfa_offset 16
 4368 0004 00AF     		add	r7, sp, #0
 4369              	.LCFI179:
 4370              		.cfi_def_cfa_register 7
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
 4371              		.loc 1 3682 0
 4372 0006 0B4B     		ldr	r3, .L285
 4373 0008 1B68     		ldr	r3, [r3]
 4374 000a 002B     		cmp	r3, #0
 4375 000c 02D1     		bne	.L281
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
 4376              		.loc 1 3684 0
 4377 000e 0123     		movs	r3, #1
 4378 0010 7B60     		str	r3, [r7, #4]
 4379 0012 08E0     		b	.L282
 4380              	.L281:
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4381              		.loc 1 3688 0
 4382 0014 084B     		ldr	r3, .L285+4
 4383 0016 1B68     		ldr	r3, [r3]
 4384 0018 002B     		cmp	r3, #0
 4385 001a 02D1     		bne	.L283
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
 4386              		.loc 1 3690 0
 4387 001c 0223     		movs	r3, #2
 4388 001e 7B60     		str	r3, [r7, #4]
 4389 0020 01E0     		b	.L282
 4390              	.L283:
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
 4391              		.loc 1 3694 0
 4392 0022 0023     		movs	r3, #0
 4393 0024 7B60     		str	r3, [r7, #4]
 4394              	.L282:
ARM GAS  /tmp/ccMf91lX.s 			page 147


3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 4395              		.loc 1 3698 0
 4396 0026 7B68     		ldr	r3, [r7, #4]
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4397              		.loc 1 3699 0
 4398 0028 1846     		mov	r0, r3
 4399 002a 0C37     		adds	r7, r7, #12
 4400              	.LCFI180:
 4401              		.cfi_def_cfa_offset 4
 4402 002c BD46     		mov	sp, r7
 4403              	.LCFI181:
 4404              		.cfi_def_cfa_register 13
 4405              		@ sp needed
 4406 002e 5DF8047B 		ldr	r7, [sp], #4
 4407              	.LCFI182:
 4408              		.cfi_restore 7
 4409              		.cfi_def_cfa_offset 0
 4410 0032 7047     		bx	lr
 4411              	.L286:
 4412              		.align	2
 4413              	.L285:
 4414 0034 00000000 		.word	xSchedulerRunning
 4415 0038 00000000 		.word	uxSchedulerSuspended
 4416              		.cfi_endproc
 4417              	.LFE176:
 4419              		.section	.text.vTaskPriorityInherit,"ax",%progbits
 4420              		.align	1
 4421              		.global	vTaskPriorityInherit
 4422              		.syntax unified
 4423              		.thumb
 4424              		.thumb_func
 4425              		.fpu fpv4-sp-d16
 4427              	vTaskPriorityInherit:
 4428              	.LFB177:
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4429              		.loc 1 3707 0
 4430              		.cfi_startproc
 4431              		@ args = 0, pretend = 0, frame = 16
 4432              		@ frame_needed = 1, uses_anonymous_args = 0
 4433 0000 80B5     		push	{r7, lr}
 4434              	.LCFI183:
 4435              		.cfi_def_cfa_offset 8
 4436              		.cfi_offset 7, -8
 4437              		.cfi_offset 14, -4
 4438 0002 84B0     		sub	sp, sp, #16
 4439              	.LCFI184:
 4440              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccMf91lX.s 			page 148


 4441 0004 00AF     		add	r7, sp, #0
 4442              	.LCFI185:
 4443              		.cfi_def_cfa_register 7
 4444 0006 7860     		str	r0, [r7, #4]
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4445              		.loc 1 3708 0
 4446 0008 7B68     		ldr	r3, [r7, #4]
 4447 000a FB60     		str	r3, [r7, #12]
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL. */
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 4448              		.loc 1 3712 0
 4449 000c 7B68     		ldr	r3, [r7, #4]
 4450 000e 002B     		cmp	r3, #0
 4451 0010 62D0     		beq	.L296
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 4452              		.loc 1 3717 0
 4453 0012 FB68     		ldr	r3, [r7, #12]
 4454 0014 DA6A     		ldr	r2, [r3, #44]
 4455 0016 324B     		ldr	r3, .L297
 4456 0018 1B68     		ldr	r3, [r3]
 4457 001a DB6A     		ldr	r3, [r3, #44]
 4458 001c 9A42     		cmp	r2, r3
 4459 001e 5BD2     		bcs	.L296
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	being used for anything else. */
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 4460              		.loc 1 3722 0
 4461 0020 FB68     		ldr	r3, [r7, #12]
 4462 0022 9B69     		ldr	r3, [r3, #24]
 4463 0024 002B     		cmp	r3, #0
 4464 0026 06DB     		blt	.L289
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 4465              		.loc 1 3724 0
 4466 0028 2D4B     		ldr	r3, .L297
 4467 002a 1B68     		ldr	r3, [r3]
 4468 002c DB6A     		ldr	r3, [r3, #44]
 4469 002e C3F10702 		rsb	r2, r3, #7
 4470 0032 FB68     		ldr	r3, [r7, #12]
 4471 0034 9A61     		str	r2, [r3, #24]
 4472              	.L289:
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
ARM GAS  /tmp/ccMf91lX.s 			page 149


3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListI
 4473              		.loc 1 3733 0
 4474 0036 FB68     		ldr	r3, [r7, #12]
 4475 0038 5969     		ldr	r1, [r3, #20]
 4476 003a FB68     		ldr	r3, [r7, #12]
 4477 003c DA6A     		ldr	r2, [r3, #44]
 4478 003e 1346     		mov	r3, r2
 4479 0040 9B00     		lsls	r3, r3, #2
 4480 0042 1344     		add	r3, r3, r2
 4481 0044 9B00     		lsls	r3, r3, #2
 4482 0046 274A     		ldr	r2, .L297+4
 4483 0048 1344     		add	r3, r3, r2
 4484 004a 9942     		cmp	r1, r3
 4485 004c 01D1     		bne	.L290
 4486              		.loc 1 3733 0 is_stmt 0 discriminator 1
 4487 004e 0123     		movs	r3, #1
 4488 0050 00E0     		b	.L291
 4489              	.L290:
 4490              		.loc 1 3733 0 discriminator 2
 4491 0052 0023     		movs	r3, #0
 4492              	.L291:
 4493              		.loc 1 3733 0 discriminator 4
 4494 0054 002B     		cmp	r3, #0
 4495 0056 3AD0     		beq	.L292
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 4496              		.loc 1 3735 0 is_stmt 1
 4497 0058 FB68     		ldr	r3, [r7, #12]
 4498 005a 0433     		adds	r3, r3, #4
 4499 005c 1846     		mov	r0, r3
 4500 005e FFF7FEFF 		bl	uxListRemove
 4501 0062 0346     		mov	r3, r0
 4502 0064 002B     		cmp	r3, #0
 4503 0066 15D1     		bne	.L293
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 4504              		.loc 1 3737 0
 4505 0068 FB68     		ldr	r3, [r7, #12]
 4506 006a DA6A     		ldr	r2, [r3, #44]
 4507 006c 1D49     		ldr	r1, .L297+4
 4508 006e 1346     		mov	r3, r2
 4509 0070 9B00     		lsls	r3, r3, #2
 4510 0072 1344     		add	r3, r3, r2
 4511 0074 9B00     		lsls	r3, r3, #2
 4512 0076 0B44     		add	r3, r3, r1
 4513 0078 1B68     		ldr	r3, [r3]
 4514 007a 002B     		cmp	r3, #0
 4515 007c 0AD1     		bne	.L293
 4516              		.loc 1 3737 0 is_stmt 0 discriminator 1
 4517 007e FB68     		ldr	r3, [r7, #12]
 4518 0080 DB6A     		ldr	r3, [r3, #44]
 4519 0082 0122     		movs	r2, #1
 4520 0084 02FA03F3 		lsl	r3, r2, r3
 4521 0088 DA43     		mvns	r2, r3
 4522 008a 174B     		ldr	r3, .L297+8
 4523 008c 1B68     		ldr	r3, [r3]
 4524 008e 1340     		ands	r3, r3, r2
ARM GAS  /tmp/ccMf91lX.s 			page 150


 4525 0090 154A     		ldr	r2, .L297+8
 4526 0092 1360     		str	r3, [r2]
 4527              	.L293:
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 4528              		.loc 1 3745 0 is_stmt 1
 4529 0094 124B     		ldr	r3, .L297
 4530 0096 1B68     		ldr	r3, [r3]
 4531 0098 DA6A     		ldr	r2, [r3, #44]
 4532 009a FB68     		ldr	r3, [r7, #12]
 4533 009c DA62     		str	r2, [r3, #44]
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4534              		.loc 1 3746 0
 4535 009e FB68     		ldr	r3, [r7, #12]
 4536 00a0 DB6A     		ldr	r3, [r3, #44]
 4537 00a2 0122     		movs	r2, #1
 4538 00a4 9A40     		lsls	r2, r2, r3
 4539 00a6 104B     		ldr	r3, .L297+8
 4540 00a8 1B68     		ldr	r3, [r3]
 4541 00aa 1343     		orrs	r3, r3, r2
 4542 00ac 0E4A     		ldr	r2, .L297+8
 4543 00ae 1360     		str	r3, [r2]
 4544 00b0 FB68     		ldr	r3, [r7, #12]
 4545 00b2 DA6A     		ldr	r2, [r3, #44]
 4546 00b4 1346     		mov	r3, r2
 4547 00b6 9B00     		lsls	r3, r3, #2
 4548 00b8 1344     		add	r3, r3, r2
 4549 00ba 9B00     		lsls	r3, r3, #2
 4550 00bc 094A     		ldr	r2, .L297+4
 4551 00be 1A44     		add	r2, r2, r3
 4552 00c0 FB68     		ldr	r3, [r7, #12]
 4553 00c2 0433     		adds	r3, r3, #4
 4554 00c4 1946     		mov	r1, r3
 4555 00c6 1046     		mov	r0, r2
 4556 00c8 FFF7FEFF 		bl	vListInsertEnd
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccMf91lX.s 			page 151


3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4557              		.loc 1 3765 0
 4558 00cc 04E0     		b	.L296
 4559              	.L292:
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4560              		.loc 1 3751 0
 4561 00ce 044B     		ldr	r3, .L297
 4562 00d0 1B68     		ldr	r3, [r3]
 4563 00d2 DA6A     		ldr	r2, [r3, #44]
 4564 00d4 FB68     		ldr	r3, [r7, #12]
 4565 00d6 DA62     		str	r2, [r3, #44]
 4566              	.L296:
 4567              		.loc 1 3765 0
 4568 00d8 00BF     		nop
 4569 00da 1037     		adds	r7, r7, #16
 4570              	.LCFI186:
 4571              		.cfi_def_cfa_offset 8
 4572 00dc BD46     		mov	sp, r7
 4573              	.LCFI187:
 4574              		.cfi_def_cfa_register 13
 4575              		@ sp needed
 4576 00de 80BD     		pop	{r7, pc}
 4577              	.L298:
 4578              		.align	2
 4579              	.L297:
 4580 00e0 00000000 		.word	pxCurrentTCB
 4581 00e4 00000000 		.word	pxReadyTasksLists
 4582 00e8 00000000 		.word	uxTopReadyPriority
 4583              		.cfi_endproc
 4584              	.LFE177:
 4586              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 4587              		.align	1
 4588              		.global	xTaskPriorityDisinherit
 4589              		.syntax unified
 4590              		.thumb
 4591              		.thumb_func
 4592              		.fpu fpv4-sp-d16
 4594              	xTaskPriorityDisinherit:
 4595              	.LFB178:
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4596              		.loc 1 3773 0
 4597              		.cfi_startproc
 4598              		@ args = 0, pretend = 0, frame = 24
 4599              		@ frame_needed = 1, uses_anonymous_args = 0
 4600 0000 80B5     		push	{r7, lr}
 4601              	.LCFI188:
 4602              		.cfi_def_cfa_offset 8
 4603              		.cfi_offset 7, -8
ARM GAS  /tmp/ccMf91lX.s 			page 152


 4604              		.cfi_offset 14, -4
 4605 0002 86B0     		sub	sp, sp, #24
 4606              	.LCFI189:
 4607              		.cfi_def_cfa_offset 32
 4608 0004 00AF     		add	r7, sp, #0
 4609              	.LCFI190:
 4610              		.cfi_def_cfa_register 7
 4611 0006 7860     		str	r0, [r7, #4]
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4612              		.loc 1 3774 0
 4613 0008 7B68     		ldr	r3, [r7, #4]
 4614 000a 3B61     		str	r3, [r7, #16]
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 4615              		.loc 1 3775 0
 4616 000c 0023     		movs	r3, #0
 4617 000e 7B61     		str	r3, [r7, #20]
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 4618              		.loc 1 3777 0
 4619 0010 7B68     		ldr	r3, [r7, #4]
 4620 0012 002B     		cmp	r3, #0
 4621 0014 70D0     		beq	.L300
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
 4622              		.loc 1 3783 0
 4623 0016 3B4B     		ldr	r3, .L308
 4624 0018 1B68     		ldr	r3, [r3]
 4625 001a 3A69     		ldr	r2, [r7, #16]
 4626 001c 9A42     		cmp	r2, r3
 4627 001e 0BD0     		beq	.L301
 4628              	.LBB157:
 4629              	.LBB158:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4630              		.loc 2 237 0 discriminator 1
 4631              		.syntax unified
 4632              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4633 0020 4FF05003 			mov r3, #80												
 4634 0024 72B6     		cpsid i													
 4635 0026 83F31188 		msr basepri, r3											
 4636 002a BFF36F8F 		isb														
 4637 002e BFF34F8F 		dsb														
 4638 0032 62B6     		cpsie i													
 4639              	
 4640              	@ 0 "" 2
 4641              		.thumb
 4642              		.syntax unified
 4643 0034 FB60     		str	r3, [r7, #12]
 4644              	.L302:
 4645              	.LBE158:
 4646              	.LBE157:
 4647              		.loc 1 3783 0 discriminator 1
 4648 0036 FEE7     		b	.L302
 4649              	.L301:
ARM GAS  /tmp/ccMf91lX.s 			page 153


3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4650              		.loc 1 3785 0
 4651 0038 3B69     		ldr	r3, [r7, #16]
 4652 003a 9B6C     		ldr	r3, [r3, #72]
 4653 003c 002B     		cmp	r3, #0
 4654 003e 0BD1     		bne	.L303
 4655              	.LBB159:
 4656              	.LBB160:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4657              		.loc 2 237 0 discriminator 1
 4658              		.syntax unified
 4659              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4660 0040 4FF05003 			mov r3, #80												
 4661 0044 72B6     		cpsid i													
 4662 0046 83F31188 		msr basepri, r3											
 4663 004a BFF36F8F 		isb														
 4664 004e BFF34F8F 		dsb														
 4665 0052 62B6     		cpsie i													
 4666              	
 4667              	@ 0 "" 2
 4668              		.thumb
 4669              		.syntax unified
 4670 0054 BB60     		str	r3, [r7, #8]
 4671              	.L304:
 4672              	.LBE160:
 4673              	.LBE159:
 4674              		.loc 1 3785 0 discriminator 2
 4675 0056 FEE7     		b	.L304
 4676              	.L303:
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4677              		.loc 1 3786 0
 4678 0058 3B69     		ldr	r3, [r7, #16]
 4679 005a 9B6C     		ldr	r3, [r3, #72]
 4680 005c 5A1E     		subs	r2, r3, #1
 4681 005e 3B69     		ldr	r3, [r7, #16]
 4682 0060 9A64     		str	r2, [r3, #72]
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 4683              		.loc 1 3790 0
 4684 0062 3B69     		ldr	r3, [r7, #16]
 4685 0064 DA6A     		ldr	r2, [r3, #44]
 4686 0066 3B69     		ldr	r3, [r7, #16]
 4687 0068 5B6C     		ldr	r3, [r3, #68]
 4688 006a 9A42     		cmp	r2, r3
 4689 006c 44D0     		beq	.L300
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 4690              		.loc 1 3793 0
 4691 006e 3B69     		ldr	r3, [r7, #16]
 4692 0070 9B6C     		ldr	r3, [r3, #72]
 4693 0072 002B     		cmp	r3, #0
 4694 0074 40D1     		bne	.L300
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccMf91lX.s 			page 154


3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding	task then it must be the running state task.  Remove
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the	holding task from the ready	list. */
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 4695              		.loc 1 3800 0
 4696 0076 3B69     		ldr	r3, [r7, #16]
 4697 0078 0433     		adds	r3, r3, #4
 4698 007a 1846     		mov	r0, r3
 4699 007c FFF7FEFF 		bl	uxListRemove
 4700 0080 0346     		mov	r3, r0
 4701 0082 002B     		cmp	r3, #0
 4702 0084 15D1     		bne	.L305
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 4703              		.loc 1 3802 0
 4704 0086 3B69     		ldr	r3, [r7, #16]
 4705 0088 DA6A     		ldr	r2, [r3, #44]
 4706 008a 1F49     		ldr	r1, .L308+4
 4707 008c 1346     		mov	r3, r2
 4708 008e 9B00     		lsls	r3, r3, #2
 4709 0090 1344     		add	r3, r3, r2
 4710 0092 9B00     		lsls	r3, r3, #2
 4711 0094 0B44     		add	r3, r3, r1
 4712 0096 1B68     		ldr	r3, [r3]
 4713 0098 002B     		cmp	r3, #0
 4714 009a 0AD1     		bne	.L305
 4715              		.loc 1 3802 0 is_stmt 0 discriminator 1
 4716 009c 3B69     		ldr	r3, [r7, #16]
 4717 009e DB6A     		ldr	r3, [r3, #44]
 4718 00a0 0122     		movs	r2, #1
 4719 00a2 02FA03F3 		lsl	r3, r2, r3
 4720 00a6 DA43     		mvns	r2, r3
 4721 00a8 184B     		ldr	r3, .L308+8
 4722 00aa 1B68     		ldr	r3, [r3]
 4723 00ac 1340     		ands	r3, r3, r2
 4724 00ae 174A     		ldr	r2, .L308+8
 4725 00b0 1360     		str	r3, [r2]
 4726              	.L305:
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 4727              		.loc 1 3812 0 is_stmt 1
 4728 00b2 3B69     		ldr	r3, [r7, #16]
 4729 00b4 5A6C     		ldr	r2, [r3, #68]
 4730 00b6 3B69     		ldr	r3, [r7, #16]
 4731 00b8 DA62     		str	r2, [r3, #44]
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
ARM GAS  /tmp/ccMf91lX.s 			page 155


3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 4732              		.loc 1 3817 0
 4733 00ba 3B69     		ldr	r3, [r7, #16]
 4734 00bc DB6A     		ldr	r3, [r3, #44]
 4735 00be C3F10702 		rsb	r2, r3, #7
 4736 00c2 3B69     		ldr	r3, [r7, #16]
 4737 00c4 9A61     		str	r2, [r3, #24]
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4738              		.loc 1 3818 0
 4739 00c6 3B69     		ldr	r3, [r7, #16]
 4740 00c8 DB6A     		ldr	r3, [r3, #44]
 4741 00ca 0122     		movs	r2, #1
 4742 00cc 9A40     		lsls	r2, r2, r3
 4743 00ce 0F4B     		ldr	r3, .L308+8
 4744 00d0 1B68     		ldr	r3, [r3]
 4745 00d2 1343     		orrs	r3, r3, r2
 4746 00d4 0D4A     		ldr	r2, .L308+8
 4747 00d6 1360     		str	r3, [r2]
 4748 00d8 3B69     		ldr	r3, [r7, #16]
 4749 00da DA6A     		ldr	r2, [r3, #44]
 4750 00dc 1346     		mov	r3, r2
 4751 00de 9B00     		lsls	r3, r3, #2
 4752 00e0 1344     		add	r3, r3, r2
 4753 00e2 9B00     		lsls	r3, r3, #2
 4754 00e4 084A     		ldr	r2, .L308+4
 4755 00e6 1A44     		add	r2, r2, r3
 4756 00e8 3B69     		ldr	r3, [r7, #16]
 4757 00ea 0433     		adds	r3, r3, #4
 4758 00ec 1946     		mov	r1, r3
 4759 00ee 1046     		mov	r0, r2
 4760 00f0 FFF7FEFF 		bl	vListInsertEnd
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 4761              		.loc 1 3828 0
 4762 00f4 0123     		movs	r3, #1
 4763 00f6 7B61     		str	r3, [r7, #20]
 4764              	.L300:
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccMf91lX.s 			page 156


3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 4765              		.loc 1 3845 0
 4766 00f8 7B69     		ldr	r3, [r7, #20]
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4767              		.loc 1 3846 0
 4768 00fa 1846     		mov	r0, r3
 4769 00fc 1837     		adds	r7, r7, #24
 4770              	.LCFI191:
 4771              		.cfi_def_cfa_offset 8
 4772 00fe BD46     		mov	sp, r7
 4773              	.LCFI192:
 4774              		.cfi_def_cfa_register 13
 4775              		@ sp needed
 4776 0100 80BD     		pop	{r7, pc}
 4777              	.L309:
 4778 0102 00BF     		.align	2
 4779              	.L308:
 4780 0104 00000000 		.word	pxCurrentTCB
 4781 0108 00000000 		.word	pxReadyTasksLists
 4782 010c 00000000 		.word	uxTopReadyPriority
 4783              		.cfi_endproc
 4784              	.LFE178:
 4786              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4787              		.align	1
 4788              		.global	uxTaskResetEventItemValue
 4789              		.syntax unified
 4790              		.thumb
 4791              		.thumb_func
 4792              		.fpu fpv4-sp-d16
 4794              	uxTaskResetEventItemValue:
 4795              	.LFB179:
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
ARM GAS  /tmp/ccMf91lX.s 			page 157


3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
ARM GAS  /tmp/ccMf91lX.s 			page 158


3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
ARM GAS  /tmp/ccMf91lX.s 			page 159


3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = 0x00;
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
ARM GAS  /tmp/ccMf91lX.s 			page 160


4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
ARM GAS  /tmp/ccMf91lX.s 			page 161


4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0 )
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
ARM GAS  /tmp/ccMf91lX.s 			page 162


4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4796              		.loc 1 4163 0
 4797              		.cfi_startproc
 4798              		@ args = 0, pretend = 0, frame = 8
 4799              		@ frame_needed = 1, uses_anonymous_args = 0
 4800              		@ link register save eliminated.
 4801 0000 80B4     		push	{r7}
 4802              	.LCFI193:
 4803              		.cfi_def_cfa_offset 4
 4804              		.cfi_offset 7, -4
 4805 0002 83B0     		sub	sp, sp, #12
 4806              	.LCFI194:
 4807              		.cfi_def_cfa_offset 16
 4808 0004 00AF     		add	r7, sp, #0
 4809              	.LCFI195:
 4810              		.cfi_def_cfa_register 7
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 4811              		.loc 1 4166 0
 4812 0006 094B     		ldr	r3, .L312
 4813 0008 1B68     		ldr	r3, [r3]
 4814 000a 9B69     		ldr	r3, [r3, #24]
 4815 000c 7B60     		str	r3, [r7, #4]
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 4816              		.loc 1 4170 0
 4817 000e 074B     		ldr	r3, .L312
 4818 0010 1B68     		ldr	r3, [r3]
 4819 0012 064A     		ldr	r2, .L312
 4820 0014 1268     		ldr	r2, [r2]
 4821 0016 D26A     		ldr	r2, [r2, #44]
 4822 0018 C2F10702 		rsb	r2, r2, #7
 4823 001c 9A61     		str	r2, [r3, #24]
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
 4824              		.loc 1 4172 0
 4825 001e 7B68     		ldr	r3, [r7, #4]
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4826              		.loc 1 4173 0
 4827 0020 1846     		mov	r0, r3
 4828 0022 0C37     		adds	r7, r7, #12
 4829              	.LCFI196:
 4830              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccMf91lX.s 			page 163


 4831 0024 BD46     		mov	sp, r7
 4832              	.LCFI197:
 4833              		.cfi_def_cfa_register 13
 4834              		@ sp needed
 4835 0026 5DF8047B 		ldr	r7, [sp], #4
 4836              	.LCFI198:
 4837              		.cfi_restore 7
 4838              		.cfi_def_cfa_offset 0
 4839 002a 7047     		bx	lr
 4840              	.L313:
 4841              		.align	2
 4842              	.L312:
 4843 002c 00000000 		.word	pxCurrentTCB
 4844              		.cfi_endproc
 4845              	.LFE179:
 4847              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 4848              		.align	1
 4849              		.global	pvTaskIncrementMutexHeldCount
 4850              		.syntax unified
 4851              		.thumb
 4852              		.thumb_func
 4853              		.fpu fpv4-sp-d16
 4855              	pvTaskIncrementMutexHeldCount:
 4856              	.LFB180:
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4857              		.loc 1 4179 0
 4858              		.cfi_startproc
 4859              		@ args = 0, pretend = 0, frame = 0
 4860              		@ frame_needed = 1, uses_anonymous_args = 0
 4861              		@ link register save eliminated.
 4862 0000 80B4     		push	{r7}
 4863              	.LCFI199:
 4864              		.cfi_def_cfa_offset 4
 4865              		.cfi_offset 7, -4
 4866 0002 00AF     		add	r7, sp, #0
 4867              	.LCFI200:
 4868              		.cfi_def_cfa_register 7
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
 4869              		.loc 1 4182 0
 4870 0004 074B     		ldr	r3, .L317
 4871 0006 1B68     		ldr	r3, [r3]
 4872 0008 002B     		cmp	r3, #0
 4873 000a 04D0     		beq	.L315
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 4874              		.loc 1 4184 0
 4875 000c 054B     		ldr	r3, .L317
 4876 000e 1B68     		ldr	r3, [r3]
 4877 0010 9A6C     		ldr	r2, [r3, #72]
 4878 0012 0132     		adds	r2, r2, #1
ARM GAS  /tmp/ccMf91lX.s 			page 164


 4879 0014 9A64     		str	r2, [r3, #72]
 4880              	.L315:
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
 4881              		.loc 1 4187 0
 4882 0016 034B     		ldr	r3, .L317
 4883 0018 1B68     		ldr	r3, [r3]
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4884              		.loc 1 4188 0
 4885 001a 1846     		mov	r0, r3
 4886 001c BD46     		mov	sp, r7
 4887              	.LCFI201:
 4888              		.cfi_def_cfa_register 13
 4889              		@ sp needed
 4890 001e 5DF8047B 		ldr	r7, [sp], #4
 4891              	.LCFI202:
 4892              		.cfi_restore 7
 4893              		.cfi_def_cfa_offset 0
 4894 0022 7047     		bx	lr
 4895              	.L318:
 4896              		.align	2
 4897              	.L317:
 4898 0024 00000000 		.word	pxCurrentTCB
 4899              		.cfi_endproc
 4900              	.LFE180:
 4902              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 4903              		.align	1
 4904              		.global	ulTaskNotifyTake
 4905              		.syntax unified
 4906              		.thumb
 4907              		.thumb_func
 4908              		.fpu fpv4-sp-d16
 4910              	ulTaskNotifyTake:
 4911              	.LFB181:
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4912              		.loc 1 4196 0
 4913              		.cfi_startproc
 4914              		@ args = 0, pretend = 0, frame = 16
 4915              		@ frame_needed = 1, uses_anonymous_args = 0
 4916 0000 80B5     		push	{r7, lr}
 4917              	.LCFI203:
 4918              		.cfi_def_cfa_offset 8
 4919              		.cfi_offset 7, -8
 4920              		.cfi_offset 14, -4
 4921 0002 84B0     		sub	sp, sp, #16
 4922              	.LCFI204:
 4923              		.cfi_def_cfa_offset 24
 4924 0004 00AF     		add	r7, sp, #0
 4925              	.LCFI205:
ARM GAS  /tmp/ccMf91lX.s 			page 165


 4926              		.cfi_def_cfa_register 7
 4927 0006 7860     		str	r0, [r7, #4]
 4928 0008 3960     		str	r1, [r7]
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 4929              		.loc 1 4199 0
 4930 000a FFF7FEFF 		bl	vPortEnterCritical
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 4931              		.loc 1 4202 0
 4932 000e 1E4B     		ldr	r3, .L325
 4933 0010 1B68     		ldr	r3, [r3]
 4934 0012 DB6C     		ldr	r3, [r3, #76]
 4935 0014 002B     		cmp	r3, #0
 4936 0016 13D1     		bne	.L320
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 4937              		.loc 1 4205 0
 4938 0018 1B4B     		ldr	r3, .L325
 4939 001a 1B68     		ldr	r3, [r3]
 4940 001c 0122     		movs	r2, #1
 4941 001e 83F85020 		strb	r2, [r3, #80]
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 4942              		.loc 1 4207 0
 4943 0022 3B68     		ldr	r3, [r7]
 4944 0024 002B     		cmp	r3, #0
 4945 0026 0BD0     		beq	.L320
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4946              		.loc 1 4209 0
 4947 0028 0121     		movs	r1, #1
 4948 002a 3868     		ldr	r0, [r7]
 4949 002c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 4950              		.loc 1 4216 0
 4951 0030 164B     		ldr	r3, .L325+4
 4952 0032 4FF08052 		mov	r2, #268435456
 4953 0036 1A60     		str	r2, [r3]
 4954              		.syntax unified
 4955              	@ 4216 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4956 0038 BFF34F8F 		dsb
 4957              	@ 0 "" 2
 4958              	@ 4216 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4959 003c BFF36F8F 		isb
 4960              	@ 0 "" 2
 4961              		.thumb
 4962              		.syntax unified
ARM GAS  /tmp/ccMf91lX.s 			page 166


 4963              	.L320:
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 4964              		.loc 1 4228 0
 4965 0040 FFF7FEFF 		bl	vPortExitCritical
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 4966              		.loc 1 4230 0
 4967 0044 FFF7FEFF 		bl	vPortEnterCritical
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 4968              		.loc 1 4233 0
 4969 0048 0F4B     		ldr	r3, .L325
 4970 004a 1B68     		ldr	r3, [r3]
 4971 004c DB6C     		ldr	r3, [r3, #76]
 4972 004e FB60     		str	r3, [r7, #12]
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
 4973              		.loc 1 4235 0
 4974 0050 FB68     		ldr	r3, [r7, #12]
 4975 0052 002B     		cmp	r3, #0
 4976 0054 0CD0     		beq	.L321
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 4977              		.loc 1 4237 0
 4978 0056 7B68     		ldr	r3, [r7, #4]
 4979 0058 002B     		cmp	r3, #0
 4980 005a 04D0     		beq	.L322
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 4981              		.loc 1 4239 0
 4982 005c 0A4B     		ldr	r3, .L325
 4983 005e 1B68     		ldr	r3, [r3]
 4984 0060 0022     		movs	r2, #0
 4985 0062 DA64     		str	r2, [r3, #76]
 4986 0064 04E0     		b	.L321
 4987              	.L322:
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
 4988              		.loc 1 4243 0
 4989 0066 084B     		ldr	r3, .L325
 4990 0068 1B68     		ldr	r3, [r3]
 4991 006a FA68     		ldr	r2, [r7, #12]
 4992 006c 013A     		subs	r2, r2, #1
ARM GAS  /tmp/ccMf91lX.s 			page 167


 4993 006e DA64     		str	r2, [r3, #76]
 4994              	.L321:
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 4995              		.loc 1 4251 0
 4996 0070 054B     		ldr	r3, .L325
 4997 0072 1B68     		ldr	r3, [r3]
 4998 0074 0022     		movs	r2, #0
 4999 0076 83F85020 		strb	r2, [r3, #80]
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5000              		.loc 1 4253 0
 5001 007a FFF7FEFF 		bl	vPortExitCritical
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
 5002              		.loc 1 4255 0
 5003 007e FB68     		ldr	r3, [r7, #12]
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5004              		.loc 1 4256 0
 5005 0080 1846     		mov	r0, r3
 5006 0082 1037     		adds	r7, r7, #16
 5007              	.LCFI206:
 5008              		.cfi_def_cfa_offset 8
 5009 0084 BD46     		mov	sp, r7
 5010              	.LCFI207:
 5011              		.cfi_def_cfa_register 13
 5012              		@ sp needed
 5013 0086 80BD     		pop	{r7, pc}
 5014              	.L326:
 5015              		.align	2
 5016              	.L325:
 5017 0088 00000000 		.word	pxCurrentTCB
 5018 008c 04ED00E0 		.word	-536810236
 5019              		.cfi_endproc
 5020              	.LFE181:
 5022              		.section	.text.xTaskNotifyWait,"ax",%progbits
 5023              		.align	1
 5024              		.global	xTaskNotifyWait
 5025              		.syntax unified
 5026              		.thumb
 5027              		.thumb_func
 5028              		.fpu fpv4-sp-d16
 5030              	xTaskNotifyWait:
 5031              	.LFB182:
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
ARM GAS  /tmp/ccMf91lX.s 			page 168


4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5032              		.loc 1 4264 0
 5033              		.cfi_startproc
 5034              		@ args = 0, pretend = 0, frame = 24
 5035              		@ frame_needed = 1, uses_anonymous_args = 0
 5036 0000 80B5     		push	{r7, lr}
 5037              	.LCFI208:
 5038              		.cfi_def_cfa_offset 8
 5039              		.cfi_offset 7, -8
 5040              		.cfi_offset 14, -4
 5041 0002 86B0     		sub	sp, sp, #24
 5042              	.LCFI209:
 5043              		.cfi_def_cfa_offset 32
 5044 0004 00AF     		add	r7, sp, #0
 5045              	.LCFI210:
 5046              		.cfi_def_cfa_register 7
 5047 0006 F860     		str	r0, [r7, #12]
 5048 0008 B960     		str	r1, [r7, #8]
 5049 000a 7A60     		str	r2, [r7, #4]
 5050 000c 3B60     		str	r3, [r7]
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 5051              		.loc 1 4267 0
 5052 000e FFF7FEFF 		bl	vPortEnterCritical
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 5053              		.loc 1 4270 0
 5054 0012 264B     		ldr	r3, .L333
 5055 0014 1B68     		ldr	r3, [r3]
 5056 0016 93F85030 		ldrb	r3, [r3, #80]
 5057 001a DBB2     		uxtb	r3, r3
 5058 001c 022B     		cmp	r3, #2
 5059 001e 1AD0     		beq	.L328
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 5060              		.loc 1 4275 0
 5061 0020 224B     		ldr	r3, .L333
 5062 0022 1B68     		ldr	r3, [r3]
 5063 0024 D96C     		ldr	r1, [r3, #76]
 5064 0026 FA68     		ldr	r2, [r7, #12]
 5065 0028 D243     		mvns	r2, r2
 5066 002a 0A40     		ands	r2, r2, r1
 5067 002c DA64     		str	r2, [r3, #76]
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 5068              		.loc 1 4278 0
 5069 002e 1F4B     		ldr	r3, .L333
 5070 0030 1B68     		ldr	r3, [r3]
 5071 0032 0122     		movs	r2, #1
 5072 0034 83F85020 		strb	r2, [r3, #80]
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccMf91lX.s 			page 169


4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 5073              		.loc 1 4280 0
 5074 0038 3B68     		ldr	r3, [r7]
 5075 003a 002B     		cmp	r3, #0
 5076 003c 0BD0     		beq	.L328
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 5077              		.loc 1 4282 0
 5078 003e 0121     		movs	r1, #1
 5079 0040 3868     		ldr	r0, [r7]
 5080 0042 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 5081              		.loc 1 4289 0
 5082 0046 1A4B     		ldr	r3, .L333+4
 5083 0048 4FF08052 		mov	r2, #268435456
 5084 004c 1A60     		str	r2, [r3]
 5085              		.syntax unified
 5086              	@ 4289 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5087 004e BFF34F8F 		dsb
 5088              	@ 0 "" 2
 5089              	@ 4289 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5090 0052 BFF36F8F 		isb
 5091              	@ 0 "" 2
 5092              		.thumb
 5093              		.syntax unified
 5094              	.L328:
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5095              		.loc 1 4301 0
 5096 0056 FFF7FEFF 		bl	vPortExitCritical
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 5097              		.loc 1 4303 0
 5098 005a FFF7FEFF 		bl	vPortEnterCritical
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
 5099              		.loc 1 4307 0
 5100 005e 7B68     		ldr	r3, [r7, #4]
 5101 0060 002B     		cmp	r3, #0
ARM GAS  /tmp/ccMf91lX.s 			page 170


 5102 0062 04D0     		beq	.L329
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 5103              		.loc 1 4311 0
 5104 0064 114B     		ldr	r3, .L333
 5105 0066 1B68     		ldr	r3, [r3]
 5106 0068 DA6C     		ldr	r2, [r3, #76]
 5107 006a 7B68     		ldr	r3, [r7, #4]
 5108 006c 1A60     		str	r2, [r3]
 5109              	.L329:
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 5110              		.loc 1 4318 0
 5111 006e 0F4B     		ldr	r3, .L333
 5112 0070 1B68     		ldr	r3, [r3]
 5113 0072 93F85030 		ldrb	r3, [r3, #80]
 5114 0076 DBB2     		uxtb	r3, r3
 5115 0078 012B     		cmp	r3, #1
 5116 007a 02D1     		bne	.L330
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 5117              		.loc 1 4321 0
 5118 007c 0023     		movs	r3, #0
 5119 007e 7B61     		str	r3, [r7, #20]
 5120 0080 08E0     		b	.L331
 5121              	.L330:
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 5122              		.loc 1 4327 0
 5123 0082 0A4B     		ldr	r3, .L333
 5124 0084 1B68     		ldr	r3, [r3]
 5125 0086 D96C     		ldr	r1, [r3, #76]
 5126 0088 BA68     		ldr	r2, [r7, #8]
 5127 008a D243     		mvns	r2, r2
 5128 008c 0A40     		ands	r2, r2, r1
 5129 008e DA64     		str	r2, [r3, #76]
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 5130              		.loc 1 4328 0
 5131 0090 0123     		movs	r3, #1
 5132 0092 7B61     		str	r3, [r7, #20]
 5133              	.L331:
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 5134              		.loc 1 4331 0
ARM GAS  /tmp/ccMf91lX.s 			page 171


 5135 0094 054B     		ldr	r3, .L333
 5136 0096 1B68     		ldr	r3, [r3]
 5137 0098 0022     		movs	r2, #0
 5138 009a 83F85020 		strb	r2, [r3, #80]
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5139              		.loc 1 4333 0
 5140 009e FFF7FEFF 		bl	vPortExitCritical
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 5141              		.loc 1 4335 0
 5142 00a2 7B69     		ldr	r3, [r7, #20]
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5143              		.loc 1 4336 0
 5144 00a4 1846     		mov	r0, r3
 5145 00a6 1837     		adds	r7, r7, #24
 5146              	.LCFI211:
 5147              		.cfi_def_cfa_offset 8
 5148 00a8 BD46     		mov	sp, r7
 5149              	.LCFI212:
 5150              		.cfi_def_cfa_register 13
 5151              		@ sp needed
 5152 00aa 80BD     		pop	{r7, pc}
 5153              	.L334:
 5154              		.align	2
 5155              	.L333:
 5156 00ac 00000000 		.word	pxCurrentTCB
 5157 00b0 04ED00E0 		.word	-536810236
 5158              		.cfi_endproc
 5159              	.LFE182:
 5161              		.section	.text.xTaskGenericNotify,"ax",%progbits
 5162              		.align	1
 5163              		.global	xTaskGenericNotify
 5164              		.syntax unified
 5165              		.thumb
 5166              		.thumb_func
 5167              		.fpu fpv4-sp-d16
 5169              	xTaskGenericNotify:
 5170              	.LFB183:
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5171              		.loc 1 4344 0
 5172              		.cfi_startproc
 5173              		@ args = 0, pretend = 0, frame = 40
 5174              		@ frame_needed = 1, uses_anonymous_args = 0
 5175 0000 80B5     		push	{r7, lr}
 5176              	.LCFI213:
 5177              		.cfi_def_cfa_offset 8
 5178              		.cfi_offset 7, -8
 5179              		.cfi_offset 14, -4
 5180 0002 8AB0     		sub	sp, sp, #40
ARM GAS  /tmp/ccMf91lX.s 			page 172


 5181              	.LCFI214:
 5182              		.cfi_def_cfa_offset 48
 5183 0004 00AF     		add	r7, sp, #0
 5184              	.LCFI215:
 5185              		.cfi_def_cfa_register 7
 5186 0006 F860     		str	r0, [r7, #12]
 5187 0008 B960     		str	r1, [r7, #8]
 5188 000a 3B60     		str	r3, [r7]
 5189 000c 1346     		mov	r3, r2
 5190 000e FB71     		strb	r3, [r7, #7]
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 5191              		.loc 1 4346 0
 5192 0010 0123     		movs	r3, #1
 5193 0012 7B62     		str	r3, [r7, #36]
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 5194              		.loc 1 4349 0
 5195 0014 FB68     		ldr	r3, [r7, #12]
 5196 0016 002B     		cmp	r3, #0
 5197 0018 0BD1     		bne	.L336
 5198              	.LBB161:
 5199              	.LBB162:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 5200              		.loc 2 237 0 discriminator 1
 5201              		.syntax unified
 5202              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 5203 001a 4FF05003 			mov r3, #80												
 5204 001e 72B6     		cpsid i													
 5205 0020 83F31188 		msr basepri, r3											
 5206 0024 BFF36F8F 		isb														
 5207 0028 BFF34F8F 		dsb														
 5208 002c 62B6     		cpsie i													
 5209              	
 5210              	@ 0 "" 2
 5211              		.thumb
 5212              		.syntax unified
 5213 002e BB61     		str	r3, [r7, #24]
 5214              	.L337:
 5215              	.LBE162:
 5216              	.LBE161:
 5217              		.loc 1 4349 0 discriminator 1
 5218 0030 FEE7     		b	.L337
 5219              	.L336:
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 5220              		.loc 1 4350 0
 5221 0032 FB68     		ldr	r3, [r7, #12]
 5222 0034 3B62     		str	r3, [r7, #32]
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 5223              		.loc 1 4352 0
 5224 0036 FFF7FEFF 		bl	vPortEnterCritical
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 5225              		.loc 1 4354 0
 5226 003a 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccMf91lX.s 			page 173


 5227 003c 002B     		cmp	r3, #0
 5228 003e 03D0     		beq	.L338
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 5229              		.loc 1 4356 0
 5230 0040 3B6A     		ldr	r3, [r7, #32]
 5231 0042 DA6C     		ldr	r2, [r3, #76]
 5232 0044 3B68     		ldr	r3, [r7]
 5233 0046 1A60     		str	r2, [r3]
 5234              	.L338:
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 5235              		.loc 1 4359 0
 5236 0048 3B6A     		ldr	r3, [r7, #32]
 5237 004a 93F85030 		ldrb	r3, [r3, #80]
 5238 004e FB77     		strb	r3, [r7, #31]
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5239              		.loc 1 4361 0
 5240 0050 3B6A     		ldr	r3, [r7, #32]
 5241 0052 0222     		movs	r2, #2
 5242 0054 83F85020 		strb	r2, [r3, #80]
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 5243              		.loc 1 4363 0
 5244 0058 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5245 005a 042B     		cmp	r3, #4
 5246 005c 27D8     		bhi	.L339
 5247 005e 01A2     		adr	r2, .L341
 5248 0060 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5249              		.p2align 2
 5250              	.L341:
 5251 0064 AF000000 		.word	.L339+1
 5252 0068 79000000 		.word	.L342+1
 5253 006c 87000000 		.word	.L343+1
 5254 0070 93000000 		.word	.L344+1
 5255 0074 9B000000 		.word	.L345+1
 5256              		.p2align 1
 5257              	.L342:
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 5258              		.loc 1 4366 0
 5259 0078 3B6A     		ldr	r3, [r7, #32]
 5260 007a DA6C     		ldr	r2, [r3, #76]
 5261 007c BB68     		ldr	r3, [r7, #8]
 5262 007e 1A43     		orrs	r2, r2, r3
 5263 0080 3B6A     		ldr	r3, [r7, #32]
 5264 0082 DA64     		str	r2, [r3, #76]
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5265              		.loc 1 4367 0
 5266 0084 13E0     		b	.L339
 5267              	.L343:
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
ARM GAS  /tmp/ccMf91lX.s 			page 174


 5268              		.loc 1 4370 0
 5269 0086 3B6A     		ldr	r3, [r7, #32]
 5270 0088 DB6C     		ldr	r3, [r3, #76]
 5271 008a 5A1C     		adds	r2, r3, #1
 5272 008c 3B6A     		ldr	r3, [r7, #32]
 5273 008e DA64     		str	r2, [r3, #76]
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5274              		.loc 1 4371 0
 5275 0090 0DE0     		b	.L339
 5276              	.L344:
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 5277              		.loc 1 4374 0
 5278 0092 3B6A     		ldr	r3, [r7, #32]
 5279 0094 BA68     		ldr	r2, [r7, #8]
 5280 0096 DA64     		str	r2, [r3, #76]
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5281              		.loc 1 4375 0
 5282 0098 09E0     		b	.L339
 5283              	.L345:
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 5284              		.loc 1 4378 0
 5285 009a FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5286 009c 022B     		cmp	r3, #2
 5287 009e 03D0     		beq	.L346
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 5288              		.loc 1 4380 0
 5289 00a0 3B6A     		ldr	r3, [r7, #32]
 5290 00a2 BA68     		ldr	r2, [r7, #8]
 5291 00a4 DA64     		str	r2, [r3, #76]
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5292              		.loc 1 4387 0
 5293 00a6 01E0     		b	.L352
 5294              	.L346:
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5295              		.loc 1 4385 0
 5296 00a8 0023     		movs	r3, #0
 5297 00aa 7B62     		str	r3, [r7, #36]
 5298              	.L352:
 5299              		.loc 1 4387 0
 5300 00ac 00BF     		nop
 5301              	.L339:
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
ARM GAS  /tmp/ccMf91lX.s 			page 175


4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 5302              		.loc 1 4399 0
 5303 00ae FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5304 00b0 012B     		cmp	r3, #1
 5305 00b2 3AD1     		bne	.L348
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5306              		.loc 1 4401 0
 5307 00b4 3B6A     		ldr	r3, [r7, #32]
 5308 00b6 0433     		adds	r3, r3, #4
 5309 00b8 1846     		mov	r0, r3
 5310 00ba FFF7FEFF 		bl	uxListRemove
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 5311              		.loc 1 4402 0
 5312 00be 3B6A     		ldr	r3, [r7, #32]
 5313 00c0 DB6A     		ldr	r3, [r3, #44]
 5314 00c2 0122     		movs	r2, #1
 5315 00c4 9A40     		lsls	r2, r2, r3
 5316 00c6 1C4B     		ldr	r3, .L353
 5317 00c8 1B68     		ldr	r3, [r3]
 5318 00ca 1343     		orrs	r3, r3, r2
 5319 00cc 1A4A     		ldr	r2, .L353
 5320 00ce 1360     		str	r3, [r2]
 5321 00d0 3B6A     		ldr	r3, [r7, #32]
 5322 00d2 DA6A     		ldr	r2, [r3, #44]
 5323 00d4 1346     		mov	r3, r2
 5324 00d6 9B00     		lsls	r3, r3, #2
 5325 00d8 1344     		add	r3, r3, r2
 5326 00da 9B00     		lsls	r3, r3, #2
 5327 00dc 174A     		ldr	r2, .L353+4
 5328 00de 1A44     		add	r2, r2, r3
 5329 00e0 3B6A     		ldr	r3, [r7, #32]
 5330 00e2 0433     		adds	r3, r3, #4
 5331 00e4 1946     		mov	r1, r3
 5332 00e6 1046     		mov	r0, r2
 5333 00e8 FFF7FEFF 		bl	vListInsertEnd
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 5334              		.loc 1 4405 0
 5335 00ec 3B6A     		ldr	r3, [r7, #32]
 5336 00ee 9B6A     		ldr	r3, [r3, #40]
 5337 00f0 002B     		cmp	r3, #0
 5338 00f2 0BD0     		beq	.L349
 5339              	.LBB163:
 5340              	.LBB164:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 5341              		.loc 2 237 0 discriminator 1
 5342              		.syntax unified
 5343              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 5344 00f4 4FF05003 			mov r3, #80												
ARM GAS  /tmp/ccMf91lX.s 			page 176


 5345 00f8 72B6     		cpsid i													
 5346 00fa 83F31188 		msr basepri, r3											
 5347 00fe BFF36F8F 		isb														
 5348 0102 BFF34F8F 		dsb														
 5349 0106 62B6     		cpsie i													
 5350              	
 5351              	@ 0 "" 2
 5352              		.thumb
 5353              		.syntax unified
 5354 0108 7B61     		str	r3, [r7, #20]
 5355              	.L350:
 5356              	.LBE164:
 5357              	.LBE163:
 5358              		.loc 1 4405 0 discriminator 2
 5359 010a FEE7     		b	.L350
 5360              	.L349:
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 5361              		.loc 1 4423 0
 5362 010c 3B6A     		ldr	r3, [r7, #32]
 5363 010e DA6A     		ldr	r2, [r3, #44]
 5364 0110 0B4B     		ldr	r3, .L353+8
 5365 0112 1B68     		ldr	r3, [r3]
 5366 0114 DB6A     		ldr	r3, [r3, #44]
 5367 0116 9A42     		cmp	r2, r3
 5368 0118 07D9     		bls	.L348
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 5369              		.loc 1 4427 0
 5370 011a 0A4B     		ldr	r3, .L353+12
 5371 011c 4FF08052 		mov	r2, #268435456
 5372 0120 1A60     		str	r2, [r3]
 5373              		.syntax unified
 5374              	@ 4427 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5375 0122 BFF34F8F 		dsb
 5376              	@ 0 "" 2
 5377              	@ 4427 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5378 0126 BFF36F8F 		isb
 5379              	@ 0 "" 2
ARM GAS  /tmp/ccMf91lX.s 			page 177


 5380              		.thumb
 5381              		.syntax unified
 5382              	.L348:
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5383              		.loc 1 4439 0
 5384 012a FFF7FEFF 		bl	vPortExitCritical
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 5385              		.loc 1 4441 0
 5386 012e 7B6A     		ldr	r3, [r7, #36]
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5387              		.loc 1 4442 0
 5388 0130 1846     		mov	r0, r3
 5389 0132 2837     		adds	r7, r7, #40
 5390              	.LCFI216:
 5391              		.cfi_def_cfa_offset 8
 5392 0134 BD46     		mov	sp, r7
 5393              	.LCFI217:
 5394              		.cfi_def_cfa_register 13
 5395              		@ sp needed
 5396 0136 80BD     		pop	{r7, pc}
 5397              	.L354:
 5398              		.align	2
 5399              	.L353:
 5400 0138 00000000 		.word	uxTopReadyPriority
 5401 013c 00000000 		.word	pxReadyTasksLists
 5402 0140 00000000 		.word	pxCurrentTCB
 5403 0144 04ED00E0 		.word	-536810236
 5404              		.cfi_endproc
 5405              	.LFE183:
 5407              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 5408              		.align	1
 5409              		.global	xTaskGenericNotifyFromISR
 5410              		.syntax unified
 5411              		.thumb
 5412              		.thumb_func
 5413              		.fpu fpv4-sp-d16
 5415              	xTaskGenericNotifyFromISR:
 5416              	.LFB184:
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
ARM GAS  /tmp/ccMf91lX.s 			page 178


4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5417              		.loc 1 4450 0
 5418              		.cfi_startproc
 5419              		@ args = 4, pretend = 0, frame = 56
 5420              		@ frame_needed = 1, uses_anonymous_args = 0
 5421 0000 80B5     		push	{r7, lr}
 5422              	.LCFI218:
 5423              		.cfi_def_cfa_offset 8
 5424              		.cfi_offset 7, -8
 5425              		.cfi_offset 14, -4
 5426 0002 8EB0     		sub	sp, sp, #56
 5427              	.LCFI219:
 5428              		.cfi_def_cfa_offset 64
 5429 0004 00AF     		add	r7, sp, #0
 5430              	.LCFI220:
 5431              		.cfi_def_cfa_register 7
 5432 0006 F860     		str	r0, [r7, #12]
 5433 0008 B960     		str	r1, [r7, #8]
 5434 000a 3B60     		str	r3, [r7]
 5435 000c 1346     		mov	r3, r2
 5436 000e FB71     		strb	r3, [r7, #7]
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 5437              		.loc 1 4453 0
 5438 0010 0123     		movs	r3, #1
 5439 0012 7B63     		str	r3, [r7, #52]
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 5440              		.loc 1 4456 0
 5441 0014 FB68     		ldr	r3, [r7, #12]
 5442 0016 002B     		cmp	r3, #0
 5443 0018 0BD1     		bne	.L356
 5444              	.LBB165:
 5445              	.LBB166:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 5446              		.loc 2 237 0 discriminator 1
 5447              		.syntax unified
 5448              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 5449 001a 4FF05003 			mov r3, #80												
 5450 001e 72B6     		cpsid i													
 5451 0020 83F31188 		msr basepri, r3											
 5452 0024 BFF36F8F 		isb														
 5453 0028 BFF34F8F 		dsb														
 5454 002c 62B6     		cpsie i													
 5455              	
 5456              	@ 0 "" 2
 5457              		.thumb
 5458              		.syntax unified
 5459 002e 7B62     		str	r3, [r7, #36]
 5460              	.L357:
 5461              	.LBE166:
 5462              	.LBE165:
 5463              		.loc 1 4456 0 discriminator 1
 5464 0030 FEE7     		b	.L357
 5465              	.L356:
ARM GAS  /tmp/ccMf91lX.s 			page 179


4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 5466              		.loc 1 4474 0
 5467 0032 FFF7FEFF 		bl	vPortValidateInterruptPriority
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 5468              		.loc 1 4476 0
 5469 0036 FB68     		ldr	r3, [r7, #12]
 5470 0038 3B63     		str	r3, [r7, #48]
 5471              	.LBB167:
 5472              	.LBB168:
 255:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 5473              		.loc 2 255 0
 5474              		.syntax unified
 5475              	@ 255 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 5476 003a EFF31182 			mrs r2, basepri											
 5477 003e 4FF05003 		mov r3, #80												
 5478 0042 72B6     		cpsid i													
 5479 0044 83F31188 		msr basepri, r3											
 5480 0048 BFF36F8F 		isb														
 5481 004c BFF34F8F 		dsb														
 5482 0050 62B6     		cpsie i													
 5483              	
 5484              	@ 0 "" 2
 5485              		.thumb
 5486              		.syntax unified
 5487 0052 3A62     		str	r2, [r7, #32]
 5488 0054 FB61     		str	r3, [r7, #28]
 269:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 5489              		.loc 2 269 0
 5490 0056 3B6A     		ldr	r3, [r7, #32]
 5491              	.LBE168:
 5492              	.LBE167:
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 5493              		.loc 1 4478 0
 5494 0058 FB62     		str	r3, [r7, #44]
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 5495              		.loc 1 4480 0
 5496 005a 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccMf91lX.s 			page 180


 5497 005c 002B     		cmp	r3, #0
 5498 005e 03D0     		beq	.L359
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 5499              		.loc 1 4482 0
 5500 0060 3B6B     		ldr	r3, [r7, #48]
 5501 0062 DA6C     		ldr	r2, [r3, #76]
 5502 0064 3B68     		ldr	r3, [r7]
 5503 0066 1A60     		str	r2, [r3]
 5504              	.L359:
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 5505              		.loc 1 4485 0
 5506 0068 3B6B     		ldr	r3, [r7, #48]
 5507 006a 93F85030 		ldrb	r3, [r3, #80]
 5508 006e 87F82B30 		strb	r3, [r7, #43]
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5509              		.loc 1 4486 0
 5510 0072 3B6B     		ldr	r3, [r7, #48]
 5511 0074 0222     		movs	r2, #2
 5512 0076 83F85020 		strb	r2, [r3, #80]
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 5513              		.loc 1 4488 0
 5514 007a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5515 007c 042B     		cmp	r3, #4
 5516 007e 29D8     		bhi	.L360
 5517 0080 01A2     		adr	r2, .L362
 5518 0082 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5519 0086 00BF     		.p2align 2
 5520              	.L362:
 5521 0088 D5000000 		.word	.L360+1
 5522 008c 9D000000 		.word	.L363+1
 5523 0090 AB000000 		.word	.L364+1
 5524 0094 B7000000 		.word	.L365+1
 5525 0098 BF000000 		.word	.L366+1
 5526              		.p2align 1
 5527              	.L363:
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 5528              		.loc 1 4491 0
 5529 009c 3B6B     		ldr	r3, [r7, #48]
 5530 009e DA6C     		ldr	r2, [r3, #76]
 5531 00a0 BB68     		ldr	r3, [r7, #8]
 5532 00a2 1A43     		orrs	r2, r2, r3
 5533 00a4 3B6B     		ldr	r3, [r7, #48]
 5534 00a6 DA64     		str	r2, [r3, #76]
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5535              		.loc 1 4492 0
 5536 00a8 14E0     		b	.L360
 5537              	.L364:
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 5538              		.loc 1 4495 0
ARM GAS  /tmp/ccMf91lX.s 			page 181


 5539 00aa 3B6B     		ldr	r3, [r7, #48]
 5540 00ac DB6C     		ldr	r3, [r3, #76]
 5541 00ae 5A1C     		adds	r2, r3, #1
 5542 00b0 3B6B     		ldr	r3, [r7, #48]
 5543 00b2 DA64     		str	r2, [r3, #76]
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5544              		.loc 1 4496 0
 5545 00b4 0EE0     		b	.L360
 5546              	.L365:
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 5547              		.loc 1 4499 0
 5548 00b6 3B6B     		ldr	r3, [r7, #48]
 5549 00b8 BA68     		ldr	r2, [r7, #8]
 5550 00ba DA64     		str	r2, [r3, #76]
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5551              		.loc 1 4500 0
 5552 00bc 0AE0     		b	.L360
 5553              	.L366:
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 5554              		.loc 1 4503 0
 5555 00be 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 5556 00c2 022B     		cmp	r3, #2
 5557 00c4 03D0     		beq	.L367
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 5558              		.loc 1 4505 0
 5559 00c6 3B6B     		ldr	r3, [r7, #48]
 5560 00c8 BA68     		ldr	r2, [r7, #8]
 5561 00ca DA64     		str	r2, [r3, #76]
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5562              		.loc 1 4512 0
 5563 00cc 01E0     		b	.L377
 5564              	.L367:
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5565              		.loc 1 4510 0
 5566 00ce 0023     		movs	r3, #0
 5567 00d0 7B63     		str	r3, [r7, #52]
 5568              	.L377:
 5569              		.loc 1 4512 0
 5570 00d2 00BF     		nop
 5571              	.L360:
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccMf91lX.s 			page 182


4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 5572              		.loc 1 4524 0
 5573 00d4 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 5574 00d8 012B     		cmp	r3, #1
 5575 00da 47D1     		bne	.L369
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 5576              		.loc 1 4527 0
 5577 00dc 3B6B     		ldr	r3, [r7, #48]
 5578 00de 9B6A     		ldr	r3, [r3, #40]
 5579 00e0 002B     		cmp	r3, #0
 5580 00e2 0BD0     		beq	.L370
 5581              	.LBB169:
 5582              	.LBB170:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 5583              		.loc 2 237 0 discriminator 1
 5584              		.syntax unified
 5585              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 5586 00e4 4FF05003 			mov r3, #80												
 5587 00e8 72B6     		cpsid i													
 5588 00ea 83F31188 		msr basepri, r3											
 5589 00ee BFF36F8F 		isb														
 5590 00f2 BFF34F8F 		dsb														
 5591 00f6 62B6     		cpsie i													
 5592              	
 5593              	@ 0 "" 2
 5594              		.thumb
 5595              		.syntax unified
 5596 00f8 BB61     		str	r3, [r7, #24]
 5597              	.L371:
 5598              	.LBE170:
 5599              	.LBE169:
 5600              		.loc 1 4527 0 discriminator 2
 5601 00fa FEE7     		b	.L371
 5602              	.L370:
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 5603              		.loc 1 4529 0
 5604 00fc 204B     		ldr	r3, .L378
 5605 00fe 1B68     		ldr	r3, [r3]
 5606 0100 002B     		cmp	r3, #0
 5607 0102 1CD1     		bne	.L372
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5608              		.loc 1 4531 0
 5609 0104 3B6B     		ldr	r3, [r7, #48]
 5610 0106 0433     		adds	r3, r3, #4
 5611 0108 1846     		mov	r0, r3
 5612 010a FFF7FEFF 		bl	uxListRemove
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5613              		.loc 1 4532 0
ARM GAS  /tmp/ccMf91lX.s 			page 183


 5614 010e 3B6B     		ldr	r3, [r7, #48]
 5615 0110 DB6A     		ldr	r3, [r3, #44]
 5616 0112 0122     		movs	r2, #1
 5617 0114 9A40     		lsls	r2, r2, r3
 5618 0116 1B4B     		ldr	r3, .L378+4
 5619 0118 1B68     		ldr	r3, [r3]
 5620 011a 1343     		orrs	r3, r3, r2
 5621 011c 194A     		ldr	r2, .L378+4
 5622 011e 1360     		str	r3, [r2]
 5623 0120 3B6B     		ldr	r3, [r7, #48]
 5624 0122 DA6A     		ldr	r2, [r3, #44]
 5625 0124 1346     		mov	r3, r2
 5626 0126 9B00     		lsls	r3, r3, #2
 5627 0128 1344     		add	r3, r3, r2
 5628 012a 9B00     		lsls	r3, r3, #2
 5629 012c 164A     		ldr	r2, .L378+8
 5630 012e 1A44     		add	r2, r2, r3
 5631 0130 3B6B     		ldr	r3, [r7, #48]
 5632 0132 0433     		adds	r3, r3, #4
 5633 0134 1946     		mov	r1, r3
 5634 0136 1046     		mov	r0, r2
 5635 0138 FFF7FEFF 		bl	vListInsertEnd
 5636 013c 05E0     		b	.L373
 5637              	.L372:
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 5638              		.loc 1 4538 0
 5639 013e 3B6B     		ldr	r3, [r7, #48]
 5640 0140 1833     		adds	r3, r3, #24
 5641 0142 1946     		mov	r1, r3
 5642 0144 1148     		ldr	r0, .L378+12
 5643 0146 FFF7FEFF 		bl	vListInsertEnd
 5644              	.L373:
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 5645              		.loc 1 4541 0
 5646 014a 3B6B     		ldr	r3, [r7, #48]
 5647 014c DA6A     		ldr	r2, [r3, #44]
 5648 014e 104B     		ldr	r3, .L378+16
 5649 0150 1B68     		ldr	r3, [r3]
 5650 0152 DB6A     		ldr	r3, [r3, #44]
 5651 0154 9A42     		cmp	r2, r3
 5652 0156 09D9     		bls	.L369
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 5653              		.loc 1 4545 0
 5654 0158 3B6C     		ldr	r3, [r7, #64]
 5655 015a 002B     		cmp	r3, #0
 5656 015c 03D0     		beq	.L374
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  /tmp/ccMf91lX.s 			page 184


4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 5657              		.loc 1 4547 0
 5658 015e 3B6C     		ldr	r3, [r7, #64]
 5659 0160 0122     		movs	r2, #1
 5660 0162 1A60     		str	r2, [r3]
 5661 0164 02E0     		b	.L369
 5662              	.L374:
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
 5663              		.loc 1 4554 0
 5664 0166 0B4B     		ldr	r3, .L378+20
 5665 0168 0122     		movs	r2, #1
 5666 016a 1A60     		str	r2, [r3]
 5667              	.L369:
 5668 016c FB6A     		ldr	r3, [r7, #44]
 5669 016e 7B61     		str	r3, [r7, #20]
 5670              	.LBB171:
 5671              	.LBB172:
 5672              		.loc 2 275 0
 5673 0170 7B69     		ldr	r3, [r7, #20]
 5674              		.syntax unified
 5675              	@ 275 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 5676 0172 83F31188 			msr basepri, r3	
 5677              	@ 0 "" 2
 5678              		.thumb
 5679              		.syntax unified
 5680              	.LBE172:
 5681              	.LBE171:
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 5682              		.loc 1 4565 0
 5683 0176 7B6B     		ldr	r3, [r7, #52]
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5684              		.loc 1 4566 0
 5685 0178 1846     		mov	r0, r3
 5686 017a 3837     		adds	r7, r7, #56
 5687              	.LCFI221:
 5688              		.cfi_def_cfa_offset 8
 5689 017c BD46     		mov	sp, r7
 5690              	.LCFI222:
 5691              		.cfi_def_cfa_register 13
 5692              		@ sp needed
 5693 017e 80BD     		pop	{r7, pc}
ARM GAS  /tmp/ccMf91lX.s 			page 185


 5694              	.L379:
 5695              		.align	2
 5696              	.L378:
 5697 0180 00000000 		.word	uxSchedulerSuspended
 5698 0184 00000000 		.word	uxTopReadyPriority
 5699 0188 00000000 		.word	pxReadyTasksLists
 5700 018c 00000000 		.word	xPendingReadyList
 5701 0190 00000000 		.word	pxCurrentTCB
 5702 0194 00000000 		.word	xYieldPending
 5703              		.cfi_endproc
 5704              	.LFE184:
 5706              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 5707              		.align	1
 5708              		.global	vTaskNotifyGiveFromISR
 5709              		.syntax unified
 5710              		.thumb
 5711              		.thumb_func
 5712              		.fpu fpv4-sp-d16
 5714              	vTaskNotifyGiveFromISR:
 5715              	.LFB185:
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5716              		.loc 1 4574 0
 5717              		.cfi_startproc
 5718              		@ args = 0, pretend = 0, frame = 40
 5719              		@ frame_needed = 1, uses_anonymous_args = 0
 5720 0000 80B5     		push	{r7, lr}
 5721              	.LCFI223:
 5722              		.cfi_def_cfa_offset 8
 5723              		.cfi_offset 7, -8
 5724              		.cfi_offset 14, -4
 5725 0002 8AB0     		sub	sp, sp, #40
 5726              	.LCFI224:
 5727              		.cfi_def_cfa_offset 48
 5728 0004 00AF     		add	r7, sp, #0
 5729              	.LCFI225:
 5730              		.cfi_def_cfa_register 7
 5731 0006 7860     		str	r0, [r7, #4]
 5732 0008 3960     		str	r1, [r7]
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 5733              		.loc 1 4579 0
 5734 000a 7B68     		ldr	r3, [r7, #4]
 5735 000c 002B     		cmp	r3, #0
 5736 000e 0BD1     		bne	.L381
 5737              	.LBB173:
 5738              	.LBB174:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
ARM GAS  /tmp/ccMf91lX.s 			page 186


 5739              		.loc 2 237 0 discriminator 1
 5740              		.syntax unified
 5741              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 5742 0010 4FF05003 			mov r3, #80												
 5743 0014 72B6     		cpsid i													
 5744 0016 83F31188 		msr basepri, r3											
 5745 001a BFF36F8F 		isb														
 5746 001e BFF34F8F 		dsb														
 5747 0022 62B6     		cpsie i													
 5748              	
 5749              	@ 0 "" 2
 5750              		.thumb
 5751              		.syntax unified
 5752 0024 BB61     		str	r3, [r7, #24]
 5753              	.L382:
 5754              	.LBE174:
 5755              	.LBE173:
 5756              		.loc 1 4579 0 discriminator 1
 5757 0026 FEE7     		b	.L382
 5758              	.L381:
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 5759              		.loc 1 4597 0
 5760 0028 FFF7FEFF 		bl	vPortValidateInterruptPriority
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 5761              		.loc 1 4599 0
 5762 002c 7B68     		ldr	r3, [r7, #4]
 5763 002e 7B62     		str	r3, [r7, #36]
 5764              	.LBB175:
 5765              	.LBB176:
 255:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 5766              		.loc 2 255 0
 5767              		.syntax unified
 5768              	@ 255 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 5769 0030 EFF31182 			mrs r2, basepri											
 5770 0034 4FF05003 		mov r3, #80												
 5771 0038 72B6     		cpsid i													
 5772 003a 83F31188 		msr basepri, r3											
 5773 003e BFF36F8F 		isb														
 5774 0042 BFF34F8F 		dsb														
ARM GAS  /tmp/ccMf91lX.s 			page 187


 5775 0046 62B6     		cpsie i													
 5776              	
 5777              	@ 0 "" 2
 5778              		.thumb
 5779              		.syntax unified
 5780 0048 7A61     		str	r2, [r7, #20]
 5781 004a 3B61     		str	r3, [r7, #16]
 269:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 5782              		.loc 2 269 0
 5783 004c 7B69     		ldr	r3, [r7, #20]
 5784              	.LBE176:
 5785              	.LBE175:
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 5786              		.loc 1 4601 0
 5787 004e 3B62     		str	r3, [r7, #32]
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 5788              		.loc 1 4603 0
 5789 0050 7B6A     		ldr	r3, [r7, #36]
 5790 0052 93F85030 		ldrb	r3, [r3, #80]
 5791 0056 FB77     		strb	r3, [r7, #31]
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5792              		.loc 1 4604 0
 5793 0058 7B6A     		ldr	r3, [r7, #36]
 5794 005a 0222     		movs	r2, #2
 5795 005c 83F85020 		strb	r2, [r3, #80]
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 5796              		.loc 1 4608 0
 5797 0060 7B6A     		ldr	r3, [r7, #36]
 5798 0062 DB6C     		ldr	r3, [r3, #76]
 5799 0064 5A1C     		adds	r2, r3, #1
 5800 0066 7B6A     		ldr	r3, [r7, #36]
 5801 0068 DA64     		str	r2, [r3, #76]
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 5802              		.loc 1 4614 0
 5803 006a FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5804 006c 012B     		cmp	r3, #1
 5805 006e 47D1     		bne	.L384
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 5806              		.loc 1 4617 0
 5807 0070 7B6A     		ldr	r3, [r7, #36]
 5808 0072 9B6A     		ldr	r3, [r3, #40]
 5809 0074 002B     		cmp	r3, #0
 5810 0076 0BD0     		beq	.L385
 5811              	.LBB177:
 5812              	.LBB178:
ARM GAS  /tmp/ccMf91lX.s 			page 188


 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 5813              		.loc 2 237 0 discriminator 1
 5814              		.syntax unified
 5815              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 5816 0078 4FF05003 			mov r3, #80												
 5817 007c 72B6     		cpsid i													
 5818 007e 83F31188 		msr basepri, r3											
 5819 0082 BFF36F8F 		isb														
 5820 0086 BFF34F8F 		dsb														
 5821 008a 62B6     		cpsie i													
 5822              	
 5823              	@ 0 "" 2
 5824              		.thumb
 5825              		.syntax unified
 5826 008c FB60     		str	r3, [r7, #12]
 5827              	.L386:
 5828              	.LBE178:
 5829              	.LBE177:
 5830              		.loc 1 4617 0 discriminator 2
 5831 008e FEE7     		b	.L386
 5832              	.L385:
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 5833              		.loc 1 4619 0
 5834 0090 204B     		ldr	r3, .L391
 5835 0092 1B68     		ldr	r3, [r3]
 5836 0094 002B     		cmp	r3, #0
 5837 0096 1CD1     		bne	.L387
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5838              		.loc 1 4621 0
 5839 0098 7B6A     		ldr	r3, [r7, #36]
 5840 009a 0433     		adds	r3, r3, #4
 5841 009c 1846     		mov	r0, r3
 5842 009e FFF7FEFF 		bl	uxListRemove
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5843              		.loc 1 4622 0
 5844 00a2 7B6A     		ldr	r3, [r7, #36]
 5845 00a4 DB6A     		ldr	r3, [r3, #44]
 5846 00a6 0122     		movs	r2, #1
 5847 00a8 9A40     		lsls	r2, r2, r3
 5848 00aa 1B4B     		ldr	r3, .L391+4
 5849 00ac 1B68     		ldr	r3, [r3]
 5850 00ae 1343     		orrs	r3, r3, r2
 5851 00b0 194A     		ldr	r2, .L391+4
 5852 00b2 1360     		str	r3, [r2]
 5853 00b4 7B6A     		ldr	r3, [r7, #36]
 5854 00b6 DA6A     		ldr	r2, [r3, #44]
 5855 00b8 1346     		mov	r3, r2
 5856 00ba 9B00     		lsls	r3, r3, #2
 5857 00bc 1344     		add	r3, r3, r2
 5858 00be 9B00     		lsls	r3, r3, #2
 5859 00c0 164A     		ldr	r2, .L391+8
 5860 00c2 1A44     		add	r2, r2, r3
 5861 00c4 7B6A     		ldr	r3, [r7, #36]
 5862 00c6 0433     		adds	r3, r3, #4
 5863 00c8 1946     		mov	r1, r3
ARM GAS  /tmp/ccMf91lX.s 			page 189


 5864 00ca 1046     		mov	r0, r2
 5865 00cc FFF7FEFF 		bl	vListInsertEnd
 5866 00d0 05E0     		b	.L388
 5867              	.L387:
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 5868              		.loc 1 4628 0
 5869 00d2 7B6A     		ldr	r3, [r7, #36]
 5870 00d4 1833     		adds	r3, r3, #24
 5871 00d6 1946     		mov	r1, r3
 5872 00d8 1148     		ldr	r0, .L391+12
 5873 00da FFF7FEFF 		bl	vListInsertEnd
 5874              	.L388:
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 5875              		.loc 1 4631 0
 5876 00de 7B6A     		ldr	r3, [r7, #36]
 5877 00e0 DA6A     		ldr	r2, [r3, #44]
 5878 00e2 104B     		ldr	r3, .L391+16
 5879 00e4 1B68     		ldr	r3, [r3]
 5880 00e6 DB6A     		ldr	r3, [r3, #44]
 5881 00e8 9A42     		cmp	r2, r3
 5882 00ea 09D9     		bls	.L384
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 5883              		.loc 1 4635 0
 5884 00ec 3B68     		ldr	r3, [r7]
 5885 00ee 002B     		cmp	r3, #0
 5886 00f0 03D0     		beq	.L389
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 5887              		.loc 1 4637 0
 5888 00f2 3B68     		ldr	r3, [r7]
 5889 00f4 0122     		movs	r2, #1
 5890 00f6 1A60     		str	r2, [r3]
 5891 00f8 02E0     		b	.L384
 5892              	.L389:
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
 5893              		.loc 1 4644 0
 5894 00fa 0B4B     		ldr	r3, .L391+20
 5895 00fc 0122     		movs	r2, #1
 5896 00fe 1A60     		str	r2, [r3]
 5897              	.L384:
 5898 0100 3B6A     		ldr	r3, [r7, #32]
ARM GAS  /tmp/ccMf91lX.s 			page 190


 5899 0102 BB60     		str	r3, [r7, #8]
 5900              	.LBB179:
 5901              	.LBB180:
 5902              		.loc 2 275 0
 5903 0104 BB68     		ldr	r3, [r7, #8]
 5904              		.syntax unified
 5905              	@ 275 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 5906 0106 83F31188 			msr basepri, r3	
 5907              	@ 0 "" 2
 5908              		.thumb
 5909              		.syntax unified
 5910              	.LBE180:
 5911              	.LBE179:
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5912              		.loc 1 4654 0
 5913 010a 00BF     		nop
 5914 010c 2837     		adds	r7, r7, #40
 5915              	.LCFI226:
 5916              		.cfi_def_cfa_offset 8
 5917 010e BD46     		mov	sp, r7
 5918              	.LCFI227:
 5919              		.cfi_def_cfa_register 13
 5920              		@ sp needed
 5921 0110 80BD     		pop	{r7, pc}
 5922              	.L392:
 5923 0112 00BF     		.align	2
 5924              	.L391:
 5925 0114 00000000 		.word	uxSchedulerSuspended
 5926 0118 00000000 		.word	uxTopReadyPriority
 5927 011c 00000000 		.word	pxReadyTasksLists
 5928 0120 00000000 		.word	xPendingReadyList
 5929 0124 00000000 		.word	pxCurrentTCB
 5930 0128 00000000 		.word	xYieldPending
 5931              		.cfi_endproc
 5932              	.LFE185:
 5934              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 5935              		.align	1
 5936              		.global	xTaskNotifyStateClear
 5937              		.syntax unified
 5938              		.thumb
 5939              		.thumb_func
 5940              		.fpu fpv4-sp-d16
 5942              	xTaskNotifyStateClear:
 5943              	.LFB186:
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccMf91lX.s 			page 191


4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5944              		.loc 1 4663 0
 5945              		.cfi_startproc
 5946              		@ args = 0, pretend = 0, frame = 16
 5947              		@ frame_needed = 1, uses_anonymous_args = 0
 5948 0000 80B5     		push	{r7, lr}
 5949              	.LCFI228:
 5950              		.cfi_def_cfa_offset 8
 5951              		.cfi_offset 7, -8
 5952              		.cfi_offset 14, -4
 5953 0002 84B0     		sub	sp, sp, #16
 5954              	.LCFI229:
 5955              		.cfi_def_cfa_offset 24
 5956 0004 00AF     		add	r7, sp, #0
 5957              	.LCFI230:
 5958              		.cfi_def_cfa_register 7
 5959 0006 7860     		str	r0, [r7, #4]
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 5960              		.loc 1 4669 0
 5961 0008 7B68     		ldr	r3, [r7, #4]
 5962 000a 002B     		cmp	r3, #0
 5963 000c 02D1     		bne	.L394
 5964              		.loc 1 4669 0 is_stmt 0 discriminator 1
 5965 000e 0E4B     		ldr	r3, .L399
 5966 0010 1B68     		ldr	r3, [r3]
 5967 0012 00E0     		b	.L395
 5968              	.L394:
 5969              		.loc 1 4669 0 discriminator 2
 5970 0014 7B68     		ldr	r3, [r7, #4]
 5971              	.L395:
 5972              		.loc 1 4669 0 discriminator 4
 5973 0016 BB60     		str	r3, [r7, #8]
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 5974              		.loc 1 4671 0 is_stmt 1 discriminator 4
 5975 0018 FFF7FEFF 		bl	vPortEnterCritical
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 5976              		.loc 1 4673 0 discriminator 4
 5977 001c BB68     		ldr	r3, [r7, #8]
 5978 001e 93F85030 		ldrb	r3, [r3, #80]
 5979 0022 DBB2     		uxtb	r3, r3
 5980 0024 022B     		cmp	r3, #2
 5981 0026 06D1     		bne	.L396
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 5982              		.loc 1 4675 0
 5983 0028 BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/ccMf91lX.s 			page 192


 5984 002a 0022     		movs	r2, #0
 5985 002c 83F85020 		strb	r2, [r3, #80]
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 5986              		.loc 1 4676 0
 5987 0030 0123     		movs	r3, #1
 5988 0032 FB60     		str	r3, [r7, #12]
 5989 0034 01E0     		b	.L397
 5990              	.L396:
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
 5991              		.loc 1 4680 0
 5992 0036 0023     		movs	r3, #0
 5993 0038 FB60     		str	r3, [r7, #12]
 5994              	.L397:
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5995              		.loc 1 4683 0
 5996 003a FFF7FEFF 		bl	vPortExitCritical
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 5997              		.loc 1 4685 0
 5998 003e FB68     		ldr	r3, [r7, #12]
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5999              		.loc 1 4686 0
 6000 0040 1846     		mov	r0, r3
 6001 0042 1037     		adds	r7, r7, #16
 6002              	.LCFI231:
 6003              		.cfi_def_cfa_offset 8
 6004 0044 BD46     		mov	sp, r7
 6005              	.LCFI232:
 6006              		.cfi_def_cfa_register 13
 6007              		@ sp needed
 6008 0046 80BD     		pop	{r7, pc}
 6009              	.L400:
 6010              		.align	2
 6011              	.L399:
 6012 0048 00000000 		.word	pxCurrentTCB
 6013              		.cfi_endproc
 6014              	.LFE186:
 6016              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 6017              		.align	1
 6018              		.syntax unified
 6019              		.thumb
 6020              		.thumb_func
 6021              		.fpu fpv4-sp-d16
 6023              	prvAddCurrentTaskToDelayedList:
 6024              	.LFB187:
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
ARM GAS  /tmp/ccMf91lX.s 			page 193


 6025              		.loc 1 4693 0
 6026              		.cfi_startproc
 6027              		@ args = 0, pretend = 0, frame = 16
 6028              		@ frame_needed = 1, uses_anonymous_args = 0
 6029 0000 80B5     		push	{r7, lr}
 6030              	.LCFI233:
 6031              		.cfi_def_cfa_offset 8
 6032              		.cfi_offset 7, -8
 6033              		.cfi_offset 14, -4
 6034 0002 84B0     		sub	sp, sp, #16
 6035              	.LCFI234:
 6036              		.cfi_def_cfa_offset 24
 6037 0004 00AF     		add	r7, sp, #0
 6038              	.LCFI235:
 6039              		.cfi_def_cfa_register 7
 6040 0006 7860     		str	r0, [r7, #4]
 6041 0008 3960     		str	r1, [r7]
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 6042              		.loc 1 4695 0
 6043 000a 294B     		ldr	r3, .L407
 6044 000c 1B68     		ldr	r3, [r3]
 6045 000e FB60     		str	r3, [r7, #12]
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6046              		.loc 1 4708 0
 6047 0010 284B     		ldr	r3, .L407+4
 6048 0012 1B68     		ldr	r3, [r3]
 6049 0014 0433     		adds	r3, r3, #4
 6050 0016 1846     		mov	r0, r3
 6051 0018 FFF7FEFF 		bl	uxListRemove
 6052 001c 0346     		mov	r3, r0
 6053 001e 002B     		cmp	r3, #0
 6054 0020 0BD1     		bne	.L402
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 6055              		.loc 1 4712 0
 6056 0022 244B     		ldr	r3, .L407+4
 6057 0024 1B68     		ldr	r3, [r3]
 6058 0026 DB6A     		ldr	r3, [r3, #44]
 6059 0028 0122     		movs	r2, #1
 6060 002a 02FA03F3 		lsl	r3, r2, r3
 6061 002e DA43     		mvns	r2, r3
 6062 0030 214B     		ldr	r3, .L407+8
ARM GAS  /tmp/ccMf91lX.s 			page 194


 6063 0032 1B68     		ldr	r3, [r3]
 6064 0034 1340     		ands	r3, r3, r2
 6065 0036 204A     		ldr	r2, .L407+8
 6066 0038 1360     		str	r3, [r2]
 6067              	.L402:
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 6068              		.loc 1 4721 0
 6069 003a 7B68     		ldr	r3, [r7, #4]
 6070 003c B3F1FF3F 		cmp	r3, #-1
 6071 0040 0AD1     		bne	.L403
 6072              		.loc 1 4721 0 is_stmt 0 discriminator 1
 6073 0042 3B68     		ldr	r3, [r7]
 6074 0044 002B     		cmp	r3, #0
 6075 0046 07D0     		beq	.L403
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 6076              		.loc 1 4726 0 is_stmt 1
 6077 0048 1A4B     		ldr	r3, .L407+4
 6078 004a 1B68     		ldr	r3, [r3]
 6079 004c 0433     		adds	r3, r3, #4
 6080 004e 1946     		mov	r1, r3
 6081 0050 1A48     		ldr	r0, .L407+12
 6082 0052 FFF7FEFF 		bl	vListInsertEnd
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccMf91lX.s 			page 195


4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			too. */
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 6083              		.loc 1 4801 0
 6084 0056 26E0     		b	.L406
 6085              	.L403:
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6086              		.loc 1 4733 0
ARM GAS  /tmp/ccMf91lX.s 			page 196


 6087 0058 FA68     		ldr	r2, [r7, #12]
 6088 005a 7B68     		ldr	r3, [r7, #4]
 6089 005c 1344     		add	r3, r3, r2
 6090 005e BB60     		str	r3, [r7, #8]
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6091              		.loc 1 4736 0
 6092 0060 144B     		ldr	r3, .L407+4
 6093 0062 1B68     		ldr	r3, [r3]
 6094 0064 BA68     		ldr	r2, [r7, #8]
 6095 0066 5A60     		str	r2, [r3, #4]
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 6096              		.loc 1 4738 0
 6097 0068 BA68     		ldr	r2, [r7, #8]
 6098 006a FB68     		ldr	r3, [r7, #12]
 6099 006c 9A42     		cmp	r2, r3
 6100 006e 09D2     		bcs	.L405
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6101              		.loc 1 4742 0
 6102 0070 134B     		ldr	r3, .L407+16
 6103 0072 1A68     		ldr	r2, [r3]
 6104 0074 0F4B     		ldr	r3, .L407+4
 6105 0076 1B68     		ldr	r3, [r3]
 6106 0078 0433     		adds	r3, r3, #4
 6107 007a 1946     		mov	r1, r3
 6108 007c 1046     		mov	r0, r2
 6109 007e FFF7FEFF 		bl	vListInsert
 6110              		.loc 1 4801 0
 6111 0082 10E0     		b	.L406
 6112              	.L405:
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6113              		.loc 1 4748 0
 6114 0084 0F4B     		ldr	r3, .L407+20
 6115 0086 1A68     		ldr	r2, [r3]
 6116 0088 0A4B     		ldr	r3, .L407+4
 6117 008a 1B68     		ldr	r3, [r3]
 6118 008c 0433     		adds	r3, r3, #4
 6119 008e 1946     		mov	r1, r3
 6120 0090 1046     		mov	r0, r2
 6121 0092 FFF7FEFF 		bl	vListInsert
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 6122              		.loc 1 4753 0
 6123 0096 0C4B     		ldr	r3, .L407+24
 6124 0098 1B68     		ldr	r3, [r3]
 6125 009a BA68     		ldr	r2, [r7, #8]
 6126 009c 9A42     		cmp	r2, r3
 6127 009e 02D2     		bcs	.L406
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6128              		.loc 1 4755 0
 6129 00a0 094A     		ldr	r2, .L407+24
 6130 00a2 BB68     		ldr	r3, [r7, #8]
 6131 00a4 1360     		str	r3, [r2]
 6132              	.L406:
 6133              		.loc 1 4801 0
 6134 00a6 00BF     		nop
 6135 00a8 1037     		adds	r7, r7, #16
 6136              	.LCFI236:
 6137              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccMf91lX.s 			page 197


 6138 00aa BD46     		mov	sp, r7
 6139              	.LCFI237:
 6140              		.cfi_def_cfa_register 13
 6141              		@ sp needed
 6142 00ac 80BD     		pop	{r7, pc}
 6143              	.L408:
 6144 00ae 00BF     		.align	2
 6145              	.L407:
 6146 00b0 00000000 		.word	xTickCount
 6147 00b4 00000000 		.word	pxCurrentTCB
 6148 00b8 00000000 		.word	uxTopReadyPriority
 6149 00bc 00000000 		.word	xSuspendedTaskList
 6150 00c0 00000000 		.word	pxOverflowDelayedTaskList
 6151 00c4 00000000 		.word	pxDelayedTaskList
 6152 00c8 00000000 		.word	xNextTaskUnblockTime
 6153              		.cfi_endproc
 6154              	.LFE187:
 6156              		.text
 6157              	.Letext0:
 6158              		.file 3 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 6159              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 6160              		.file 5 "/usr/include/newlib/sys/lock.h"
 6161              		.file 6 "/usr/include/newlib/sys/_types.h"
 6162              		.file 7 "/usr/include/newlib/sys/reent.h"
 6163              		.file 8 "/usr/include/newlib/sys/_stdint.h"
 6164              		.file 9 "Drivers/CMSIS/Include/core_cm7.h"
 6165              		.file 10 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 6166              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 6167              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 6168              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
ARM GAS  /tmp/ccMf91lX.s 			page 198


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/ccMf91lX.s:22     .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
     /tmp/ccMf91lX.s:19     .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/ccMf91lX.s:25     .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/ccMf91lX.s:28     .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/ccMf91lX.s:31     .bss.xDelayedTaskList1:0000000000000000 $d
     /tmp/ccMf91lX.s:34     .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
     /tmp/ccMf91lX.s:37     .bss.xDelayedTaskList2:0000000000000000 $d
     /tmp/ccMf91lX.s:40     .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
     /tmp/ccMf91lX.s:43     .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/ccMf91lX.s:46     .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/ccMf91lX.s:49     .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/ccMf91lX.s:52     .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/ccMf91lX.s:55     .bss.xPendingReadyList:0000000000000000 $d
     /tmp/ccMf91lX.s:58     .bss.xPendingReadyList:0000000000000000 xPendingReadyList
     /tmp/ccMf91lX.s:61     .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/ccMf91lX.s:64     .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/ccMf91lX.s:67     .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
     /tmp/ccMf91lX.s:70     .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
     /tmp/ccMf91lX.s:73     .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/ccMf91lX.s:76     .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/ccMf91lX.s:79     .bss.uxCurrentNumberOfTasks:0000000000000000 $d
     /tmp/ccMf91lX.s:82     .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/ccMf91lX.s:85     .bss.xTickCount:0000000000000000 $d
     /tmp/ccMf91lX.s:88     .bss.xTickCount:0000000000000000 xTickCount
     /tmp/ccMf91lX.s:91     .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/ccMf91lX.s:94     .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/ccMf91lX.s:97     .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/ccMf91lX.s:100    .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/ccMf91lX.s:103    .bss.uxPendedTicks:0000000000000000 $d
     /tmp/ccMf91lX.s:106    .bss.uxPendedTicks:0000000000000000 uxPendedTicks
     /tmp/ccMf91lX.s:109    .bss.xYieldPending:0000000000000000 $d
     /tmp/ccMf91lX.s:112    .bss.xYieldPending:0000000000000000 xYieldPending
     /tmp/ccMf91lX.s:115    .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/ccMf91lX.s:118    .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/ccMf91lX.s:121    .bss.uxTaskNumber:0000000000000000 $d
     /tmp/ccMf91lX.s:124    .bss.uxTaskNumber:0000000000000000 uxTaskNumber
     /tmp/ccMf91lX.s:127    .bss.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/ccMf91lX.s:130    .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/ccMf91lX.s:133    .bss.xIdleTaskHandle:0000000000000000 $d
     /tmp/ccMf91lX.s:136    .bss.xIdleTaskHandle:0000000000000000 xIdleTaskHandle
     /tmp/ccMf91lX.s:139    .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/ccMf91lX.s:142    .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/ccMf91lX.s:145    .text.xTaskCreate:0000000000000000 $t
     /tmp/ccMf91lX.s:152    .text.xTaskCreate:0000000000000000 xTaskCreate
     /tmp/ccMf91lX.s:262    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
     /tmp/ccMf91lX.s:453    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
     /tmp/ccMf91lX.s:256    .text.prvInitialiseNewTask:0000000000000000 $t
     /tmp/ccMf91lX.s:447    .text.prvAddNewTaskToReadyList:0000000000000000 $t
     /tmp/ccMf91lX.s:3977   .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
     /tmp/ccMf91lX.s:586    .text.prvAddNewTaskToReadyList:00000000000000b8 $d
     /tmp/ccMf91lX.s:597    .text.vTaskDelete:0000000000000000 $t
     /tmp/ccMf91lX.s:604    .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/ccMf91lX.s:4174   .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
     /tmp/ccMf91lX.s:4220   .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
     /tmp/ccMf91lX.s:786    .text.vTaskDelete:00000000000000f8 $d
ARM GAS  /tmp/ccMf91lX.s 			page 199


     /tmp/ccMf91lX.s:800    .text.vTaskDelay:0000000000000000 $t
     /tmp/ccMf91lX.s:807    .text.vTaskDelay:0000000000000000 vTaskDelay
     /tmp/ccMf91lX.s:2183   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
     /tmp/ccMf91lX.s:6023   .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/ccMf91lX.s:2229   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
     /tmp/ccMf91lX.s:900    .text.vTaskDelay:0000000000000064 $d
     /tmp/ccMf91lX.s:906    .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/ccMf91lX.s:913    .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/ccMf91lX.s:968    .text.uxTaskPriorityGet:0000000000000030 $d
     /tmp/ccMf91lX.s:973    .text.uxTaskPriorityGetFromISR:0000000000000000 $t
     /tmp/ccMf91lX.s:980    .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
     /tmp/ccMf91lX.s:1071   .text.uxTaskPriorityGetFromISR:0000000000000058 $d
     /tmp/ccMf91lX.s:1076   .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/ccMf91lX.s:1083   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/ccMf91lX.s:1326   .text.vTaskPrioritySet:0000000000000150 $d
     /tmp/ccMf91lX.s:1334   .text.vTaskSuspend:0000000000000000 $t
     /tmp/ccMf91lX.s:1341   .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/ccMf91lX.s:2958   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/ccMf91lX.s:1522   .text.vTaskSuspend:00000000000000f4 $d
     /tmp/ccMf91lX.s:1534   .text.prvTaskIsTaskSuspended:0000000000000000 $t
     /tmp/ccMf91lX.s:1540   .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
     /tmp/ccMf91lX.s:1650   .text.prvTaskIsTaskSuspended:0000000000000070 $d
     /tmp/ccMf91lX.s:1656   .text.vTaskResume:0000000000000000 $t
     /tmp/ccMf91lX.s:1663   .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/ccMf91lX.s:1794   .text.vTaskResume:00000000000000ac $d
     /tmp/ccMf91lX.s:1802   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/ccMf91lX.s:1809   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/ccMf91lX.s:1974   .text.xTaskResumeFromISR:00000000000000d4 $d
     /tmp/ccMf91lX.s:1983   .rodata:0000000000000000 $d
     /tmp/ccMf91lX.s:1987   .text.vTaskStartScheduler:0000000000000000 $t
     /tmp/ccMf91lX.s:1994   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
     /tmp/ccMf91lX.s:2100   .text.vTaskStartScheduler:000000000000007c $d
     /tmp/ccMf91lX.s:3921   .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/ccMf91lX.s:2110   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/ccMf91lX.s:2117   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/ccMf91lX.s:2171   .text.vTaskEndScheduler:0000000000000030 $d
     /tmp/ccMf91lX.s:2176   .text.vTaskSuspendAll:0000000000000000 $t
     /tmp/ccMf91lX.s:2217   .text.vTaskSuspendAll:0000000000000018 $d
     /tmp/ccMf91lX.s:2222   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/ccMf91lX.s:2694   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
     /tmp/ccMf91lX.s:2436   .text.xTaskResumeAll:0000000000000118 $d
     /tmp/ccMf91lX.s:2449   .text.xTaskGetTickCount:0000000000000000 $t
     /tmp/ccMf91lX.s:2456   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
     /tmp/ccMf91lX.s:2496   .text.xTaskGetTickCount:000000000000001c $d
     /tmp/ccMf91lX.s:2501   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/ccMf91lX.s:2508   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/ccMf91lX.s:2549   .text.xTaskGetTickCountFromISR:0000000000000020 $d
     /tmp/ccMf91lX.s:2554   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/ccMf91lX.s:2561   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
     /tmp/ccMf91lX.s:2592   .text.uxTaskGetNumberOfTasks:0000000000000014 $d
     /tmp/ccMf91lX.s:2597   .text.pcTaskGetName:0000000000000000 $t
     /tmp/ccMf91lX.s:2604   .text.pcTaskGetName:0000000000000000 pcTaskGetName
     /tmp/ccMf91lX.s:2682   .text.pcTaskGetName:0000000000000048 $d
     /tmp/ccMf91lX.s:2687   .text.xTaskIncrementTick:0000000000000000 $t
     /tmp/ccMf91lX.s:2936   .text.xTaskIncrementTick:0000000000000150 $d
     /tmp/ccMf91lX.s:2951   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/ccMf91lX.s:3100   .text.vTaskSwitchContext:00000000000000a4 $d
ARM GAS  /tmp/ccMf91lX.s 			page 200


     /tmp/ccMf91lX.s:3109   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/ccMf91lX.s:3116   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/ccMf91lX.s:3185   .text.vTaskPlaceOnEventList:0000000000000048 $d
     /tmp/ccMf91lX.s:3190   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
     /tmp/ccMf91lX.s:3197   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
     /tmp/ccMf91lX.s:3300   .text.vTaskPlaceOnUnorderedEventList:0000000000000074 $d
     /tmp/ccMf91lX.s:3306   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/ccMf91lX.s:3313   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/ccMf91lX.s:3445   .text.xTaskRemoveFromEventList:00000000000000b0 $d
     /tmp/ccMf91lX.s:3455   .text.xTaskRemoveFromUnorderedEventList:0000000000000000 $t
     /tmp/ccMf91lX.s:3462   .text.xTaskRemoveFromUnorderedEventList:0000000000000000 xTaskRemoveFromUnorderedEventList
     /tmp/ccMf91lX.s:3610   .text.xTaskRemoveFromUnorderedEventList:00000000000000c0 $d
     /tmp/ccMf91lX.s:3619   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/ccMf91lX.s:3626   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/ccMf91lX.s:3697   .text.vTaskSetTimeOutState:0000000000000044 $d
     /tmp/ccMf91lX.s:3703   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/ccMf91lX.s:3710   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/ccMf91lX.s:3865   .text.xTaskCheckForTimeOut:00000000000000bc $d
     /tmp/ccMf91lX.s:3871   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/ccMf91lX.s:3878   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
     /tmp/ccMf91lX.s:3910   .text.vTaskMissedYield:0000000000000014 $d
     /tmp/ccMf91lX.s:3915   .text.prvIdleTask:0000000000000000 $t
     /tmp/ccMf91lX.s:4072   .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
     /tmp/ccMf91lX.s:3965   .text.prvIdleTask:0000000000000028 $d
     /tmp/ccMf91lX.s:3971   .text.prvInitialiseTaskLists:0000000000000000 $t
     /tmp/ccMf91lX.s:4054   .text.prvInitialiseTaskLists:0000000000000060 $d
     /tmp/ccMf91lX.s:4066   .text.prvCheckTasksWaitingTermination:0000000000000000 $t
     /tmp/ccMf91lX.s:4161   .text.prvCheckTasksWaitingTermination:000000000000006c $d
     /tmp/ccMf91lX.s:4168   .text.prvDeleteTCB:0000000000000000 $t
     /tmp/ccMf91lX.s:4214   .text.prvResetNextTaskUnblockTime:0000000000000000 $t
     /tmp/ccMf91lX.s:4289   .text.prvResetNextTaskUnblockTime:0000000000000044 $d
     /tmp/ccMf91lX.s:4295   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
     /tmp/ccMf91lX.s:4302   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
     /tmp/ccMf91lX.s:4342   .text.xTaskGetCurrentTaskHandle:000000000000001c $d
     /tmp/ccMf91lX.s:4347   .text.xTaskGetSchedulerState:0000000000000000 $t
     /tmp/ccMf91lX.s:4354   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
     /tmp/ccMf91lX.s:4414   .text.xTaskGetSchedulerState:0000000000000034 $d
     /tmp/ccMf91lX.s:4420   .text.vTaskPriorityInherit:0000000000000000 $t
     /tmp/ccMf91lX.s:4427   .text.vTaskPriorityInherit:0000000000000000 vTaskPriorityInherit
     /tmp/ccMf91lX.s:4580   .text.vTaskPriorityInherit:00000000000000e0 $d
     /tmp/ccMf91lX.s:4587   .text.xTaskPriorityDisinherit:0000000000000000 $t
     /tmp/ccMf91lX.s:4594   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
     /tmp/ccMf91lX.s:4780   .text.xTaskPriorityDisinherit:0000000000000104 $d
     /tmp/ccMf91lX.s:4787   .text.uxTaskResetEventItemValue:0000000000000000 $t
     /tmp/ccMf91lX.s:4794   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
     /tmp/ccMf91lX.s:4843   .text.uxTaskResetEventItemValue:000000000000002c $d
     /tmp/ccMf91lX.s:4848   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
     /tmp/ccMf91lX.s:4855   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
     /tmp/ccMf91lX.s:4898   .text.pvTaskIncrementMutexHeldCount:0000000000000024 $d
     /tmp/ccMf91lX.s:4903   .text.ulTaskNotifyTake:0000000000000000 $t
     /tmp/ccMf91lX.s:4910   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
     /tmp/ccMf91lX.s:5017   .text.ulTaskNotifyTake:0000000000000088 $d
     /tmp/ccMf91lX.s:5023   .text.xTaskNotifyWait:0000000000000000 $t
     /tmp/ccMf91lX.s:5030   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
     /tmp/ccMf91lX.s:5156   .text.xTaskNotifyWait:00000000000000ac $d
     /tmp/ccMf91lX.s:5162   .text.xTaskGenericNotify:0000000000000000 $t
     /tmp/ccMf91lX.s:5169   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
ARM GAS  /tmp/ccMf91lX.s 			page 201


     /tmp/ccMf91lX.s:5251   .text.xTaskGenericNotify:0000000000000064 $d
     /tmp/ccMf91lX.s:5256   .text.xTaskGenericNotify:0000000000000078 $t
     /tmp/ccMf91lX.s:5400   .text.xTaskGenericNotify:0000000000000138 $d
     /tmp/ccMf91lX.s:5408   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
     /tmp/ccMf91lX.s:5415   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
     /tmp/ccMf91lX.s:5521   .text.xTaskGenericNotifyFromISR:0000000000000088 $d
     /tmp/ccMf91lX.s:5526   .text.xTaskGenericNotifyFromISR:000000000000009c $t
     /tmp/ccMf91lX.s:5697   .text.xTaskGenericNotifyFromISR:0000000000000180 $d
     /tmp/ccMf91lX.s:5707   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
     /tmp/ccMf91lX.s:5714   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
     /tmp/ccMf91lX.s:5925   .text.vTaskNotifyGiveFromISR:0000000000000114 $d
     /tmp/ccMf91lX.s:5935   .text.xTaskNotifyStateClear:0000000000000000 $t
     /tmp/ccMf91lX.s:5942   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
     /tmp/ccMf91lX.s:6012   .text.xTaskNotifyStateClear:0000000000000048 $d
     /tmp/ccMf91lX.s:6017   .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/ccMf91lX.s:6146   .text.prvAddCurrentTaskToDelayedList:00000000000000b0 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
pvPortMalloc
vPortFree
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vPortValidateInterruptPriority
xPortStartScheduler
vPortEndScheduler
vListInsert
vListInitialise
