ARM GAS  /tmp/ccmDMCsM.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"system_stm32f7xx.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	SpiTxData,4,4
  18              		.comm	SpiRxData,4,4
  19              		.comm	UpdateFile,4,4
  20              		.global	SystemCoreClock
  21              		.section	.data.SystemCoreClock,"aw",%progbits
  22              		.align	2
  25              	SystemCoreClock:
  26 0000 0024F400 		.word	16000000
  27              		.global	AHBPrescTable
  28              		.section	.rodata.AHBPrescTable,"a",%progbits
  29              		.align	2
  32              	AHBPrescTable:
  33 0000 00       		.byte	0
  34 0001 00       		.byte	0
  35 0002 00       		.byte	0
  36 0003 00       		.byte	0
  37 0004 00       		.byte	0
  38 0005 00       		.byte	0
  39 0006 00       		.byte	0
  40 0007 00       		.byte	0
  41 0008 01       		.byte	1
  42 0009 02       		.byte	2
  43 000a 03       		.byte	3
  44 000b 04       		.byte	4
  45 000c 06       		.byte	6
  46 000d 07       		.byte	7
  47 000e 08       		.byte	8
  48 000f 09       		.byte	9
  49              		.global	APBPrescTable
  50              		.section	.rodata.APBPrescTable,"a",%progbits
  51              		.align	2
  54              	APBPrescTable:
  55 0000 00       		.byte	0
  56 0001 00       		.byte	0
  57 0002 00       		.byte	0
  58 0003 00       		.byte	0
  59 0004 01       		.byte	1
  60 0005 02       		.byte	2
  61 0006 03       		.byte	3
  62 0007 04       		.byte	4
  63              		.section	.text.SystemInit,"ax",%progbits
ARM GAS  /tmp/ccmDMCsM.s 			page 2


  64              		.align	1
  65              		.global	SystemInit
  66              		.syntax unified
  67              		.thumb
  68              		.thumb_func
  69              		.fpu fpv4-sp-d16
  71              	SystemInit:
  72              	.LFB138:
  73              		.file 1 "Src/system_stm32f7xx.c"
   1:Src/system_stm32f7xx.c **** /**
   2:Src/system_stm32f7xx.c ****   ******************************************************************************
   3:Src/system_stm32f7xx.c ****   * @file    system_stm32f7xx.c
   4:Src/system_stm32f7xx.c ****   * @author  MCD Application Team
   5:Src/system_stm32f7xx.c ****   * @brief   CMSIS Cortex-M7 Device Peripheral Access Layer System Source File.
   6:Src/system_stm32f7xx.c ****   *
   7:Src/system_stm32f7xx.c ****   *   This file provides two functions and one global variable to be called from 
   8:Src/system_stm32f7xx.c ****   *   user application:
   9:Src/system_stm32f7xx.c ****   *      - SystemInit(): This function is called at startup just after reset and 
  10:Src/system_stm32f7xx.c ****   *                      before branch to main program. This call is made inside
  11:Src/system_stm32f7xx.c ****   *                      the "startup_stm32f7xx.s" file.
  12:Src/system_stm32f7xx.c ****   *
  13:Src/system_stm32f7xx.c ****   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  14:Src/system_stm32f7xx.c ****   *                                  by the user application to setup the SysTick 
  15:Src/system_stm32f7xx.c ****   *                                  timer or configure other parameters.
  16:Src/system_stm32f7xx.c ****   *                                     
  17:Src/system_stm32f7xx.c ****   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  18:Src/system_stm32f7xx.c ****   *                                 be called whenever the core clock is changed
  19:Src/system_stm32f7xx.c ****   *                                 during program execution.
  20:Src/system_stm32f7xx.c ****   *
  21:Src/system_stm32f7xx.c ****   *
  22:Src/system_stm32f7xx.c ****   ******************************************************************************
  23:Src/system_stm32f7xx.c ****   * @attention
  24:Src/system_stm32f7xx.c ****   *
  25:Src/system_stm32f7xx.c ****   * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
  26:Src/system_stm32f7xx.c ****   *
  27:Src/system_stm32f7xx.c ****   * Redistribution and use in source and binary forms, with or without modification,
  28:Src/system_stm32f7xx.c ****   * are permitted provided that the following conditions are met:
  29:Src/system_stm32f7xx.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  30:Src/system_stm32f7xx.c ****   *      this list of conditions and the following disclaimer.
  31:Src/system_stm32f7xx.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  32:Src/system_stm32f7xx.c ****   *      this list of conditions and the following disclaimer in the documentation
  33:Src/system_stm32f7xx.c ****   *      and/or other materials provided with the distribution.
  34:Src/system_stm32f7xx.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  35:Src/system_stm32f7xx.c ****   *      may be used to endorse or promote products derived from this software
  36:Src/system_stm32f7xx.c ****   *      without specific prior written permission.
  37:Src/system_stm32f7xx.c ****   *
  38:Src/system_stm32f7xx.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  39:Src/system_stm32f7xx.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  40:Src/system_stm32f7xx.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  41:Src/system_stm32f7xx.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  42:Src/system_stm32f7xx.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  43:Src/system_stm32f7xx.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  44:Src/system_stm32f7xx.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  45:Src/system_stm32f7xx.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  46:Src/system_stm32f7xx.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  47:Src/system_stm32f7xx.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  48:Src/system_stm32f7xx.c ****   *
ARM GAS  /tmp/ccmDMCsM.s 			page 3


  49:Src/system_stm32f7xx.c ****   ******************************************************************************
  50:Src/system_stm32f7xx.c ****   */
  51:Src/system_stm32f7xx.c **** 
  52:Src/system_stm32f7xx.c **** /** @addtogroup CMSIS
  53:Src/system_stm32f7xx.c ****   * @{
  54:Src/system_stm32f7xx.c ****   */
  55:Src/system_stm32f7xx.c **** 
  56:Src/system_stm32f7xx.c **** /** @addtogroup stm32f7xx_system
  57:Src/system_stm32f7xx.c ****   * @{
  58:Src/system_stm32f7xx.c ****   */  
  59:Src/system_stm32f7xx.c ****   
  60:Src/system_stm32f7xx.c **** /** @addtogroup STM32F7xx_System_Private_Includes
  61:Src/system_stm32f7xx.c ****   * @{
  62:Src/system_stm32f7xx.c ****   */
  63:Src/system_stm32f7xx.c **** 
  64:Src/system_stm32f7xx.c **** #include "stm32f7xx.h"
  65:Src/system_stm32f7xx.c **** 
  66:Src/system_stm32f7xx.c **** #if !defined  (HSE_VALUE) 
  67:Src/system_stm32f7xx.c ****   #define HSE_VALUE    ((uint32_t)25000000) /*!< Default value of the External oscillator in Hz */
  68:Src/system_stm32f7xx.c **** #endif /* HSE_VALUE */
  69:Src/system_stm32f7xx.c **** 
  70:Src/system_stm32f7xx.c **** #if !defined  (HSI_VALUE)
  71:Src/system_stm32f7xx.c ****   #define HSI_VALUE    ((uint32_t)16000000) /*!< Value of the Internal oscillator in Hz*/
  72:Src/system_stm32f7xx.c **** #endif /* HSI_VALUE */
  73:Src/system_stm32f7xx.c **** 
  74:Src/system_stm32f7xx.c **** /**
  75:Src/system_stm32f7xx.c ****   * @}
  76:Src/system_stm32f7xx.c ****   */
  77:Src/system_stm32f7xx.c **** 
  78:Src/system_stm32f7xx.c **** /** @addtogroup STM32F7xx_System_Private_TypesDefinitions
  79:Src/system_stm32f7xx.c ****   * @{
  80:Src/system_stm32f7xx.c ****   */
  81:Src/system_stm32f7xx.c **** 
  82:Src/system_stm32f7xx.c **** /**
  83:Src/system_stm32f7xx.c ****   * @}
  84:Src/system_stm32f7xx.c ****   */
  85:Src/system_stm32f7xx.c **** 
  86:Src/system_stm32f7xx.c **** /** @addtogroup STM32F7xx_System_Private_Defines
  87:Src/system_stm32f7xx.c ****   * @{
  88:Src/system_stm32f7xx.c ****   */
  89:Src/system_stm32f7xx.c **** 
  90:Src/system_stm32f7xx.c **** /************************* Miscellaneous Configuration ************************/
  91:Src/system_stm32f7xx.c **** 
  92:Src/system_stm32f7xx.c **** /*!< Uncomment the following line if you need to relocate your vector Table in
  93:Src/system_stm32f7xx.c ****      Internal SRAM. */
  94:Src/system_stm32f7xx.c **** /* #define VECT_TAB_SRAM */
  95:Src/system_stm32f7xx.c **** #define VECT_TAB_OFFSET  0x00 /*!< Vector Table base offset field. 
  96:Src/system_stm32f7xx.c ****                                    This value must be a multiple of 0x200. */
  97:Src/system_stm32f7xx.c **** /******************************************************************************/
  98:Src/system_stm32f7xx.c **** 
  99:Src/system_stm32f7xx.c **** /**
 100:Src/system_stm32f7xx.c ****   * @}
 101:Src/system_stm32f7xx.c ****   */
 102:Src/system_stm32f7xx.c **** 
 103:Src/system_stm32f7xx.c **** /** @addtogroup STM32F7xx_System_Private_Macros
 104:Src/system_stm32f7xx.c ****   * @{
 105:Src/system_stm32f7xx.c ****   */
ARM GAS  /tmp/ccmDMCsM.s 			page 4


 106:Src/system_stm32f7xx.c **** 
 107:Src/system_stm32f7xx.c **** /**
 108:Src/system_stm32f7xx.c ****   * @}
 109:Src/system_stm32f7xx.c ****   */
 110:Src/system_stm32f7xx.c **** 
 111:Src/system_stm32f7xx.c **** /** @addtogroup STM32F7xx_System_Private_Variables
 112:Src/system_stm32f7xx.c ****   * @{
 113:Src/system_stm32f7xx.c ****   */
 114:Src/system_stm32f7xx.c **** 
 115:Src/system_stm32f7xx.c ****   /* This variable is updated in three ways:
 116:Src/system_stm32f7xx.c ****       1) by calling CMSIS function SystemCoreClockUpdate()
 117:Src/system_stm32f7xx.c ****       2) by calling HAL API function HAL_RCC_GetHCLKFreq()
 118:Src/system_stm32f7xx.c ****       3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency 
 119:Src/system_stm32f7xx.c ****          Note: If you use this function to configure the system clock; then there
 120:Src/system_stm32f7xx.c ****                is no need to call the 2 first functions listed above, since SystemCoreClock
 121:Src/system_stm32f7xx.c ****                variable is updated automatically.
 122:Src/system_stm32f7xx.c ****   */
 123:Src/system_stm32f7xx.c ****   uint32_t SystemCoreClock = 16000000;
 124:Src/system_stm32f7xx.c ****   const uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 125:Src/system_stm32f7xx.c ****   const uint8_t APBPrescTable[8] = {0, 0, 0, 0, 1, 2, 3, 4};
 126:Src/system_stm32f7xx.c **** 
 127:Src/system_stm32f7xx.c **** /**
 128:Src/system_stm32f7xx.c ****   * @}
 129:Src/system_stm32f7xx.c ****   */
 130:Src/system_stm32f7xx.c **** 
 131:Src/system_stm32f7xx.c **** /** @addtogroup STM32F7xx_System_Private_FunctionPrototypes
 132:Src/system_stm32f7xx.c ****   * @{
 133:Src/system_stm32f7xx.c ****   */
 134:Src/system_stm32f7xx.c **** 
 135:Src/system_stm32f7xx.c **** /**
 136:Src/system_stm32f7xx.c ****   * @}
 137:Src/system_stm32f7xx.c ****   */
 138:Src/system_stm32f7xx.c **** 
 139:Src/system_stm32f7xx.c **** /** @addtogroup STM32F7xx_System_Private_Functions
 140:Src/system_stm32f7xx.c ****   * @{
 141:Src/system_stm32f7xx.c ****   */
 142:Src/system_stm32f7xx.c **** 
 143:Src/system_stm32f7xx.c **** /**
 144:Src/system_stm32f7xx.c ****   * @brief  Setup the microcontroller system
 145:Src/system_stm32f7xx.c ****   *         Initialize the Embedded Flash Interface, the PLL and update the 
 146:Src/system_stm32f7xx.c ****   *         SystemFrequency variable.
 147:Src/system_stm32f7xx.c ****   * @param  None
 148:Src/system_stm32f7xx.c ****   * @retval None
 149:Src/system_stm32f7xx.c ****   */
 150:Src/system_stm32f7xx.c **** void SystemInit(void)
 151:Src/system_stm32f7xx.c **** {
  74              		.loc 1 151 0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 0
  77              		@ frame_needed = 1, uses_anonymous_args = 0
  78              		@ link register save eliminated.
  79 0000 80B4     		push	{r7}
  80              	.LCFI0:
  81              		.cfi_def_cfa_offset 4
  82              		.cfi_offset 7, -4
  83 0002 00AF     		add	r7, sp, #0
  84              	.LCFI1:
ARM GAS  /tmp/ccmDMCsM.s 			page 5


  85              		.cfi_def_cfa_register 7
 152:Src/system_stm32f7xx.c ****   /* FPU settings ------------------------------------------------------------*/
 153:Src/system_stm32f7xx.c ****   #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 154:Src/system_stm32f7xx.c ****     SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  86              		.loc 1 154 0
  87 0004 154B     		ldr	r3, .L2
  88 0006 D3F88830 		ldr	r3, [r3, #136]
  89 000a 144A     		ldr	r2, .L2
  90 000c 43F47003 		orr	r3, r3, #15728640
  91 0010 C2F88830 		str	r3, [r2, #136]
 155:Src/system_stm32f7xx.c ****   #endif
 156:Src/system_stm32f7xx.c ****   /* Reset the RCC clock configuration to the default reset state ------------*/
 157:Src/system_stm32f7xx.c ****   /* Set HSION bit */
 158:Src/system_stm32f7xx.c ****   RCC->CR |= (uint32_t)0x00000001;
  92              		.loc 1 158 0
  93 0014 124B     		ldr	r3, .L2+4
  94 0016 1B68     		ldr	r3, [r3]
  95 0018 114A     		ldr	r2, .L2+4
  96 001a 43F00103 		orr	r3, r3, #1
  97 001e 1360     		str	r3, [r2]
 159:Src/system_stm32f7xx.c **** 
 160:Src/system_stm32f7xx.c ****   /* Reset CFGR register */
 161:Src/system_stm32f7xx.c ****   RCC->CFGR = 0x00000000;
  98              		.loc 1 161 0
  99 0020 0F4B     		ldr	r3, .L2+4
 100 0022 0022     		movs	r2, #0
 101 0024 9A60     		str	r2, [r3, #8]
 162:Src/system_stm32f7xx.c **** 
 163:Src/system_stm32f7xx.c ****   /* Reset HSEON, CSSON and PLLON bits */
 164:Src/system_stm32f7xx.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
 102              		.loc 1 164 0
 103 0026 0E4B     		ldr	r3, .L2+4
 104 0028 1A68     		ldr	r2, [r3]
 105 002a 0D49     		ldr	r1, .L2+4
 106 002c 0D4B     		ldr	r3, .L2+8
 107 002e 1340     		ands	r3, r3, r2
 108 0030 0B60     		str	r3, [r1]
 165:Src/system_stm32f7xx.c **** 
 166:Src/system_stm32f7xx.c ****   /* Reset PLLCFGR register */
 167:Src/system_stm32f7xx.c ****   RCC->PLLCFGR = 0x24003010;
 109              		.loc 1 167 0
 110 0032 0B4B     		ldr	r3, .L2+4
 111 0034 0C4A     		ldr	r2, .L2+12
 112 0036 5A60     		str	r2, [r3, #4]
 168:Src/system_stm32f7xx.c **** 
 169:Src/system_stm32f7xx.c ****   /* Reset HSEBYP bit */
 170:Src/system_stm32f7xx.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
 113              		.loc 1 170 0
 114 0038 094B     		ldr	r3, .L2+4
 115 003a 1B68     		ldr	r3, [r3]
 116 003c 084A     		ldr	r2, .L2+4
 117 003e 23F48023 		bic	r3, r3, #262144
 118 0042 1360     		str	r3, [r2]
 171:Src/system_stm32f7xx.c **** 
 172:Src/system_stm32f7xx.c ****   /* Disable all interrupts */
 173:Src/system_stm32f7xx.c ****   RCC->CIR = 0x00000000;
 119              		.loc 1 173 0
ARM GAS  /tmp/ccmDMCsM.s 			page 6


 120 0044 064B     		ldr	r3, .L2+4
 121 0046 0022     		movs	r2, #0
 122 0048 DA60     		str	r2, [r3, #12]
 174:Src/system_stm32f7xx.c **** 
 175:Src/system_stm32f7xx.c ****   /* Configure the Vector Table location add offset address ------------------*/
 176:Src/system_stm32f7xx.c **** #ifdef VECT_TAB_SRAM
 177:Src/system_stm32f7xx.c ****   SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 178:Src/system_stm32f7xx.c **** #else
 179:Src/system_stm32f7xx.c ****   SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 123              		.loc 1 179 0
 124 004a 044B     		ldr	r3, .L2
 125 004c 4FF00062 		mov	r2, #134217728
 126 0050 9A60     		str	r2, [r3, #8]
 180:Src/system_stm32f7xx.c **** #endif
 181:Src/system_stm32f7xx.c **** }
 127              		.loc 1 181 0
 128 0052 00BF     		nop
 129 0054 BD46     		mov	sp, r7
 130              	.LCFI2:
 131              		.cfi_def_cfa_register 13
 132              		@ sp needed
 133 0056 5DF8047B 		ldr	r7, [sp], #4
 134              	.LCFI3:
 135              		.cfi_restore 7
 136              		.cfi_def_cfa_offset 0
 137 005a 7047     		bx	lr
 138              	.L3:
 139              		.align	2
 140              	.L2:
 141 005c 00ED00E0 		.word	-536810240
 142 0060 00380240 		.word	1073887232
 143 0064 FFFFF6FE 		.word	-17367041
 144 0068 10300024 		.word	603992080
 145              		.cfi_endproc
 146              	.LFE138:
 148              		.section	.text.SystemCoreClockUpdate,"ax",%progbits
 149              		.align	1
 150              		.global	SystemCoreClockUpdate
 151              		.syntax unified
 152              		.thumb
 153              		.thumb_func
 154              		.fpu fpv4-sp-d16
 156              	SystemCoreClockUpdate:
 157              	.LFB139:
 182:Src/system_stm32f7xx.c **** 
 183:Src/system_stm32f7xx.c **** /**
 184:Src/system_stm32f7xx.c ****    * @brief  Update SystemCoreClock variable according to Clock Register Values.
 185:Src/system_stm32f7xx.c ****   *         The SystemCoreClock variable contains the core clock (HCLK), it can
 186:Src/system_stm32f7xx.c ****   *         be used by the user application to setup the SysTick timer or configure
 187:Src/system_stm32f7xx.c ****   *         other parameters.
 188:Src/system_stm32f7xx.c ****   *           
 189:Src/system_stm32f7xx.c ****   * @note   Each time the core clock (HCLK) changes, this function must be called
 190:Src/system_stm32f7xx.c ****   *         to update SystemCoreClock variable value. Otherwise, any configuration
 191:Src/system_stm32f7xx.c ****   *         based on this variable will be incorrect.         
 192:Src/system_stm32f7xx.c ****   *     
 193:Src/system_stm32f7xx.c ****   * @note   - The system frequency computed by this function is not the real 
 194:Src/system_stm32f7xx.c ****   *           frequency in the chip. It is calculated based on the predefined 
ARM GAS  /tmp/ccmDMCsM.s 			page 7


 195:Src/system_stm32f7xx.c ****   *           constant and the selected clock source:
 196:Src/system_stm32f7xx.c ****   *             
 197:Src/system_stm32f7xx.c ****   *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
 198:Src/system_stm32f7xx.c ****   *                                              
 199:Src/system_stm32f7xx.c ****   *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
 200:Src/system_stm32f7xx.c ****   *                          
 201:Src/system_stm32f7xx.c ****   *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**) 
 202:Src/system_stm32f7xx.c ****   *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
 203:Src/system_stm32f7xx.c ****   *         
 204:Src/system_stm32f7xx.c ****   *         (*) HSI_VALUE is a constant defined in stm32f7xx_hal_conf.h file (default value
 205:Src/system_stm32f7xx.c ****   *             16 MHz) but the real value may vary depending on the variations
 206:Src/system_stm32f7xx.c ****   *             in voltage and temperature.   
 207:Src/system_stm32f7xx.c ****   *    
 208:Src/system_stm32f7xx.c ****   *         (**) HSE_VALUE is a constant defined in stm32f7xx_hal_conf.h file (default value
 209:Src/system_stm32f7xx.c ****   *              25 MHz), user has to ensure that HSE_VALUE is same as the real
 210:Src/system_stm32f7xx.c ****   *              frequency of the crystal used. Otherwise, this function may
 211:Src/system_stm32f7xx.c ****   *              have wrong result.
 212:Src/system_stm32f7xx.c ****   *                
 213:Src/system_stm32f7xx.c ****   *         - The result of this function could be not correct when using fractional
 214:Src/system_stm32f7xx.c ****   *           value for HSE crystal.
 215:Src/system_stm32f7xx.c ****   *     
 216:Src/system_stm32f7xx.c ****   * @param  None
 217:Src/system_stm32f7xx.c ****   * @retval None
 218:Src/system_stm32f7xx.c ****   */
 219:Src/system_stm32f7xx.c **** void SystemCoreClockUpdate(void)
 220:Src/system_stm32f7xx.c **** {
 158              		.loc 1 220 0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 24
 161              		@ frame_needed = 1, uses_anonymous_args = 0
 162              		@ link register save eliminated.
 163 0000 80B4     		push	{r7}
 164              	.LCFI4:
 165              		.cfi_def_cfa_offset 4
 166              		.cfi_offset 7, -4
 167 0002 87B0     		sub	sp, sp, #28
 168              	.LCFI5:
 169              		.cfi_def_cfa_offset 32
 170 0004 00AF     		add	r7, sp, #0
 171              	.LCFI6:
 172              		.cfi_def_cfa_register 7
 221:Src/system_stm32f7xx.c ****   uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 173              		.loc 1 221 0
 174 0006 0023     		movs	r3, #0
 175 0008 3B61     		str	r3, [r7, #16]
 176 000a 0023     		movs	r3, #0
 177 000c 7B61     		str	r3, [r7, #20]
 178 000e 0223     		movs	r3, #2
 179 0010 FB60     		str	r3, [r7, #12]
 180 0012 0023     		movs	r3, #0
 181 0014 BB60     		str	r3, [r7, #8]
 182 0016 0223     		movs	r3, #2
 183 0018 7B60     		str	r3, [r7, #4]
 222:Src/system_stm32f7xx.c ****   
 223:Src/system_stm32f7xx.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 224:Src/system_stm32f7xx.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 184              		.loc 1 224 0
ARM GAS  /tmp/ccmDMCsM.s 			page 8


 185 001a 314B     		ldr	r3, .L13
 186 001c 9B68     		ldr	r3, [r3, #8]
 187 001e 03F00C03 		and	r3, r3, #12
 188 0022 3B61     		str	r3, [r7, #16]
 225:Src/system_stm32f7xx.c **** 
 226:Src/system_stm32f7xx.c ****   switch (tmp)
 189              		.loc 1 226 0
 190 0024 3B69     		ldr	r3, [r7, #16]
 191 0026 042B     		cmp	r3, #4
 192 0028 07D0     		beq	.L6
 193 002a 082B     		cmp	r3, #8
 194 002c 09D0     		beq	.L7
 195 002e 002B     		cmp	r3, #0
 196 0030 3DD1     		bne	.L12
 227:Src/system_stm32f7xx.c ****   {
 228:Src/system_stm32f7xx.c ****     case 0x00:  /* HSI used as system clock source */
 229:Src/system_stm32f7xx.c ****       SystemCoreClock = HSI_VALUE;
 197              		.loc 1 229 0
 198 0032 2C4B     		ldr	r3, .L13+4
 199 0034 2C4A     		ldr	r2, .L13+8
 200 0036 1A60     		str	r2, [r3]
 230:Src/system_stm32f7xx.c ****       break;
 201              		.loc 1 230 0
 202 0038 3DE0     		b	.L9
 203              	.L6:
 231:Src/system_stm32f7xx.c ****     case 0x04:  /* HSE used as system clock source */
 232:Src/system_stm32f7xx.c ****       SystemCoreClock = HSE_VALUE;
 204              		.loc 1 232 0
 205 003a 2A4B     		ldr	r3, .L13+4
 206 003c 2B4A     		ldr	r2, .L13+12
 207 003e 1A60     		str	r2, [r3]
 233:Src/system_stm32f7xx.c ****       break;
 208              		.loc 1 233 0
 209 0040 39E0     		b	.L9
 210              	.L7:
 234:Src/system_stm32f7xx.c ****     case 0x08:  /* PLL used as system clock source */
 235:Src/system_stm32f7xx.c **** 
 236:Src/system_stm32f7xx.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
 237:Src/system_stm32f7xx.c ****          SYSCLK = PLL_VCO / PLL_P
 238:Src/system_stm32f7xx.c ****          */    
 239:Src/system_stm32f7xx.c ****       pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 211              		.loc 1 239 0
 212 0042 274B     		ldr	r3, .L13
 213 0044 5B68     		ldr	r3, [r3, #4]
 214 0046 9B0D     		lsrs	r3, r3, #22
 215 0048 03F00103 		and	r3, r3, #1
 216 004c BB60     		str	r3, [r7, #8]
 240:Src/system_stm32f7xx.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 217              		.loc 1 240 0
 218 004e 244B     		ldr	r3, .L13
 219 0050 5B68     		ldr	r3, [r3, #4]
 220 0052 03F03F03 		and	r3, r3, #63
 221 0056 7B60     		str	r3, [r7, #4]
 241:Src/system_stm32f7xx.c ****       
 242:Src/system_stm32f7xx.c ****       if (pllsource != 0)
 222              		.loc 1 242 0
 223 0058 BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/ccmDMCsM.s 			page 9


 224 005a 002B     		cmp	r3, #0
 225 005c 0CD0     		beq	.L10
 243:Src/system_stm32f7xx.c ****       {
 244:Src/system_stm32f7xx.c ****         /* HSE used as PLL clock source */
 245:Src/system_stm32f7xx.c ****         pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 226              		.loc 1 245 0
 227 005e 234A     		ldr	r2, .L13+12
 228 0060 7B68     		ldr	r3, [r7, #4]
 229 0062 B2FBF3F3 		udiv	r3, r2, r3
 230 0066 1E4A     		ldr	r2, .L13
 231 0068 5268     		ldr	r2, [r2, #4]
 232 006a 9209     		lsrs	r2, r2, #6
 233 006c C2F30802 		ubfx	r2, r2, #0, #9
 234 0070 02FB03F3 		mul	r3, r2, r3
 235 0074 7B61     		str	r3, [r7, #20]
 236 0076 0BE0     		b	.L11
 237              	.L10:
 246:Src/system_stm32f7xx.c ****       }
 247:Src/system_stm32f7xx.c ****       else
 248:Src/system_stm32f7xx.c ****       {
 249:Src/system_stm32f7xx.c ****         /* HSI used as PLL clock source */
 250:Src/system_stm32f7xx.c ****         pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 238              		.loc 1 250 0
 239 0078 1B4A     		ldr	r2, .L13+8
 240 007a 7B68     		ldr	r3, [r7, #4]
 241 007c B2FBF3F3 		udiv	r3, r2, r3
 242 0080 174A     		ldr	r2, .L13
 243 0082 5268     		ldr	r2, [r2, #4]
 244 0084 9209     		lsrs	r2, r2, #6
 245 0086 C2F30802 		ubfx	r2, r2, #0, #9
 246 008a 02FB03F3 		mul	r3, r2, r3
 247 008e 7B61     		str	r3, [r7, #20]
 248              	.L11:
 251:Src/system_stm32f7xx.c ****       }
 252:Src/system_stm32f7xx.c **** 
 253:Src/system_stm32f7xx.c ****       pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 249              		.loc 1 253 0
 250 0090 134B     		ldr	r3, .L13
 251 0092 5B68     		ldr	r3, [r3, #4]
 252 0094 1B0C     		lsrs	r3, r3, #16
 253 0096 03F00303 		and	r3, r3, #3
 254 009a 0133     		adds	r3, r3, #1
 255 009c 5B00     		lsls	r3, r3, #1
 256 009e FB60     		str	r3, [r7, #12]
 254:Src/system_stm32f7xx.c ****       SystemCoreClock = pllvco/pllp;
 257              		.loc 1 254 0
 258 00a0 7A69     		ldr	r2, [r7, #20]
 259 00a2 FB68     		ldr	r3, [r7, #12]
 260 00a4 B2FBF3F3 		udiv	r3, r2, r3
 261 00a8 0E4A     		ldr	r2, .L13+4
 262 00aa 1360     		str	r3, [r2]
 255:Src/system_stm32f7xx.c ****       break;
 263              		.loc 1 255 0
 264 00ac 03E0     		b	.L9
 265              	.L12:
 256:Src/system_stm32f7xx.c ****     default:
 257:Src/system_stm32f7xx.c ****       SystemCoreClock = HSI_VALUE;
ARM GAS  /tmp/ccmDMCsM.s 			page 10


 266              		.loc 1 257 0
 267 00ae 0D4B     		ldr	r3, .L13+4
 268 00b0 0D4A     		ldr	r2, .L13+8
 269 00b2 1A60     		str	r2, [r3]
 258:Src/system_stm32f7xx.c ****       break;
 270              		.loc 1 258 0
 271 00b4 00BF     		nop
 272              	.L9:
 259:Src/system_stm32f7xx.c ****   }
 260:Src/system_stm32f7xx.c ****   /* Compute HCLK frequency --------------------------------------------------*/
 261:Src/system_stm32f7xx.c ****   /* Get HCLK prescaler */
 262:Src/system_stm32f7xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 273              		.loc 1 262 0
 274 00b6 0A4B     		ldr	r3, .L13
 275 00b8 9B68     		ldr	r3, [r3, #8]
 276 00ba 1B09     		lsrs	r3, r3, #4
 277 00bc 03F00F03 		and	r3, r3, #15
 278 00c0 0B4A     		ldr	r2, .L13+16
 279 00c2 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 280 00c4 3B61     		str	r3, [r7, #16]
 263:Src/system_stm32f7xx.c ****   /* HCLK frequency */
 264:Src/system_stm32f7xx.c ****   SystemCoreClock >>= tmp;
 281              		.loc 1 264 0
 282 00c6 074B     		ldr	r3, .L13+4
 283 00c8 1A68     		ldr	r2, [r3]
 284 00ca 3B69     		ldr	r3, [r7, #16]
 285 00cc 22FA03F3 		lsr	r3, r2, r3
 286 00d0 044A     		ldr	r2, .L13+4
 287 00d2 1360     		str	r3, [r2]
 265:Src/system_stm32f7xx.c **** }
 288              		.loc 1 265 0
 289 00d4 00BF     		nop
 290 00d6 1C37     		adds	r7, r7, #28
 291              	.LCFI7:
 292              		.cfi_def_cfa_offset 4
 293 00d8 BD46     		mov	sp, r7
 294              	.LCFI8:
 295              		.cfi_def_cfa_register 13
 296              		@ sp needed
 297 00da 5DF8047B 		ldr	r7, [sp], #4
 298              	.LCFI9:
 299              		.cfi_restore 7
 300              		.cfi_def_cfa_offset 0
 301 00de 7047     		bx	lr
 302              	.L14:
 303              		.align	2
 304              	.L13:
 305 00e0 00380240 		.word	1073887232
 306 00e4 00000000 		.word	SystemCoreClock
 307 00e8 0024F400 		.word	16000000
 308 00ec 00127A00 		.word	8000000
 309 00f0 00000000 		.word	AHBPrescTable
 310              		.cfi_endproc
 311              	.LFE139:
 313              		.text
 314              	.Letext0:
 315              		.file 2 "/usr/include/newlib/machine/_default_types.h"
ARM GAS  /tmp/ccmDMCsM.s 			page 11


 316              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 317              		.file 4 "Drivers/CMSIS/Include/core_cm7.h"
 318              		.file 5 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 319              		.file 6 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f746xx.h"
 320              		.file 7 "/usr/include/newlib/sys/lock.h"
 321              		.file 8 "/usr/include/newlib/sys/_types.h"
 322              		.file 9 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 323              		.file 10 "/usr/include/newlib/sys/reent.h"
 324              		.file 11 "Inc/main.h"
ARM GAS  /tmp/ccmDMCsM.s 			page 12


DEFINED SYMBOLS
                            *ABS*:0000000000000000 system_stm32f7xx.c
                            *COM*:0000000000000004 SpiTxData
                            *COM*:0000000000000004 SpiRxData
                            *COM*:0000000000000004 UpdateFile
     /tmp/ccmDMCsM.s:25     .data.SystemCoreClock:0000000000000000 SystemCoreClock
     /tmp/ccmDMCsM.s:22     .data.SystemCoreClock:0000000000000000 $d
     /tmp/ccmDMCsM.s:32     .rodata.AHBPrescTable:0000000000000000 AHBPrescTable
     /tmp/ccmDMCsM.s:29     .rodata.AHBPrescTable:0000000000000000 $d
     /tmp/ccmDMCsM.s:54     .rodata.APBPrescTable:0000000000000000 APBPrescTable
     /tmp/ccmDMCsM.s:51     .rodata.APBPrescTable:0000000000000000 $d
     /tmp/ccmDMCsM.s:64     .text.SystemInit:0000000000000000 $t
     /tmp/ccmDMCsM.s:71     .text.SystemInit:0000000000000000 SystemInit
     /tmp/ccmDMCsM.s:141    .text.SystemInit:000000000000005c $d
     /tmp/ccmDMCsM.s:149    .text.SystemCoreClockUpdate:0000000000000000 $t
     /tmp/ccmDMCsM.s:156    .text.SystemCoreClockUpdate:0000000000000000 SystemCoreClockUpdate
     /tmp/ccmDMCsM.s:305    .text.SystemCoreClockUpdate:00000000000000e0 $d

NO UNDEFINED SYMBOLS
