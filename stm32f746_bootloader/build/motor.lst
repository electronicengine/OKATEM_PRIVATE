ARM GAS  /tmp/ccCBFM80.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"motor.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	SpiTxData,4,4
  18              		.comm	SpiRxData,4,4
  19              		.comm	UpdateFile,4,4
  20              		.comm	motor1,8,4
  21              		.comm	motor2,8,4
  22              		.comm	motor3,8,4
  23              		.comm	motor4,8,4
  24              		.global	reductor_coefficient
  25              		.section	.rodata.reductor_coefficient,"a",%progbits
  26              		.align	2
  29              	reductor_coefficient:
  30 0000 01000000 		.word	1
  31              		.section	.text.motorInit,"ax",%progbits
  32              		.align	1
  33              		.global	motorInit
  34              		.syntax unified
  35              		.thumb
  36              		.thumb_func
  37              		.fpu fpv4-sp-d16
  39              	motorInit:
  40              	.LFB138:
  41              		.file 1 "Src/motor.c"
   1:Src/motor.c   **** 
   2:Src/motor.c   **** 
   3:Src/motor.c   **** #include "motor.h"
   4:Src/motor.c   **** #include "main.h"
   5:Src/motor.c   **** #include "gpio.h"
   6:Src/motor.c   **** #include "tim.h"
   7:Src/motor.c   **** 
   8:Src/motor.c   **** const int reductor_coefficient = 1; // 500/1.8 = 355.55555
   9:Src/motor.c   **** 
  10:Src/motor.c   **** 
  11:Src/motor.c   **** void motorInit()
  12:Src/motor.c   **** {
  42              		.loc 1 12 0
  43              		.cfi_startproc
  44              		@ args = 0, pretend = 0, frame = 0
  45              		@ frame_needed = 1, uses_anonymous_args = 0
  46 0000 80B5     		push	{r7, lr}
  47              	.LCFI0:
  48              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccCBFM80.s 			page 2


  49              		.cfi_offset 7, -8
  50              		.cfi_offset 14, -4
  51 0002 00AF     		add	r7, sp, #0
  52              	.LCFI1:
  53              		.cfi_def_cfa_register 7
  13:Src/motor.c   ****     HAL_TIM_Base_Start_IT(&htim2);
  54              		.loc 1 13 0
  55 0004 0248     		ldr	r0, .L2
  56 0006 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
  14:Src/motor.c   **** }
  57              		.loc 1 14 0
  58 000a 00BF     		nop
  59 000c 80BD     		pop	{r7, pc}
  60              	.L3:
  61 000e 00BF     		.align	2
  62              	.L2:
  63 0010 00000000 		.word	htim2
  64              		.cfi_endproc
  65              	.LFE138:
  67              		.section	.text.motor1Drive,"ax",%progbits
  68              		.align	1
  69              		.global	motor1Drive
  70              		.syntax unified
  71              		.thumb
  72              		.thumb_func
  73              		.fpu fpv4-sp-d16
  75              	motor1Drive:
  76              	.LFB139:
  15:Src/motor.c   **** 
  16:Src/motor.c   **** void  motor1Drive()
  17:Src/motor.c   **** {
  77              		.loc 1 17 0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 0
  80              		@ frame_needed = 1, uses_anonymous_args = 0
  81              		@ link register save eliminated.
  82 0000 80B4     		push	{r7}
  83              	.LCFI2:
  84              		.cfi_def_cfa_offset 4
  85              		.cfi_offset 7, -4
  86 0002 00AF     		add	r7, sp, #0
  87              	.LCFI3:
  88              		.cfi_def_cfa_register 7
  18:Src/motor.c   **** 
  19:Src/motor.c   **** }
  89              		.loc 1 19 0
  90 0004 00BF     		nop
  91 0006 BD46     		mov	sp, r7
  92              	.LCFI4:
  93              		.cfi_def_cfa_register 13
  94              		@ sp needed
  95 0008 5DF8047B 		ldr	r7, [sp], #4
  96              	.LCFI5:
  97              		.cfi_restore 7
  98              		.cfi_def_cfa_offset 0
  99 000c 7047     		bx	lr
 100              		.cfi_endproc
ARM GAS  /tmp/ccCBFM80.s 			page 3


 101              	.LFE139:
 103              		.section	.text.motor2Drive,"ax",%progbits
 104              		.align	1
 105              		.global	motor2Drive
 106              		.syntax unified
 107              		.thumb
 108              		.thumb_func
 109              		.fpu fpv4-sp-d16
 111              	motor2Drive:
 112              	.LFB140:
  20:Src/motor.c   **** 
  21:Src/motor.c   **** void motor2Drive()
  22:Src/motor.c   **** {
 113              		.loc 1 22 0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 1, uses_anonymous_args = 0
 117 0000 80B5     		push	{r7, lr}
 118              	.LCFI6:
 119              		.cfi_def_cfa_offset 8
 120              		.cfi_offset 7, -8
 121              		.cfi_offset 14, -4
 122 0002 00AF     		add	r7, sp, #0
 123              	.LCFI7:
 124              		.cfi_def_cfa_register 7
  23:Src/motor.c   **** 
  24:Src/motor.c   ****     static volatile int phase = 1;
  25:Src/motor.c   **** 
  26:Src/motor.c   ****         if(motor2.direction == FORWARD && motor2.degree >= 0)
 125              		.loc 1 26 0
 126 0004 4F4B     		ldr	r3, .L12
 127 0006 1B68     		ldr	r3, [r3]
 128 0008 012B     		cmp	r3, #1
 129 000a 40F08F80 		bne	.L6
 130              		.loc 1 26 0 is_stmt 0 discriminator 1
 131 000e 4D4B     		ldr	r3, .L12
 132 0010 5B68     		ldr	r3, [r3, #4]
 133 0012 002B     		cmp	r3, #0
 134 0014 C0F28A80 		blt	.L6
  27:Src/motor.c   ****         {
  28:Src/motor.c   **** 
  29:Src/motor.c   ****             motor2.degree--;
 135              		.loc 1 29 0 is_stmt 1
 136 0018 4A4B     		ldr	r3, .L12
 137 001a 5B68     		ldr	r3, [r3, #4]
 138 001c 013B     		subs	r3, r3, #1
 139 001e 494A     		ldr	r2, .L12
 140 0020 5360     		str	r3, [r2, #4]
  30:Src/motor.c   **** 
  31:Src/motor.c   ****               if(phase  == 1)
 141              		.loc 1 31 0
 142 0022 494B     		ldr	r3, .L12+4
 143 0024 1B68     		ldr	r3, [r3]
 144 0026 012B     		cmp	r3, #1
 145 0028 1DD1     		bne	.L7
  32:Src/motor.c   ****               {
  33:Src/motor.c   **** 
ARM GAS  /tmp/ccCBFM80.s 			page 4


  34:Src/motor.c   ****                   HAL_GPIO_WritePin(STEP2_AI1_GPIO_Port, STEP2_AI1_Pin, GPIO_PIN_SET);
 146              		.loc 1 34 0
 147 002a 0122     		movs	r2, #1
 148 002c 4FF40051 		mov	r1, #8192
 149 0030 4648     		ldr	r0, .L12+8
 150 0032 FFF7FEFF 		bl	HAL_GPIO_WritePin
  35:Src/motor.c   ****                   HAL_GPIO_WritePin(STEP2_AI2_GPIO_Port, STEP2_AI2_Pin, GPIO_PIN_RESET);
 151              		.loc 1 35 0
 152 0036 0022     		movs	r2, #0
 153 0038 4FF48051 		mov	r1, #4096
 154 003c 4348     		ldr	r0, .L12+8
 155 003e FFF7FEFF 		bl	HAL_GPIO_WritePin
  36:Src/motor.c   **** 
  37:Src/motor.c   ****                   HAL_GPIO_WritePin(STEP2_BI1_GPIO_Port, STEP2_BI1_Pin, GPIO_PIN_SET);
 156              		.loc 1 37 0
 157 0042 0122     		movs	r2, #1
 158 0044 4FF48061 		mov	r1, #1024
 159 0048 4048     		ldr	r0, .L12+8
 160 004a FFF7FEFF 		bl	HAL_GPIO_WritePin
  38:Src/motor.c   ****                   HAL_GPIO_WritePin(STEP2_BI2_GPIO_Port, STEP2_BI2_Pin, GPIO_PIN_RESET);
 161              		.loc 1 38 0
 162 004e 0022     		movs	r2, #0
 163 0050 4FF40061 		mov	r1, #2048
 164 0054 3D48     		ldr	r0, .L12+8
 165 0056 FFF7FEFF 		bl	HAL_GPIO_WritePin
  39:Src/motor.c   ****                   phase ++;
 166              		.loc 1 39 0
 167 005a 3B4B     		ldr	r3, .L12+4
 168 005c 1B68     		ldr	r3, [r3]
 169 005e 0133     		adds	r3, r3, #1
 170 0060 394A     		ldr	r2, .L12+4
 171 0062 1360     		str	r3, [r2]
 172 0064 62E0     		b	.L6
 173              	.L7:
  40:Src/motor.c   **** 
  41:Src/motor.c   ****               }
  42:Src/motor.c   ****               else if(phase  == 2)
 174              		.loc 1 42 0
 175 0066 384B     		ldr	r3, .L12+4
 176 0068 1B68     		ldr	r3, [r3]
 177 006a 022B     		cmp	r3, #2
 178 006c 1DD1     		bne	.L8
  43:Src/motor.c   ****               {
  44:Src/motor.c   **** 
  45:Src/motor.c   ****                   HAL_GPIO_WritePin(STEP2_AI1_GPIO_Port, STEP2_AI1_Pin, GPIO_PIN_SET);
 179              		.loc 1 45 0
 180 006e 0122     		movs	r2, #1
 181 0070 4FF40051 		mov	r1, #8192
 182 0074 3548     		ldr	r0, .L12+8
 183 0076 FFF7FEFF 		bl	HAL_GPIO_WritePin
  46:Src/motor.c   ****                   HAL_GPIO_WritePin(STEP2_AI2_GPIO_Port, STEP2_AI2_Pin, GPIO_PIN_RESET);
 184              		.loc 1 46 0
 185 007a 0022     		movs	r2, #0
 186 007c 4FF48051 		mov	r1, #4096
 187 0080 3248     		ldr	r0, .L12+8
 188 0082 FFF7FEFF 		bl	HAL_GPIO_WritePin
  47:Src/motor.c   **** 
ARM GAS  /tmp/ccCBFM80.s 			page 5


  48:Src/motor.c   ****                   HAL_GPIO_WritePin(STEP2_BI2_GPIO_Port, STEP2_BI2_Pin, GPIO_PIN_SET);
 189              		.loc 1 48 0
 190 0086 0122     		movs	r2, #1
 191 0088 4FF40061 		mov	r1, #2048
 192 008c 2F48     		ldr	r0, .L12+8
 193 008e FFF7FEFF 		bl	HAL_GPIO_WritePin
  49:Src/motor.c   ****                   HAL_GPIO_WritePin(STEP2_BI1_GPIO_Port, STEP2_BI1_Pin, GPIO_PIN_RESET);
 194              		.loc 1 49 0
 195 0092 0022     		movs	r2, #0
 196 0094 4FF48061 		mov	r1, #1024
 197 0098 2C48     		ldr	r0, .L12+8
 198 009a FFF7FEFF 		bl	HAL_GPIO_WritePin
  50:Src/motor.c   ****                   phase ++;
 199              		.loc 1 50 0
 200 009e 2A4B     		ldr	r3, .L12+4
 201 00a0 1B68     		ldr	r3, [r3]
 202 00a2 0133     		adds	r3, r3, #1
 203 00a4 284A     		ldr	r2, .L12+4
 204 00a6 1360     		str	r3, [r2]
 205 00a8 40E0     		b	.L6
 206              	.L8:
  51:Src/motor.c   **** 
  52:Src/motor.c   ****               }
  53:Src/motor.c   ****               else if(phase  == 3)
 207              		.loc 1 53 0
 208 00aa 274B     		ldr	r3, .L12+4
 209 00ac 1B68     		ldr	r3, [r3]
 210 00ae 032B     		cmp	r3, #3
 211 00b0 1DD1     		bne	.L9
  54:Src/motor.c   ****               {
  55:Src/motor.c   **** 
  56:Src/motor.c   ****                   HAL_GPIO_WritePin(STEP2_AI2_GPIO_Port, STEP2_AI2_Pin, GPIO_PIN_SET);
 212              		.loc 1 56 0
 213 00b2 0122     		movs	r2, #1
 214 00b4 4FF48051 		mov	r1, #4096
 215 00b8 2448     		ldr	r0, .L12+8
 216 00ba FFF7FEFF 		bl	HAL_GPIO_WritePin
  57:Src/motor.c   ****                   HAL_GPIO_WritePin(STEP2_AI1_GPIO_Port, STEP2_AI1_Pin, GPIO_PIN_RESET);
 217              		.loc 1 57 0
 218 00be 0022     		movs	r2, #0
 219 00c0 4FF40051 		mov	r1, #8192
 220 00c4 2148     		ldr	r0, .L12+8
 221 00c6 FFF7FEFF 		bl	HAL_GPIO_WritePin
  58:Src/motor.c   **** 
  59:Src/motor.c   ****                   HAL_GPIO_WritePin(STEP2_BI2_GPIO_Port, STEP2_BI2_Pin, GPIO_PIN_SET);
 222              		.loc 1 59 0
 223 00ca 0122     		movs	r2, #1
 224 00cc 4FF40061 		mov	r1, #2048
 225 00d0 1E48     		ldr	r0, .L12+8
 226 00d2 FFF7FEFF 		bl	HAL_GPIO_WritePin
  60:Src/motor.c   ****                   HAL_GPIO_WritePin(STEP2_BI1_GPIO_Port, STEP2_BI1_Pin, GPIO_PIN_RESET);
 227              		.loc 1 60 0
 228 00d6 0022     		movs	r2, #0
 229 00d8 4FF48061 		mov	r1, #1024
 230 00dc 1B48     		ldr	r0, .L12+8
 231 00de FFF7FEFF 		bl	HAL_GPIO_WritePin
  61:Src/motor.c   ****                   phase ++;
ARM GAS  /tmp/ccCBFM80.s 			page 6


 232              		.loc 1 61 0
 233 00e2 194B     		ldr	r3, .L12+4
 234 00e4 1B68     		ldr	r3, [r3]
 235 00e6 0133     		adds	r3, r3, #1
 236 00e8 174A     		ldr	r2, .L12+4
 237 00ea 1360     		str	r3, [r2]
 238 00ec 1EE0     		b	.L6
 239              	.L9:
  62:Src/motor.c   **** 
  63:Src/motor.c   ****               }
  64:Src/motor.c   ****               else if(phase  == 4)
 240              		.loc 1 64 0
 241 00ee 164B     		ldr	r3, .L12+4
 242 00f0 1B68     		ldr	r3, [r3]
 243 00f2 042B     		cmp	r3, #4
 244 00f4 1AD1     		bne	.L6
  65:Src/motor.c   ****               {
  66:Src/motor.c   **** 
  67:Src/motor.c   ****                   HAL_GPIO_WritePin(STEP2_AI2_GPIO_Port, STEP2_AI2_Pin, GPIO_PIN_SET);
 245              		.loc 1 67 0
 246 00f6 0122     		movs	r2, #1
 247 00f8 4FF48051 		mov	r1, #4096
 248 00fc 1348     		ldr	r0, .L12+8
 249 00fe FFF7FEFF 		bl	HAL_GPIO_WritePin
  68:Src/motor.c   ****                   HAL_GPIO_WritePin(STEP2_AI1_GPIO_Port, STEP2_AI1_Pin, GPIO_PIN_RESET);
 250              		.loc 1 68 0
 251 0102 0022     		movs	r2, #0
 252 0104 4FF40051 		mov	r1, #8192
 253 0108 1048     		ldr	r0, .L12+8
 254 010a FFF7FEFF 		bl	HAL_GPIO_WritePin
  69:Src/motor.c   **** 
  70:Src/motor.c   ****                   HAL_GPIO_WritePin(STEP2_BI1_GPIO_Port, STEP2_BI1_Pin, GPIO_PIN_SET);
 255              		.loc 1 70 0
 256 010e 0122     		movs	r2, #1
 257 0110 4FF48061 		mov	r1, #1024
 258 0114 0D48     		ldr	r0, .L12+8
 259 0116 FFF7FEFF 		bl	HAL_GPIO_WritePin
  71:Src/motor.c   ****                   HAL_GPIO_WritePin(STEP2_BI2_GPIO_Port, STEP2_BI2_Pin, GPIO_PIN_RESET);
 260              		.loc 1 71 0
 261 011a 0022     		movs	r2, #0
 262 011c 4FF40061 		mov	r1, #2048
 263 0120 0A48     		ldr	r0, .L12+8
 264 0122 FFF7FEFF 		bl	HAL_GPIO_WritePin
  72:Src/motor.c   ****                   phase  = 1;
 265              		.loc 1 72 0
 266 0126 084B     		ldr	r3, .L12+4
 267 0128 0122     		movs	r2, #1
 268 012a 1A60     		str	r2, [r3]
 269              	.L6:
  73:Src/motor.c   **** 
  74:Src/motor.c   ****               }
  75:Src/motor.c   **** 
  76:Src/motor.c   **** 
  77:Src/motor.c   ****         }
  78:Src/motor.c   **** 
  79:Src/motor.c   **** 
  80:Src/motor.c   ****     if(motor1.degree <= 0)
ARM GAS  /tmp/ccCBFM80.s 			page 7


 270              		.loc 1 80 0
 271 012c 084B     		ldr	r3, .L12+12
 272 012e 5B68     		ldr	r3, [r3, #4]
 273 0130 002B     		cmp	r3, #0
 274 0132 05DC     		bgt	.L11
  81:Src/motor.c   ****     {
  82:Src/motor.c   ****         motor1.direction = STOP;
 275              		.loc 1 82 0
 276 0134 064B     		ldr	r3, .L12+12
 277 0136 0022     		movs	r2, #0
 278 0138 1A60     		str	r2, [r3]
  83:Src/motor.c   ****         motor1.degree = 0;
 279              		.loc 1 83 0
 280 013a 054B     		ldr	r3, .L12+12
 281 013c 0022     		movs	r2, #0
 282 013e 5A60     		str	r2, [r3, #4]
 283              	.L11:
  84:Src/motor.c   **** 
  85:Src/motor.c   ****     }
  86:Src/motor.c   **** 
  87:Src/motor.c   **** }
 284              		.loc 1 87 0
 285 0140 00BF     		nop
 286 0142 80BD     		pop	{r7, pc}
 287              	.L13:
 288              		.align	2
 289              	.L12:
 290 0144 00000000 		.word	motor2
 291 0148 00000000 		.word	phase.10064
 292 014c 000C0240 		.word	1073875968
 293 0150 00000000 		.word	motor1
 294              		.cfi_endproc
 295              	.LFE140:
 297              		.section	.text.motor3Drive,"ax",%progbits
 298              		.align	1
 299              		.global	motor3Drive
 300              		.syntax unified
 301              		.thumb
 302              		.thumb_func
 303              		.fpu fpv4-sp-d16
 305              	motor3Drive:
 306              	.LFB141:
  88:Src/motor.c   **** 
  89:Src/motor.c   **** 
  90:Src/motor.c   **** void  motor3Drive()
  91:Src/motor.c   **** {
 307              		.loc 1 91 0
 308              		.cfi_startproc
 309              		@ args = 0, pretend = 0, frame = 0
 310              		@ frame_needed = 1, uses_anonymous_args = 0
 311              		@ link register save eliminated.
 312 0000 80B4     		push	{r7}
 313              	.LCFI8:
 314              		.cfi_def_cfa_offset 4
 315              		.cfi_offset 7, -4
 316 0002 00AF     		add	r7, sp, #0
 317              	.LCFI9:
ARM GAS  /tmp/ccCBFM80.s 			page 8


 318              		.cfi_def_cfa_register 7
  92:Src/motor.c   **** 
  93:Src/motor.c   **** }
 319              		.loc 1 93 0
 320 0004 00BF     		nop
 321 0006 BD46     		mov	sp, r7
 322              	.LCFI10:
 323              		.cfi_def_cfa_register 13
 324              		@ sp needed
 325 0008 5DF8047B 		ldr	r7, [sp], #4
 326              	.LCFI11:
 327              		.cfi_restore 7
 328              		.cfi_def_cfa_offset 0
 329 000c 7047     		bx	lr
 330              		.cfi_endproc
 331              	.LFE141:
 333              		.section	.text.motor4Drive,"ax",%progbits
 334              		.align	1
 335              		.global	motor4Drive
 336              		.syntax unified
 337              		.thumb
 338              		.thumb_func
 339              		.fpu fpv4-sp-d16
 341              	motor4Drive:
 342              	.LFB142:
  94:Src/motor.c   **** 
  95:Src/motor.c   **** 
  96:Src/motor.c   **** void motor4Drive()
  97:Src/motor.c   **** {
 343              		.loc 1 97 0
 344              		.cfi_startproc
 345              		@ args = 0, pretend = 0, frame = 0
 346              		@ frame_needed = 1, uses_anonymous_args = 0
 347              		@ link register save eliminated.
 348 0000 80B4     		push	{r7}
 349              	.LCFI12:
 350              		.cfi_def_cfa_offset 4
 351              		.cfi_offset 7, -4
 352 0002 00AF     		add	r7, sp, #0
 353              	.LCFI13:
 354              		.cfi_def_cfa_register 7
  98:Src/motor.c   **** 
  99:Src/motor.c   **** }
 355              		.loc 1 99 0
 356 0004 00BF     		nop
 357 0006 BD46     		mov	sp, r7
 358              	.LCFI14:
 359              		.cfi_def_cfa_register 13
 360              		@ sp needed
 361 0008 5DF8047B 		ldr	r7, [sp], #4
 362              	.LCFI15:
 363              		.cfi_restore 7
 364              		.cfi_def_cfa_offset 0
 365 000c 7047     		bx	lr
 366              		.cfi_endproc
 367              	.LFE142:
 369              		.section	.text.driveMotor,"ax",%progbits
ARM GAS  /tmp/ccCBFM80.s 			page 9


 370              		.align	1
 371              		.global	driveMotor
 372              		.syntax unified
 373              		.thumb
 374              		.thumb_func
 375              		.fpu fpv4-sp-d16
 377              	driveMotor:
 378              	.LFB143:
 100:Src/motor.c   **** 
 101:Src/motor.c   **** 
 102:Src/motor.c   **** 
 103:Src/motor.c   **** void driveMotor()
 104:Src/motor.c   **** {
 379              		.loc 1 104 0
 380              		.cfi_startproc
 381              		@ args = 0, pretend = 0, frame = 0
 382              		@ frame_needed = 1, uses_anonymous_args = 0
 383 0000 80B5     		push	{r7, lr}
 384              	.LCFI16:
 385              		.cfi_def_cfa_offset 8
 386              		.cfi_offset 7, -8
 387              		.cfi_offset 14, -4
 388 0002 00AF     		add	r7, sp, #0
 389              	.LCFI17:
 390              		.cfi_def_cfa_register 7
 105:Src/motor.c   **** 
 106:Src/motor.c   ****     if(motor1.direction == FORWARD || motor1.direction == BACKWARD)
 391              		.loc 1 106 0
 392 0004 164B     		ldr	r3, .L26
 393 0006 1B68     		ldr	r3, [r3]
 394 0008 012B     		cmp	r3, #1
 395 000a 04D0     		beq	.L17
 396              		.loc 1 106 0 is_stmt 0 discriminator 1
 397 000c 144B     		ldr	r3, .L26
 398 000e 1B68     		ldr	r3, [r3]
 399 0010 B3F1FF3F 		cmp	r3, #-1
 400 0014 01D1     		bne	.L18
 401              	.L17:
 107:Src/motor.c   ****        motor1Drive();
 402              		.loc 1 107 0 is_stmt 1
 403 0016 FFF7FEFF 		bl	motor1Drive
 404              	.L18:
 108:Src/motor.c   **** 
 109:Src/motor.c   ****     if(motor2.direction == FORWARD || motor2.direction == BACKWARD)
 405              		.loc 1 109 0
 406 001a 124B     		ldr	r3, .L26+4
 407 001c 1B68     		ldr	r3, [r3]
 408 001e 012B     		cmp	r3, #1
 409 0020 04D0     		beq	.L19
 410              		.loc 1 109 0 is_stmt 0 discriminator 1
 411 0022 104B     		ldr	r3, .L26+4
 412 0024 1B68     		ldr	r3, [r3]
 413 0026 B3F1FF3F 		cmp	r3, #-1
 414 002a 01D1     		bne	.L20
 415              	.L19:
 110:Src/motor.c   ****        motor2Drive();
 416              		.loc 1 110 0 is_stmt 1
ARM GAS  /tmp/ccCBFM80.s 			page 10


 417 002c FFF7FEFF 		bl	motor2Drive
 418              	.L20:
 111:Src/motor.c   **** 
 112:Src/motor.c   ****     if(motor3.direction == FORWARD || motor3.direction == BACKWARD)
 419              		.loc 1 112 0
 420 0030 0D4B     		ldr	r3, .L26+8
 421 0032 1B68     		ldr	r3, [r3]
 422 0034 012B     		cmp	r3, #1
 423 0036 04D0     		beq	.L21
 424              		.loc 1 112 0 is_stmt 0 discriminator 1
 425 0038 0B4B     		ldr	r3, .L26+8
 426 003a 1B68     		ldr	r3, [r3]
 427 003c B3F1FF3F 		cmp	r3, #-1
 428 0040 01D1     		bne	.L22
 429              	.L21:
 113:Src/motor.c   ****        motor3Drive();
 430              		.loc 1 113 0 is_stmt 1
 431 0042 FFF7FEFF 		bl	motor3Drive
 432              	.L22:
 114:Src/motor.c   **** 
 115:Src/motor.c   ****     if(motor4.direction == FORWARD || motor4.direction == BACKWARD)
 433              		.loc 1 115 0
 434 0046 094B     		ldr	r3, .L26+12
 435 0048 1B68     		ldr	r3, [r3]
 436 004a 012B     		cmp	r3, #1
 437 004c 04D0     		beq	.L23
 438              		.loc 1 115 0 is_stmt 0 discriminator 1
 439 004e 074B     		ldr	r3, .L26+12
 440 0050 1B68     		ldr	r3, [r3]
 441 0052 B3F1FF3F 		cmp	r3, #-1
 442 0056 01D1     		bne	.L25
 443              	.L23:
 116:Src/motor.c   ****        motor4Drive();
 444              		.loc 1 116 0 is_stmt 1
 445 0058 FFF7FEFF 		bl	motor4Drive
 446              	.L25:
 117:Src/motor.c   **** 
 118:Src/motor.c   **** 
 119:Src/motor.c   **** }
 447              		.loc 1 119 0
 448 005c 00BF     		nop
 449 005e 80BD     		pop	{r7, pc}
 450              	.L27:
 451              		.align	2
 452              	.L26:
 453 0060 00000000 		.word	motor1
 454 0064 00000000 		.word	motor2
 455 0068 00000000 		.word	motor3
 456 006c 00000000 		.word	motor4
 457              		.cfi_endproc
 458              	.LFE143:
 460              		.section	.text.moveMotor,"ax",%progbits
 461              		.align	1
 462              		.global	moveMotor
 463              		.syntax unified
 464              		.thumb
 465              		.thumb_func
ARM GAS  /tmp/ccCBFM80.s 			page 11


 466              		.fpu fpv4-sp-d16
 468              	moveMotor:
 469              	.LFB144:
 120:Src/motor.c   **** 
 121:Src/motor.c   **** 
 122:Src/motor.c   **** 
 123:Src/motor.c   **** int moveMotor(int Motor, int Degree, short int Direction)
 124:Src/motor.c   **** {
 470              		.loc 1 124 0
 471              		.cfi_startproc
 472              		@ args = 0, pretend = 0, frame = 16
 473              		@ frame_needed = 1, uses_anonymous_args = 0
 474              		@ link register save eliminated.
 475 0000 80B4     		push	{r7}
 476              	.LCFI18:
 477              		.cfi_def_cfa_offset 4
 478              		.cfi_offset 7, -4
 479 0002 85B0     		sub	sp, sp, #20
 480              	.LCFI19:
 481              		.cfi_def_cfa_offset 24
 482 0004 00AF     		add	r7, sp, #0
 483              	.LCFI20:
 484              		.cfi_def_cfa_register 7
 485 0006 F860     		str	r0, [r7, #12]
 486 0008 B960     		str	r1, [r7, #8]
 487 000a 1346     		mov	r3, r2
 488 000c FB80     		strh	r3, [r7, #6]	@ movhi
 125:Src/motor.c   **** 
 126:Src/motor.c   **** 
 127:Src/motor.c   ****     if(motor1.direction == STOP)
 489              		.loc 1 127 0
 490 000e 244B     		ldr	r3, .L37
 491 0010 1B68     		ldr	r3, [r3]
 492 0012 002B     		cmp	r3, #0
 493 0014 3CD1     		bne	.L29
 128:Src/motor.c   ****     {
 129:Src/motor.c   ****         switch(Motor)
 494              		.loc 1 129 0
 495 0016 FB68     		ldr	r3, [r7, #12]
 496 0018 013B     		subs	r3, r3, #1
 497 001a 032B     		cmp	r3, #3
 498 001c 36D8     		bhi	.L30
 499 001e 01A2     		adr	r2, .L32
 500 0020 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 501              		.p2align 2
 502              	.L32:
 503 0024 35000000 		.word	.L31+1
 504 0028 4B000000 		.word	.L33+1
 505 002c 61000000 		.word	.L34+1
 506 0030 77000000 		.word	.L35+1
 507              		.p2align 1
 508              	.L31:
 130:Src/motor.c   ****         {
 131:Src/motor.c   **** 
 132:Src/motor.c   ****             case MOTOR1:
 133:Src/motor.c   ****                 motor1.degree = reductor_coefficient * Degree;
 509              		.loc 1 133 0
ARM GAS  /tmp/ccCBFM80.s 			page 12


 510 0034 0122     		movs	r2, #1
 511 0036 BB68     		ldr	r3, [r7, #8]
 512 0038 03FB02F3 		mul	r3, r3, r2
 513 003c 184A     		ldr	r2, .L37
 514 003e 5360     		str	r3, [r2, #4]
 134:Src/motor.c   ****                 motor1.direction = Direction;
 515              		.loc 1 134 0
 516 0040 B7F90630 		ldrsh	r3, [r7, #6]
 517 0044 164A     		ldr	r2, .L37
 518 0046 1360     		str	r3, [r2]
 135:Src/motor.c   **** 
 136:Src/motor.c   ****                 break;
 519              		.loc 1 136 0
 520 0048 20E0     		b	.L30
 521              	.L33:
 137:Src/motor.c   **** 
 138:Src/motor.c   ****             case MOTOR2:
 139:Src/motor.c   ****                 motor2.degree = reductor_coefficient * Degree;
 522              		.loc 1 139 0
 523 004a 0122     		movs	r2, #1
 524 004c BB68     		ldr	r3, [r7, #8]
 525 004e 03FB02F3 		mul	r3, r3, r2
 526 0052 144A     		ldr	r2, .L37+4
 527 0054 5360     		str	r3, [r2, #4]
 140:Src/motor.c   ****                 motor2.direction = Direction;
 528              		.loc 1 140 0
 529 0056 B7F90630 		ldrsh	r3, [r7, #6]
 530 005a 124A     		ldr	r2, .L37+4
 531 005c 1360     		str	r3, [r2]
 141:Src/motor.c   **** 
 142:Src/motor.c   ****                 break;
 532              		.loc 1 142 0
 533 005e 15E0     		b	.L30
 534              	.L34:
 143:Src/motor.c   **** 
 144:Src/motor.c   ****             case MOTOR3:
 145:Src/motor.c   ****                 motor3.degree = reductor_coefficient * Degree;
 535              		.loc 1 145 0
 536 0060 0122     		movs	r2, #1
 537 0062 BB68     		ldr	r3, [r7, #8]
 538 0064 03FB02F3 		mul	r3, r3, r2
 539 0068 0F4A     		ldr	r2, .L37+8
 540 006a 5360     		str	r3, [r2, #4]
 146:Src/motor.c   ****                 motor3.direction = Direction;
 541              		.loc 1 146 0
 542 006c B7F90630 		ldrsh	r3, [r7, #6]
 543 0070 0D4A     		ldr	r2, .L37+8
 544 0072 1360     		str	r3, [r2]
 147:Src/motor.c   **** 
 148:Src/motor.c   ****                 break;
 545              		.loc 1 148 0
 546 0074 0AE0     		b	.L30
 547              	.L35:
 149:Src/motor.c   **** 
 150:Src/motor.c   **** 
 151:Src/motor.c   ****             case MOTOR4:
 152:Src/motor.c   ****                 motor4.degree = reductor_coefficient * Degree;
ARM GAS  /tmp/ccCBFM80.s 			page 13


 548              		.loc 1 152 0
 549 0076 0122     		movs	r2, #1
 550 0078 BB68     		ldr	r3, [r7, #8]
 551 007a 03FB02F3 		mul	r3, r3, r2
 552 007e 0B4A     		ldr	r2, .L37+12
 553 0080 5360     		str	r3, [r2, #4]
 153:Src/motor.c   ****                 motor4.direction = Direction;
 554              		.loc 1 153 0
 555 0082 B7F90630 		ldrsh	r3, [r7, #6]
 556 0086 094A     		ldr	r2, .L37+12
 557 0088 1360     		str	r3, [r2]
 154:Src/motor.c   **** 
 155:Src/motor.c   ****                 break;
 558              		.loc 1 155 0
 559 008a 00BF     		nop
 560              	.L30:
 156:Src/motor.c   ****         }
 157:Src/motor.c   **** 
 158:Src/motor.c   ****         return SUCCESS;
 561              		.loc 1 158 0
 562 008c 0123     		movs	r3, #1
 563 008e 00E0     		b	.L36
 564              	.L29:
 159:Src/motor.c   ****     }
 160:Src/motor.c   ****     else
 161:Src/motor.c   ****     {
 162:Src/motor.c   **** 
 163:Src/motor.c   ****         return ERROR;
 565              		.loc 1 163 0
 566 0090 0023     		movs	r3, #0
 567              	.L36:
 164:Src/motor.c   ****     }
 165:Src/motor.c   **** 
 166:Src/motor.c   **** }
 568              		.loc 1 166 0
 569 0092 1846     		mov	r0, r3
 570 0094 1437     		adds	r7, r7, #20
 571              	.LCFI21:
 572              		.cfi_def_cfa_offset 4
 573 0096 BD46     		mov	sp, r7
 574              	.LCFI22:
 575              		.cfi_def_cfa_register 13
 576              		@ sp needed
 577 0098 5DF8047B 		ldr	r7, [sp], #4
 578              	.LCFI23:
 579              		.cfi_restore 7
 580              		.cfi_def_cfa_offset 0
 581 009c 7047     		bx	lr
 582              	.L38:
 583 009e 00BF     		.align	2
 584              	.L37:
 585 00a0 00000000 		.word	motor1
 586 00a4 00000000 		.word	motor2
 587 00a8 00000000 		.word	motor3
 588 00ac 00000000 		.word	motor4
 589              		.cfi_endproc
 590              	.LFE144:
ARM GAS  /tmp/ccCBFM80.s 			page 14


 592              		.section	.data.phase.10064,"aw",%progbits
 593              		.align	2
 596              	phase.10064:
 597 0000 01000000 		.word	1
 598              		.text
 599              	.Letext0:
 600              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 601              		.file 3 "/usr/include/newlib/sys/lock.h"
 602              		.file 4 "/usr/include/newlib/sys/_types.h"
 603              		.file 5 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 604              		.file 6 "/usr/include/newlib/sys/reent.h"
 605              		.file 7 "/usr/include/newlib/sys/_stdint.h"
 606              		.file 8 "Inc/main.h"
 607              		.file 9 "Drivers/CMSIS/Include/core_cm7.h"
 608              		.file 10 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 609              		.file 11 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f746xx.h"
 610              		.file 12 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f7xx.h"
 611              		.file 13 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 612              		.file 14 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_gpio.h"
 613              		.file 15 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 614              		.file 16 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim.h"
 615              		.file 17 "Inc/motor.h"
 616              		.file 18 "Inc/tim.h"
ARM GAS  /tmp/ccCBFM80.s 			page 15


DEFINED SYMBOLS
                            *ABS*:0000000000000000 motor.c
                            *COM*:0000000000000004 SpiTxData
                            *COM*:0000000000000004 SpiRxData
                            *COM*:0000000000000004 UpdateFile
                            *COM*:0000000000000008 motor1
                            *COM*:0000000000000008 motor2
                            *COM*:0000000000000008 motor3
                            *COM*:0000000000000008 motor4
     /tmp/ccCBFM80.s:29     .rodata.reductor_coefficient:0000000000000000 reductor_coefficient
     /tmp/ccCBFM80.s:26     .rodata.reductor_coefficient:0000000000000000 $d
     /tmp/ccCBFM80.s:32     .text.motorInit:0000000000000000 $t
     /tmp/ccCBFM80.s:39     .text.motorInit:0000000000000000 motorInit
     /tmp/ccCBFM80.s:63     .text.motorInit:0000000000000010 $d
     /tmp/ccCBFM80.s:68     .text.motor1Drive:0000000000000000 $t
     /tmp/ccCBFM80.s:75     .text.motor1Drive:0000000000000000 motor1Drive
     /tmp/ccCBFM80.s:104    .text.motor2Drive:0000000000000000 $t
     /tmp/ccCBFM80.s:111    .text.motor2Drive:0000000000000000 motor2Drive
     /tmp/ccCBFM80.s:290    .text.motor2Drive:0000000000000144 $d
     /tmp/ccCBFM80.s:596    .data.phase.10064:0000000000000000 phase.10064
     /tmp/ccCBFM80.s:298    .text.motor3Drive:0000000000000000 $t
     /tmp/ccCBFM80.s:305    .text.motor3Drive:0000000000000000 motor3Drive
     /tmp/ccCBFM80.s:334    .text.motor4Drive:0000000000000000 $t
     /tmp/ccCBFM80.s:341    .text.motor4Drive:0000000000000000 motor4Drive
     /tmp/ccCBFM80.s:370    .text.driveMotor:0000000000000000 $t
     /tmp/ccCBFM80.s:377    .text.driveMotor:0000000000000000 driveMotor
     /tmp/ccCBFM80.s:453    .text.driveMotor:0000000000000060 $d
     /tmp/ccCBFM80.s:461    .text.moveMotor:0000000000000000 $t
     /tmp/ccCBFM80.s:468    .text.moveMotor:0000000000000000 moveMotor
     /tmp/ccCBFM80.s:503    .text.moveMotor:0000000000000024 $d
     /tmp/ccCBFM80.s:507    .text.moveMotor:0000000000000034 $t
     /tmp/ccCBFM80.s:585    .text.moveMotor:00000000000000a0 $d
     /tmp/ccCBFM80.s:593    .data.phase.10064:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_TIM_Base_Start_IT
htim2
HAL_GPIO_WritePin
