ARM GAS  /tmp/ccAgwjCz.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f7xx_hal_rcc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	SpiTxData,4,4
  18              		.comm	SpiRxData,4,4
  19              		.comm	UpdateFile,4,4
  20              		.section	.text.HAL_RCC_DeInit,"ax",%progbits
  21              		.align	1
  22              		.global	HAL_RCC_DeInit
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  26              		.fpu fpv4-sp-d16
  28              	HAL_RCC_DeInit:
  29              	.LFB138:
  30              		.file 1 "Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c"
   1:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /**
   2:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   ******************************************************************************
   3:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @file    stm32f7xx_hal_rcc.c
   4:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @author  MCD Application Team
   5:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @brief   RCC HAL module driver.
   6:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *          functionalities of the Reset and Clock Control (RCC) peripheral:
   8:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *           + Peripheral Control functions
  10:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *
  11:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   @verbatim
  12:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   ==============================================================================
  13:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****                       ##### RCC specific features #####
  14:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   ==============================================================================
  15:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     [..]
  16:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       After reset the device is running from Internal High Speed oscillator
  17:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (HSI 16MHz) with Flash 0 wait state, Flash prefetch buffer, D-Cache
  18:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       and I-Cache are disabled, and all peripherals are off except internal
  19:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       SRAM, Flash and JTAG.
  20:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (+) There is no prescaler on High speed (AHB) and Low speed (APB) busses;
  21:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           all peripherals mapped on these busses are running at HSI speed.
  22:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (+) The clock for all peripherals is switched off, except the SRAM and FLASH.
  23:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (+) All GPIOs are in input floating state, except the JTAG pins which
  24:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           are assigned to be used for debug purpose.
  25:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
  26:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     [..]
  27:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       Once the device started from reset, the user application has to:
  28:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (+) Configure the clock source to be used to drive the System clock
ARM GAS  /tmp/ccAgwjCz.s 			page 2


  29:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           (if the application needs higher frequency/performance)
  30:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (+) Configure the System clock frequency and Flash settings
  31:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (+) Configure the AHB and APB busses prescalers
  32:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (+) Enable the clock for the peripheral(s) to be used
  33:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (+) Configure the clock source(s) for peripherals which clocks are not
  34:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           derived from the System clock (I2S, RTC, ADC, USB OTG FS/SDIO/RNG)
  35:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
  36:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****                       ##### RCC Limitations #####
  37:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   ==============================================================================
  38:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     [..]
  39:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       A delay between an RCC peripheral clock enable and the effective peripheral
  40:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       enabling should be taken into account in order to manage the peripheral read/write
  41:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       from/to registers.
  42:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (+) This delay depends on the peripheral mapping.
  43:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (+) If peripheral is mapped on AHB: the delay is 2 AHB clock cycle
  44:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           after the clock enable bit is set on the hardware register
  45:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (+) If peripheral is mapped on APB: the delay is 2 APB clock cycle
  46:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           after the clock enable bit is set on the hardware register
  47:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
  48:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     [..]
  49:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       Implemented Workaround:
  50:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (+) For AHB & APB peripherals, a dummy read to the peripheral register has been
  51:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           inserted in each __HAL_RCC_PPP_CLK_ENABLE() macro.
  52:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
  53:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   @endverbatim
  54:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   ******************************************************************************
  55:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @attention
  56:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *
  57:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  58:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *
  59:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * Redistribution and use in source and binary forms, with or without modification,
  60:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * are permitted provided that the following conditions are met:
  61:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  62:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *      this list of conditions and the following disclaimer.
  63:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  64:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *      this list of conditions and the following disclaimer in the documentation
  65:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *      and/or other materials provided with the distribution.
  66:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  67:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *      may be used to endorse or promote products derived from this software
  68:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *      without specific prior written permission.
  69:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *
  70:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  71:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  72:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  73:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  74:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  75:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  76:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  77:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  78:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  79:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  80:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *
  81:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   ******************************************************************************
  82:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
  83:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
  84:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /* Includes ------------------------------------------------------------------*/
  85:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** #include "stm32f7xx_hal.h"
ARM GAS  /tmp/ccAgwjCz.s 			page 3


  86:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
  87:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /** @addtogroup STM32F7xx_HAL_Driver
  88:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @{
  89:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
  90:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
  91:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /** @defgroup RCC RCC
  92:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @brief RCC HAL module driver
  93:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @{
  94:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
  95:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
  96:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** #ifdef HAL_RCC_MODULE_ENABLED
  97:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
  98:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  99:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /* Private define ------------------------------------------------------------*/
 100:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /* Private macro -------------------------------------------------------------*/
 101:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /** @defgroup RCC_Private_Macros RCC Private Macros
 102:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @{
 103:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
 104:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 105:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** #define MCO1_CLK_ENABLE()   __HAL_RCC_GPIOA_CLK_ENABLE()
 106:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** #define MCO1_GPIO_PORT        GPIOA
 107:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** #define MCO1_PIN              GPIO_PIN_8
 108:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 109:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** #define MCO2_CLK_ENABLE()   __HAL_RCC_GPIOC_CLK_ENABLE()
 110:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** #define MCO2_GPIO_PORT         GPIOC
 111:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** #define MCO2_PIN               GPIO_PIN_9
 112:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 113:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /**
 114:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @}
 115:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
 116:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /* Private variables ---------------------------------------------------------*/
 117:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /** @defgroup RCC_Private_Variables RCC Private Variables
 118:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @{
 119:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
 120:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 121:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /**
 122:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @}
 123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
 124:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 125:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 126:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /* Exported functions ---------------------------------------------------------*/
 127:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 128:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions RCC Exported Functions
 129:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @{
 130:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
 131:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 132:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions_Group1 Initialization and de-initialization functions
 133:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *  @brief    Initialization and Configuration functions
 134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *
 135:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   @verbatim
 136:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   ===============================================================================
 137:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** ##### Initialization and de-initialization functions #####
 138:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   ===============================================================================
 139:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     [..]
 140:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       This section provides functions allowing to configure the internal/external oscillators
 141:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (HSE, HSI, LSE, LSI, PLL, CSS and MCO) and the System buses clocks (SYSCLK, AHB, APB1
 142:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       and APB2).
ARM GAS  /tmp/ccAgwjCz.s 			page 4


 143:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 144:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     [..] Internal/external clock and PLL configuration
 145:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (#) HSI (high-speed internal), 16 MHz factory-trimmed RC used directly or through
 146:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           the PLL as System clock source.
 147:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 148:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (#) LSI (low-speed internal), 32 KHz low consumption RC used as IWDG and/or RTC
 149:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           clock source.
 150:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 151:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (#) HSE (high-speed external), 4 to 26 MHz crystal oscillator used directly or
 152:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           through the PLL as System clock source. Can be used also as RTC clock source.
 153:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 154:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (#) LSE (low-speed external), 32 KHz oscillator used as RTC clock source.
 155:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 156:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (#) PLL (clocked by HSI or HSE), featuring two different output clocks:
 157:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         (++) The first output is used to generate the high speed system clock (up to 216 MHz)
 158:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         (++) The second output is used to generate the clock for the USB OTG FS (48 MHz),
 159:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****              the random analog generator (<=48 MHz) and the SDIO (<= 48 MHz).
 160:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 161:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (#) CSS (Clock security system), once enable using the function HAL_RCC_EnableCSS()
 162:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           and if a HSE clock failure occurs(HSE used directly or through PLL as System
 163:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           clock source), the System clock is automatically switched to HSI and an interrupt
 164:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           is generated if enabled. The interrupt is linked to the Cortex-M7 NMI
 165:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           (Non-Maskable Interrupt) exception vector.
 166:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 167:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (#) MCO1 (microcontroller clock output), used to output HSI, LSE, HSE or PLL
 168:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           clock (through a configurable prescaler) on PA8 pin.
 169:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 170:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (#) MCO2 (microcontroller clock output), used to output HSE, PLL, SYSCLK or PLLI2S
 171:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           clock (through a configurable prescaler) on PC9 pin.
 172:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 173:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     [..] System, AHB and APB busses clocks configuration
 174:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       (#) Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 175:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           HSE and PLL.
 176:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           The AHB clock (HCLK) is derived from System clock through configurable
 177:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           prescaler and used to clock the CPU, memory and peripherals mapped
 178:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           on AHB bus (DMA, GPIO...). APB1 (PCLK1) and APB2 (PCLK2) clocks are derived
 179:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           from AHB clock through configurable prescalers and used to clock
 180:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           the peripherals mapped on these busses. You can use
 181:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           "HAL_RCC_GetSysClockFreq()" function to retrieve the frequencies of these clocks.
 182:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 183:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       -@- All the peripheral clocks are derived from the System clock (SYSCLK) except:
 184:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           (+@) I2S: the I2S clock can be derived either from a specific PLL (PLLI2S) or
 185:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****               from an external clock mapped on the I2S_CKIN pin.
 186:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****               You have to use __HAL_RCC_PLLI2S_CONFIG() macro to configure this clock.
 187:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           (+@)  SAI: the SAI clock can be derived either from a specific PLL (PLLI2S) or (PLLSAI) o
 188:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****               from an external clock mapped on the I2S_CKIN pin.
 189:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****                You have to use __HAL_RCC_PLLI2S_CONFIG() macro to configure this clock.
 190:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           (+@) RTC: the RTC clock can be derived either from the LSI, LSE or HSE clock
 191:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****               divided by 2 to 31. You have to use __HAL_RCC_RTC_CONFIG() and __HAL_RCC_RTC_ENABLE()
 192:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****               macros to configure this clock.
 193:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           (+@) USB OTG FS, SDIO and RTC: USB OTG FS require a frequency equal to 48 MHz
 194:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****               to work correctly, while the SDIO require a frequency equal or lower than
 195:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****               to 48. This clock is derived of the main PLL through PLLQ divider.
 196:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           (+@) IWDG clock which is always the LSI clock.
 197:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** @endverbatim
 198:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @{
 199:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
ARM GAS  /tmp/ccAgwjCz.s 			page 5


 200:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 201:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /**
 202:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 203:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 204:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            - HSI ON and used as system clock source
 205:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            - HSE, PLL, PLLI2S and PLLSAI OFF
 206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 207:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            - CSS, MCO1 and MCO2 OFF
 208:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            - All interrupts disabled
 209:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note   This function doesn't modify the configuration of the
 210:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            - Peripheral clocks
 211:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            - LSI, LSE and RTC clocks
 212:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @retval None
 213:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
 214:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_DeInit(void)
 215:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** {
  31              		.loc 1 215 0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 8
  34              		@ frame_needed = 1, uses_anonymous_args = 0
  35 0000 80B5     		push	{r7, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 82B0     		sub	sp, sp, #8
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 16
  43 0004 00AF     		add	r7, sp, #0
  44              	.LCFI2:
  45              		.cfi_def_cfa_register 7
 216:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   uint32_t tickstart;
 217:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 218:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Get Start Tick */
 219:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   tickstart = HAL_GetTick();
  46              		.loc 1 219 0
  47 0006 FFF7FEFF 		bl	HAL_GetTick
  48 000a 7860     		str	r0, [r7, #4]
 220:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 221:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Set HSION bit to the reset value */
 222:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   SET_BIT(RCC->CR, RCC_CR_HSION);
  49              		.loc 1 222 0
  50 000c 654B     		ldr	r3, .L16
  51 000e 1B68     		ldr	r3, [r3]
  52 0010 644A     		ldr	r2, .L16
  53 0012 43F00103 		orr	r3, r3, #1
  54 0016 1360     		str	r3, [r2]
 223:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 224:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Wait till HSI is ready */
 225:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
  55              		.loc 1 225 0
  56 0018 08E0     		b	.L2
  57              	.L4:
 226:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 227:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
  58              		.loc 1 227 0
  59 001a FFF7FEFF 		bl	HAL_GetTick
ARM GAS  /tmp/ccAgwjCz.s 			page 6


  60 001e 0246     		mov	r2, r0
  61 0020 7B68     		ldr	r3, [r7, #4]
  62 0022 D31A     		subs	r3, r2, r3
  63 0024 022B     		cmp	r3, #2
  64 0026 01D9     		bls	.L2
 228:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 229:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       return HAL_TIMEOUT;
  65              		.loc 1 229 0
  66 0028 0323     		movs	r3, #3
  67 002a B6E0     		b	.L3
  68              	.L2:
 225:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
  69              		.loc 1 225 0
  70 002c 5D4B     		ldr	r3, .L16
  71 002e 1B68     		ldr	r3, [r3]
  72 0030 03F00203 		and	r3, r3, #2
  73 0034 002B     		cmp	r3, #0
  74 0036 F0D0     		beq	.L4
 230:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 231:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 232:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 233:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Set HSITRIM[4:0] bits to the reset value */
 234:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
  75              		.loc 1 234 0
  76 0038 5A4B     		ldr	r3, .L16
  77 003a 1B68     		ldr	r3, [r3]
  78 003c 594A     		ldr	r2, .L16
  79 003e 43F08003 		orr	r3, r3, #128
  80 0042 1360     		str	r3, [r2]
 235:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 236:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Get Start Tick */
 237:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   tickstart = HAL_GetTick();
  81              		.loc 1 237 0
  82 0044 FFF7FEFF 		bl	HAL_GetTick
  83 0048 7860     		str	r0, [r7, #4]
 238:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 239:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Reset CFGR register */
 240:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   CLEAR_REG(RCC->CFGR);
  84              		.loc 1 240 0
  85 004a 564B     		ldr	r3, .L16
  86 004c 0022     		movs	r2, #0
  87 004e 9A60     		str	r2, [r3, #8]
 241:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 242:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Wait till clock switch is ready */
 243:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
  88              		.loc 1 243 0
  89 0050 0AE0     		b	.L5
  90              	.L6:
 244:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 245:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
  91              		.loc 1 245 0
  92 0052 FFF7FEFF 		bl	HAL_GetTick
  93 0056 0246     		mov	r2, r0
  94 0058 7B68     		ldr	r3, [r7, #4]
  95 005a D31A     		subs	r3, r2, r3
  96 005c 41F28832 		movw	r2, #5000
  97 0060 9342     		cmp	r3, r2
ARM GAS  /tmp/ccAgwjCz.s 			page 7


  98 0062 01D9     		bls	.L5
 246:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 247:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       return HAL_TIMEOUT;
  99              		.loc 1 247 0
 100 0064 0323     		movs	r3, #3
 101 0066 98E0     		b	.L3
 102              	.L5:
 243:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 103              		.loc 1 243 0
 104 0068 4E4B     		ldr	r3, .L16
 105 006a 9B68     		ldr	r3, [r3, #8]
 106 006c 03F00C03 		and	r3, r3, #12
 107 0070 002B     		cmp	r3, #0
 108 0072 EED1     		bne	.L6
 248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 249:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 250:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 251:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Get Start Tick */
 252:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   tickstart = HAL_GetTick();
 109              		.loc 1 252 0
 110 0074 FFF7FEFF 		bl	HAL_GetTick
 111 0078 7860     		str	r0, [r7, #4]
 253:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 254:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Clear HSEON, HSEBYP and CSSON bits */
 255:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 112              		.loc 1 255 0
 113 007a 4A4B     		ldr	r3, .L16
 114 007c 1B68     		ldr	r3, [r3]
 115 007e 494A     		ldr	r2, .L16
 116 0080 23F45023 		bic	r3, r3, #851968
 117 0084 1360     		str	r3, [r2]
 256:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 257:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Wait till HSE is disabled */
 258:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 118              		.loc 1 258 0
 119 0086 08E0     		b	.L7
 120              	.L8:
 259:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 260:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 121              		.loc 1 260 0
 122 0088 FFF7FEFF 		bl	HAL_GetTick
 123 008c 0246     		mov	r2, r0
 124 008e 7B68     		ldr	r3, [r7, #4]
 125 0090 D31A     		subs	r3, r2, r3
 126 0092 642B     		cmp	r3, #100
 127 0094 01D9     		bls	.L7
 261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 262:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       return HAL_TIMEOUT;
 128              		.loc 1 262 0
 129 0096 0323     		movs	r3, #3
 130 0098 7FE0     		b	.L3
 131              	.L7:
 258:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 132              		.loc 1 258 0
 133 009a 424B     		ldr	r3, .L16
 134 009c 1B68     		ldr	r3, [r3]
 135 009e 03F40033 		and	r3, r3, #131072
ARM GAS  /tmp/ccAgwjCz.s 			page 8


 136 00a2 002B     		cmp	r3, #0
 137 00a4 F0D1     		bne	.L8
 263:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 264:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 265:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 266:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Get Start Tick */
 267:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   tickstart = HAL_GetTick();
 138              		.loc 1 267 0
 139 00a6 FFF7FEFF 		bl	HAL_GetTick
 140 00aa 7860     		str	r0, [r7, #4]
 268:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 269:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Clear PLLON bit */
 270:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 141              		.loc 1 270 0
 142 00ac 3D4B     		ldr	r3, .L16
 143 00ae 1B68     		ldr	r3, [r3]
 144 00b0 3C4A     		ldr	r2, .L16
 145 00b2 23F08073 		bic	r3, r3, #16777216
 146 00b6 1360     		str	r3, [r2]
 271:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 272:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Wait till PLL is disabled */
 273:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 147              		.loc 1 273 0
 148 00b8 08E0     		b	.L9
 149              	.L10:
 274:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 275:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 150              		.loc 1 275 0
 151 00ba FFF7FEFF 		bl	HAL_GetTick
 152 00be 0246     		mov	r2, r0
 153 00c0 7B68     		ldr	r3, [r7, #4]
 154 00c2 D31A     		subs	r3, r2, r3
 155 00c4 022B     		cmp	r3, #2
 156 00c6 01D9     		bls	.L9
 276:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 277:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       return HAL_TIMEOUT;
 157              		.loc 1 277 0
 158 00c8 0323     		movs	r3, #3
 159 00ca 66E0     		b	.L3
 160              	.L9:
 273:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 161              		.loc 1 273 0
 162 00cc 354B     		ldr	r3, .L16
 163 00ce 1B68     		ldr	r3, [r3]
 164 00d0 03F00073 		and	r3, r3, #33554432
 165 00d4 002B     		cmp	r3, #0
 166 00d6 F0D1     		bne	.L10
 278:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 279:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 280:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 281:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Get Start Tick */
 282:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   tickstart = HAL_GetTick();
 167              		.loc 1 282 0
 168 00d8 FFF7FEFF 		bl	HAL_GetTick
 169 00dc 7860     		str	r0, [r7, #4]
 283:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 284:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Reset PLLI2SON bit */
ARM GAS  /tmp/ccAgwjCz.s 			page 9


 285:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 170              		.loc 1 285 0
 171 00de 314B     		ldr	r3, .L16
 172 00e0 1B68     		ldr	r3, [r3]
 173 00e2 304A     		ldr	r2, .L16
 174 00e4 23F08063 		bic	r3, r3, #67108864
 175 00e8 1360     		str	r3, [r2]
 286:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 287:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Wait till PLLI2S is disabled */
 288:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 176              		.loc 1 288 0
 177 00ea 08E0     		b	.L11
 178              	.L12:
 289:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 290:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 179              		.loc 1 290 0
 180 00ec FFF7FEFF 		bl	HAL_GetTick
 181 00f0 0246     		mov	r2, r0
 182 00f2 7B68     		ldr	r3, [r7, #4]
 183 00f4 D31A     		subs	r3, r2, r3
 184 00f6 642B     		cmp	r3, #100
 185 00f8 01D9     		bls	.L11
 291:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 292:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       return HAL_TIMEOUT;
 186              		.loc 1 292 0
 187 00fa 0323     		movs	r3, #3
 188 00fc 4DE0     		b	.L3
 189              	.L11:
 288:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 190              		.loc 1 288 0
 191 00fe 294B     		ldr	r3, .L16
 192 0100 1B68     		ldr	r3, [r3]
 193 0102 03F00063 		and	r3, r3, #134217728
 194 0106 002B     		cmp	r3, #0
 195 0108 F0D1     		bne	.L12
 293:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 294:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 295:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 296:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Get Start Tick */
 297:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   tickstart = HAL_GetTick();
 196              		.loc 1 297 0
 197 010a FFF7FEFF 		bl	HAL_GetTick
 198 010e 7860     		str	r0, [r7, #4]
 298:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 299:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Reset PLLSAI bit */
 300:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 199              		.loc 1 300 0
 200 0110 244B     		ldr	r3, .L16
 201 0112 1B68     		ldr	r3, [r3]
 202 0114 234A     		ldr	r2, .L16
 203 0116 23F08053 		bic	r3, r3, #268435456
 204 011a 1360     		str	r3, [r2]
 301:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 302:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Wait till PLLSAI is disabled */
 303:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 205              		.loc 1 303 0
 206 011c 08E0     		b	.L13
ARM GAS  /tmp/ccAgwjCz.s 			page 10


 207              	.L14:
 304:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 305:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 208              		.loc 1 305 0
 209 011e FFF7FEFF 		bl	HAL_GetTick
 210 0122 0246     		mov	r2, r0
 211 0124 7B68     		ldr	r3, [r7, #4]
 212 0126 D31A     		subs	r3, r2, r3
 213 0128 642B     		cmp	r3, #100
 214 012a 01D9     		bls	.L13
 306:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 307:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       return HAL_TIMEOUT;
 215              		.loc 1 307 0
 216 012c 0323     		movs	r3, #3
 217 012e 34E0     		b	.L3
 218              	.L13:
 303:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 219              		.loc 1 303 0
 220 0130 1C4B     		ldr	r3, .L16
 221 0132 1B68     		ldr	r3, [r3]
 222 0134 03F00053 		and	r3, r3, #536870912
 223 0138 002B     		cmp	r3, #0
 224 013a F0D1     		bne	.L14
 308:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 309:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 310:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 311:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
 312:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 
 225              		.loc 1 312 0
 226 013c 194B     		ldr	r3, .L16
 227 013e 1A4A     		ldr	r2, .L16+4
 228 0140 5A60     		str	r2, [r3, #4]
 313:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 314:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Reset PLLI2SCFGR register to default value */
 315:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 
 229              		.loc 1 315 0
 230 0142 184B     		ldr	r3, .L16
 231 0144 194A     		ldr	r2, .L16+8
 232 0146 C3F88420 		str	r2, [r3, #132]
 316:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 317:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Reset PLLSAICFGR register to default value */
 318:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 
 233              		.loc 1 318 0
 234 014a 164B     		ldr	r3, .L16
 235 014c 174A     		ldr	r2, .L16+8
 236 014e C3F88820 		str	r2, [r3, #136]
 319:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 320:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Disable all interrupts */
 321:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | R
 237              		.loc 1 321 0
 238 0152 144B     		ldr	r3, .L16
 239 0154 DB68     		ldr	r3, [r3, #12]
 240 0156 134A     		ldr	r2, .L16
 241 0158 23F4FE43 		bic	r3, r3, #32512
 242 015c D360     		str	r3, [r2, #12]
 322:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 323:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Clear all interrupt flags */
ARM GAS  /tmp/ccAgwjCz.s 			page 11


 324:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR
 243              		.loc 1 324 0
 244 015e 114B     		ldr	r3, .L16
 245 0160 DB68     		ldr	r3, [r3, #12]
 246 0162 104A     		ldr	r2, .L16
 247 0164 43F47F03 		orr	r3, r3, #16711680
 248 0168 D360     		str	r3, [r2, #12]
 325:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 326:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Clear LSION bit */
 327:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 249              		.loc 1 327 0
 250 016a 0E4B     		ldr	r3, .L16
 251 016c 5B6F     		ldr	r3, [r3, #116]
 252 016e 0D4A     		ldr	r2, .L16
 253 0170 23F00103 		bic	r3, r3, #1
 254 0174 5367     		str	r3, [r2, #116]
 328:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 329:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Reset all CSR flags */
 330:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 255              		.loc 1 330 0
 256 0176 0B4B     		ldr	r3, .L16
 257 0178 5B6F     		ldr	r3, [r3, #116]
 258 017a 0A4A     		ldr	r2, .L16
 259 017c 43F08073 		orr	r3, r3, #16777216
 260 0180 5367     		str	r3, [r2, #116]
 331:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 332:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Update the SystemCoreClock global variable */
 333:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   SystemCoreClock = HSI_VALUE;
 261              		.loc 1 333 0
 262 0182 0B4B     		ldr	r3, .L16+12
 263 0184 0B4A     		ldr	r2, .L16+16
 264 0186 1A60     		str	r2, [r3]
 334:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 335:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Adapt Systick interrupt period */
 336:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 265              		.loc 1 336 0
 266 0188 0020     		movs	r0, #0
 267 018a FFF7FEFF 		bl	HAL_InitTick
 268 018e 0346     		mov	r3, r0
 269 0190 002B     		cmp	r3, #0
 270 0192 01D0     		beq	.L15
 337:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 338:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     return HAL_ERROR;
 271              		.loc 1 338 0
 272 0194 0123     		movs	r3, #1
 273 0196 00E0     		b	.L3
 274              	.L15:
 339:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 340:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   else
 341:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 342:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     return HAL_OK;
 275              		.loc 1 342 0
 276 0198 0023     		movs	r3, #0
 277              	.L3:
 343:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 344:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** }
 278              		.loc 1 344 0
ARM GAS  /tmp/ccAgwjCz.s 			page 12


 279 019a 1846     		mov	r0, r3
 280 019c 0837     		adds	r7, r7, #8
 281              	.LCFI3:
 282              		.cfi_def_cfa_offset 8
 283 019e BD46     		mov	sp, r7
 284              	.LCFI4:
 285              		.cfi_def_cfa_register 13
 286              		@ sp needed
 287 01a0 80BD     		pop	{r7, pc}
 288              	.L17:
 289 01a2 00BF     		.align	2
 290              	.L16:
 291 01a4 00380240 		.word	1073887232
 292 01a8 10300024 		.word	603992080
 293 01ac 00300024 		.word	603992064
 294 01b0 00000000 		.word	SystemCoreClock
 295 01b4 0024F400 		.word	16000000
 296              		.cfi_endproc
 297              	.LFE138:
 299              		.section	.text.HAL_RCC_OscConfig,"ax",%progbits
 300              		.align	1
 301              		.global	HAL_RCC_OscConfig
 302              		.syntax unified
 303              		.thumb
 304              		.thumb_func
 305              		.fpu fpv4-sp-d16
 307              	HAL_RCC_OscConfig:
 308              	.LFB139:
 345:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 346:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /**
 347:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @brief  Initializes the RCC Oscillators according to the specified parameters in the
 348:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         RCC_OscInitTypeDef.
 349:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
 350:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         contains the configuration information for the RCC Oscillators.
 351:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note   The PLL is not disabled when used as system clock.
 352:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note   Transitions LSE Bypass to LSE On and LSE On to LSE Bypass are not
 353:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         supported by this function. User should request a transition to LSE Off
 354:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         first and then LSE On or LSE Bypass.
 355:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
 356:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         supported by this function. User should request a transition to HSE Off
 357:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         first and then HSE On or HSE Bypass.
 358:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @retval HAL status
 359:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
 360:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
 361:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** {
 309              		.loc 1 361 0
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 24
 312              		@ frame_needed = 1, uses_anonymous_args = 0
 313 0000 80B5     		push	{r7, lr}
 314              	.LCFI5:
 315              		.cfi_def_cfa_offset 8
 316              		.cfi_offset 7, -8
 317              		.cfi_offset 14, -4
 318 0002 86B0     		sub	sp, sp, #24
 319              	.LCFI6:
 320              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/ccAgwjCz.s 			page 13


 321 0004 00AF     		add	r7, sp, #0
 322              	.LCFI7:
 323              		.cfi_def_cfa_register 7
 324 0006 7860     		str	r0, [r7, #4]
 362:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   uint32_t tickstart;
 363:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   FlagStatus pwrclkchanged = RESET;
 325              		.loc 1 363 0
 326 0008 0023     		movs	r3, #0
 327 000a FB75     		strb	r3, [r7, #23]
 364:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 365:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Check Null pointer */
 366:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if(RCC_OscInitStruct == NULL)
 328              		.loc 1 366 0
 329 000c 7B68     		ldr	r3, [r7, #4]
 330 000e 002B     		cmp	r3, #0
 331 0010 01D1     		bne	.L19
 367:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 368:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     return HAL_ERROR;
 332              		.loc 1 368 0
 333 0012 0123     		movs	r3, #1
 334 0014 5CE2     		b	.L20
 335              	.L19:
 369:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 370:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 371:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Check the parameters */
 372:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 373:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 374:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /*------------------------------- HSE Configuration ------------------------*/
 375:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 336              		.loc 1 375 0
 337 0016 7B68     		ldr	r3, [r7, #4]
 338 0018 1B68     		ldr	r3, [r3]
 339 001a 03F00103 		and	r3, r3, #1
 340 001e 002B     		cmp	r3, #0
 341 0020 00F08780 		beq	.L21
 376:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 377:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Check the parameters */
 378:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 379:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
 380:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 342              		.loc 1 380 0
 343 0024 964B     		ldr	r3, .L74
 344 0026 9B68     		ldr	r3, [r3, #8]
 345 0028 03F00C03 		and	r3, r3, #12
 346 002c 042B     		cmp	r3, #4
 347 002e 0CD0     		beq	.L22
 381:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RC
 348              		.loc 1 381 0
 349 0030 934B     		ldr	r3, .L74
 350 0032 9B68     		ldr	r3, [r3, #8]
 351 0034 03F00C03 		and	r3, r3, #12
 352 0038 082B     		cmp	r3, #8
 353 003a 12D1     		bne	.L23
 354              		.loc 1 381 0 is_stmt 0 discriminator 1
 355 003c 904B     		ldr	r3, .L74
 356 003e 5B68     		ldr	r3, [r3, #4]
 357 0040 03F48003 		and	r3, r3, #4194304
ARM GAS  /tmp/ccAgwjCz.s 			page 14


 358 0044 B3F5800F 		cmp	r3, #4194304
 359 0048 0BD1     		bne	.L23
 360              	.L22:
 382:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 383:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_
 361              		.loc 1 383 0 is_stmt 1
 362 004a 8D4B     		ldr	r3, .L74
 363 004c 1B68     		ldr	r3, [r3]
 364 004e 03F40033 		and	r3, r3, #131072
 365 0052 002B     		cmp	r3, #0
 366 0054 6CD0     		beq	.L73
 367              		.loc 1 383 0 is_stmt 0 discriminator 1
 368 0056 7B68     		ldr	r3, [r7, #4]
 369 0058 5B68     		ldr	r3, [r3, #4]
 370 005a 002B     		cmp	r3, #0
 371 005c 68D1     		bne	.L73
 384:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 385:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         return HAL_ERROR;
 372              		.loc 1 385 0 is_stmt 1
 373 005e 0123     		movs	r3, #1
 374 0060 36E2     		b	.L20
 375              	.L23:
 386:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 387:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 388:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     else
 389:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 390:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* Set the new HSE configuration ---------------------------------------*/
 391:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 376              		.loc 1 391 0
 377 0062 7B68     		ldr	r3, [r7, #4]
 378 0064 5B68     		ldr	r3, [r3, #4]
 379 0066 B3F5803F 		cmp	r3, #65536
 380 006a 06D1     		bne	.L25
 381              		.loc 1 391 0 is_stmt 0 discriminator 1
 382 006c 844B     		ldr	r3, .L74
 383 006e 1B68     		ldr	r3, [r3]
 384 0070 834A     		ldr	r2, .L74
 385 0072 43F48033 		orr	r3, r3, #65536
 386 0076 1360     		str	r3, [r2]
 387 0078 2EE0     		b	.L26
 388              	.L25:
 389              		.loc 1 391 0 discriminator 2
 390 007a 7B68     		ldr	r3, [r7, #4]
 391 007c 5B68     		ldr	r3, [r3, #4]
 392 007e 002B     		cmp	r3, #0
 393 0080 0CD1     		bne	.L27
 394              		.loc 1 391 0 discriminator 3
 395 0082 7F4B     		ldr	r3, .L74
 396 0084 1B68     		ldr	r3, [r3]
 397 0086 7E4A     		ldr	r2, .L74
 398 0088 23F48033 		bic	r3, r3, #65536
 399 008c 1360     		str	r3, [r2]
 400 008e 7C4B     		ldr	r3, .L74
 401 0090 1B68     		ldr	r3, [r3]
 402 0092 7B4A     		ldr	r2, .L74
 403 0094 23F48023 		bic	r3, r3, #262144
 404 0098 1360     		str	r3, [r2]
ARM GAS  /tmp/ccAgwjCz.s 			page 15


 405 009a 1DE0     		b	.L26
 406              	.L27:
 407              		.loc 1 391 0 discriminator 4
 408 009c 7B68     		ldr	r3, [r7, #4]
 409 009e 5B68     		ldr	r3, [r3, #4]
 410 00a0 B3F5A02F 		cmp	r3, #327680
 411 00a4 0CD1     		bne	.L28
 412              		.loc 1 391 0 discriminator 5
 413 00a6 764B     		ldr	r3, .L74
 414 00a8 1B68     		ldr	r3, [r3]
 415 00aa 754A     		ldr	r2, .L74
 416 00ac 43F48023 		orr	r3, r3, #262144
 417 00b0 1360     		str	r3, [r2]
 418 00b2 734B     		ldr	r3, .L74
 419 00b4 1B68     		ldr	r3, [r3]
 420 00b6 724A     		ldr	r2, .L74
 421 00b8 43F48033 		orr	r3, r3, #65536
 422 00bc 1360     		str	r3, [r2]
 423 00be 0BE0     		b	.L26
 424              	.L28:
 425              		.loc 1 391 0 discriminator 6
 426 00c0 6F4B     		ldr	r3, .L74
 427 00c2 1B68     		ldr	r3, [r3]
 428 00c4 6E4A     		ldr	r2, .L74
 429 00c6 23F48033 		bic	r3, r3, #65536
 430 00ca 1360     		str	r3, [r2]
 431 00cc 6C4B     		ldr	r3, .L74
 432 00ce 1B68     		ldr	r3, [r3]
 433 00d0 6B4A     		ldr	r2, .L74
 434 00d2 23F48023 		bic	r3, r3, #262144
 435 00d6 1360     		str	r3, [r2]
 436              	.L26:
 392:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 393:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* Check the HSE State */
 394:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 437              		.loc 1 394 0 is_stmt 1
 438 00d8 7B68     		ldr	r3, [r7, #4]
 439 00da 5B68     		ldr	r3, [r3, #4]
 440 00dc 002B     		cmp	r3, #0
 441 00de 13D0     		beq	.L29
 395:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 396:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Get Start Tick*/
 397:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 442              		.loc 1 397 0
 443 00e0 FFF7FEFF 		bl	HAL_GetTick
 444 00e4 3861     		str	r0, [r7, #16]
 398:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 399:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Wait till HSE is ready */
 400:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 445              		.loc 1 400 0
 446 00e6 08E0     		b	.L30
 447              	.L31:
 401:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 402:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 448              		.loc 1 402 0
 449 00e8 FFF7FEFF 		bl	HAL_GetTick
 450 00ec 0246     		mov	r2, r0
ARM GAS  /tmp/ccAgwjCz.s 			page 16


 451 00ee 3B69     		ldr	r3, [r7, #16]
 452 00f0 D31A     		subs	r3, r2, r3
 453 00f2 642B     		cmp	r3, #100
 454 00f4 01D9     		bls	.L30
 403:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           {
 404:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****             return HAL_TIMEOUT;
 455              		.loc 1 404 0
 456 00f6 0323     		movs	r3, #3
 457 00f8 EAE1     		b	.L20
 458              	.L30:
 400:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 459              		.loc 1 400 0
 460 00fa 614B     		ldr	r3, .L74
 461 00fc 1B68     		ldr	r3, [r3]
 462 00fe 03F40033 		and	r3, r3, #131072
 463 0102 002B     		cmp	r3, #0
 464 0104 F0D0     		beq	.L31
 465 0106 14E0     		b	.L21
 466              	.L29:
 405:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           }
 406:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         }
 407:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 408:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       else
 409:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 410:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Get Start Tick*/
 411:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 467              		.loc 1 411 0
 468 0108 FFF7FEFF 		bl	HAL_GetTick
 469 010c 3861     		str	r0, [r7, #16]
 412:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 413:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Wait till HSE is bypassed or disabled */
 414:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 470              		.loc 1 414 0
 471 010e 08E0     		b	.L32
 472              	.L33:
 415:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 416:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****            if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 473              		.loc 1 416 0
 474 0110 FFF7FEFF 		bl	HAL_GetTick
 475 0114 0246     		mov	r2, r0
 476 0116 3B69     		ldr	r3, [r7, #16]
 477 0118 D31A     		subs	r3, r2, r3
 478 011a 642B     		cmp	r3, #100
 479 011c 01D9     		bls	.L32
 417:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           {
 418:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****             return HAL_TIMEOUT;
 480              		.loc 1 418 0
 481 011e 0323     		movs	r3, #3
 482 0120 D6E1     		b	.L20
 483              	.L32:
 414:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 484              		.loc 1 414 0
 485 0122 574B     		ldr	r3, .L74
 486 0124 1B68     		ldr	r3, [r3]
 487 0126 03F40033 		and	r3, r3, #131072
 488 012a 002B     		cmp	r3, #0
 489 012c F0D1     		bne	.L33
ARM GAS  /tmp/ccAgwjCz.s 			page 17


 490 012e 00E0     		b	.L21
 491              	.L73:
 383:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 492              		.loc 1 383 0
 493 0130 00BF     		nop
 494              	.L21:
 419:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           }
 420:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         }
 421:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 422:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 423:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 424:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /*----------------------------- HSI Configuration --------------------------*/
 425:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 495              		.loc 1 425 0
 496 0132 7B68     		ldr	r3, [r7, #4]
 497 0134 1B68     		ldr	r3, [r3]
 498 0136 03F00203 		and	r3, r3, #2
 499 013a 002B     		cmp	r3, #0
 500 013c 69D0     		beq	.L34
 426:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 427:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Check the parameters */
 428:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 429:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 430:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 431:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock *
 432:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 501              		.loc 1 432 0
 502 013e 504B     		ldr	r3, .L74
 503 0140 9B68     		ldr	r3, [r3, #8]
 504 0142 03F00C03 		and	r3, r3, #12
 505 0146 002B     		cmp	r3, #0
 506 0148 0BD0     		beq	.L35
 433:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RC
 507              		.loc 1 433 0
 508 014a 4D4B     		ldr	r3, .L74
 509 014c 9B68     		ldr	r3, [r3, #8]
 510 014e 03F00C03 		and	r3, r3, #12
 511 0152 082B     		cmp	r3, #8
 512 0154 1CD1     		bne	.L36
 513              		.loc 1 433 0 is_stmt 0 discriminator 1
 514 0156 4A4B     		ldr	r3, .L74
 515 0158 5B68     		ldr	r3, [r3, #4]
 516 015a 03F48003 		and	r3, r3, #4194304
 517 015e 002B     		cmp	r3, #0
 518 0160 16D1     		bne	.L36
 519              	.L35:
 434:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 435:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* When HSI is used as system clock it will not disabled */
 436:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_
 520              		.loc 1 436 0 is_stmt 1
 521 0162 474B     		ldr	r3, .L74
 522 0164 1B68     		ldr	r3, [r3]
 523 0166 03F00203 		and	r3, r3, #2
 524 016a 002B     		cmp	r3, #0
 525 016c 05D0     		beq	.L37
 526              		.loc 1 436 0 is_stmt 0 discriminator 1
 527 016e 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccAgwjCz.s 			page 18


 528 0170 DB68     		ldr	r3, [r3, #12]
 529 0172 012B     		cmp	r3, #1
 530 0174 01D0     		beq	.L37
 437:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 438:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         return HAL_ERROR;
 531              		.loc 1 438 0 is_stmt 1
 532 0176 0123     		movs	r3, #1
 533 0178 AAE1     		b	.L20
 534              	.L37:
 439:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 440:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* Otherwise, just the calibration is allowed */
 441:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       else
 442:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 443:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 444:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 535              		.loc 1 444 0
 536 017a 414B     		ldr	r3, .L74
 537 017c 1B68     		ldr	r3, [r3]
 538 017e 23F0F802 		bic	r2, r3, #248
 539 0182 7B68     		ldr	r3, [r7, #4]
 540 0184 1B69     		ldr	r3, [r3, #16]
 541 0186 DB00     		lsls	r3, r3, #3
 542 0188 3D49     		ldr	r1, .L74
 543 018a 1343     		orrs	r3, r3, r2
 544 018c 0B60     		str	r3, [r1]
 436:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 545              		.loc 1 436 0
 546 018e 40E0     		b	.L34
 547              	.L36:
 445:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 446:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 447:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     else
 448:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 449:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* Check the HSI State */
 450:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 548              		.loc 1 450 0
 549 0190 7B68     		ldr	r3, [r7, #4]
 550 0192 DB68     		ldr	r3, [r3, #12]
 551 0194 002B     		cmp	r3, #0
 552 0196 23D0     		beq	.L38
 451:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 452:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Enable the Internal High Speed oscillator (HSI). */
 453:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         __HAL_RCC_HSI_ENABLE();
 553              		.loc 1 453 0
 554 0198 394B     		ldr	r3, .L74
 555 019a 1B68     		ldr	r3, [r3]
 556 019c 384A     		ldr	r2, .L74
 557 019e 43F00103 		orr	r3, r3, #1
 558 01a2 1360     		str	r3, [r2]
 454:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 455:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Get Start Tick*/
 456:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 559              		.loc 1 456 0
 560 01a4 FFF7FEFF 		bl	HAL_GetTick
 561 01a8 3861     		str	r0, [r7, #16]
 457:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 458:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Wait till HSI is ready */
ARM GAS  /tmp/ccAgwjCz.s 			page 19


 459:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 562              		.loc 1 459 0
 563 01aa 08E0     		b	.L39
 564              	.L40:
 460:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 461:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 565              		.loc 1 461 0
 566 01ac FFF7FEFF 		bl	HAL_GetTick
 567 01b0 0246     		mov	r2, r0
 568 01b2 3B69     		ldr	r3, [r7, #16]
 569 01b4 D31A     		subs	r3, r2, r3
 570 01b6 022B     		cmp	r3, #2
 571 01b8 01D9     		bls	.L39
 462:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           {
 463:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****             return HAL_TIMEOUT;
 572              		.loc 1 463 0
 573 01ba 0323     		movs	r3, #3
 574 01bc 88E1     		b	.L20
 575              	.L39:
 459:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 576              		.loc 1 459 0
 577 01be 304B     		ldr	r3, .L74
 578 01c0 1B68     		ldr	r3, [r3]
 579 01c2 03F00203 		and	r3, r3, #2
 580 01c6 002B     		cmp	r3, #0
 581 01c8 F0D0     		beq	.L40
 464:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           }
 465:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         }
 466:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 467:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 468:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 582              		.loc 1 468 0
 583 01ca 2D4B     		ldr	r3, .L74
 584 01cc 1B68     		ldr	r3, [r3]
 585 01ce 23F0F802 		bic	r2, r3, #248
 586 01d2 7B68     		ldr	r3, [r7, #4]
 587 01d4 1B69     		ldr	r3, [r3, #16]
 588 01d6 DB00     		lsls	r3, r3, #3
 589 01d8 2949     		ldr	r1, .L74
 590 01da 1343     		orrs	r3, r3, r2
 591 01dc 0B60     		str	r3, [r1]
 592 01de 18E0     		b	.L34
 593              	.L38:
 469:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 470:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       else
 471:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 472:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Disable the Internal High Speed oscillator (HSI). */
 473:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         __HAL_RCC_HSI_DISABLE();
 594              		.loc 1 473 0
 595 01e0 274B     		ldr	r3, .L74
 596 01e2 1B68     		ldr	r3, [r3]
 597 01e4 264A     		ldr	r2, .L74
 598 01e6 23F00103 		bic	r3, r3, #1
 599 01ea 1360     		str	r3, [r2]
 474:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 475:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Get Start Tick*/
 476:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         tickstart = HAL_GetTick();
ARM GAS  /tmp/ccAgwjCz.s 			page 20


 600              		.loc 1 476 0
 601 01ec FFF7FEFF 		bl	HAL_GetTick
 602 01f0 3861     		str	r0, [r7, #16]
 477:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 478:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Wait till HSI is ready */
 479:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 603              		.loc 1 479 0
 604 01f2 08E0     		b	.L41
 605              	.L42:
 480:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 481:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 606              		.loc 1 481 0
 607 01f4 FFF7FEFF 		bl	HAL_GetTick
 608 01f8 0246     		mov	r2, r0
 609 01fa 3B69     		ldr	r3, [r7, #16]
 610 01fc D31A     		subs	r3, r2, r3
 611 01fe 022B     		cmp	r3, #2
 612 0200 01D9     		bls	.L41
 482:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           {
 483:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****             return HAL_TIMEOUT;
 613              		.loc 1 483 0
 614 0202 0323     		movs	r3, #3
 615 0204 64E1     		b	.L20
 616              	.L41:
 479:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 617              		.loc 1 479 0
 618 0206 1E4B     		ldr	r3, .L74
 619 0208 1B68     		ldr	r3, [r3]
 620 020a 03F00203 		and	r3, r3, #2
 621 020e 002B     		cmp	r3, #0
 622 0210 F0D1     		bne	.L42
 623              	.L34:
 484:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           }
 485:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         }
 486:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 487:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 488:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 489:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /*------------------------------ LSI Configuration -------------------------*/
 490:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 624              		.loc 1 490 0
 625 0212 7B68     		ldr	r3, [r7, #4]
 626 0214 1B68     		ldr	r3, [r3]
 627 0216 03F00803 		and	r3, r3, #8
 628 021a 002B     		cmp	r3, #0
 629 021c 38D0     		beq	.L43
 491:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 492:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Check the parameters */
 493:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 494:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 495:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Check the LSI State */
 496:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 630              		.loc 1 496 0
 631 021e 7B68     		ldr	r3, [r7, #4]
 632 0220 5B69     		ldr	r3, [r3, #20]
 633 0222 002B     		cmp	r3, #0
 634 0224 19D0     		beq	.L44
 497:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
ARM GAS  /tmp/ccAgwjCz.s 			page 21


 498:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* Enable the Internal Low Speed oscillator (LSI). */
 499:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       __HAL_RCC_LSI_ENABLE();
 635              		.loc 1 499 0
 636 0226 164B     		ldr	r3, .L74
 637 0228 5B6F     		ldr	r3, [r3, #116]
 638 022a 154A     		ldr	r2, .L74
 639 022c 43F00103 		orr	r3, r3, #1
 640 0230 5367     		str	r3, [r2, #116]
 500:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 501:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* Get Start Tick*/
 502:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 641              		.loc 1 502 0
 642 0232 FFF7FEFF 		bl	HAL_GetTick
 643 0236 3861     		str	r0, [r7, #16]
 503:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 504:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* Wait till LSI is ready */
 505:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 644              		.loc 1 505 0
 645 0238 08E0     		b	.L45
 646              	.L46:
 506:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 507:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 647              		.loc 1 507 0
 648 023a FFF7FEFF 		bl	HAL_GetTick
 649 023e 0246     		mov	r2, r0
 650 0240 3B69     		ldr	r3, [r7, #16]
 651 0242 D31A     		subs	r3, r2, r3
 652 0244 022B     		cmp	r3, #2
 653 0246 01D9     		bls	.L45
 508:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 509:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           return HAL_TIMEOUT;
 654              		.loc 1 509 0
 655 0248 0323     		movs	r3, #3
 656 024a 41E1     		b	.L20
 657              	.L45:
 505:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 658              		.loc 1 505 0
 659 024c 0C4B     		ldr	r3, .L74
 660 024e 5B6F     		ldr	r3, [r3, #116]
 661 0250 03F00203 		and	r3, r3, #2
 662 0254 002B     		cmp	r3, #0
 663 0256 F0D0     		beq	.L46
 664 0258 1AE0     		b	.L43
 665              	.L44:
 510:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         }
 511:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 512:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 513:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     else
 514:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 515:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* Disable the Internal Low Speed oscillator (LSI). */
 516:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       __HAL_RCC_LSI_DISABLE();
 666              		.loc 1 516 0
 667 025a 094B     		ldr	r3, .L74
 668 025c 5B6F     		ldr	r3, [r3, #116]
 669 025e 084A     		ldr	r2, .L74
 670 0260 23F00103 		bic	r3, r3, #1
 671 0264 5367     		str	r3, [r2, #116]
ARM GAS  /tmp/ccAgwjCz.s 			page 22


 517:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 518:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* Get Start Tick*/
 519:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 672              		.loc 1 519 0
 673 0266 FFF7FEFF 		bl	HAL_GetTick
 674 026a 3861     		str	r0, [r7, #16]
 520:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 521:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* Wait till LSI is ready */
 522:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 675              		.loc 1 522 0
 676 026c 0AE0     		b	.L47
 677              	.L48:
 523:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 524:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 678              		.loc 1 524 0
 679 026e FFF7FEFF 		bl	HAL_GetTick
 680 0272 0246     		mov	r2, r0
 681 0274 3B69     		ldr	r3, [r7, #16]
 682 0276 D31A     		subs	r3, r2, r3
 683 0278 022B     		cmp	r3, #2
 684 027a 03D9     		bls	.L47
 525:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 526:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           return HAL_TIMEOUT;
 685              		.loc 1 526 0
 686 027c 0323     		movs	r3, #3
 687 027e 27E1     		b	.L20
 688              	.L75:
 689              		.align	2
 690              	.L74:
 691 0280 00380240 		.word	1073887232
 692              	.L47:
 522:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 693              		.loc 1 522 0
 694 0284 944B     		ldr	r3, .L76
 695 0286 5B6F     		ldr	r3, [r3, #116]
 696 0288 03F00203 		and	r3, r3, #2
 697 028c 002B     		cmp	r3, #0
 698 028e EED1     		bne	.L48
 699              	.L43:
 527:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         }
 528:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 529:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 530:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 531:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /*------------------------------ LSE Configuration -------------------------*/
 532:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 700              		.loc 1 532 0
 701 0290 7B68     		ldr	r3, [r7, #4]
 702 0292 1B68     		ldr	r3, [r3]
 703 0294 03F00403 		and	r3, r3, #4
 704 0298 002B     		cmp	r3, #0
 705 029a 00F0A480 		beq	.L49
 533:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 534:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Check the parameters */
 535:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 536:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 537:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Update LSE configuration in Backup Domain control register    */
 538:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Requires to enable write access to Backup Domain of necessary */
ARM GAS  /tmp/ccAgwjCz.s 			page 23


 539:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 706              		.loc 1 539 0
 707 029e 8E4B     		ldr	r3, .L76
 708 02a0 1B6C     		ldr	r3, [r3, #64]
 709 02a2 03F08053 		and	r3, r3, #268435456
 710 02a6 002B     		cmp	r3, #0
 711 02a8 0DD1     		bne	.L50
 712              	.LBB2:
 540:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 541:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* Enable Power Clock*/
 542:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       __HAL_RCC_PWR_CLK_ENABLE();
 713              		.loc 1 542 0
 714 02aa 8B4B     		ldr	r3, .L76
 715 02ac 1B6C     		ldr	r3, [r3, #64]
 716 02ae 8A4A     		ldr	r2, .L76
 717 02b0 43F08053 		orr	r3, r3, #268435456
 718 02b4 1364     		str	r3, [r2, #64]
 719 02b6 884B     		ldr	r3, .L76
 720 02b8 1B6C     		ldr	r3, [r3, #64]
 721 02ba 03F08053 		and	r3, r3, #268435456
 722 02be FB60     		str	r3, [r7, #12]
 723 02c0 FB68     		ldr	r3, [r7, #12]
 724              	.LBE2:
 543:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       pwrclkchanged = SET;
 725              		.loc 1 543 0
 726 02c2 0123     		movs	r3, #1
 727 02c4 FB75     		strb	r3, [r7, #23]
 728              	.L50:
 544:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 545:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 546:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 729              		.loc 1 546 0
 730 02c6 854B     		ldr	r3, .L76+4
 731 02c8 1B68     		ldr	r3, [r3]
 732 02ca 03F48073 		and	r3, r3, #256
 733 02ce 002B     		cmp	r3, #0
 734 02d0 18D1     		bne	.L51
 547:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 548:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* Enable write access to Backup domain */
 549:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       PWR->CR1 |= PWR_CR1_DBP;
 735              		.loc 1 549 0
 736 02d2 824B     		ldr	r3, .L76+4
 737 02d4 1B68     		ldr	r3, [r3]
 738 02d6 814A     		ldr	r2, .L76+4
 739 02d8 43F48073 		orr	r3, r3, #256
 740 02dc 1360     		str	r3, [r2]
 550:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 551:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* Wait for Backup domain Write protection disable */
 552:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 741              		.loc 1 552 0
 742 02de FFF7FEFF 		bl	HAL_GetTick
 743 02e2 3861     		str	r0, [r7, #16]
 553:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 554:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 744              		.loc 1 554 0
 745 02e4 08E0     		b	.L52
 746              	.L53:
ARM GAS  /tmp/ccAgwjCz.s 			page 24


 555:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 556:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 747              		.loc 1 556 0
 748 02e6 FFF7FEFF 		bl	HAL_GetTick
 749 02ea 0246     		mov	r2, r0
 750 02ec 3B69     		ldr	r3, [r7, #16]
 751 02ee D31A     		subs	r3, r2, r3
 752 02f0 642B     		cmp	r3, #100
 753 02f2 01D9     		bls	.L52
 557:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 558:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           return HAL_TIMEOUT;
 754              		.loc 1 558 0
 755 02f4 0323     		movs	r3, #3
 756 02f6 EBE0     		b	.L20
 757              	.L52:
 554:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 758              		.loc 1 554 0
 759 02f8 784B     		ldr	r3, .L76+4
 760 02fa 1B68     		ldr	r3, [r3]
 761 02fc 03F48073 		and	r3, r3, #256
 762 0300 002B     		cmp	r3, #0
 763 0302 F0D0     		beq	.L53
 764              	.L51:
 559:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         }
 560:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 561:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 562:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 563:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Set the new LSE configuration -----------------------------------------*/
 564:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 765              		.loc 1 564 0
 766 0304 7B68     		ldr	r3, [r7, #4]
 767 0306 9B68     		ldr	r3, [r3, #8]
 768 0308 012B     		cmp	r3, #1
 769 030a 06D1     		bne	.L54
 770              		.loc 1 564 0 is_stmt 0 discriminator 1
 771 030c 724B     		ldr	r3, .L76
 772 030e 1B6F     		ldr	r3, [r3, #112]
 773 0310 714A     		ldr	r2, .L76
 774 0312 43F00103 		orr	r3, r3, #1
 775 0316 1367     		str	r3, [r2, #112]
 776 0318 2DE0     		b	.L55
 777              	.L54:
 778              		.loc 1 564 0 discriminator 2
 779 031a 7B68     		ldr	r3, [r7, #4]
 780 031c 9B68     		ldr	r3, [r3, #8]
 781 031e 002B     		cmp	r3, #0
 782 0320 0CD1     		bne	.L56
 783              		.loc 1 564 0 discriminator 3
 784 0322 6D4B     		ldr	r3, .L76
 785 0324 1B6F     		ldr	r3, [r3, #112]
 786 0326 6C4A     		ldr	r2, .L76
 787 0328 23F00103 		bic	r3, r3, #1
 788 032c 1367     		str	r3, [r2, #112]
 789 032e 6A4B     		ldr	r3, .L76
 790 0330 1B6F     		ldr	r3, [r3, #112]
 791 0332 694A     		ldr	r2, .L76
 792 0334 23F00403 		bic	r3, r3, #4
ARM GAS  /tmp/ccAgwjCz.s 			page 25


 793 0338 1367     		str	r3, [r2, #112]
 794 033a 1CE0     		b	.L55
 795              	.L56:
 796              		.loc 1 564 0 discriminator 4
 797 033c 7B68     		ldr	r3, [r7, #4]
 798 033e 9B68     		ldr	r3, [r3, #8]
 799 0340 052B     		cmp	r3, #5
 800 0342 0CD1     		bne	.L57
 801              		.loc 1 564 0 discriminator 5
 802 0344 644B     		ldr	r3, .L76
 803 0346 1B6F     		ldr	r3, [r3, #112]
 804 0348 634A     		ldr	r2, .L76
 805 034a 43F00403 		orr	r3, r3, #4
 806 034e 1367     		str	r3, [r2, #112]
 807 0350 614B     		ldr	r3, .L76
 808 0352 1B6F     		ldr	r3, [r3, #112]
 809 0354 604A     		ldr	r2, .L76
 810 0356 43F00103 		orr	r3, r3, #1
 811 035a 1367     		str	r3, [r2, #112]
 812 035c 0BE0     		b	.L55
 813              	.L57:
 814              		.loc 1 564 0 discriminator 6
 815 035e 5E4B     		ldr	r3, .L76
 816 0360 1B6F     		ldr	r3, [r3, #112]
 817 0362 5D4A     		ldr	r2, .L76
 818 0364 23F00103 		bic	r3, r3, #1
 819 0368 1367     		str	r3, [r2, #112]
 820 036a 5B4B     		ldr	r3, .L76
 821 036c 1B6F     		ldr	r3, [r3, #112]
 822 036e 5A4A     		ldr	r2, .L76
 823 0370 23F00403 		bic	r3, r3, #4
 824 0374 1367     		str	r3, [r2, #112]
 825              	.L55:
 565:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Check the LSE State */
 566:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 826              		.loc 1 566 0 is_stmt 1
 827 0376 7B68     		ldr	r3, [r7, #4]
 828 0378 9B68     		ldr	r3, [r3, #8]
 829 037a 002B     		cmp	r3, #0
 830 037c 15D0     		beq	.L58
 567:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 568:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* Get Start Tick*/
 569:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 831              		.loc 1 569 0
 832 037e FFF7FEFF 		bl	HAL_GetTick
 833 0382 3861     		str	r0, [r7, #16]
 570:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 571:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* Wait till LSE is ready */
 572:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 834              		.loc 1 572 0
 835 0384 0AE0     		b	.L59
 836              	.L60:
 573:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 574:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 837              		.loc 1 574 0
 838 0386 FFF7FEFF 		bl	HAL_GetTick
 839 038a 0246     		mov	r2, r0
ARM GAS  /tmp/ccAgwjCz.s 			page 26


 840 038c 3B69     		ldr	r3, [r7, #16]
 841 038e D31A     		subs	r3, r2, r3
 842 0390 41F28832 		movw	r2, #5000
 843 0394 9342     		cmp	r3, r2
 844 0396 01D9     		bls	.L59
 575:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 576:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           return HAL_TIMEOUT;
 845              		.loc 1 576 0
 846 0398 0323     		movs	r3, #3
 847 039a 99E0     		b	.L20
 848              	.L59:
 572:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 849              		.loc 1 572 0
 850 039c 4E4B     		ldr	r3, .L76
 851 039e 1B6F     		ldr	r3, [r3, #112]
 852 03a0 03F00203 		and	r3, r3, #2
 853 03a4 002B     		cmp	r3, #0
 854 03a6 EED0     		beq	.L60
 855 03a8 14E0     		b	.L61
 856              	.L58:
 577:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         }
 578:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 579:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 580:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     else
 581:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 582:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* Get Start Tick*/
 583:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 857              		.loc 1 583 0
 858 03aa FFF7FEFF 		bl	HAL_GetTick
 859 03ae 3861     		str	r0, [r7, #16]
 584:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 585:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* Wait till LSE is ready */
 586:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 860              		.loc 1 586 0
 861 03b0 0AE0     		b	.L62
 862              	.L63:
 587:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 588:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 863              		.loc 1 588 0
 864 03b2 FFF7FEFF 		bl	HAL_GetTick
 865 03b6 0246     		mov	r2, r0
 866 03b8 3B69     		ldr	r3, [r7, #16]
 867 03ba D31A     		subs	r3, r2, r3
 868 03bc 41F28832 		movw	r2, #5000
 869 03c0 9342     		cmp	r3, r2
 870 03c2 01D9     		bls	.L62
 589:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 590:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           return HAL_TIMEOUT;
 871              		.loc 1 590 0
 872 03c4 0323     		movs	r3, #3
 873 03c6 83E0     		b	.L20
 874              	.L62:
 586:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 875              		.loc 1 586 0
 876 03c8 434B     		ldr	r3, .L76
 877 03ca 1B6F     		ldr	r3, [r3, #112]
 878 03cc 03F00203 		and	r3, r3, #2
ARM GAS  /tmp/ccAgwjCz.s 			page 27


 879 03d0 002B     		cmp	r3, #0
 880 03d2 EED1     		bne	.L63
 881              	.L61:
 591:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         }
 592:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 593:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 594:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 595:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Restore clock configuration if changed */
 596:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     if(pwrclkchanged == SET)
 882              		.loc 1 596 0
 883 03d4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 884 03d6 012B     		cmp	r3, #1
 885 03d8 05D1     		bne	.L49
 597:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 598:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       __HAL_RCC_PWR_CLK_DISABLE();
 886              		.loc 1 598 0
 887 03da 3F4B     		ldr	r3, .L76
 888 03dc 1B6C     		ldr	r3, [r3, #64]
 889 03de 3E4A     		ldr	r2, .L76
 890 03e0 23F08053 		bic	r3, r3, #268435456
 891 03e4 1364     		str	r3, [r2, #64]
 892              	.L49:
 599:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 600:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 601:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /*-------------------------------- PLL Configuration -----------------------*/
 602:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Check the parameters */
 603:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 604:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 893              		.loc 1 604 0
 894 03e6 7B68     		ldr	r3, [r7, #4]
 895 03e8 9B69     		ldr	r3, [r3, #24]
 896 03ea 002B     		cmp	r3, #0
 897 03ec 6FD0     		beq	.L64
 605:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 606:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Check if the PLL is used as system clock or not */
 607:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 898              		.loc 1 607 0
 899 03ee 3A4B     		ldr	r3, .L76
 900 03f0 9B68     		ldr	r3, [r3, #8]
 901 03f2 03F00C03 		and	r3, r3, #12
 902 03f6 082B     		cmp	r3, #8
 903 03f8 67D0     		beq	.L65
 608:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 609:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 904              		.loc 1 609 0
 905 03fa 7B68     		ldr	r3, [r7, #4]
 906 03fc 9B69     		ldr	r3, [r3, #24]
 907 03fe 022B     		cmp	r3, #2
 908 0400 49D1     		bne	.L66
 610:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 611:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Check the parameters */
 612:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 613:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 614:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 615:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 616:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 617:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** #if defined (RCC_PLLCFGR_PLLR)
ARM GAS  /tmp/ccAgwjCz.s 			page 28


 618:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 619:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** #endif
 620:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 621:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Disable the main PLL. */
 622:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         __HAL_RCC_PLL_DISABLE();
 909              		.loc 1 622 0
 910 0402 354B     		ldr	r3, .L76
 911 0404 1B68     		ldr	r3, [r3]
 912 0406 344A     		ldr	r2, .L76
 913 0408 23F08073 		bic	r3, r3, #16777216
 914 040c 1360     		str	r3, [r2]
 623:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 624:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Get Start Tick*/
 625:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 915              		.loc 1 625 0
 916 040e FFF7FEFF 		bl	HAL_GetTick
 917 0412 3861     		str	r0, [r7, #16]
 626:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 627:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Wait till PLL is ready */
 628:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 918              		.loc 1 628 0
 919 0414 08E0     		b	.L67
 920              	.L68:
 629:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 630:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 921              		.loc 1 630 0
 922 0416 FFF7FEFF 		bl	HAL_GetTick
 923 041a 0246     		mov	r2, r0
 924 041c 3B69     		ldr	r3, [r7, #16]
 925 041e D31A     		subs	r3, r2, r3
 926 0420 022B     		cmp	r3, #2
 927 0422 01D9     		bls	.L67
 631:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           {
 632:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****             return HAL_TIMEOUT;
 928              		.loc 1 632 0
 929 0424 0323     		movs	r3, #3
 930 0426 53E0     		b	.L20
 931              	.L67:
 628:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 932              		.loc 1 628 0
 933 0428 2B4B     		ldr	r3, .L76
 934 042a 1B68     		ldr	r3, [r3]
 935 042c 03F00073 		and	r3, r3, #33554432
 936 0430 002B     		cmp	r3, #0
 937 0432 F0D1     		bne	.L68
 633:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           }
 634:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         }
 635:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 636:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Configure the main PLL clock source, multiplication and division factors. */
 637:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** #if defined (RCC_PLLCFGR_PLLR)
 638:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 639:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLM,
 640:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLN,
 641:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLP,
 642:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLQ,
 643:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLR);
 644:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** #else
ARM GAS  /tmp/ccAgwjCz.s 			page 29


 645:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 938              		.loc 1 645 0
 939 0434 7B68     		ldr	r3, [r7, #4]
 940 0436 DA69     		ldr	r2, [r3, #28]
 941 0438 7B68     		ldr	r3, [r7, #4]
 942 043a 1B6A     		ldr	r3, [r3, #32]
 943 043c 1A43     		orrs	r2, r2, r3
 944 043e 7B68     		ldr	r3, [r7, #4]
 945 0440 5B6A     		ldr	r3, [r3, #36]
 946 0442 9B01     		lsls	r3, r3, #6
 947 0444 1A43     		orrs	r2, r2, r3
 948 0446 7B68     		ldr	r3, [r7, #4]
 949 0448 9B6A     		ldr	r3, [r3, #40]
 950 044a 5B08     		lsrs	r3, r3, #1
 951 044c 013B     		subs	r3, r3, #1
 952 044e 1B04     		lsls	r3, r3, #16
 953 0450 1A43     		orrs	r2, r2, r3
 954 0452 7B68     		ldr	r3, [r7, #4]
 955 0454 DB6A     		ldr	r3, [r3, #44]
 956 0456 1B06     		lsls	r3, r3, #24
 957 0458 1343     		orrs	r3, r3, r2
 958 045a 1F4A     		ldr	r2, .L76
 959 045c 43F00053 		orr	r3, r3, #536870912
 960 0460 5360     		str	r3, [r2, #4]
 646:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLM,
 647:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLN,
 648:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLP,
 649:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLQ);
 650:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** #endif
 651:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 652:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Enable the main PLL. */
 653:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         __HAL_RCC_PLL_ENABLE();
 961              		.loc 1 653 0
 962 0462 1D4B     		ldr	r3, .L76
 963 0464 1B68     		ldr	r3, [r3]
 964 0466 1C4A     		ldr	r2, .L76
 965 0468 43F08073 		orr	r3, r3, #16777216
 966 046c 1360     		str	r3, [r2]
 654:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 655:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Get Start Tick*/
 656:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 967              		.loc 1 656 0
 968 046e FFF7FEFF 		bl	HAL_GetTick
 969 0472 3861     		str	r0, [r7, #16]
 657:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 658:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Wait till PLL is ready */
 659:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 970              		.loc 1 659 0
 971 0474 08E0     		b	.L69
 972              	.L70:
 660:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 661:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 973              		.loc 1 661 0
 974 0476 FFF7FEFF 		bl	HAL_GetTick
 975 047a 0246     		mov	r2, r0
 976 047c 3B69     		ldr	r3, [r7, #16]
 977 047e D31A     		subs	r3, r2, r3
ARM GAS  /tmp/ccAgwjCz.s 			page 30


 978 0480 022B     		cmp	r3, #2
 979 0482 01D9     		bls	.L69
 662:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           {
 663:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****             return HAL_TIMEOUT;
 980              		.loc 1 663 0
 981 0484 0323     		movs	r3, #3
 982 0486 23E0     		b	.L20
 983              	.L69:
 659:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 984              		.loc 1 659 0
 985 0488 134B     		ldr	r3, .L76
 986 048a 1B68     		ldr	r3, [r3]
 987 048c 03F00073 		and	r3, r3, #33554432
 988 0490 002B     		cmp	r3, #0
 989 0492 F0D0     		beq	.L70
 990 0494 1BE0     		b	.L64
 991              	.L66:
 664:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           }
 665:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         }
 666:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 667:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       else
 668:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 669:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Disable the main PLL. */
 670:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         __HAL_RCC_PLL_DISABLE();
 992              		.loc 1 670 0
 993 0496 104B     		ldr	r3, .L76
 994 0498 1B68     		ldr	r3, [r3]
 995 049a 0F4A     		ldr	r2, .L76
 996 049c 23F08073 		bic	r3, r3, #16777216
 997 04a0 1360     		str	r3, [r2]
 671:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 672:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Get Start Tick*/
 673:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 998              		.loc 1 673 0
 999 04a2 FFF7FEFF 		bl	HAL_GetTick
 1000 04a6 3861     		str	r0, [r7, #16]
 674:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 675:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* Wait till PLL is ready */
 676:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 1001              		.loc 1 676 0
 1002 04a8 08E0     		b	.L71
 1003              	.L72:
 677:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 678:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 1004              		.loc 1 678 0
 1005 04aa FFF7FEFF 		bl	HAL_GetTick
 1006 04ae 0246     		mov	r2, r0
 1007 04b0 3B69     		ldr	r3, [r7, #16]
 1008 04b2 D31A     		subs	r3, r2, r3
 1009 04b4 022B     		cmp	r3, #2
 1010 04b6 01D9     		bls	.L71
 679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           {
 680:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****             return HAL_TIMEOUT;
 1011              		.loc 1 680 0
 1012 04b8 0323     		movs	r3, #3
 1013 04ba 09E0     		b	.L20
 1014              	.L71:
ARM GAS  /tmp/ccAgwjCz.s 			page 31


 676:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         {
 1015              		.loc 1 676 0
 1016 04bc 064B     		ldr	r3, .L76
 1017 04be 1B68     		ldr	r3, [r3]
 1018 04c0 03F00073 		and	r3, r3, #33554432
 1019 04c4 002B     		cmp	r3, #0
 1020 04c6 F0D1     		bne	.L72
 1021 04c8 01E0     		b	.L64
 1022              	.L65:
 681:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****           }
 682:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         }
 683:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 684:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 685:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     else
 686:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 687:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       return HAL_ERROR;
 1023              		.loc 1 687 0
 1024 04ca 0123     		movs	r3, #1
 1025 04cc 00E0     		b	.L20
 1026              	.L64:
 688:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 689:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 690:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   return HAL_OK;
 1027              		.loc 1 690 0
 1028 04ce 0023     		movs	r3, #0
 1029              	.L20:
 691:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** }
 1030              		.loc 1 691 0
 1031 04d0 1846     		mov	r0, r3
 1032 04d2 1837     		adds	r7, r7, #24
 1033              	.LCFI8:
 1034              		.cfi_def_cfa_offset 8
 1035 04d4 BD46     		mov	sp, r7
 1036              	.LCFI9:
 1037              		.cfi_def_cfa_register 13
 1038              		@ sp needed
 1039 04d6 80BD     		pop	{r7, pc}
 1040              	.L77:
 1041              		.align	2
 1042              	.L76:
 1043 04d8 00380240 		.word	1073887232
 1044 04dc 00700040 		.word	1073770496
 1045              		.cfi_endproc
 1046              	.LFE139:
 1048              		.section	.text.HAL_RCC_ClockConfig,"ax",%progbits
 1049              		.align	1
 1050              		.global	HAL_RCC_ClockConfig
 1051              		.syntax unified
 1052              		.thumb
 1053              		.thumb_func
 1054              		.fpu fpv4-sp-d16
 1056              	HAL_RCC_ClockConfig:
 1057              	.LFB140:
 692:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 693:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /**
 694:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @brief  Initializes the CPU, AHB and APB busses clocks according to the specified
 695:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         parameters in the RCC_ClkInitStruct.
ARM GAS  /tmp/ccAgwjCz.s 			page 32


 696:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @param  RCC_ClkInitStruct pointer to an RCC_OscInitTypeDef structure that
 697:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         contains the configuration information for the RCC peripheral.
 698:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @param  FLatency FLASH Latency, this parameter depend on device selected
 699:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *
 700:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
 701:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         and updated by HAL_RCC_GetHCLKFreq() function called within this function
 702:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *
 703:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 704:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
 705:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
 706:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         (if the Clock Security System CSS is enabled).
 707:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *
 708:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 709:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         clock source is ready (clock stable after startup delay or PLL locked).
 710:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 711:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         occur when the clock source will be ready.
 712:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         You can use HAL_RCC_GetClockConfig() function to know which clock is
 713:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         currently used as system clock source.
 714:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note   Depending on the device voltage range, the software has to set correctly
 715:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 716:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         (for more details refer to section above "Initialization/de-initialization functions")
 717:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @retval None
 718:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
 719:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
 720:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** {
 1058              		.loc 1 720 0
 1059              		.cfi_startproc
 1060              		@ args = 0, pretend = 0, frame = 16
 1061              		@ frame_needed = 1, uses_anonymous_args = 0
 1062 0000 80B5     		push	{r7, lr}
 1063              	.LCFI10:
 1064              		.cfi_def_cfa_offset 8
 1065              		.cfi_offset 7, -8
 1066              		.cfi_offset 14, -4
 1067 0002 84B0     		sub	sp, sp, #16
 1068              	.LCFI11:
 1069              		.cfi_def_cfa_offset 24
 1070 0004 00AF     		add	r7, sp, #0
 1071              	.LCFI12:
 1072              		.cfi_def_cfa_register 7
 1073 0006 7860     		str	r0, [r7, #4]
 1074 0008 3960     		str	r1, [r7]
 721:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   uint32_t tickstart = 0;
 1075              		.loc 1 721 0
 1076 000a 0023     		movs	r3, #0
 1077 000c FB60     		str	r3, [r7, #12]
 722:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 723:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Check Null pointer */
 724:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if(RCC_ClkInitStruct == NULL)
 1078              		.loc 1 724 0
 1079 000e 7B68     		ldr	r3, [r7, #4]
 1080 0010 002B     		cmp	r3, #0
 1081 0012 01D1     		bne	.L79
 725:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 726:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     return HAL_ERROR;
 1082              		.loc 1 726 0
 1083 0014 0123     		movs	r3, #1
ARM GAS  /tmp/ccAgwjCz.s 			page 33


 1084 0016 CEE0     		b	.L80
 1085              	.L79:
 727:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 728:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 729:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Check the parameters */
 730:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 731:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   assert_param(IS_FLASH_LATENCY(FLatency));
 732:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 733:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
 734:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****      must be correctly programmed according to the frequency of the CPU clock
 735:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****      (HCLK) and the supply voltage of the device. */
 736:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 737:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Increasing the CPU frequency */
 738:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if(FLatency > __HAL_FLASH_GET_LATENCY())
 1086              		.loc 1 738 0
 1087 0018 694B     		ldr	r3, .L94
 1088 001a 1B68     		ldr	r3, [r3]
 1089 001c 03F00F03 		and	r3, r3, #15
 1090 0020 3A68     		ldr	r2, [r7]
 1091 0022 9A42     		cmp	r2, r3
 1092 0024 10D9     		bls	.L81
 739:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 740:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 741:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 1093              		.loc 1 741 0
 1094 0026 664B     		ldr	r3, .L94
 1095 0028 1B68     		ldr	r3, [r3]
 1096 002a 23F00F02 		bic	r2, r3, #15
 1097 002e 6449     		ldr	r1, .L94
 1098 0030 3B68     		ldr	r3, [r7]
 1099 0032 1343     		orrs	r3, r3, r2
 1100 0034 0B60     		str	r3, [r1]
 742:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 743:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 744:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     memory by reading the FLASH_ACR register */
 745:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     if(__HAL_FLASH_GET_LATENCY() != FLatency)
 1101              		.loc 1 745 0
 1102 0036 624B     		ldr	r3, .L94
 1103 0038 1B68     		ldr	r3, [r3]
 1104 003a 03F00F03 		and	r3, r3, #15
 1105 003e 3A68     		ldr	r2, [r7]
 1106 0040 9A42     		cmp	r2, r3
 1107 0042 01D0     		beq	.L81
 746:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 747:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       return HAL_ERROR;
 1108              		.loc 1 747 0
 1109 0044 0123     		movs	r3, #1
 1110 0046 B6E0     		b	.L80
 1111              	.L81:
 748:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 749:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 750:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 751:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /*-------------------------- HCLK Configuration --------------------------*/
 752:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 1112              		.loc 1 752 0
 1113 0048 7B68     		ldr	r3, [r7, #4]
 1114 004a 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccAgwjCz.s 			page 34


 1115 004c 03F00203 		and	r3, r3, #2
 1116 0050 002B     		cmp	r3, #0
 1117 0052 20D0     		beq	.L82
 753:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 754:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Set the highest APBx dividers in order to ensure that we do not go through
 755:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****        a non-spec phase whatever we decrease or increase HCLK. */
 756:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 1118              		.loc 1 756 0
 1119 0054 7B68     		ldr	r3, [r7, #4]
 1120 0056 1B68     		ldr	r3, [r3]
 1121 0058 03F00403 		and	r3, r3, #4
 1122 005c 002B     		cmp	r3, #0
 1123 005e 05D0     		beq	.L83
 757:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 758:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 1124              		.loc 1 758 0
 1125 0060 584B     		ldr	r3, .L94+4
 1126 0062 9B68     		ldr	r3, [r3, #8]
 1127 0064 574A     		ldr	r2, .L94+4
 1128 0066 43F4E053 		orr	r3, r3, #7168
 1129 006a 9360     		str	r3, [r2, #8]
 1130              	.L83:
 759:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 760:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 761:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 1131              		.loc 1 761 0
 1132 006c 7B68     		ldr	r3, [r7, #4]
 1133 006e 1B68     		ldr	r3, [r3]
 1134 0070 03F00803 		and	r3, r3, #8
 1135 0074 002B     		cmp	r3, #0
 1136 0076 05D0     		beq	.L84
 762:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 763:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 1137              		.loc 1 763 0
 1138 0078 524B     		ldr	r3, .L94+4
 1139 007a 9B68     		ldr	r3, [r3, #8]
 1140 007c 514A     		ldr	r2, .L94+4
 1141 007e 43F46043 		orr	r3, r3, #57344
 1142 0082 9360     		str	r3, [r2, #8]
 1143              	.L84:
 764:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 765:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 766:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Set the new HCLK clock divider */
 767:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 768:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 1144              		.loc 1 768 0
 1145 0084 4F4B     		ldr	r3, .L94+4
 1146 0086 9B68     		ldr	r3, [r3, #8]
 1147 0088 23F0F002 		bic	r2, r3, #240
 1148 008c 7B68     		ldr	r3, [r7, #4]
 1149 008e 9B68     		ldr	r3, [r3, #8]
 1150 0090 4C49     		ldr	r1, .L94+4
 1151 0092 1343     		orrs	r3, r3, r2
 1152 0094 8B60     		str	r3, [r1, #8]
 1153              	.L82:
 769:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 770:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
ARM GAS  /tmp/ccAgwjCz.s 			page 35


 771:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /*------------------------- SYSCLK Configuration ---------------------------*/
 772:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 1154              		.loc 1 772 0
 1155 0096 7B68     		ldr	r3, [r7, #4]
 1156 0098 1B68     		ldr	r3, [r3]
 1157 009a 03F00103 		and	r3, r3, #1
 1158 009e 002B     		cmp	r3, #0
 1159 00a0 40D0     		beq	.L85
 773:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 774:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 775:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 776:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* HSE is selected as System Clock Source */
 777:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 1160              		.loc 1 777 0
 1161 00a2 7B68     		ldr	r3, [r7, #4]
 1162 00a4 5B68     		ldr	r3, [r3, #4]
 1163 00a6 012B     		cmp	r3, #1
 1164 00a8 07D1     		bne	.L86
 778:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 779:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* Check the HSE ready flag */
 780:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 1165              		.loc 1 780 0
 1166 00aa 464B     		ldr	r3, .L94+4
 1167 00ac 1B68     		ldr	r3, [r3]
 1168 00ae 03F40033 		and	r3, r3, #131072
 1169 00b2 002B     		cmp	r3, #0
 1170 00b4 15D1     		bne	.L87
 781:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 782:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         return HAL_ERROR;
 1171              		.loc 1 782 0
 1172 00b6 0123     		movs	r3, #1
 1173 00b8 7DE0     		b	.L80
 1174              	.L86:
 783:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 784:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 785:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* PLL is selected as System Clock Source */
 786:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 1175              		.loc 1 786 0
 1176 00ba 7B68     		ldr	r3, [r7, #4]
 1177 00bc 5B68     		ldr	r3, [r3, #4]
 1178 00be 022B     		cmp	r3, #2
 1179 00c0 07D1     		bne	.L88
 787:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* Check the PLL ready flag */
 789:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 1180              		.loc 1 789 0
 1181 00c2 404B     		ldr	r3, .L94+4
 1182 00c4 1B68     		ldr	r3, [r3]
 1183 00c6 03F00073 		and	r3, r3, #33554432
 1184 00ca 002B     		cmp	r3, #0
 1185 00cc 09D1     		bne	.L87
 790:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 791:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         return HAL_ERROR;
 1186              		.loc 1 791 0
 1187 00ce 0123     		movs	r3, #1
 1188 00d0 71E0     		b	.L80
 1189              	.L88:
ARM GAS  /tmp/ccAgwjCz.s 			page 36


 792:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 793:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 794:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* HSI is selected as System Clock Source */
 795:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     else
 796:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 797:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* Check the HSI ready flag */
 798:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 1190              		.loc 1 798 0
 1191 00d2 3C4B     		ldr	r3, .L94+4
 1192 00d4 1B68     		ldr	r3, [r3]
 1193 00d6 03F00203 		and	r3, r3, #2
 1194 00da 002B     		cmp	r3, #0
 1195 00dc 01D1     		bne	.L87
 799:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 800:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         return HAL_ERROR;
 1196              		.loc 1 800 0
 1197 00de 0123     		movs	r3, #1
 1198 00e0 69E0     		b	.L80
 1199              	.L87:
 801:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 802:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 803:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 804:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 1200              		.loc 1 804 0
 1201 00e2 384B     		ldr	r3, .L94+4
 1202 00e4 9B68     		ldr	r3, [r3, #8]
 1203 00e6 23F00302 		bic	r2, r3, #3
 1204 00ea 7B68     		ldr	r3, [r7, #4]
 1205 00ec 5B68     		ldr	r3, [r3, #4]
 1206 00ee 3549     		ldr	r1, .L94+4
 1207 00f0 1343     		orrs	r3, r3, r2
 1208 00f2 8B60     		str	r3, [r1, #8]
 805:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 806:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Get Start Tick*/
 807:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     tickstart = HAL_GetTick();
 1209              		.loc 1 807 0
 1210 00f4 FFF7FEFF 		bl	HAL_GetTick
 1211 00f8 F860     		str	r0, [r7, #12]
 808:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 809:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 1212              		.loc 1 809 0
 1213 00fa 0AE0     		b	.L89
 1214              	.L90:
 810:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 811:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 1215              		.loc 1 811 0
 1216 00fc FFF7FEFF 		bl	HAL_GetTick
 1217 0100 0246     		mov	r2, r0
 1218 0102 FB68     		ldr	r3, [r7, #12]
 1219 0104 D31A     		subs	r3, r2, r3
 1220 0106 41F28832 		movw	r2, #5000
 1221 010a 9342     		cmp	r3, r2
 1222 010c 01D9     		bls	.L89
 812:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
 813:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         return HAL_TIMEOUT;
 1223              		.loc 1 813 0
 1224 010e 0323     		movs	r3, #3
ARM GAS  /tmp/ccAgwjCz.s 			page 37


 1225 0110 51E0     		b	.L80
 1226              	.L89:
 809:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 1227              		.loc 1 809 0
 1228 0112 2C4B     		ldr	r3, .L94+4
 1229 0114 9B68     		ldr	r3, [r3, #8]
 1230 0116 03F00C02 		and	r2, r3, #12
 1231 011a 7B68     		ldr	r3, [r7, #4]
 1232 011c 5B68     		ldr	r3, [r3, #4]
 1233 011e 9B00     		lsls	r3, r3, #2
 1234 0120 9A42     		cmp	r2, r3
 1235 0122 EBD1     		bne	.L90
 1236              	.L85:
 814:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
 815:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 816:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 817:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 818:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Decreasing the number of wait states because of lower CPU frequency */
 819:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if(FLatency < __HAL_FLASH_GET_LATENCY())
 1237              		.loc 1 819 0
 1238 0124 264B     		ldr	r3, .L94
 1239 0126 1B68     		ldr	r3, [r3]
 1240 0128 03F00F03 		and	r3, r3, #15
 1241 012c 3A68     		ldr	r2, [r7]
 1242 012e 9A42     		cmp	r2, r3
 1243 0130 10D2     		bcs	.L91
 820:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 821:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 822:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 1244              		.loc 1 822 0
 1245 0132 234B     		ldr	r3, .L94
 1246 0134 1B68     		ldr	r3, [r3]
 1247 0136 23F00F02 		bic	r2, r3, #15
 1248 013a 2149     		ldr	r1, .L94
 1249 013c 3B68     		ldr	r3, [r7]
 1250 013e 1343     		orrs	r3, r3, r2
 1251 0140 0B60     		str	r3, [r1]
 823:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 824:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 825:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     memory by reading the FLASH_ACR register */
 826:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     if(__HAL_FLASH_GET_LATENCY() != FLatency)
 1252              		.loc 1 826 0
 1253 0142 1F4B     		ldr	r3, .L94
 1254 0144 1B68     		ldr	r3, [r3]
 1255 0146 03F00F03 		and	r3, r3, #15
 1256 014a 3A68     		ldr	r2, [r7]
 1257 014c 9A42     		cmp	r2, r3
 1258 014e 01D0     		beq	.L91
 827:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
 828:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       return HAL_ERROR;
 1259              		.loc 1 828 0
 1260 0150 0123     		movs	r3, #1
 1261 0152 30E0     		b	.L80
 1262              	.L91:
 829:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
 830:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 831:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
ARM GAS  /tmp/ccAgwjCz.s 			page 38


 832:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /*-------------------------- PCLK1 Configuration ---------------------------*/
 833:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 1263              		.loc 1 833 0
 1264 0154 7B68     		ldr	r3, [r7, #4]
 1265 0156 1B68     		ldr	r3, [r3]
 1266 0158 03F00403 		and	r3, r3, #4
 1267 015c 002B     		cmp	r3, #0
 1268 015e 08D0     		beq	.L92
 834:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 835:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 836:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 1269              		.loc 1 836 0
 1270 0160 184B     		ldr	r3, .L94+4
 1271 0162 9B68     		ldr	r3, [r3, #8]
 1272 0164 23F4E052 		bic	r2, r3, #7168
 1273 0168 7B68     		ldr	r3, [r7, #4]
 1274 016a DB68     		ldr	r3, [r3, #12]
 1275 016c 1549     		ldr	r1, .L94+4
 1276 016e 1343     		orrs	r3, r3, r2
 1277 0170 8B60     		str	r3, [r1, #8]
 1278              	.L92:
 837:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 838:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 839:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /*-------------------------- PCLK2 Configuration ---------------------------*/
 840:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 1279              		.loc 1 840 0
 1280 0172 7B68     		ldr	r3, [r7, #4]
 1281 0174 1B68     		ldr	r3, [r3]
 1282 0176 03F00803 		and	r3, r3, #8
 1283 017a 002B     		cmp	r3, #0
 1284 017c 09D0     		beq	.L93
 841:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 842:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 843:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 1285              		.loc 1 843 0
 1286 017e 114B     		ldr	r3, .L94+4
 1287 0180 9B68     		ldr	r3, [r3, #8]
 1288 0182 23F46042 		bic	r2, r3, #57344
 1289 0186 7B68     		ldr	r3, [r7, #4]
 1290 0188 1B69     		ldr	r3, [r3, #16]
 1291 018a DB00     		lsls	r3, r3, #3
 1292 018c 0D49     		ldr	r1, .L94+4
 1293 018e 1343     		orrs	r3, r3, r2
 1294 0190 8B60     		str	r3, [r1, #8]
 1295              	.L93:
 844:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 845:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 846:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Update the SystemCoreClock global variable */
 847:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CF
 1296              		.loc 1 847 0
 1297 0192 FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 1298 0196 0146     		mov	r1, r0
 1299 0198 0A4B     		ldr	r3, .L94+4
 1300 019a 9B68     		ldr	r3, [r3, #8]
 1301 019c 1B09     		lsrs	r3, r3, #4
 1302 019e 03F00F03 		and	r3, r3, #15
 1303 01a2 094A     		ldr	r2, .L94+8
ARM GAS  /tmp/ccAgwjCz.s 			page 39


 1304 01a4 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1305 01a6 21FA03F3 		lsr	r3, r1, r3
 1306 01aa 084A     		ldr	r2, .L94+12
 1307 01ac 1360     		str	r3, [r2]
 848:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 849:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Configure the source of time base considering new system clocks settings*/
 850:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   HAL_InitTick (TICK_INT_PRIORITY);
 1308              		.loc 1 850 0
 1309 01ae 0020     		movs	r0, #0
 1310 01b0 FFF7FEFF 		bl	HAL_InitTick
 851:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 852:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   return HAL_OK;
 1311              		.loc 1 852 0
 1312 01b4 0023     		movs	r3, #0
 1313              	.L80:
 853:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** }
 1314              		.loc 1 853 0
 1315 01b6 1846     		mov	r0, r3
 1316 01b8 1037     		adds	r7, r7, #16
 1317              	.LCFI13:
 1318              		.cfi_def_cfa_offset 8
 1319 01ba BD46     		mov	sp, r7
 1320              	.LCFI14:
 1321              		.cfi_def_cfa_register 13
 1322              		@ sp needed
 1323 01bc 80BD     		pop	{r7, pc}
 1324              	.L95:
 1325 01be 00BF     		.align	2
 1326              	.L94:
 1327 01c0 003C0240 		.word	1073888256
 1328 01c4 00380240 		.word	1073887232
 1329 01c8 00000000 		.word	AHBPrescTable
 1330 01cc 00000000 		.word	SystemCoreClock
 1331              		.cfi_endproc
 1332              	.LFE140:
 1334              		.section	.text.HAL_RCC_MCOConfig,"ax",%progbits
 1335              		.align	1
 1336              		.global	HAL_RCC_MCOConfig
 1337              		.syntax unified
 1338              		.thumb
 1339              		.thumb_func
 1340              		.fpu fpv4-sp-d16
 1342              	HAL_RCC_MCOConfig:
 1343              	.LFB141:
 854:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 855:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /**
 856:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @}
 857:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
 858:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 859:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions_Group2 Peripheral Control functions
 860:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *  @brief   RCC clocks control functions
 861:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *
 862:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   @verbatim
 863:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   ===============================================================================
 864:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****                   ##### Peripheral Control functions #####
 865:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   ===============================================================================
 866:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     [..]
ARM GAS  /tmp/ccAgwjCz.s 			page 40


 867:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     This subsection provides a set of functions allowing to control the RCC Clocks
 868:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     frequencies.
 869:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 870:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** @endverbatim
 871:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @{
 872:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
 873:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 874:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /**
 875:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @brief  Selects the clock source to output on MCO1 pin(PA8) or on MCO2 pin(PC9).
 876:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note   PA8/PC9 should be configured in alternate function mode.
 877:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @param  RCC_MCOx specifies the output direction for the clock source.
 878:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 879:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            @arg RCC_MCO1: Clock source to output on MCO1 pin(PA8).
 880:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            @arg RCC_MCO2: Clock source to output on MCO2 pin(PC9).
 881:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @param  RCC_MCOSource specifies the clock source to output.
 882:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 883:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_HSI: HSI clock selected as MCO1 source
 884:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_LSE: LSE clock selected as MCO1 source
 885:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_HSE: HSE clock selected as MCO1 source
 886:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_PLLCLK: main PLL clock selected as MCO1 source
 887:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_SYSCLK: System clock (SYSCLK) selected as MCO2 source
 888:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_PLLI2SCLK: PLLI2S clock selected as MCO2 source
 889:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_HSE: HSE clock selected as MCO2 source
 890:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_PLLCLK: main PLL clock selected as MCO2 source
 891:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @param  RCC_MCODiv specifies the MCOx prescaler.
 892:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 893:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            @arg RCC_MCODIV_1: no division applied to MCOx clock
 894:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            @arg RCC_MCODIV_2: division by 2 applied to MCOx clock
 895:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            @arg RCC_MCODIV_3: division by 3 applied to MCOx clock
 896:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
 897:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
 898:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @retval None
 899:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
 900:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
 901:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** {
 1344              		.loc 1 901 0
 1345              		.cfi_startproc
 1346              		@ args = 0, pretend = 0, frame = 48
 1347              		@ frame_needed = 1, uses_anonymous_args = 0
 1348 0000 80B5     		push	{r7, lr}
 1349              	.LCFI15:
 1350              		.cfi_def_cfa_offset 8
 1351              		.cfi_offset 7, -8
 1352              		.cfi_offset 14, -4
 1353 0002 8CB0     		sub	sp, sp, #48
 1354              	.LCFI16:
 1355              		.cfi_def_cfa_offset 56
 1356 0004 00AF     		add	r7, sp, #0
 1357              	.LCFI17:
 1358              		.cfi_def_cfa_register 7
 1359 0006 F860     		str	r0, [r7, #12]
 1360 0008 B960     		str	r1, [r7, #8]
 1361 000a 7A60     		str	r2, [r7, #4]
 902:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   GPIO_InitTypeDef GPIO_InitStruct;
 903:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Check the parameters */
 904:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   assert_param(IS_RCC_MCO(RCC_MCOx));
 905:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   assert_param(IS_RCC_MCODIV(RCC_MCODiv));
ARM GAS  /tmp/ccAgwjCz.s 			page 41


 906:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* RCC_MCO1 */
 907:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if(RCC_MCOx == RCC_MCO1)
 1362              		.loc 1 907 0
 1363 000c FB68     		ldr	r3, [r7, #12]
 1364 000e 002B     		cmp	r3, #0
 1365 0010 27D1     		bne	.L97
 1366              	.LBB3:
 908:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 909:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
 910:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 911:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* MCO1 Clock Enable */
 912:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     MCO1_CLK_ENABLE();
 1367              		.loc 1 912 0
 1368 0012 2A4B     		ldr	r3, .L100
 1369 0014 1B6B     		ldr	r3, [r3, #48]
 1370 0016 294A     		ldr	r2, .L100
 1371 0018 43F00103 		orr	r3, r3, #1
 1372 001c 1363     		str	r3, [r2, #48]
 1373 001e 274B     		ldr	r3, .L100
 1374 0020 1B6B     		ldr	r3, [r3, #48]
 1375 0022 03F00103 		and	r3, r3, #1
 1376 0026 BB61     		str	r3, [r7, #24]
 1377 0028 BB69     		ldr	r3, [r7, #24]
 1378              	.LBE3:
 913:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 914:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Configure the MCO1 pin in alternate function mode */
 915:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     GPIO_InitStruct.Pin = MCO1_PIN;
 1379              		.loc 1 915 0
 1380 002a 4FF48073 		mov	r3, #256
 1381 002e FB61     		str	r3, [r7, #28]
 916:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 1382              		.loc 1 916 0
 1383 0030 0223     		movs	r3, #2
 1384 0032 3B62     		str	r3, [r7, #32]
 917:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 1385              		.loc 1 917 0
 1386 0034 0323     		movs	r3, #3
 1387 0036 BB62     		str	r3, [r7, #40]
 918:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 1388              		.loc 1 918 0
 1389 0038 0023     		movs	r3, #0
 1390 003a 7B62     		str	r3, [r7, #36]
 919:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 1391              		.loc 1 919 0
 1392 003c 0023     		movs	r3, #0
 1393 003e FB62     		str	r3, [r7, #44]
 920:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 1394              		.loc 1 920 0
 1395 0040 07F11C03 		add	r3, r7, #28
 1396 0044 1946     		mov	r1, r3
 1397 0046 1E48     		ldr	r0, .L100+4
 1398 0048 FFF7FEFF 		bl	HAL_GPIO_Init
 921:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 922:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
 923:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 1399              		.loc 1 923 0
 1400 004c 1B4B     		ldr	r3, .L100
ARM GAS  /tmp/ccAgwjCz.s 			page 42


 1401 004e 9B68     		ldr	r3, [r3, #8]
 1402 0050 23F0EC62 		bic	r2, r3, #123731968
 1403 0054 B968     		ldr	r1, [r7, #8]
 1404 0056 7B68     		ldr	r3, [r7, #4]
 1405 0058 0B43     		orrs	r3, r3, r1
 1406 005a 1849     		ldr	r1, .L100
 1407 005c 1343     		orrs	r3, r3, r2
 1408 005e 8B60     		str	r3, [r1, #8]
 924:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 925:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   else
 926:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
 927:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));
 928:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 929:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* MCO2 Clock Enable */
 930:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     MCO2_CLK_ENABLE();
 931:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 932:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Configure the MCO2 pin in alternate function mode */
 933:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     GPIO_InitStruct.Pin = MCO2_PIN;
 934:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 935:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 936:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 937:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 938:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 939:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 940:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
 941:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 942:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 943:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** }
 1409              		.loc 1 943 0
 1410 0060 27E0     		b	.L99
 1411              	.L97:
 1412              	.LBB4:
 930:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 1413              		.loc 1 930 0
 1414 0062 164B     		ldr	r3, .L100
 1415 0064 1B6B     		ldr	r3, [r3, #48]
 1416 0066 154A     		ldr	r2, .L100
 1417 0068 43F00403 		orr	r3, r3, #4
 1418 006c 1363     		str	r3, [r2, #48]
 1419 006e 134B     		ldr	r3, .L100
 1420 0070 1B6B     		ldr	r3, [r3, #48]
 1421 0072 03F00403 		and	r3, r3, #4
 1422 0076 7B61     		str	r3, [r7, #20]
 1423 0078 7B69     		ldr	r3, [r7, #20]
 1424              	.LBE4:
 933:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 1425              		.loc 1 933 0
 1426 007a 4FF40073 		mov	r3, #512
 1427 007e FB61     		str	r3, [r7, #28]
 934:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 1428              		.loc 1 934 0
 1429 0080 0223     		movs	r3, #2
 1430 0082 3B62     		str	r3, [r7, #32]
 935:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 1431              		.loc 1 935 0
 1432 0084 0323     		movs	r3, #3
 1433 0086 BB62     		str	r3, [r7, #40]
ARM GAS  /tmp/ccAgwjCz.s 			page 43


 936:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 1434              		.loc 1 936 0
 1435 0088 0023     		movs	r3, #0
 1436 008a 7B62     		str	r3, [r7, #36]
 937:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 1437              		.loc 1 937 0
 1438 008c 0023     		movs	r3, #0
 1439 008e FB62     		str	r3, [r7, #44]
 938:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 1440              		.loc 1 938 0
 1441 0090 07F11C03 		add	r3, r7, #28
 1442 0094 1946     		mov	r1, r3
 1443 0096 0B48     		ldr	r0, .L100+8
 1444 0098 FFF7FEFF 		bl	HAL_GPIO_Init
 941:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
 1445              		.loc 1 941 0
 1446 009c 074B     		ldr	r3, .L100
 1447 009e 9B68     		ldr	r3, [r3, #8]
 1448 00a0 23F07842 		bic	r2, r3, #-134217728
 1449 00a4 7B68     		ldr	r3, [r7, #4]
 1450 00a6 D900     		lsls	r1, r3, #3
 1451 00a8 BB68     		ldr	r3, [r7, #8]
 1452 00aa 0B43     		orrs	r3, r3, r1
 1453 00ac 0349     		ldr	r1, .L100
 1454 00ae 1343     		orrs	r3, r3, r2
 1455 00b0 8B60     		str	r3, [r1, #8]
 1456              	.L99:
 1457              		.loc 1 943 0
 1458 00b2 00BF     		nop
 1459 00b4 3037     		adds	r7, r7, #48
 1460              	.LCFI18:
 1461              		.cfi_def_cfa_offset 8
 1462 00b6 BD46     		mov	sp, r7
 1463              	.LCFI19:
 1464              		.cfi_def_cfa_register 13
 1465              		@ sp needed
 1466 00b8 80BD     		pop	{r7, pc}
 1467              	.L101:
 1468 00ba 00BF     		.align	2
 1469              	.L100:
 1470 00bc 00380240 		.word	1073887232
 1471 00c0 00000240 		.word	1073872896
 1472 00c4 00080240 		.word	1073874944
 1473              		.cfi_endproc
 1474              	.LFE141:
 1476              		.section	.text.HAL_RCC_EnableCSS,"ax",%progbits
 1477              		.align	1
 1478              		.global	HAL_RCC_EnableCSS
 1479              		.syntax unified
 1480              		.thumb
 1481              		.thumb_func
 1482              		.fpu fpv4-sp-d16
 1484              	HAL_RCC_EnableCSS:
 1485              	.LFB142:
 944:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 945:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /**
 946:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @brief  Enables the Clock Security System.
ARM GAS  /tmp/ccAgwjCz.s 			page 44


 947:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 948:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 949:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 950:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to
 951:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         the Cortex-M7 NMI (Non-Maskable Interrupt) exception vector.
 952:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @retval None
 953:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
 954:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** void HAL_RCC_EnableCSS(void)
 955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** {
 1486              		.loc 1 955 0
 1487              		.cfi_startproc
 1488              		@ args = 0, pretend = 0, frame = 0
 1489              		@ frame_needed = 1, uses_anonymous_args = 0
 1490              		@ link register save eliminated.
 1491 0000 80B4     		push	{r7}
 1492              	.LCFI20:
 1493              		.cfi_def_cfa_offset 4
 1494              		.cfi_offset 7, -4
 1495 0002 00AF     		add	r7, sp, #0
 1496              	.LCFI21:
 1497              		.cfi_def_cfa_register 7
 956:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   SET_BIT(RCC->CR, RCC_CR_CSSON);
 1498              		.loc 1 956 0
 1499 0004 054B     		ldr	r3, .L103
 1500 0006 1B68     		ldr	r3, [r3]
 1501 0008 044A     		ldr	r2, .L103
 1502 000a 43F40023 		orr	r3, r3, #524288
 1503 000e 1360     		str	r3, [r2]
 957:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** }
 1504              		.loc 1 957 0
 1505 0010 00BF     		nop
 1506 0012 BD46     		mov	sp, r7
 1507              	.LCFI22:
 1508              		.cfi_def_cfa_register 13
 1509              		@ sp needed
 1510 0014 5DF8047B 		ldr	r7, [sp], #4
 1511              	.LCFI23:
 1512              		.cfi_restore 7
 1513              		.cfi_def_cfa_offset 0
 1514 0018 7047     		bx	lr
 1515              	.L104:
 1516 001a 00BF     		.align	2
 1517              	.L103:
 1518 001c 00380240 		.word	1073887232
 1519              		.cfi_endproc
 1520              	.LFE142:
 1522              		.section	.text.HAL_RCC_DisableCSS,"ax",%progbits
 1523              		.align	1
 1524              		.global	HAL_RCC_DisableCSS
 1525              		.syntax unified
 1526              		.thumb
 1527              		.thumb_func
 1528              		.fpu fpv4-sp-d16
 1530              	HAL_RCC_DisableCSS:
 1531              	.LFB143:
 958:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 959:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /**
ARM GAS  /tmp/ccAgwjCz.s 			page 45


 960:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @brief  Disables the Clock Security System.
 961:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @retval None
 962:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
 963:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** void HAL_RCC_DisableCSS(void)
 964:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** {
 1532              		.loc 1 964 0
 1533              		.cfi_startproc
 1534              		@ args = 0, pretend = 0, frame = 0
 1535              		@ frame_needed = 1, uses_anonymous_args = 0
 1536              		@ link register save eliminated.
 1537 0000 80B4     		push	{r7}
 1538              	.LCFI24:
 1539              		.cfi_def_cfa_offset 4
 1540              		.cfi_offset 7, -4
 1541 0002 00AF     		add	r7, sp, #0
 1542              	.LCFI25:
 1543              		.cfi_def_cfa_register 7
 965:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_CSSON);
 1544              		.loc 1 965 0
 1545 0004 054B     		ldr	r3, .L106
 1546 0006 1B68     		ldr	r3, [r3]
 1547 0008 044A     		ldr	r2, .L106
 1548 000a 23F40023 		bic	r3, r3, #524288
 1549 000e 1360     		str	r3, [r2]
 966:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** }
 1550              		.loc 1 966 0
 1551 0010 00BF     		nop
 1552 0012 BD46     		mov	sp, r7
 1553              	.LCFI26:
 1554              		.cfi_def_cfa_register 13
 1555              		@ sp needed
 1556 0014 5DF8047B 		ldr	r7, [sp], #4
 1557              	.LCFI27:
 1558              		.cfi_restore 7
 1559              		.cfi_def_cfa_offset 0
 1560 0018 7047     		bx	lr
 1561              	.L107:
 1562 001a 00BF     		.align	2
 1563              	.L106:
 1564 001c 00380240 		.word	1073887232
 1565              		.cfi_endproc
 1566              	.LFE143:
 1568              		.global	__aeabi_uldivmod
 1569              		.section	.text.HAL_RCC_GetSysClockFreq,"ax",%progbits
 1570              		.align	1
 1571              		.global	HAL_RCC_GetSysClockFreq
 1572              		.syntax unified
 1573              		.thumb
 1574              		.thumb_func
 1575              		.fpu fpv4-sp-d16
 1577              	HAL_RCC_GetSysClockFreq:
 1578              	.LFB144:
 967:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
 968:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /**
 969:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @brief  Returns the SYSCLK frequency
 970:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *
 971:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note   The system frequency computed by this function is not the real
ARM GAS  /tmp/ccAgwjCz.s 			page 46


 972:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined
 973:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         constant and the selected clock source:
 974:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
 975:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE(**)
 976:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note     If SYSCLK source is PLL, function returns values based on HSE_VALUE(**)
 977:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *           or HSI_VALUE(*) multiplied/divided by the PLL factors.
 978:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f7xx_hal_conf.h file (default value
 979:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *               16 MHz) but the real value may vary depending on the variations
 980:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *               in voltage and temperature.
 981:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f7xx_hal_conf.h file (default value
 982:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *                25 MHz), user has to ensure that HSE_VALUE is same as the real
 983:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
 984:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *                have wrong result.
 985:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *
 986:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note   The result of this function could be not correct when using fractional
 987:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         value for HSE crystal.
 988:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *
 989:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note   This function can be used by the user application to compute the
 990:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         baudrate for the communication peripherals or configure other parameters.
 991:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *
 992:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note   Each time SYSCLK changes, this function must be called to update the
 993:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         right SYSCLK value. Otherwise, any configuration based on this function will be incorre
 994:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *
 995:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *
 996:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @retval SYSCLK frequency
 997:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
 998:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** uint32_t HAL_RCC_GetSysClockFreq(void)
 999:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** {
 1579              		.loc 1 999 0
 1580              		.cfi_startproc
 1581              		@ args = 0, pretend = 0, frame = 16
 1582              		@ frame_needed = 1, uses_anonymous_args = 0
 1583 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1584              	.LCFI28:
 1585              		.cfi_def_cfa_offset 20
 1586              		.cfi_offset 4, -20
 1587              		.cfi_offset 5, -16
 1588              		.cfi_offset 6, -12
 1589              		.cfi_offset 7, -8
 1590              		.cfi_offset 14, -4
 1591 0002 85B0     		sub	sp, sp, #20
 1592              	.LCFI29:
 1593              		.cfi_def_cfa_offset 40
 1594 0004 00AF     		add	r7, sp, #0
 1595              	.LCFI30:
 1596              		.cfi_def_cfa_register 7
1000:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   uint32_t pllm = 0, pllvco = 0, pllp = 0;
 1597              		.loc 1 1000 0
 1598 0006 0023     		movs	r3, #0
 1599 0008 7B60     		str	r3, [r7, #4]
 1600 000a 0023     		movs	r3, #0
 1601 000c FB60     		str	r3, [r7, #12]
 1602 000e 0023     		movs	r3, #0
 1603 0010 3B60     		str	r3, [r7]
1001:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   uint32_t sysclockfreq = 0;
 1604              		.loc 1 1001 0
 1605 0012 0023     		movs	r3, #0
ARM GAS  /tmp/ccAgwjCz.s 			page 47


 1606 0014 BB60     		str	r3, [r7, #8]
1002:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
1003:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
1004:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   switch (RCC->CFGR & RCC_CFGR_SWS)
 1607              		.loc 1 1004 0
 1608 0016 634B     		ldr	r3, .L118
 1609 0018 9B68     		ldr	r3, [r3, #8]
 1610 001a 03F00C03 		and	r3, r3, #12
 1611 001e 042B     		cmp	r3, #4
 1612 0020 07D0     		beq	.L110
 1613 0022 082B     		cmp	r3, #8
 1614 0024 08D0     		beq	.L111
 1615 0026 002B     		cmp	r3, #0
 1616 0028 40F0B480 		bne	.L117
1005:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
1006:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
1007:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
1008:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       sysclockfreq = HSI_VALUE;
 1617              		.loc 1 1008 0
 1618 002c 5E4B     		ldr	r3, .L118+4
 1619 002e BB60     		str	r3, [r7, #8]
1009:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****        break;
 1620              		.loc 1 1009 0
 1621 0030 B3E0     		b	.L113
 1622              	.L110:
1010:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
1011:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
1012:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
1013:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       sysclockfreq = HSE_VALUE;
 1623              		.loc 1 1013 0
 1624 0032 5E4B     		ldr	r3, .L118+8
 1625 0034 BB60     		str	r3, [r7, #8]
1014:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       break;
 1626              		.loc 1 1014 0
 1627 0036 B0E0     		b	.L113
 1628              	.L111:
1015:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
1016:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
1017:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
1018:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
1019:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       SYSCLK = PLL_VCO / PLLP */
1020:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 1629              		.loc 1 1020 0
 1630 0038 5A4B     		ldr	r3, .L118
 1631 003a 5B68     		ldr	r3, [r3, #4]
 1632 003c 03F03F03 		and	r3, r3, #63
 1633 0040 7B60     		str	r3, [r7, #4]
1021:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 1634              		.loc 1 1021 0
 1635 0042 584B     		ldr	r3, .L118
 1636 0044 5B68     		ldr	r3, [r3, #4]
 1637 0046 03F48003 		and	r3, r3, #4194304
 1638 004a 002B     		cmp	r3, #0
 1639 004c 4AD0     		beq	.L114
1022:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
1023:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* HSE used as PLL clock source */
1024:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN
ARM GAS  /tmp/ccAgwjCz.s 			page 48


 1640              		.loc 1 1024 0
 1641 004e 554B     		ldr	r3, .L118
 1642 0050 5B68     		ldr	r3, [r3, #4]
 1643 0052 9B09     		lsrs	r3, r3, #6
 1644 0054 4FF00004 		mov	r4, #0
 1645 0058 40F2FF11 		movw	r1, #511
 1646 005c 4FF00002 		mov	r2, #0
 1647 0060 03EA0105 		and	r5, r3, r1
 1648 0064 04EA0206 		and	r6, r4, r2
 1649 0068 2946     		mov	r1, r5
 1650 006a 3246     		mov	r2, r6
 1651 006c 4FF00003 		mov	r3, #0
 1652 0070 4FF00004 		mov	r4, #0
 1653 0074 5401     		lsls	r4, r2, #5
 1654 0076 44EAD164 		orr	r4, r4, r1, lsr #27
 1655 007a 4B01     		lsls	r3, r1, #5
 1656 007c 1946     		mov	r1, r3
 1657 007e 2246     		mov	r2, r4
 1658 0080 491B     		subs	r1, r1, r5
 1659 0082 62EB0602 		sbc	r2, r2, r6
 1660 0086 4FF00003 		mov	r3, #0
 1661 008a 4FF00004 		mov	r4, #0
 1662 008e 9401     		lsls	r4, r2, #6
 1663 0090 44EA9164 		orr	r4, r4, r1, lsr #26
 1664 0094 8B01     		lsls	r3, r1, #6
 1665 0096 5B1A     		subs	r3, r3, r1
 1666 0098 64EB0204 		sbc	r4, r4, r2
 1667 009c 4FF00001 		mov	r1, #0
 1668 00a0 4FF00002 		mov	r2, #0
 1669 00a4 E200     		lsls	r2, r4, #3
 1670 00a6 42EA5372 		orr	r2, r2, r3, lsr #29
 1671 00aa D900     		lsls	r1, r3, #3
 1672 00ac 0B46     		mov	r3, r1
 1673 00ae 1446     		mov	r4, r2
 1674 00b0 5B19     		adds	r3, r3, r5
 1675 00b2 44EB0604 		adc	r4, r4, r6
 1676 00b6 4FF00001 		mov	r1, #0
 1677 00ba 4FF00002 		mov	r2, #0
 1678 00be 6202     		lsls	r2, r4, #9
 1679 00c0 42EAD352 		orr	r2, r2, r3, lsr #23
 1680 00c4 5902     		lsls	r1, r3, #9
 1681 00c6 0B46     		mov	r3, r1
 1682 00c8 1446     		mov	r4, r2
 1683 00ca 1846     		mov	r0, r3
 1684 00cc 2146     		mov	r1, r4
 1685 00ce 7B68     		ldr	r3, [r7, #4]
 1686 00d0 4FF00004 		mov	r4, #0
 1687 00d4 1A46     		mov	r2, r3
 1688 00d6 2346     		mov	r3, r4
 1689 00d8 FFF7FEFF 		bl	__aeabi_uldivmod
 1690              	.LVL0:
 1691 00dc 0346     		mov	r3, r0
 1692 00de 0C46     		mov	r4, r1
 1693 00e0 FB60     		str	r3, [r7, #12]
 1694 00e2 49E0     		b	.L115
 1695              	.L114:
1025:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
ARM GAS  /tmp/ccAgwjCz.s 			page 49


1026:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       else
1027:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       {
1028:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         /* HSI used as PLL clock source */
1029:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****         pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN
 1696              		.loc 1 1029 0
 1697 00e4 2F4B     		ldr	r3, .L118
 1698 00e6 5B68     		ldr	r3, [r3, #4]
 1699 00e8 9B09     		lsrs	r3, r3, #6
 1700 00ea 4FF00004 		mov	r4, #0
 1701 00ee 40F2FF11 		movw	r1, #511
 1702 00f2 4FF00002 		mov	r2, #0
 1703 00f6 03EA0105 		and	r5, r3, r1
 1704 00fa 04EA0206 		and	r6, r4, r2
 1705 00fe 2946     		mov	r1, r5
 1706 0100 3246     		mov	r2, r6
 1707 0102 4FF00003 		mov	r3, #0
 1708 0106 4FF00004 		mov	r4, #0
 1709 010a 5401     		lsls	r4, r2, #5
 1710 010c 44EAD164 		orr	r4, r4, r1, lsr #27
 1711 0110 4B01     		lsls	r3, r1, #5
 1712 0112 1946     		mov	r1, r3
 1713 0114 2246     		mov	r2, r4
 1714 0116 491B     		subs	r1, r1, r5
 1715 0118 62EB0602 		sbc	r2, r2, r6
 1716 011c 4FF00003 		mov	r3, #0
 1717 0120 4FF00004 		mov	r4, #0
 1718 0124 9401     		lsls	r4, r2, #6
 1719 0126 44EA9164 		orr	r4, r4, r1, lsr #26
 1720 012a 8B01     		lsls	r3, r1, #6
 1721 012c 5B1A     		subs	r3, r3, r1
 1722 012e 64EB0204 		sbc	r4, r4, r2
 1723 0132 4FF00001 		mov	r1, #0
 1724 0136 4FF00002 		mov	r2, #0
 1725 013a E200     		lsls	r2, r4, #3
 1726 013c 42EA5372 		orr	r2, r2, r3, lsr #29
 1727 0140 D900     		lsls	r1, r3, #3
 1728 0142 0B46     		mov	r3, r1
 1729 0144 1446     		mov	r4, r2
 1730 0146 5B19     		adds	r3, r3, r5
 1731 0148 44EB0604 		adc	r4, r4, r6
 1732 014c 4FF00001 		mov	r1, #0
 1733 0150 4FF00002 		mov	r2, #0
 1734 0154 A202     		lsls	r2, r4, #10
 1735 0156 42EA9352 		orr	r2, r2, r3, lsr #22
 1736 015a 9902     		lsls	r1, r3, #10
 1737 015c 0B46     		mov	r3, r1
 1738 015e 1446     		mov	r4, r2
 1739 0160 1846     		mov	r0, r3
 1740 0162 2146     		mov	r1, r4
 1741 0164 7B68     		ldr	r3, [r7, #4]
 1742 0166 4FF00004 		mov	r4, #0
 1743 016a 1A46     		mov	r2, r3
 1744 016c 2346     		mov	r3, r4
 1745 016e FFF7FEFF 		bl	__aeabi_uldivmod
 1746              	.LVL1:
 1747 0172 0346     		mov	r3, r0
 1748 0174 0C46     		mov	r4, r1
ARM GAS  /tmp/ccAgwjCz.s 			page 50


 1749 0176 FB60     		str	r3, [r7, #12]
 1750              	.L115:
1030:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       }
1031:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 1751              		.loc 1 1031 0
 1752 0178 0A4B     		ldr	r3, .L118
 1753 017a 5B68     		ldr	r3, [r3, #4]
 1754 017c 1B0C     		lsrs	r3, r3, #16
 1755 017e 03F00303 		and	r3, r3, #3
 1756 0182 0133     		adds	r3, r3, #1
 1757 0184 5B00     		lsls	r3, r3, #1
 1758 0186 3B60     		str	r3, [r7]
1032:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
1033:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       sysclockfreq = pllvco/pllp;
 1759              		.loc 1 1033 0
 1760 0188 FA68     		ldr	r2, [r7, #12]
 1761 018a 3B68     		ldr	r3, [r7]
 1762 018c B2FBF3F3 		udiv	r3, r2, r3
 1763 0190 BB60     		str	r3, [r7, #8]
1034:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       break;
 1764              		.loc 1 1034 0
 1765 0192 02E0     		b	.L113
 1766              	.L117:
1035:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
1036:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     default:
1037:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     {
1038:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       sysclockfreq = HSI_VALUE;
 1767              		.loc 1 1038 0
 1768 0194 044B     		ldr	r3, .L118+4
 1769 0196 BB60     		str	r3, [r7, #8]
1039:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****       break;
 1770              		.loc 1 1039 0
 1771 0198 00BF     		nop
 1772              	.L113:
1040:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     }
1041:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
1042:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   return sysclockfreq;
 1773              		.loc 1 1042 0
 1774 019a BB68     		ldr	r3, [r7, #8]
1043:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** }
 1775              		.loc 1 1043 0
 1776 019c 1846     		mov	r0, r3
 1777 019e 1437     		adds	r7, r7, #20
 1778              	.LCFI31:
 1779              		.cfi_def_cfa_offset 20
 1780 01a0 BD46     		mov	sp, r7
 1781              	.LCFI32:
 1782              		.cfi_def_cfa_register 13
 1783              		@ sp needed
 1784 01a2 F0BD     		pop	{r4, r5, r6, r7, pc}
 1785              	.L119:
 1786              		.align	2
 1787              	.L118:
 1788 01a4 00380240 		.word	1073887232
 1789 01a8 0024F400 		.word	16000000
 1790 01ac 00127A00 		.word	8000000
 1791              		.cfi_endproc
ARM GAS  /tmp/ccAgwjCz.s 			page 51


 1792              	.LFE144:
 1794              		.section	.text.HAL_RCC_GetHCLKFreq,"ax",%progbits
 1795              		.align	1
 1796              		.global	HAL_RCC_GetHCLKFreq
 1797              		.syntax unified
 1798              		.thumb
 1799              		.thumb_func
 1800              		.fpu fpv4-sp-d16
 1802              	HAL_RCC_GetHCLKFreq:
 1803              	.LFB145:
1044:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
1045:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /**
1046:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @brief  Returns the HCLK frequency
1047:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note   Each time HCLK changes, this function must be called to update the
1048:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         right HCLK value. Otherwise, any configuration based on this function will be incorrect
1049:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
1050:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @retval HCLK frequency
1051:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
1052:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** uint32_t HAL_RCC_GetHCLKFreq(void)
1053:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** {
 1804              		.loc 1 1053 0
 1805              		.cfi_startproc
 1806              		@ args = 0, pretend = 0, frame = 0
 1807              		@ frame_needed = 1, uses_anonymous_args = 0
 1808              		@ link register save eliminated.
 1809 0000 80B4     		push	{r7}
 1810              	.LCFI33:
 1811              		.cfi_def_cfa_offset 4
 1812              		.cfi_offset 7, -4
 1813 0002 00AF     		add	r7, sp, #0
 1814              	.LCFI34:
 1815              		.cfi_def_cfa_register 7
1054:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   return SystemCoreClock;
 1816              		.loc 1 1054 0
 1817 0004 034B     		ldr	r3, .L122
 1818 0006 1B68     		ldr	r3, [r3]
1055:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** }
 1819              		.loc 1 1055 0
 1820 0008 1846     		mov	r0, r3
 1821 000a BD46     		mov	sp, r7
 1822              	.LCFI35:
 1823              		.cfi_def_cfa_register 13
 1824              		@ sp needed
 1825 000c 5DF8047B 		ldr	r7, [sp], #4
 1826              	.LCFI36:
 1827              		.cfi_restore 7
 1828              		.cfi_def_cfa_offset 0
 1829 0010 7047     		bx	lr
 1830              	.L123:
 1831 0012 00BF     		.align	2
 1832              	.L122:
 1833 0014 00000000 		.word	SystemCoreClock
 1834              		.cfi_endproc
 1835              	.LFE145:
 1837              		.section	.text.HAL_RCC_GetPCLK1Freq,"ax",%progbits
 1838              		.align	1
 1839              		.global	HAL_RCC_GetPCLK1Freq
ARM GAS  /tmp/ccAgwjCz.s 			page 52


 1840              		.syntax unified
 1841              		.thumb
 1842              		.thumb_func
 1843              		.fpu fpv4-sp-d16
 1845              	HAL_RCC_GetPCLK1Freq:
 1846              	.LFB146:
1056:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
1057:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /**
1058:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @brief  Returns the PCLK1 frequency
1059:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note   Each time PCLK1 changes, this function must be called to update the
1060:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrec
1061:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @retval PCLK1 frequency
1062:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
1063:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** uint32_t HAL_RCC_GetPCLK1Freq(void)
1064:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** {
 1847              		.loc 1 1064 0
 1848              		.cfi_startproc
 1849              		@ args = 0, pretend = 0, frame = 0
 1850              		@ frame_needed = 1, uses_anonymous_args = 0
 1851 0000 80B5     		push	{r7, lr}
 1852              	.LCFI37:
 1853              		.cfi_def_cfa_offset 8
 1854              		.cfi_offset 7, -8
 1855              		.cfi_offset 14, -4
 1856 0002 00AF     		add	r7, sp, #0
 1857              	.LCFI38:
 1858              		.cfi_def_cfa_register 7
1065:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
1066:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]
 1859              		.loc 1 1066 0
 1860 0004 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1861 0008 0146     		mov	r1, r0
 1862 000a 054B     		ldr	r3, .L126
 1863 000c 9B68     		ldr	r3, [r3, #8]
 1864 000e 9B0A     		lsrs	r3, r3, #10
 1865 0010 03F00703 		and	r3, r3, #7
 1866 0014 034A     		ldr	r2, .L126+4
 1867 0016 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1868 0018 21FA03F3 		lsr	r3, r1, r3
1067:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** }
 1869              		.loc 1 1067 0
 1870 001c 1846     		mov	r0, r3
 1871 001e 80BD     		pop	{r7, pc}
 1872              	.L127:
 1873              		.align	2
 1874              	.L126:
 1875 0020 00380240 		.word	1073887232
 1876 0024 00000000 		.word	APBPrescTable
 1877              		.cfi_endproc
 1878              	.LFE146:
 1880              		.section	.text.HAL_RCC_GetPCLK2Freq,"ax",%progbits
 1881              		.align	1
 1882              		.global	HAL_RCC_GetPCLK2Freq
 1883              		.syntax unified
 1884              		.thumb
 1885              		.thumb_func
 1886              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccAgwjCz.s 			page 53


 1888              	HAL_RCC_GetPCLK2Freq:
 1889              	.LFB147:
1068:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
1069:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /**
1070:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @brief  Returns the PCLK2 frequency
1071:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note   Each time PCLK2 changes, this function must be called to update the
1072:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrec
1073:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @retval PCLK2 frequency
1074:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
1075:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** uint32_t HAL_RCC_GetPCLK2Freq(void)
1076:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** {
 1890              		.loc 1 1076 0
 1891              		.cfi_startproc
 1892              		@ args = 0, pretend = 0, frame = 0
 1893              		@ frame_needed = 1, uses_anonymous_args = 0
 1894 0000 80B5     		push	{r7, lr}
 1895              	.LCFI39:
 1896              		.cfi_def_cfa_offset 8
 1897              		.cfi_offset 7, -8
 1898              		.cfi_offset 14, -4
 1899 0002 00AF     		add	r7, sp, #0
 1900              	.LCFI40:
 1901              		.cfi_def_cfa_register 7
1077:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
1078:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos])
 1902              		.loc 1 1078 0
 1903 0004 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1904 0008 0146     		mov	r1, r0
 1905 000a 054B     		ldr	r3, .L130
 1906 000c 9B68     		ldr	r3, [r3, #8]
 1907 000e 5B0B     		lsrs	r3, r3, #13
 1908 0010 03F00703 		and	r3, r3, #7
 1909 0014 034A     		ldr	r2, .L130+4
 1910 0016 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1911 0018 21FA03F3 		lsr	r3, r1, r3
1079:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** }
 1912              		.loc 1 1079 0
 1913 001c 1846     		mov	r0, r3
 1914 001e 80BD     		pop	{r7, pc}
 1915              	.L131:
 1916              		.align	2
 1917              	.L130:
 1918 0020 00380240 		.word	1073887232
 1919 0024 00000000 		.word	APBPrescTable
 1920              		.cfi_endproc
 1921              	.LFE147:
 1923              		.section	.text.HAL_RCC_GetOscConfig,"ax",%progbits
 1924              		.align	1
 1925              		.global	HAL_RCC_GetOscConfig
 1926              		.syntax unified
 1927              		.thumb
 1928              		.thumb_func
 1929              		.fpu fpv4-sp-d16
 1931              	HAL_RCC_GetOscConfig:
 1932              	.LFB148:
1080:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
1081:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /**
ARM GAS  /tmp/ccAgwjCz.s 			page 54


1082:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @brief  Configures the RCC_OscInitStruct according to the internal
1083:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * RCC configuration registers.
1084:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
1085:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * will be configured.
1086:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @retval None
1087:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
1088:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
1089:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** {
 1933              		.loc 1 1089 0
 1934              		.cfi_startproc
 1935              		@ args = 0, pretend = 0, frame = 8
 1936              		@ frame_needed = 1, uses_anonymous_args = 0
 1937              		@ link register save eliminated.
 1938 0000 80B4     		push	{r7}
 1939              	.LCFI41:
 1940              		.cfi_def_cfa_offset 4
 1941              		.cfi_offset 7, -4
 1942 0002 83B0     		sub	sp, sp, #12
 1943              	.LCFI42:
 1944              		.cfi_def_cfa_offset 16
 1945 0004 00AF     		add	r7, sp, #0
 1946              	.LCFI43:
 1947              		.cfi_def_cfa_register 7
 1948 0006 7860     		str	r0, [r7, #4]
1090:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Set all possible values for the Oscillator type parameter ---------------*/
1091:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLA
 1949              		.loc 1 1091 0
 1950 0008 7B68     		ldr	r3, [r7, #4]
 1951 000a 0F22     		movs	r2, #15
 1952 000c 1A60     		str	r2, [r3]
1092:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
1093:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Get the HSE configuration -----------------------------------------------*/
1094:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 1953              		.loc 1 1094 0
 1954 000e 454B     		ldr	r3, .L145
 1955 0010 1B68     		ldr	r3, [r3]
 1956 0012 03F48023 		and	r3, r3, #262144
 1957 0016 B3F5802F 		cmp	r3, #262144
 1958 001a 04D1     		bne	.L133
1095:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
1096:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 1959              		.loc 1 1096 0
 1960 001c 7B68     		ldr	r3, [r7, #4]
 1961 001e 4FF4A022 		mov	r2, #327680
 1962 0022 5A60     		str	r2, [r3, #4]
 1963 0024 0EE0     		b	.L134
 1964              	.L133:
1097:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
1098:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 1965              		.loc 1 1098 0
 1966 0026 3F4B     		ldr	r3, .L145
 1967 0028 1B68     		ldr	r3, [r3]
 1968 002a 03F48033 		and	r3, r3, #65536
 1969 002e B3F5803F 		cmp	r3, #65536
 1970 0032 04D1     		bne	.L135
1099:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
1100:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_ON;
ARM GAS  /tmp/ccAgwjCz.s 			page 55


 1971              		.loc 1 1100 0
 1972 0034 7B68     		ldr	r3, [r7, #4]
 1973 0036 4FF48032 		mov	r2, #65536
 1974 003a 5A60     		str	r2, [r3, #4]
 1975 003c 02E0     		b	.L134
 1976              	.L135:
1101:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
1102:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   else
1103:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
1104:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 1977              		.loc 1 1104 0
 1978 003e 7B68     		ldr	r3, [r7, #4]
 1979 0040 0022     		movs	r2, #0
 1980 0042 5A60     		str	r2, [r3, #4]
 1981              	.L134:
1105:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
1106:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
1107:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Get the HSI configuration -----------------------------------------------*/
1108:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 1982              		.loc 1 1108 0
 1983 0044 374B     		ldr	r3, .L145
 1984 0046 1B68     		ldr	r3, [r3]
 1985 0048 03F00103 		and	r3, r3, #1
 1986 004c 012B     		cmp	r3, #1
 1987 004e 03D1     		bne	.L136
1109:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
1110:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 1988              		.loc 1 1110 0
 1989 0050 7B68     		ldr	r3, [r7, #4]
 1990 0052 0122     		movs	r2, #1
 1991 0054 DA60     		str	r2, [r3, #12]
 1992 0056 02E0     		b	.L137
 1993              	.L136:
1111:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
1112:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   else
1113:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
1114:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 1994              		.loc 1 1114 0
 1995 0058 7B68     		ldr	r3, [r7, #4]
 1996 005a 0022     		movs	r2, #0
 1997 005c DA60     		str	r2, [r3, #12]
 1998              	.L137:
1115:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
1116:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
1117:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_P
 1999              		.loc 1 1117 0
 2000 005e 314B     		ldr	r3, .L145
 2001 0060 1B68     		ldr	r3, [r3]
 2002 0062 DB08     		lsrs	r3, r3, #3
 2003 0064 03F01F02 		and	r2, r3, #31
 2004 0068 7B68     		ldr	r3, [r7, #4]
 2005 006a 1A61     		str	r2, [r3, #16]
1118:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
1119:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Get the LSE configuration -----------------------------------------------*/
1120:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 2006              		.loc 1 1120 0
 2007 006c 2D4B     		ldr	r3, .L145
ARM GAS  /tmp/ccAgwjCz.s 			page 56


 2008 006e 1B6F     		ldr	r3, [r3, #112]
 2009 0070 03F00403 		and	r3, r3, #4
 2010 0074 042B     		cmp	r3, #4
 2011 0076 03D1     		bne	.L138
1121:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
1122:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 2012              		.loc 1 1122 0
 2013 0078 7B68     		ldr	r3, [r7, #4]
 2014 007a 0522     		movs	r2, #5
 2015 007c 9A60     		str	r2, [r3, #8]
 2016 007e 0CE0     		b	.L139
 2017              	.L138:
1123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
1124:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 2018              		.loc 1 1124 0
 2019 0080 284B     		ldr	r3, .L145
 2020 0082 1B6F     		ldr	r3, [r3, #112]
 2021 0084 03F00103 		and	r3, r3, #1
 2022 0088 012B     		cmp	r3, #1
 2023 008a 03D1     		bne	.L140
1125:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
1126:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 2024              		.loc 1 1126 0
 2025 008c 7B68     		ldr	r3, [r7, #4]
 2026 008e 0122     		movs	r2, #1
 2027 0090 9A60     		str	r2, [r3, #8]
 2028 0092 02E0     		b	.L139
 2029              	.L140:
1127:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
1128:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   else
1129:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
1130:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 2030              		.loc 1 1130 0
 2031 0094 7B68     		ldr	r3, [r7, #4]
 2032 0096 0022     		movs	r2, #0
 2033 0098 9A60     		str	r2, [r3, #8]
 2034              	.L139:
1131:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
1132:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
1133:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Get the LSI configuration -----------------------------------------------*/
1134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 2035              		.loc 1 1134 0
 2036 009a 224B     		ldr	r3, .L145
 2037 009c 5B6F     		ldr	r3, [r3, #116]
 2038 009e 03F00103 		and	r3, r3, #1
 2039 00a2 012B     		cmp	r3, #1
 2040 00a4 03D1     		bne	.L141
1135:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
1136:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 2041              		.loc 1 1136 0
 2042 00a6 7B68     		ldr	r3, [r7, #4]
 2043 00a8 0122     		movs	r2, #1
 2044 00aa 5A61     		str	r2, [r3, #20]
 2045 00ac 02E0     		b	.L142
 2046              	.L141:
1137:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
1138:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   else
ARM GAS  /tmp/ccAgwjCz.s 			page 57


1139:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
1140:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 2047              		.loc 1 1140 0
 2048 00ae 7B68     		ldr	r3, [r7, #4]
 2049 00b0 0022     		movs	r2, #0
 2050 00b2 5A61     		str	r2, [r3, #20]
 2051              	.L142:
1141:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
1142:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
1143:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Get the PLL configuration -----------------------------------------------*/
1144:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 2052              		.loc 1 1144 0
 2053 00b4 1B4B     		ldr	r3, .L145
 2054 00b6 1B68     		ldr	r3, [r3]
 2055 00b8 03F08073 		and	r3, r3, #16777216
 2056 00bc B3F1807F 		cmp	r3, #16777216
 2057 00c0 03D1     		bne	.L143
1145:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
1146:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 2058              		.loc 1 1146 0
 2059 00c2 7B68     		ldr	r3, [r7, #4]
 2060 00c4 0222     		movs	r2, #2
 2061 00c6 9A61     		str	r2, [r3, #24]
 2062 00c8 02E0     		b	.L144
 2063              	.L143:
1147:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
1148:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   else
1149:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
1150:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 2064              		.loc 1 1150 0
 2065 00ca 7B68     		ldr	r3, [r7, #4]
 2066 00cc 0122     		movs	r2, #1
 2067 00ce 9A61     		str	r2, [r3, #24]
 2068              	.L144:
1151:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
1152:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 2069              		.loc 1 1152 0
 2070 00d0 144B     		ldr	r3, .L145
 2071 00d2 5B68     		ldr	r3, [r3, #4]
 2072 00d4 03F48002 		and	r2, r3, #4194304
 2073 00d8 7B68     		ldr	r3, [r7, #4]
 2074 00da DA61     		str	r2, [r3, #28]
1153:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 2075              		.loc 1 1153 0
 2076 00dc 114B     		ldr	r3, .L145
 2077 00de 5B68     		ldr	r3, [r3, #4]
 2078 00e0 03F03F02 		and	r2, r3, #63
 2079 00e4 7B68     		ldr	r3, [r7, #4]
 2080 00e6 1A62     		str	r2, [r3, #32]
1154:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Po
 2081              		.loc 1 1154 0
 2082 00e8 0E4B     		ldr	r3, .L145
 2083 00ea 5B68     		ldr	r3, [r3, #4]
 2084 00ec 9B09     		lsrs	r3, r3, #6
 2085 00ee C3F30802 		ubfx	r2, r3, #0, #9
 2086 00f2 7B68     		ldr	r3, [r7, #4]
 2087 00f4 5A62     		str	r2, [r3, #36]
ARM GAS  /tmp/ccAgwjCz.s 			page 58


1155:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0
 2088              		.loc 1 1155 0
 2089 00f6 0B4B     		ldr	r3, .L145
 2090 00f8 5B68     		ldr	r3, [r3, #4]
 2091 00fa 03F44033 		and	r3, r3, #196608
 2092 00fe 03F58033 		add	r3, r3, #65536
 2093 0102 5B00     		lsls	r3, r3, #1
 2094 0104 1A0C     		lsrs	r2, r3, #16
 2095 0106 7B68     		ldr	r3, [r7, #4]
 2096 0108 9A62     		str	r2, [r3, #40]
1156:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Po
 2097              		.loc 1 1156 0
 2098 010a 064B     		ldr	r3, .L145
 2099 010c 5B68     		ldr	r3, [r3, #4]
 2100 010e 1B0E     		lsrs	r3, r3, #24
 2101 0110 03F00F02 		and	r2, r3, #15
 2102 0114 7B68     		ldr	r3, [r7, #4]
 2103 0116 DA62     		str	r2, [r3, #44]
1157:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** #if defined (RCC_PLLCFGR_PLLR)
1158:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLR = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PL
1159:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** #endif
1160:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** }
 2104              		.loc 1 1160 0
 2105 0118 00BF     		nop
 2106 011a 0C37     		adds	r7, r7, #12
 2107              	.LCFI44:
 2108              		.cfi_def_cfa_offset 4
 2109 011c BD46     		mov	sp, r7
 2110              	.LCFI45:
 2111              		.cfi_def_cfa_register 13
 2112              		@ sp needed
 2113 011e 5DF8047B 		ldr	r7, [sp], #4
 2114              	.LCFI46:
 2115              		.cfi_restore 7
 2116              		.cfi_def_cfa_offset 0
 2117 0122 7047     		bx	lr
 2118              	.L146:
 2119              		.align	2
 2120              	.L145:
 2121 0124 00380240 		.word	1073887232
 2122              		.cfi_endproc
 2123              	.LFE148:
 2125              		.section	.text.HAL_RCC_GetClockConfig,"ax",%progbits
 2126              		.align	1
 2127              		.global	HAL_RCC_GetClockConfig
 2128              		.syntax unified
 2129              		.thumb
 2130              		.thumb_func
 2131              		.fpu fpv4-sp-d16
 2133              	HAL_RCC_GetClockConfig:
 2134              	.LFB149:
1161:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
1162:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /**
1163:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @brief  Configures the RCC_ClkInitStruct according to the internal
1164:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * RCC configuration registers.
1165:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @param  RCC_ClkInitStruct pointer to an RCC_ClkInitTypeDef structure that
1166:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * will be configured.
ARM GAS  /tmp/ccAgwjCz.s 			page 59


1167:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @param  pFLatency Pointer on the Flash Latency.
1168:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @retval None
1169:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
1170:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
1171:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** {
 2135              		.loc 1 1171 0
 2136              		.cfi_startproc
 2137              		@ args = 0, pretend = 0, frame = 8
 2138              		@ frame_needed = 1, uses_anonymous_args = 0
 2139              		@ link register save eliminated.
 2140 0000 80B4     		push	{r7}
 2141              	.LCFI47:
 2142              		.cfi_def_cfa_offset 4
 2143              		.cfi_offset 7, -4
 2144 0002 83B0     		sub	sp, sp, #12
 2145              	.LCFI48:
 2146              		.cfi_def_cfa_offset 16
 2147 0004 00AF     		add	r7, sp, #0
 2148              	.LCFI49:
 2149              		.cfi_def_cfa_register 7
 2150 0006 7860     		str	r0, [r7, #4]
 2151 0008 3960     		str	r1, [r7]
1172:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Set all possible values for the Clock type parameter --------------------*/
1173:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | 
 2152              		.loc 1 1173 0
 2153 000a 7B68     		ldr	r3, [r7, #4]
 2154 000c 0F22     		movs	r2, #15
 2155 000e 1A60     		str	r2, [r3]
1174:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
1175:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Get the SYSCLK configuration --------------------------------------------*/
1176:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 2156              		.loc 1 1176 0
 2157 0010 124B     		ldr	r3, .L148
 2158 0012 9B68     		ldr	r3, [r3, #8]
 2159 0014 03F00302 		and	r2, r3, #3
 2160 0018 7B68     		ldr	r3, [r7, #4]
 2161 001a 5A60     		str	r2, [r3, #4]
1177:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
1178:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Get the HCLK configuration ----------------------------------------------*/
1179:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 2162              		.loc 1 1179 0
 2163 001c 0F4B     		ldr	r3, .L148
 2164 001e 9B68     		ldr	r3, [r3, #8]
 2165 0020 03F0F002 		and	r2, r3, #240
 2166 0024 7B68     		ldr	r3, [r7, #4]
 2167 0026 9A60     		str	r2, [r3, #8]
1180:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
1181:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Get the APB1 configuration ----------------------------------------------*/
1182:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 2168              		.loc 1 1182 0
 2169 0028 0C4B     		ldr	r3, .L148
 2170 002a 9B68     		ldr	r3, [r3, #8]
 2171 002c 03F4E052 		and	r2, r3, #7168
 2172 0030 7B68     		ldr	r3, [r7, #4]
 2173 0032 DA60     		str	r2, [r3, #12]
1183:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
1184:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Get the APB2 configuration ----------------------------------------------*/
ARM GAS  /tmp/ccAgwjCz.s 			page 60


1185:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 2174              		.loc 1 1185 0
 2175 0034 094B     		ldr	r3, .L148
 2176 0036 9B68     		ldr	r3, [r3, #8]
 2177 0038 DB08     		lsrs	r3, r3, #3
 2178 003a 03F4E052 		and	r2, r3, #7168
 2179 003e 7B68     		ldr	r3, [r7, #4]
 2180 0040 1A61     		str	r2, [r3, #16]
1186:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
1187:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Get the Flash Wait State (Latency) configuration ------------------------*/
1188:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 2181              		.loc 1 1188 0
 2182 0042 074B     		ldr	r3, .L148+4
 2183 0044 1B68     		ldr	r3, [r3]
 2184 0046 03F00F02 		and	r2, r3, #15
 2185 004a 3B68     		ldr	r3, [r7]
 2186 004c 1A60     		str	r2, [r3]
1189:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** }
 2187              		.loc 1 1189 0
 2188 004e 00BF     		nop
 2189 0050 0C37     		adds	r7, r7, #12
 2190              	.LCFI50:
 2191              		.cfi_def_cfa_offset 4
 2192 0052 BD46     		mov	sp, r7
 2193              	.LCFI51:
 2194              		.cfi_def_cfa_register 13
 2195              		@ sp needed
 2196 0054 5DF8047B 		ldr	r7, [sp], #4
 2197              	.LCFI52:
 2198              		.cfi_restore 7
 2199              		.cfi_def_cfa_offset 0
 2200 0058 7047     		bx	lr
 2201              	.L149:
 2202 005a 00BF     		.align	2
 2203              	.L148:
 2204 005c 00380240 		.word	1073887232
 2205 0060 003C0240 		.word	1073888256
 2206              		.cfi_endproc
 2207              	.LFE149:
 2209              		.section	.text.HAL_RCC_NMI_IRQHandler,"ax",%progbits
 2210              		.align	1
 2211              		.global	HAL_RCC_NMI_IRQHandler
 2212              		.syntax unified
 2213              		.thumb
 2214              		.thumb_func
 2215              		.fpu fpv4-sp-d16
 2217              	HAL_RCC_NMI_IRQHandler:
 2218              	.LFB150:
1190:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
1191:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /**
1192:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @brief This function handles the RCC CSS interrupt request.
1193:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @note This API should be called under the NMI_Handler().
1194:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @retval None
1195:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
1196:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** void HAL_RCC_NMI_IRQHandler(void)
1197:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** {
 2219              		.loc 1 1197 0
ARM GAS  /tmp/ccAgwjCz.s 			page 61


 2220              		.cfi_startproc
 2221              		@ args = 0, pretend = 0, frame = 0
 2222              		@ frame_needed = 1, uses_anonymous_args = 0
 2223 0000 80B5     		push	{r7, lr}
 2224              	.LCFI53:
 2225              		.cfi_def_cfa_offset 8
 2226              		.cfi_offset 7, -8
 2227              		.cfi_offset 14, -4
 2228 0002 00AF     		add	r7, sp, #0
 2229              	.LCFI54:
 2230              		.cfi_def_cfa_register 7
1198:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* Check RCC CSSF flag  */
1199:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 2231              		.loc 1 1199 0
 2232 0004 064B     		ldr	r3, .L153
 2233 0006 DB68     		ldr	r3, [r3, #12]
 2234 0008 03F08003 		and	r3, r3, #128
 2235 000c 802B     		cmp	r3, #128
 2236 000e 04D1     		bne	.L152
1200:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   {
1201:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* RCC Clock Security System interrupt user callback */
1202:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     HAL_RCC_CSSCallback();
 2237              		.loc 1 1202 0
 2238 0010 FFF7FEFF 		bl	HAL_RCC_CSSCallback
1203:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
1204:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     /* Clear RCC CSS pending bit */
1205:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****     __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 2239              		.loc 1 1205 0
 2240 0014 034B     		ldr	r3, .L153+4
 2241 0016 8022     		movs	r2, #128
 2242 0018 1A70     		strb	r2, [r3]
 2243              	.L152:
1206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   }
1207:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** }
 2244              		.loc 1 1207 0
 2245 001a 00BF     		nop
 2246 001c 80BD     		pop	{r7, pc}
 2247              	.L154:
 2248 001e 00BF     		.align	2
 2249              	.L153:
 2250 0020 00380240 		.word	1073887232
 2251 0024 0E380240 		.word	1073887246
 2252              		.cfi_endproc
 2253              	.LFE150:
 2255              		.section	.text.HAL_RCC_CSSCallback,"ax",%progbits
 2256              		.align	1
 2257              		.weak	HAL_RCC_CSSCallback
 2258              		.syntax unified
 2259              		.thumb
 2260              		.thumb_func
 2261              		.fpu fpv4-sp-d16
 2263              	HAL_RCC_CSSCallback:
 2264              	.LFB151:
1208:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** 
1209:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** /**
1210:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @brief  RCC Clock Security System interrupt callback
1211:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   * @retval None
ARM GAS  /tmp/ccAgwjCz.s 			page 62


1212:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   */
1213:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** __weak void HAL_RCC_CSSCallback(void)
1214:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** {
 2265              		.loc 1 1214 0
 2266              		.cfi_startproc
 2267              		@ args = 0, pretend = 0, frame = 0
 2268              		@ frame_needed = 1, uses_anonymous_args = 0
 2269              		@ link register save eliminated.
 2270 0000 80B4     		push	{r7}
 2271              	.LCFI55:
 2272              		.cfi_def_cfa_offset 4
 2273              		.cfi_offset 7, -4
 2274 0002 00AF     		add	r7, sp, #0
 2275              	.LCFI56:
 2276              		.cfi_def_cfa_register 7
1215:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1216:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****             the HAL_RCC_CSSCallback could be implemented in the user file
1217:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c ****    */
1218:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rcc.c **** }
 2277              		.loc 1 1218 0
 2278 0004 00BF     		nop
 2279 0006 BD46     		mov	sp, r7
 2280              	.LCFI57:
 2281              		.cfi_def_cfa_register 13
 2282              		@ sp needed
 2283 0008 5DF8047B 		ldr	r7, [sp], #4
 2284              	.LCFI58:
 2285              		.cfi_restore 7
 2286              		.cfi_def_cfa_offset 0
 2287 000c 7047     		bx	lr
 2288              		.cfi_endproc
 2289              	.LFE151:
 2291              		.text
 2292              	.Letext0:
 2293              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 2294              		.file 3 "/usr/include/newlib/sys/lock.h"
 2295              		.file 4 "/usr/include/newlib/sys/_types.h"
 2296              		.file 5 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 2297              		.file 6 "/usr/include/newlib/sys/reent.h"
 2298              		.file 7 "/usr/include/newlib/sys/_stdint.h"
 2299              		.file 8 "Inc/main.h"
 2300              		.file 9 "Drivers/CMSIS/Include/core_cm7.h"
 2301              		.file 10 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 2302              		.file 11 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f746xx.h"
 2303              		.file 12 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f7xx.h"
 2304              		.file 13 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 2305              		.file 14 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rcc_ex.h"
 2306              		.file 15 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rcc.h"
 2307              		.file 16 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_gpio.h"
ARM GAS  /tmp/ccAgwjCz.s 			page 63


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f7xx_hal_rcc.c
                            *COM*:0000000000000004 SpiTxData
                            *COM*:0000000000000004 SpiRxData
                            *COM*:0000000000000004 UpdateFile
     /tmp/ccAgwjCz.s:21     .text.HAL_RCC_DeInit:0000000000000000 $t
     /tmp/ccAgwjCz.s:28     .text.HAL_RCC_DeInit:0000000000000000 HAL_RCC_DeInit
     /tmp/ccAgwjCz.s:291    .text.HAL_RCC_DeInit:00000000000001a4 $d
     /tmp/ccAgwjCz.s:300    .text.HAL_RCC_OscConfig:0000000000000000 $t
     /tmp/ccAgwjCz.s:307    .text.HAL_RCC_OscConfig:0000000000000000 HAL_RCC_OscConfig
     /tmp/ccAgwjCz.s:691    .text.HAL_RCC_OscConfig:0000000000000280 $d
     /tmp/ccAgwjCz.s:694    .text.HAL_RCC_OscConfig:0000000000000284 $t
     /tmp/ccAgwjCz.s:1043   .text.HAL_RCC_OscConfig:00000000000004d8 $d
     /tmp/ccAgwjCz.s:1049   .text.HAL_RCC_ClockConfig:0000000000000000 $t
     /tmp/ccAgwjCz.s:1056   .text.HAL_RCC_ClockConfig:0000000000000000 HAL_RCC_ClockConfig
     /tmp/ccAgwjCz.s:1577   .text.HAL_RCC_GetSysClockFreq:0000000000000000 HAL_RCC_GetSysClockFreq
     /tmp/ccAgwjCz.s:1327   .text.HAL_RCC_ClockConfig:00000000000001c0 $d
     /tmp/ccAgwjCz.s:1335   .text.HAL_RCC_MCOConfig:0000000000000000 $t
     /tmp/ccAgwjCz.s:1342   .text.HAL_RCC_MCOConfig:0000000000000000 HAL_RCC_MCOConfig
     /tmp/ccAgwjCz.s:1470   .text.HAL_RCC_MCOConfig:00000000000000bc $d
     /tmp/ccAgwjCz.s:1477   .text.HAL_RCC_EnableCSS:0000000000000000 $t
     /tmp/ccAgwjCz.s:1484   .text.HAL_RCC_EnableCSS:0000000000000000 HAL_RCC_EnableCSS
     /tmp/ccAgwjCz.s:1518   .text.HAL_RCC_EnableCSS:000000000000001c $d
     /tmp/ccAgwjCz.s:1523   .text.HAL_RCC_DisableCSS:0000000000000000 $t
     /tmp/ccAgwjCz.s:1530   .text.HAL_RCC_DisableCSS:0000000000000000 HAL_RCC_DisableCSS
     /tmp/ccAgwjCz.s:1564   .text.HAL_RCC_DisableCSS:000000000000001c $d
     /tmp/ccAgwjCz.s:1570   .text.HAL_RCC_GetSysClockFreq:0000000000000000 $t
     /tmp/ccAgwjCz.s:1788   .text.HAL_RCC_GetSysClockFreq:00000000000001a4 $d
     /tmp/ccAgwjCz.s:1795   .text.HAL_RCC_GetHCLKFreq:0000000000000000 $t
     /tmp/ccAgwjCz.s:1802   .text.HAL_RCC_GetHCLKFreq:0000000000000000 HAL_RCC_GetHCLKFreq
     /tmp/ccAgwjCz.s:1833   .text.HAL_RCC_GetHCLKFreq:0000000000000014 $d
     /tmp/ccAgwjCz.s:1838   .text.HAL_RCC_GetPCLK1Freq:0000000000000000 $t
     /tmp/ccAgwjCz.s:1845   .text.HAL_RCC_GetPCLK1Freq:0000000000000000 HAL_RCC_GetPCLK1Freq
     /tmp/ccAgwjCz.s:1875   .text.HAL_RCC_GetPCLK1Freq:0000000000000020 $d
     /tmp/ccAgwjCz.s:1881   .text.HAL_RCC_GetPCLK2Freq:0000000000000000 $t
     /tmp/ccAgwjCz.s:1888   .text.HAL_RCC_GetPCLK2Freq:0000000000000000 HAL_RCC_GetPCLK2Freq
     /tmp/ccAgwjCz.s:1918   .text.HAL_RCC_GetPCLK2Freq:0000000000000020 $d
     /tmp/ccAgwjCz.s:1924   .text.HAL_RCC_GetOscConfig:0000000000000000 $t
     /tmp/ccAgwjCz.s:1931   .text.HAL_RCC_GetOscConfig:0000000000000000 HAL_RCC_GetOscConfig
     /tmp/ccAgwjCz.s:2121   .text.HAL_RCC_GetOscConfig:0000000000000124 $d
     /tmp/ccAgwjCz.s:2126   .text.HAL_RCC_GetClockConfig:0000000000000000 $t
     /tmp/ccAgwjCz.s:2133   .text.HAL_RCC_GetClockConfig:0000000000000000 HAL_RCC_GetClockConfig
     /tmp/ccAgwjCz.s:2204   .text.HAL_RCC_GetClockConfig:000000000000005c $d
     /tmp/ccAgwjCz.s:2210   .text.HAL_RCC_NMI_IRQHandler:0000000000000000 $t
     /tmp/ccAgwjCz.s:2217   .text.HAL_RCC_NMI_IRQHandler:0000000000000000 HAL_RCC_NMI_IRQHandler
     /tmp/ccAgwjCz.s:2263   .text.HAL_RCC_CSSCallback:0000000000000000 HAL_RCC_CSSCallback
     /tmp/ccAgwjCz.s:2250   .text.HAL_RCC_NMI_IRQHandler:0000000000000020 $d
     /tmp/ccAgwjCz.s:2256   .text.HAL_RCC_CSSCallback:0000000000000000 $t

UNDEFINED SYMBOLS
HAL_GetTick
HAL_InitTick
SystemCoreClock
AHBPrescTable
HAL_GPIO_Init
__aeabi_uldivmod
APBPrescTable
ARM GAS  /tmp/ccAgwjCz.s 			page 64


