ARM GAS  /tmp/ccFeNcGU.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	SpiTxData,4,4
  18              		.comm	SpiRxData,4,4
  19              		.comm	UpdateFile,4,4
  20              		.comm	motor1,8,4
  21              		.comm	motor2,8,4
  22              		.comm	motor3,8,4
  23              		.comm	motor4,8,4
  24              		.comm	sensorValues,20,4
  25              		.comm	gpsData,416,4
  26              		.comm	now,4,4
  27              		.comm	last,4,4
  28              		.section	.rodata
  29              		.align	2
  30              	.LC0:
  31 0000 426F6F74 		.ascii	"Bootloader Initializing...\015\012\000"
  31      6C6F6164 
  31      65722049 
  31      6E697469 
  31      616C697A 
  32 001d 000000   		.align	2
  33              	.LC1:
  34 0020 66696C65 		.ascii	"file_size: %d\015\012\000"
  34      5F73697A 
  34      653A2025 
  34      640D0A00 
  35              		.section	.text.main,"ax",%progbits
  36              		.align	1
  37              		.global	main
  38              		.syntax unified
  39              		.thumb
  40              		.thumb_func
  41              		.fpu fpv4-sp-d16
  43              	main:
  44              	.LFB138:
  45              		.file 1 "Src/main.c"
   1:Src/main.c    **** /**
   2:Src/main.c    ****   ******************************************************************************
   3:Src/main.c    ****   * @file           : main.c
   4:Src/main.c    ****   * @brief          : Main program body
   5:Src/main.c    ****   ******************************************************************************
   6:Src/main.c    ****   ** This notice applies to any and all portions of this file
ARM GAS  /tmp/ccFeNcGU.s 			page 2


   7:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   8:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
   9:Src/main.c    ****   * inserted by the user or by software development tools
  10:Src/main.c    ****   * are owned by their respective copyright owners.
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * COPYRIGHT(c) 2018 STMicroelectronics
  13:Src/main.c    ****   *
  14:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  15:Src/main.c    ****   * are permitted provided that the following conditions are met:
  16:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  17:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  18:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  19:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  20:Src/main.c    ****   *      and/or other materials provided with the distribution.
  21:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  22:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  23:Src/main.c    ****   *      without specific prior written permission.
  24:Src/main.c    ****   *
  25:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  26:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  27:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  28:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  29:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  30:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  31:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  32:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  33:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  34:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:Src/main.c    ****   *
  36:Src/main.c    ****   ******************************************************************************
  37:Src/main.c    ****   */
  38:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  39:Src/main.c    **** 
  40:Src/main.c    **** 
  41:Src/main.c    **** #include "eth.h"
  42:Src/main.c    **** #include "spi.h"
  43:Src/main.c    **** #include "i2c.h"
  44:Src/main.c    **** #include "rtc.h"
  45:Src/main.c    **** #include "tim.h"
  46:Src/main.c    **** #include "usart.h"
  47:Src/main.c    **** #include "gpio.h"
  48:Src/main.c    **** #include "motor.h"
  49:Src/main.c    **** #include "sensor.h"
  50:Src/main.c    **** #include "gps.h"
  51:Src/main.c    **** #include "flash.h"
  52:Src/main.c    **** #include "spicom.h"
  53:Src/main.c    **** 
  54:Src/main.c    **** typedef void (*pFunction)(void);
  55:Src/main.c    **** 
  56:Src/main.c    **** uint32_t now;
  57:Src/main.c    **** uint32_t last;
  58:Src/main.c    **** 
  59:Src/main.c    **** 
  60:Src/main.c    **** int main(void)
  61:Src/main.c    **** {
  46              		.loc 1 61 0
  47              		.cfi_startproc
ARM GAS  /tmp/ccFeNcGU.s 			page 3


  48              		@ args = 0, pretend = 0, frame = 24
  49              		@ frame_needed = 1, uses_anonymous_args = 0
  50 0000 80B5     		push	{r7, lr}
  51              	.LCFI0:
  52              		.cfi_def_cfa_offset 8
  53              		.cfi_offset 7, -8
  54              		.cfi_offset 14, -4
  55 0002 86B0     		sub	sp, sp, #24
  56              	.LCFI1:
  57              		.cfi_def_cfa_offset 32
  58 0004 00AF     		add	r7, sp, #0
  59              	.LCFI2:
  60              		.cfi_def_cfa_register 7
  62:Src/main.c    **** 
  63:Src/main.c    ****     Update_File update_file_describtor;
  64:Src/main.c    **** 
  65:Src/main.c    ****     unsigned char *file_buffer;
  66:Src/main.c    ****     uint32_t file_size;
  67:Src/main.c    ****     int update_condition;
  68:Src/main.c    ****     int ret;
  69:Src/main.c    ****     uint32_t now, last;
  70:Src/main.c    **** 
  71:Src/main.c    ****     SpiRxData = malloc(sizeof(SPI_TRANSFER_FORMAT));
  61              		.loc 1 71 0
  62 0006 7820     		movs	r0, #120
  63 0008 FFF7FEFF 		bl	malloc
  64 000c 0346     		mov	r3, r0
  65 000e 1A46     		mov	r2, r3
  66 0010 3A4B     		ldr	r3, .L5
  67 0012 1A60     		str	r2, [r3]
  72:Src/main.c    ****     SpiTxData = malloc(sizeof(SPI_TRANSFER_FORMAT));
  68              		.loc 1 72 0
  69 0014 7820     		movs	r0, #120
  70 0016 FFF7FEFF 		bl	malloc
  71 001a 0346     		mov	r3, r0
  72 001c 1A46     		mov	r2, r3
  73 001e 384B     		ldr	r3, .L5+4
  74 0020 1A60     		str	r2, [r3]
  73:Src/main.c    ****     UpdateFile = malloc(sizeof(UPDATE_FILE_FORMAT));
  75              		.loc 1 73 0
  76 0022 7420     		movs	r0, #116
  77 0024 FFF7FEFF 		bl	malloc
  78 0028 0346     		mov	r3, r0
  79 002a 1A46     		mov	r2, r3
  80 002c 354B     		ldr	r3, .L5+8
  81 002e 1A60     		str	r2, [r3]
  74:Src/main.c    **** 
  75:Src/main.c    ****     HAL_Init();
  82              		.loc 1 75 0
  83 0030 FFF7FEFF 		bl	HAL_Init
  76:Src/main.c    ****     SystemClock_Config();
  84              		.loc 1 76 0
  85 0034 FFF7FEFF 		bl	SystemClock_Config
  77:Src/main.c    ****     MX_GPIO_Init();
  86              		.loc 1 77 0
  87 0038 FFF7FEFF 		bl	MX_GPIO_Init
  78:Src/main.c    ****     MX_I2C2_Init();
ARM GAS  /tmp/ccFeNcGU.s 			page 4


  88              		.loc 1 78 0
  89 003c FFF7FEFF 		bl	MX_I2C2_Init
  79:Src/main.c    ****     MX_I2C4_Init();
  90              		.loc 1 79 0
  91 0040 FFF7FEFF 		bl	MX_I2C4_Init
  80:Src/main.c    ****     MX_SPI1_Init();
  92              		.loc 1 80 0
  93 0044 FFF7FEFF 		bl	MX_SPI1_Init
  81:Src/main.c    ****     MX_TIM3_Init();
  94              		.loc 1 81 0
  95 0048 FFF7FEFF 		bl	MX_TIM3_Init
  82:Src/main.c    ****     MX_UART4_Init();
  96              		.loc 1 82 0
  97 004c FFF7FEFF 		bl	MX_UART4_Init
  83:Src/main.c    ****     MX_USART1_UART_Init();
  98              		.loc 1 83 0
  99 0050 FFF7FEFF 		bl	MX_USART1_UART_Init
  84:Src/main.c    ****     MX_TIM2_Init();
 100              		.loc 1 84 0
 101 0054 FFF7FEFF 		bl	MX_TIM2_Init
  85:Src/main.c    **** 
  86:Src/main.c    ****     mprintf("Bootloader Initializing...\r\n");
 102              		.loc 1 86 0
 103 0058 2B48     		ldr	r0, .L5+12
 104 005a FFF7FEFF 		bl	mprintf
  87:Src/main.c    **** 
  88:Src/main.c    ****     HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)SpiTxData, (uint8_t *)SpiRxData,  SPI_TRANSFER_SI
 105              		.loc 1 88 0
 106 005e 284B     		ldr	r3, .L5+4
 107 0060 1968     		ldr	r1, [r3]
 108 0062 264B     		ldr	r3, .L5
 109 0064 1A68     		ldr	r2, [r3]
 110 0066 7823     		movs	r3, #120
 111 0068 2848     		ldr	r0, .L5+16
 112 006a FFF7FEFF 		bl	HAL_SPI_TransmitReceive_IT
  89:Src/main.c    **** 
  90:Src/main.c    ****     last = HAL_GetTick();
 113              		.loc 1 90 0
 114 006e FFF7FEFF 		bl	HAL_GetTick
 115 0072 7861     		str	r0, [r7, #20]
 116              	.L4:
  91:Src/main.c    **** 
  92:Src/main.c    ****     while(1)
  93:Src/main.c    ****     {
  94:Src/main.c    **** 
  95:Src/main.c    ****        now = HAL_GetTick();
 117              		.loc 1 95 0
 118 0074 FFF7FEFF 		bl	HAL_GetTick
 119 0078 3861     		str	r0, [r7, #16]
  96:Src/main.c    **** 
  97:Src/main.c    **** 
  98:Src/main.c    **** 
  99:Src/main.c    ****        ret = checkDataAvailable();
 120              		.loc 1 99 0
 121 007a FFF7FEFF 		bl	checkDataAvailable
 122 007e F860     		str	r0, [r7, #12]
 100:Src/main.c    **** 
ARM GAS  /tmp/ccFeNcGU.s 			page 5


 101:Src/main.c    **** 
 102:Src/main.c    ****        if(ret)
 123              		.loc 1 102 0
 124 0080 FB68     		ldr	r3, [r7, #12]
 125 0082 002B     		cmp	r3, #0
 126 0084 24D0     		beq	.L2
 103:Src/main.c    ****        {
 104:Src/main.c    **** 
 105:Src/main.c    ****            last = HAL_GetTick();
 127              		.loc 1 105 0
 128 0086 FFF7FEFF 		bl	HAL_GetTick
 129 008a 7861     		str	r0, [r7, #20]
 106:Src/main.c    **** 
 107:Src/main.c    ****            setDataRecieved();
 130              		.loc 1 107 0
 131 008c FFF7FEFF 		bl	setDataRecieved
 108:Src/main.c    **** 
 109:Src/main.c    ****            HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 132              		.loc 1 109 0
 133 0090 4FF48051 		mov	r1, #4096
 134 0094 1E48     		ldr	r0, .L5+20
 135 0096 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 110:Src/main.c    **** 
 111:Src/main.c    ****            update_file_describtor = processUpdateData();
 136              		.loc 1 111 0
 137 009a 3B46     		mov	r3, r7
 138 009c 1846     		mov	r0, r3
 139 009e FFF7FEFF 		bl	processUpdateData
 112:Src/main.c    **** 
 113:Src/main.c    ****            if(update_file_describtor.receive_complited == 1)
 140              		.loc 1 113 0
 141 00a2 B7F90830 		ldrsh	r3, [r7, #8]
 142 00a6 012B     		cmp	r3, #1
 143 00a8 12D1     		bne	.L2
 114:Src/main.c    ****            {
 115:Src/main.c    ****                updateFinished();
 144              		.loc 1 115 0
 145 00aa FFF7FEFF 		bl	updateFinished
 116:Src/main.c    **** 
 117:Src/main.c    ****                mprintf("file_size: %d\r\n", update_file_describtor.file_size);
 146              		.loc 1 117 0
 147 00ae 7B68     		ldr	r3, [r7, #4]
 148 00b0 1946     		mov	r1, r3
 149 00b2 1848     		ldr	r0, .L5+24
 150 00b4 FFF7FEFF 		bl	mprintf
 118:Src/main.c    **** 
 119:Src/main.c    ****                loadUpdateFile(update_file_describtor.file_pointer, update_file_describtor.file_size
 151              		.loc 1 119 0
 152 00b8 3B68     		ldr	r3, [r7]
 153 00ba 7A68     		ldr	r2, [r7, #4]
 154 00bc 1146     		mov	r1, r2
 155 00be 1846     		mov	r0, r3
 156 00c0 FFF7FEFF 		bl	loadUpdateFile
 120:Src/main.c    **** 
 121:Src/main.c    ****                free(update_file_describtor.file_pointer);
 157              		.loc 1 121 0
 158 00c4 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccFeNcGU.s 			page 6


 159 00c6 1846     		mov	r0, r3
 160 00c8 FFF7FEFF 		bl	free
 122:Src/main.c    **** 
 123:Src/main.c    ****                bootRTOS();
 161              		.loc 1 123 0
 162 00cc FFF7FEFF 		bl	bootRTOS
 163              	.L2:
 124:Src/main.c    **** 
 125:Src/main.c    ****            }
 126:Src/main.c    **** 
 127:Src/main.c    ****        }
 128:Src/main.c    **** 
 129:Src/main.c    ****        if(now - last >= 5000 && (now - last) > 0 && (now - last ) < 10000) // timeout
 164              		.loc 1 129 0
 165 00d0 3A69     		ldr	r2, [r7, #16]
 166 00d2 7B69     		ldr	r3, [r7, #20]
 167 00d4 D31A     		subs	r3, r2, r3
 168 00d6 41F28732 		movw	r2, #4999
 169 00da 9342     		cmp	r3, r2
 170 00dc CAD9     		bls	.L4
 171              		.loc 1 129 0 is_stmt 0 discriminator 1
 172 00de 3A69     		ldr	r2, [r7, #16]
 173 00e0 7B69     		ldr	r3, [r7, #20]
 174 00e2 9A42     		cmp	r2, r3
 175 00e4 C6D0     		beq	.L4
 176              		.loc 1 129 0 discriminator 2
 177 00e6 3A69     		ldr	r2, [r7, #16]
 178 00e8 7B69     		ldr	r3, [r7, #20]
 179 00ea D31A     		subs	r3, r2, r3
 180 00ec 42F20F72 		movw	r2, #9999
 181 00f0 9342     		cmp	r3, r2
 182 00f2 BFD8     		bhi	.L4
 130:Src/main.c    ****            bootRTOS();
 183              		.loc 1 130 0 is_stmt 1
 184 00f4 FFF7FEFF 		bl	bootRTOS
  95:Src/main.c    **** 
 185              		.loc 1 95 0
 186 00f8 BCE7     		b	.L4
 187              	.L6:
 188 00fa 00BF     		.align	2
 189              	.L5:
 190 00fc 00000000 		.word	SpiRxData
 191 0100 00000000 		.word	SpiTxData
 192 0104 00000000 		.word	UpdateFile
 193 0108 00000000 		.word	.LC0
 194 010c 00000000 		.word	hspi1
 195 0110 00040240 		.word	1073873920
 196 0114 20000000 		.word	.LC1
 197              		.cfi_endproc
 198              	.LFE138:
 200              		.section	.rodata
 201              		.align	2
 202              	.LC2:
 203 0030 426F6F74 		.ascii	"Booting...\015\012\000"
 203      696E672E 
 203      2E2E0D0A 
 203      00
ARM GAS  /tmp/ccFeNcGU.s 			page 7


 204              		.section	.text.bootRTOS,"ax",%progbits
 205              		.align	1
 206              		.global	bootRTOS
 207              		.syntax unified
 208              		.thumb
 209              		.thumb_func
 210              		.fpu fpv4-sp-d16
 212              	bootRTOS:
 213              	.LFB139:
 131:Src/main.c    **** 
 132:Src/main.c    ****     }
 133:Src/main.c    **** 
 134:Src/main.c    **** 
 135:Src/main.c    **** }
 136:Src/main.c    **** 
 137:Src/main.c    **** 
 138:Src/main.c    **** 
 139:Src/main.c    **** 
 140:Src/main.c    **** 
 141:Src/main.c    **** 
 142:Src/main.c    **** void bootRTOS()
 143:Src/main.c    **** {
 214              		.loc 1 143 0
 215              		.cfi_startproc
 216              		@ args = 0, pretend = 0, frame = 16
 217              		@ frame_needed = 1, uses_anonymous_args = 0
 218 0000 80B5     		push	{r7, lr}
 219              	.LCFI3:
 220              		.cfi_def_cfa_offset 8
 221              		.cfi_offset 7, -8
 222              		.cfi_offset 14, -4
 223 0002 84B0     		sub	sp, sp, #16
 224              	.LCFI4:
 225              		.cfi_def_cfa_offset 24
 226 0004 00AF     		add	r7, sp, #0
 227              	.LCFI5:
 228              		.cfi_def_cfa_register 7
 144:Src/main.c    **** 
 145:Src/main.c    ****     pFunction appEntry;
 146:Src/main.c    ****     uint32_t appStack;
 147:Src/main.c    **** 
 148:Src/main.c    ****     mprintf("Booting...\r\n");
 229              		.loc 1 148 0
 230 0006 4448     		ldr	r0, .L8
 231 0008 FFF7FEFF 		bl	mprintf
 149:Src/main.c    **** 
 150:Src/main.c    ****     // Disable all interrupts
 151:Src/main.c    ****     NVIC->ICER[ 0 ] = 0xFFFFFFFF ;
 232              		.loc 1 151 0
 233 000c 434B     		ldr	r3, .L8+4
 234 000e 4FF0FF32 		mov	r2, #-1
 235 0012 C3F88020 		str	r2, [r3, #128]
 152:Src/main.c    ****     NVIC->ICER[ 1 ] = 0xFFFFFFFF ;
 236              		.loc 1 152 0
 237 0016 414B     		ldr	r3, .L8+4
 238 0018 4FF0FF32 		mov	r2, #-1
 239 001c C3F88420 		str	r2, [r3, #132]
ARM GAS  /tmp/ccFeNcGU.s 			page 8


 153:Src/main.c    ****     NVIC->ICER[ 2 ] = 0xFFFFFFFF ;
 240              		.loc 1 153 0
 241 0020 3E4B     		ldr	r3, .L8+4
 242 0022 4FF0FF32 		mov	r2, #-1
 243 0026 C3F88820 		str	r2, [r3, #136]
 154:Src/main.c    ****     NVIC->ICER[ 3 ] = 0xFFFFFFFF ;
 244              		.loc 1 154 0
 245 002a 3C4B     		ldr	r3, .L8+4
 246 002c 4FF0FF32 		mov	r2, #-1
 247 0030 C3F88C20 		str	r2, [r3, #140]
 155:Src/main.c    ****     NVIC->ICER[ 4 ] = 0xFFFFFFFF ;
 248              		.loc 1 155 0
 249 0034 394B     		ldr	r3, .L8+4
 250 0036 4FF0FF32 		mov	r2, #-1
 251 003a C3F89020 		str	r2, [r3, #144]
 156:Src/main.c    ****     NVIC->ICER[ 5 ] = 0xFFFFFFFF ;
 252              		.loc 1 156 0
 253 003e 374B     		ldr	r3, .L8+4
 254 0040 4FF0FF32 		mov	r2, #-1
 255 0044 C3F89420 		str	r2, [r3, #148]
 157:Src/main.c    ****     NVIC->ICER[ 6 ] = 0xFFFFFFFF ;
 256              		.loc 1 157 0
 257 0048 344B     		ldr	r3, .L8+4
 258 004a 4FF0FF32 		mov	r2, #-1
 259 004e C3F89820 		str	r2, [r3, #152]
 158:Src/main.c    ****     NVIC->ICER[ 7 ] = 0xFFFFFFFF ;
 260              		.loc 1 158 0
 261 0052 324B     		ldr	r3, .L8+4
 262 0054 4FF0FF32 		mov	r2, #-1
 263 0058 C3F89C20 		str	r2, [r3, #156]
 159:Src/main.c    **** 
 160:Src/main.c    ****     // Clear pendings
 161:Src/main.c    ****     NVIC->ICPR[ 0 ] = 0xFFFFFFFF ;
 264              		.loc 1 161 0
 265 005c 2F4B     		ldr	r3, .L8+4
 266 005e 4FF0FF32 		mov	r2, #-1
 267 0062 C3F88021 		str	r2, [r3, #384]
 162:Src/main.c    ****     NVIC->ICPR[ 1 ] = 0xFFFFFFFF ;
 268              		.loc 1 162 0
 269 0066 2D4B     		ldr	r3, .L8+4
 270 0068 4FF0FF32 		mov	r2, #-1
 271 006c C3F88421 		str	r2, [r3, #388]
 163:Src/main.c    ****     NVIC->ICPR[ 2 ] = 0xFFFFFFFF ;
 272              		.loc 1 163 0
 273 0070 2A4B     		ldr	r3, .L8+4
 274 0072 4FF0FF32 		mov	r2, #-1
 275 0076 C3F88821 		str	r2, [r3, #392]
 164:Src/main.c    ****     NVIC->ICPR[ 3 ] = 0xFFFFFFFF ;
 276              		.loc 1 164 0
 277 007a 284B     		ldr	r3, .L8+4
 278 007c 4FF0FF32 		mov	r2, #-1
 279 0080 C3F88C21 		str	r2, [r3, #396]
 165:Src/main.c    ****     NVIC->ICPR[ 4 ] = 0xFFFFFFFF ;
 280              		.loc 1 165 0
 281 0084 254B     		ldr	r3, .L8+4
 282 0086 4FF0FF32 		mov	r2, #-1
 283 008a C3F89021 		str	r2, [r3, #400]
ARM GAS  /tmp/ccFeNcGU.s 			page 9


 166:Src/main.c    ****     NVIC->ICPR[ 5 ] = 0xFFFFFFFF ;
 284              		.loc 1 166 0
 285 008e 234B     		ldr	r3, .L8+4
 286 0090 4FF0FF32 		mov	r2, #-1
 287 0094 C3F89421 		str	r2, [r3, #404]
 167:Src/main.c    ****     NVIC->ICPR[ 6 ] = 0xFFFFFFFF ;
 288              		.loc 1 167 0
 289 0098 204B     		ldr	r3, .L8+4
 290 009a 4FF0FF32 		mov	r2, #-1
 291 009e C3F89821 		str	r2, [r3, #408]
 168:Src/main.c    ****     NVIC->ICPR[ 7 ] = 0xFFFFFFFF ;
 292              		.loc 1 168 0
 293 00a2 1E4B     		ldr	r3, .L8+4
 294 00a4 4FF0FF32 		mov	r2, #-1
 295 00a8 C3F89C21 		str	r2, [r3, #412]
 169:Src/main.c    **** 
 170:Src/main.c    ****     // Stop sys tick
 171:Src/main.c    ****     SysTick->CTRL = 0;
 296              		.loc 1 171 0
 297 00ac 1C4B     		ldr	r3, .L8+8
 298 00ae 0022     		movs	r2, #0
 299 00b0 1A60     		str	r2, [r3]
 172:Src/main.c    ****     SysTick->LOAD = 0;
 300              		.loc 1 172 0
 301 00b2 1B4B     		ldr	r3, .L8+8
 302 00b4 0022     		movs	r2, #0
 303 00b6 5A60     		str	r2, [r3, #4]
 173:Src/main.c    ****     SysTick->VAL  = 0;
 304              		.loc 1 173 0
 305 00b8 194B     		ldr	r3, .L8+8
 306 00ba 0022     		movs	r2, #0
 307 00bc 9A60     		str	r2, [r3, #8]
 174:Src/main.c    ****     SCB->ICSR |= SCB_ICSR_PENDSTCLR_Msk ;
 308              		.loc 1 174 0
 309 00be 194B     		ldr	r3, .L8+12
 310 00c0 5B68     		ldr	r3, [r3, #4]
 311 00c2 184A     		ldr	r2, .L8+12
 312 00c4 43F00073 		orr	r3, r3, #33554432
 313 00c8 5360     		str	r3, [r2, #4]
 175:Src/main.c    **** 
 176:Src/main.c    ****     // Disable individual fault handlers if the bootloader used them.
 177:Src/main.c    ****     SCB->SHCSR &= ~( SCB_SHCSR_USGFAULTENA_Msk |
 314              		.loc 1 177 0
 315 00ca 164B     		ldr	r3, .L8+12
 316 00cc 5B6A     		ldr	r3, [r3, #36]
 317 00ce 154A     		ldr	r2, .L8+12
 318 00d0 23F4E023 		bic	r3, r3, #458752
 319 00d4 5362     		str	r3, [r2, #36]
 178:Src/main.c    ****                     SCB_SHCSR_BUSFAULTENA_Msk |
 179:Src/main.c    ****                     SCB_SHCSR_MEMFAULTENA_Msk ) ;
 180:Src/main.c    **** 
 181:Src/main.c    ****     HAL_DeInit();
 320              		.loc 1 181 0
 321 00d6 FFF7FEFF 		bl	HAL_DeInit
 182:Src/main.c    ****     HAL_RCC_DeInit();
 322              		.loc 1 182 0
 323 00da FFF7FEFF 		bl	HAL_RCC_DeInit
ARM GAS  /tmp/ccFeNcGU.s 			page 10


 183:Src/main.c    ****     HAL_SPI_DeInit(&hspi1);
 324              		.loc 1 183 0
 325 00de 1248     		ldr	r0, .L8+16
 326 00e0 FFF7FEFF 		bl	HAL_SPI_DeInit
 184:Src/main.c    ****     HAL_I2C_DeInit(&hi2c4);
 327              		.loc 1 184 0
 328 00e4 1148     		ldr	r0, .L8+20
 329 00e6 FFF7FEFF 		bl	HAL_I2C_DeInit
 185:Src/main.c    ****     HAL_I2C_DeInit(&hi2c2);
 330              		.loc 1 185 0
 331 00ea 1148     		ldr	r0, .L8+24
 332 00ec FFF7FEFF 		bl	HAL_I2C_DeInit
 186:Src/main.c    **** 
 187:Src/main.c    ****     SCB->VTOR = (unsigned long)APPLICATION_ADDRESS;
 333              		.loc 1 187 0
 334 00f0 0C4B     		ldr	r3, .L8+12
 335 00f2 104A     		ldr	r2, .L8+28
 336 00f4 9A60     		str	r2, [r3, #8]
 188:Src/main.c    **** 
 189:Src/main.c    ****     /* Get the application stack pointer (First entry in the application vector table) */
 190:Src/main.c    ****     appStack = (uint32_t) *((__IO uint32_t*)APPLICATION_ADDRESS);
 337              		.loc 1 190 0
 338 00f6 0F4B     		ldr	r3, .L8+28
 339 00f8 1B68     		ldr	r3, [r3]
 340 00fa FB60     		str	r3, [r7, #12]
 191:Src/main.c    **** 
 192:Src/main.c    ****     /* Get the application entry point (Second entry in the application vector table) */
 193:Src/main.c    ****     appEntry = (pFunction) *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 341              		.loc 1 193 0
 342 00fc 0E4B     		ldr	r3, .L8+32
 343 00fe 1B68     		ldr	r3, [r3]
 344 0100 BB60     		str	r3, [r7, #8]
 345 0102 FB68     		ldr	r3, [r7, #12]
 346 0104 7B60     		str	r3, [r7, #4]
 347              	.LBB4:
 348              	.LBB5:
 349              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
ARM GAS  /tmp/ccFeNcGU.s 			page 11


  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
ARM GAS  /tmp/ccFeNcGU.s 			page 12


  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
ARM GAS  /tmp/ccFeNcGU.s 			page 13


 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 350              		.loc 2 190 0
ARM GAS  /tmp/ccFeNcGU.s 			page 14


 351 0106 7B68     		ldr	r3, [r7, #4]
 352              		.syntax unified
 353              	@ 190 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 354 0108 83F30888 		MSR msp, r3
 355              	
 356              	@ 0 "" 2
 357              		.thumb
 358              		.syntax unified
 359              	.LBE5:
 360              	.LBE4:
 194:Src/main.c    **** 
 195:Src/main.c    ****     /* Set the application stack pointer */
 196:Src/main.c    ****     __set_MSP(appStack);
 197:Src/main.c    **** 
 198:Src/main.c    ****     /* Start the application */
 199:Src/main.c    ****     appEntry();
 361              		.loc 1 199 0
 362 010c BB68     		ldr	r3, [r7, #8]
 363 010e 9847     		blx	r3
 364              	.LVL0:
 200:Src/main.c    **** 
 201:Src/main.c    **** }
 365              		.loc 1 201 0
 366 0110 00BF     		nop
 367 0112 1037     		adds	r7, r7, #16
 368              	.LCFI6:
 369              		.cfi_def_cfa_offset 8
 370 0114 BD46     		mov	sp, r7
 371              	.LCFI7:
 372              		.cfi_def_cfa_register 13
 373              		@ sp needed
 374 0116 80BD     		pop	{r7, pc}
 375              	.L9:
 376              		.align	2
 377              	.L8:
 378 0118 30000000 		.word	.LC2
 379 011c 00E100E0 		.word	-536813312
 380 0120 10E000E0 		.word	-536813552
 381 0124 00ED00E0 		.word	-536810240
 382 0128 00000000 		.word	hspi1
 383 012c 00000000 		.word	hi2c4
 384 0130 00000000 		.word	hi2c2
 385 0134 00000108 		.word	134283264
 386 0138 04000108 		.word	134283268
 387              		.cfi_endproc
 388              	.LFE139:
 390              		.section	.text.vprint,"ax",%progbits
 391              		.align	1
 392              		.global	vprint
 393              		.syntax unified
 394              		.thumb
 395              		.thumb_func
 396              		.fpu fpv4-sp-d16
 398              	vprint:
 399              	.LFB140:
 202:Src/main.c    **** 
 203:Src/main.c    **** 
ARM GAS  /tmp/ccFeNcGU.s 			page 15


 204:Src/main.c    **** 
 205:Src/main.c    **** void vprint(const char *fmt, va_list argp)
 206:Src/main.c    **** {
 400              		.loc 1 206 0
 401              		.cfi_startproc
 402              		@ args = 0, pretend = 0, frame = 208
 403              		@ frame_needed = 1, uses_anonymous_args = 0
 404 0000 80B5     		push	{r7, lr}
 405              	.LCFI8:
 406              		.cfi_def_cfa_offset 8
 407              		.cfi_offset 7, -8
 408              		.cfi_offset 14, -4
 409 0002 B4B0     		sub	sp, sp, #208
 410              	.LCFI9:
 411              		.cfi_def_cfa_offset 216
 412 0004 00AF     		add	r7, sp, #0
 413              	.LCFI10:
 414              		.cfi_def_cfa_register 7
 415 0006 7860     		str	r0, [r7, #4]
 416 0008 3960     		str	r1, [r7]
 207:Src/main.c    ****     char string[200];
 208:Src/main.c    ****     if(0 < vsprintf(string,fmt,argp)) // build string
 417              		.loc 1 208 0
 418 000a 07F10803 		add	r3, r7, #8
 419 000e 3A68     		ldr	r2, [r7]
 420 0010 7968     		ldr	r1, [r7, #4]
 421 0012 1846     		mov	r0, r3
 422 0014 FFF7FEFF 		bl	vsprintf
 423 0018 0346     		mov	r3, r0
 424 001a 002B     		cmp	r3, #0
 425 001c 0DDD     		ble	.L12
 209:Src/main.c    ****     {
 210:Src/main.c    ****         HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via
 426              		.loc 1 210 0
 427 001e 07F10803 		add	r3, r7, #8
 428 0022 1846     		mov	r0, r3
 429 0024 FFF7FEFF 		bl	strlen
 430 0028 0346     		mov	r3, r0
 431 002a 9AB2     		uxth	r2, r3
 432 002c 07F10801 		add	r1, r7, #8
 433 0030 6FF07F43 		mvn	r3, #-16777216
 434 0034 0348     		ldr	r0, .L13
 435 0036 FFF7FEFF 		bl	HAL_UART_Transmit
 436              	.L12:
 211:Src/main.c    ****     }
 212:Src/main.c    **** }
 437              		.loc 1 212 0
 438 003a 00BF     		nop
 439 003c D037     		adds	r7, r7, #208
 440              	.LCFI11:
 441              		.cfi_def_cfa_offset 8
 442 003e BD46     		mov	sp, r7
 443              	.LCFI12:
 444              		.cfi_def_cfa_register 13
 445              		@ sp needed
 446 0040 80BD     		pop	{r7, pc}
 447              	.L14:
ARM GAS  /tmp/ccFeNcGU.s 			page 16


 448 0042 00BF     		.align	2
 449              	.L13:
 450 0044 00000000 		.word	huart1
 451              		.cfi_endproc
 452              	.LFE140:
 454              		.section	.text.mprintf,"ax",%progbits
 455              		.align	1
 456              		.global	mprintf
 457              		.syntax unified
 458              		.thumb
 459              		.thumb_func
 460              		.fpu fpv4-sp-d16
 462              	mprintf:
 463              	.LFB141:
 213:Src/main.c    **** 
 214:Src/main.c    **** 
 215:Src/main.c    **** 
 216:Src/main.c    **** void mprintf(const char *fmt, ...) // custom printf() function
 217:Src/main.c    **** {
 464              		.loc 1 217 0
 465              		.cfi_startproc
 466              		@ args = 4, pretend = 16, frame = 8
 467              		@ frame_needed = 1, uses_anonymous_args = 1
 468 0000 0FB4     		push	{r0, r1, r2, r3}
 469              	.LCFI13:
 470              		.cfi_def_cfa_offset 16
 471              		.cfi_offset 0, -16
 472              		.cfi_offset 1, -12
 473              		.cfi_offset 2, -8
 474              		.cfi_offset 3, -4
 475 0002 80B5     		push	{r7, lr}
 476              	.LCFI14:
 477              		.cfi_def_cfa_offset 24
 478              		.cfi_offset 7, -24
 479              		.cfi_offset 14, -20
 480 0004 82B0     		sub	sp, sp, #8
 481              	.LCFI15:
 482              		.cfi_def_cfa_offset 32
 483 0006 00AF     		add	r7, sp, #0
 484              	.LCFI16:
 485              		.cfi_def_cfa_register 7
 218:Src/main.c    ****     va_list argp;
 219:Src/main.c    ****     va_start(argp, fmt);
 486              		.loc 1 219 0
 487 0008 07F11403 		add	r3, r7, #20
 488 000c 7B60     		str	r3, [r7, #4]
 220:Src/main.c    ****     vprint(fmt, argp);
 489              		.loc 1 220 0
 490 000e 7968     		ldr	r1, [r7, #4]
 491 0010 3869     		ldr	r0, [r7, #16]
 492 0012 FFF7FEFF 		bl	vprint
 221:Src/main.c    ****     va_end(argp);
 222:Src/main.c    **** }
 493              		.loc 1 222 0
 494 0016 00BF     		nop
 495 0018 0837     		adds	r7, r7, #8
 496              	.LCFI17:
ARM GAS  /tmp/ccFeNcGU.s 			page 17


 497              		.cfi_def_cfa_offset 24
 498 001a BD46     		mov	sp, r7
 499              	.LCFI18:
 500              		.cfi_def_cfa_register 13
 501              		@ sp needed
 502 001c BDE88040 		pop	{r7, lr}
 503              	.LCFI19:
 504              		.cfi_restore 14
 505              		.cfi_restore 7
 506              		.cfi_def_cfa_offset 16
 507 0020 04B0     		add	sp, sp, #16
 508              	.LCFI20:
 509              		.cfi_restore 3
 510              		.cfi_restore 2
 511              		.cfi_restore 1
 512              		.cfi_restore 0
 513              		.cfi_def_cfa_offset 0
 514 0022 7047     		bx	lr
 515              		.cfi_endproc
 516              	.LFE141:
 518              		.section	.rodata
 519 003d 000000   		.align	2
 520              	.LC3:
 521 0040 5372632F 		.ascii	"Src/main.c\000"
 521      6D61696E 
 521      2E6300
 522              		.section	.text.SystemClock_Config,"ax",%progbits
 523              		.align	1
 524              		.global	SystemClock_Config
 525              		.syntax unified
 526              		.thumb
 527              		.thumb_func
 528              		.fpu fpv4-sp-d16
 530              	SystemClock_Config:
 531              	.LFB142:
 223:Src/main.c    **** 
 224:Src/main.c    **** 
 225:Src/main.c    **** 
 226:Src/main.c    **** void SystemClock_Config(void)
 227:Src/main.c    **** {
 532              		.loc 1 227 0
 533              		.cfi_startproc
 534              		@ args = 0, pretend = 0, frame = 208
 535              		@ frame_needed = 1, uses_anonymous_args = 0
 536 0000 80B5     		push	{r7, lr}
 537              	.LCFI21:
 538              		.cfi_def_cfa_offset 8
 539              		.cfi_offset 7, -8
 540              		.cfi_offset 14, -4
 541 0002 B4B0     		sub	sp, sp, #208
 542              	.LCFI22:
 543              		.cfi_def_cfa_offset 216
 544 0004 00AF     		add	r7, sp, #0
 545              	.LCFI23:
 546              		.cfi_def_cfa_register 7
 547              	.LBB6:
 228:Src/main.c    **** 
ARM GAS  /tmp/ccFeNcGU.s 			page 18


 229:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 230:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 231:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
 232:Src/main.c    **** 
 233:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 234:Src/main.c    ****     */
 235:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 548              		.loc 1 235 0
 549 0006 524B     		ldr	r3, .L21
 550 0008 1B6C     		ldr	r3, [r3, #64]
 551 000a 514A     		ldr	r2, .L21
 552 000c 43F08053 		orr	r3, r3, #268435456
 553 0010 1364     		str	r3, [r2, #64]
 554 0012 4F4B     		ldr	r3, .L21
 555 0014 1B6C     		ldr	r3, [r3, #64]
 556 0016 03F08053 		and	r3, r3, #268435456
 557 001a 7B60     		str	r3, [r7, #4]
 558 001c 7B68     		ldr	r3, [r7, #4]
 559              	.LBE6:
 560              	.LBB7:
 236:Src/main.c    **** 
 237:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 561              		.loc 1 237 0
 562 001e 4D4B     		ldr	r3, .L21+4
 563 0020 1B68     		ldr	r3, [r3]
 564 0022 4C4A     		ldr	r2, .L21+4
 565 0024 43F44043 		orr	r3, r3, #49152
 566 0028 1360     		str	r3, [r2]
 567 002a 4A4B     		ldr	r3, .L21+4
 568 002c 1B68     		ldr	r3, [r3]
 569 002e 03F44043 		and	r3, r3, #49152
 570 0032 3B60     		str	r3, [r7]
 571 0034 3B68     		ldr	r3, [r7]
 572              	.LBE7:
 238:Src/main.c    **** 
 239:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 240:Src/main.c    ****     */
 241:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 573              		.loc 1 241 0
 574 0036 0923     		movs	r3, #9
 575 0038 C7F8A030 		str	r3, [r7, #160]
 242:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 576              		.loc 1 242 0
 577 003c 4FF48033 		mov	r3, #65536
 578 0040 C7F8A430 		str	r3, [r7, #164]
 243:Src/main.c    ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 579              		.loc 1 243 0
 580 0044 0123     		movs	r3, #1
 581 0046 C7F8B430 		str	r3, [r7, #180]
 244:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 582              		.loc 1 244 0
 583 004a 0223     		movs	r3, #2
 584 004c C7F8B830 		str	r3, [r7, #184]
 245:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 585              		.loc 1 245 0
 586 0050 4FF48003 		mov	r3, #4194304
 587 0054 C7F8BC30 		str	r3, [r7, #188]
ARM GAS  /tmp/ccFeNcGU.s 			page 19


 246:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 588              		.loc 1 246 0
 589 0058 0823     		movs	r3, #8
 590 005a C7F8C030 		str	r3, [r7, #192]
 247:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 591              		.loc 1 247 0
 592 005e 4FF4A873 		mov	r3, #336
 593 0062 C7F8C430 		str	r3, [r7, #196]
 248:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 594              		.loc 1 248 0
 595 0066 0223     		movs	r3, #2
 596 0068 C7F8C830 		str	r3, [r7, #200]
 249:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 597              		.loc 1 249 0
 598 006c 0223     		movs	r3, #2
 599 006e C7F8CC30 		str	r3, [r7, #204]
 250:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 600              		.loc 1 250 0
 601 0072 07F1A003 		add	r3, r7, #160
 602 0076 1846     		mov	r0, r3
 603 0078 FFF7FEFF 		bl	HAL_RCC_OscConfig
 604 007c 0346     		mov	r3, r0
 605 007e 002B     		cmp	r3, #0
 606 0080 03D0     		beq	.L17
 251:Src/main.c    ****   {
 252:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 607              		.loc 1 252 0
 608 0082 FC21     		movs	r1, #252
 609 0084 3448     		ldr	r0, .L21+8
 610 0086 FFF7FEFF 		bl	_Error_Handler
 611              	.L17:
 253:Src/main.c    ****   }
 254:Src/main.c    **** 
 255:Src/main.c    ****     /**Activate the Over-Drive mode 
 256:Src/main.c    ****     */
 257:Src/main.c    ****   if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 612              		.loc 1 257 0
 613 008a FFF7FEFF 		bl	HAL_PWREx_EnableOverDrive
 614 008e 0346     		mov	r3, r0
 615 0090 002B     		cmp	r3, #0
 616 0092 04D0     		beq	.L18
 258:Src/main.c    ****   {
 259:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 617              		.loc 1 259 0
 618 0094 40F20311 		movw	r1, #259
 619 0098 2F48     		ldr	r0, .L21+8
 620 009a FFF7FEFF 		bl	_Error_Handler
 621              	.L18:
 260:Src/main.c    ****   }
 261:Src/main.c    **** 
 262:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 263:Src/main.c    ****     */
 264:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 622              		.loc 1 264 0
 623 009e 0F23     		movs	r3, #15
 624 00a0 C7F88C30 		str	r3, [r7, #140]
 265:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
ARM GAS  /tmp/ccFeNcGU.s 			page 20


 266:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 625              		.loc 1 266 0
 626 00a4 0223     		movs	r3, #2
 627 00a6 C7F89030 		str	r3, [r7, #144]
 267:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 628              		.loc 1 267 0
 629 00aa 0023     		movs	r3, #0
 630 00ac C7F89430 		str	r3, [r7, #148]
 268:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 631              		.loc 1 268 0
 632 00b0 4FF4A053 		mov	r3, #5120
 633 00b4 C7F89830 		str	r3, [r7, #152]
 269:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 634              		.loc 1 269 0
 635 00b8 4FF48053 		mov	r3, #4096
 636 00bc C7F89C30 		str	r3, [r7, #156]
 270:Src/main.c    **** 
 271:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 637              		.loc 1 271 0
 638 00c0 07F18C03 		add	r3, r7, #140
 639 00c4 0721     		movs	r1, #7
 640 00c6 1846     		mov	r0, r3
 641 00c8 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 642 00cc 0346     		mov	r3, r0
 643 00ce 002B     		cmp	r3, #0
 644 00d0 04D0     		beq	.L19
 272:Src/main.c    ****   {
 273:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 645              		.loc 1 273 0
 646 00d2 40F21111 		movw	r1, #273
 647 00d6 2048     		ldr	r0, .L21+8
 648 00d8 FFF7FEFF 		bl	_Error_Handler
 649              	.L19:
 274:Src/main.c    ****   }
 275:Src/main.c    **** 
 276:Src/main.c    ****   PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 650              		.loc 1 276 0
 651 00dc 1F4B     		ldr	r3, .L21+12
 652 00de BB60     		str	r3, [r7, #8]
 277:Src/main.c    ****                               |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_UART7
 278:Src/main.c    ****                               |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_I2C1
 279:Src/main.c    ****                               |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C3
 280:Src/main.c    ****                               |RCC_PERIPHCLK_I2C4;
 281:Src/main.c    ****   PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 653              		.loc 1 281 0
 654 00e0 4FF40073 		mov	r3, #512
 655 00e4 BB63     		str	r3, [r7, #56]
 282:Src/main.c    ****   PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 656              		.loc 1 282 0
 657 00e6 0023     		movs	r3, #0
 658 00e8 FB64     		str	r3, [r7, #76]
 283:Src/main.c    ****   PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 659              		.loc 1 283 0
 660 00ea 0023     		movs	r3, #0
 661 00ec BB65     		str	r3, [r7, #88]
 284:Src/main.c    ****   PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 662              		.loc 1 284 0
ARM GAS  /tmp/ccFeNcGU.s 			page 21


 663 00ee 0023     		movs	r3, #0
 664 00f0 7B66     		str	r3, [r7, #100]
 285:Src/main.c    ****   PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 665              		.loc 1 285 0
 666 00f2 0023     		movs	r3, #0
 667 00f4 BB66     		str	r3, [r7, #104]
 286:Src/main.c    ****   PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 668              		.loc 1 286 0
 669 00f6 0023     		movs	r3, #0
 670 00f8 FB66     		str	r3, [r7, #108]
 287:Src/main.c    ****   PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 671              		.loc 1 287 0
 672 00fa 0023     		movs	r3, #0
 673 00fc 3B67     		str	r3, [r7, #112]
 288:Src/main.c    ****   PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 674              		.loc 1 288 0
 675 00fe 0023     		movs	r3, #0
 676 0100 7B67     		str	r3, [r7, #116]
 289:Src/main.c    ****   PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 677              		.loc 1 289 0
 678 0102 0023     		movs	r3, #0
 679 0104 BB67     		str	r3, [r7, #120]
 290:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 680              		.loc 1 290 0
 681 0106 07F10803 		add	r3, r7, #8
 682 010a 1846     		mov	r0, r3
 683 010c FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 684 0110 0346     		mov	r3, r0
 685 0112 002B     		cmp	r3, #0
 686 0114 04D0     		beq	.L20
 291:Src/main.c    ****   {
 292:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 687              		.loc 1 292 0
 688 0116 4FF49271 		mov	r1, #292
 689 011a 0F48     		ldr	r0, .L21+8
 690 011c FFF7FEFF 		bl	_Error_Handler
 691              	.L20:
 293:Src/main.c    ****   }
 294:Src/main.c    **** 
 295:Src/main.c    **** 
 296:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 692              		.loc 1 296 0
 693 0120 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 694 0124 0246     		mov	r2, r0
 695 0126 0E4B     		ldr	r3, .L21+16
 696 0128 A3FB0223 		umull	r2, r3, r3, r2
 697 012c 9B09     		lsrs	r3, r3, #6
 698 012e 1846     		mov	r0, r3
 699 0130 FFF7FEFF 		bl	HAL_SYSTICK_Config
 297:Src/main.c    **** 
 298:Src/main.c    **** 
 299:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 700              		.loc 1 299 0
 701 0134 0420     		movs	r0, #4
 702 0136 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 300:Src/main.c    **** 
 301:Src/main.c    **** 
ARM GAS  /tmp/ccFeNcGU.s 			page 22


 302:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 703              		.loc 1 302 0
 704 013a 0022     		movs	r2, #0
 705 013c 0021     		movs	r1, #0
 706 013e 4FF0FF30 		mov	r0, #-1
 707 0142 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 303:Src/main.c    **** 
 304:Src/main.c    **** }
 708              		.loc 1 304 0
 709 0146 00BF     		nop
 710 0148 D037     		adds	r7, r7, #208
 711              	.LCFI24:
 712              		.cfi_def_cfa_offset 8
 713 014a BD46     		mov	sp, r7
 714              	.LCFI25:
 715              		.cfi_def_cfa_register 13
 716              		@ sp needed
 717 014c 80BD     		pop	{r7, pc}
 718              	.L22:
 719 014e 00BF     		.align	2
 720              	.L21:
 721 0150 00380240 		.word	1073887232
 722 0154 00700040 		.word	1073770496
 723 0158 40000000 		.word	.LC3
 724 015c 60F20300 		.word	258656
 725 0160 D34D6210 		.word	274877907
 726              		.cfi_endproc
 727              	.LFE142:
 729              		.section	.rodata
 730 004b 00       		.align	2
 731              	.LC4:
 732 004c 4552524F 		.ascii	"ERROR EVENT %s - %d\015\012\000"
 732      52204556 
 732      454E5420 
 732      2573202D 
 732      2025640D 
 733              		.section	.text._Error_Handler,"ax",%progbits
 734              		.align	1
 735              		.global	_Error_Handler
 736              		.syntax unified
 737              		.thumb
 738              		.thumb_func
 739              		.fpu fpv4-sp-d16
 741              	_Error_Handler:
 742              	.LFB143:
 305:Src/main.c    **** 
 306:Src/main.c    **** 
 307:Src/main.c    **** void _Error_Handler(char *file, int line)
 308:Src/main.c    **** {
 743              		.loc 1 308 0
 744              		.cfi_startproc
 745              		@ args = 0, pretend = 0, frame = 8
 746              		@ frame_needed = 1, uses_anonymous_args = 0
 747 0000 80B5     		push	{r7, lr}
 748              	.LCFI26:
 749              		.cfi_def_cfa_offset 8
 750              		.cfi_offset 7, -8
ARM GAS  /tmp/ccFeNcGU.s 			page 23


 751              		.cfi_offset 14, -4
 752 0002 82B0     		sub	sp, sp, #8
 753              	.LCFI27:
 754              		.cfi_def_cfa_offset 16
 755 0004 00AF     		add	r7, sp, #0
 756              	.LCFI28:
 757              		.cfi_def_cfa_register 7
 758 0006 7860     		str	r0, [r7, #4]
 759 0008 3960     		str	r1, [r7]
 309:Src/main.c    **** 
 310:Src/main.c    ****     mprintf("ERROR EVENT %s - %d\r\n", file, line);
 760              		.loc 1 310 0
 761 000a 3A68     		ldr	r2, [r7]
 762 000c 7968     		ldr	r1, [r7, #4]
 763 000e 0348     		ldr	r0, .L24
 764 0010 FFF7FEFF 		bl	mprintf
 311:Src/main.c    **** 
 312:Src/main.c    **** }
 765              		.loc 1 312 0
 766 0014 00BF     		nop
 767 0016 0837     		adds	r7, r7, #8
 768              	.LCFI29:
 769              		.cfi_def_cfa_offset 8
 770 0018 BD46     		mov	sp, r7
 771              	.LCFI30:
 772              		.cfi_def_cfa_register 13
 773              		@ sp needed
 774 001a 80BD     		pop	{r7, pc}
 775              	.L25:
 776              		.align	2
 777              	.L24:
 778 001c 4C000000 		.word	.LC4
 779              		.cfi_endproc
 780              	.LFE143:
 782              		.section	.rodata
 783 0062 0000     		.align	2
 784              	.LC5:
 785 0064 25730D0A 		.ascii	"%s\015\012\000"
 785      00
 786              		.section	.text._Event_Handler,"ax",%progbits
 787              		.align	1
 788              		.global	_Event_Handler
 789              		.syntax unified
 790              		.thumb
 791              		.thumb_func
 792              		.fpu fpv4-sp-d16
 794              	_Event_Handler:
 795              	.LFB144:
 313:Src/main.c    **** 
 314:Src/main.c    **** void _Event_Handler(char *Event)
 315:Src/main.c    **** {
 796              		.loc 1 315 0
 797              		.cfi_startproc
 798              		@ args = 0, pretend = 0, frame = 8
 799              		@ frame_needed = 1, uses_anonymous_args = 0
 800 0000 80B5     		push	{r7, lr}
 801              	.LCFI31:
ARM GAS  /tmp/ccFeNcGU.s 			page 24


 802              		.cfi_def_cfa_offset 8
 803              		.cfi_offset 7, -8
 804              		.cfi_offset 14, -4
 805 0002 82B0     		sub	sp, sp, #8
 806              	.LCFI32:
 807              		.cfi_def_cfa_offset 16
 808 0004 00AF     		add	r7, sp, #0
 809              	.LCFI33:
 810              		.cfi_def_cfa_register 7
 811 0006 7860     		str	r0, [r7, #4]
 316:Src/main.c    ****     mprintf("%s\r\n", Event);
 812              		.loc 1 316 0
 813 0008 7968     		ldr	r1, [r7, #4]
 814 000a 0348     		ldr	r0, .L27
 815 000c FFF7FEFF 		bl	mprintf
 317:Src/main.c    **** }
 816              		.loc 1 317 0
 817 0010 00BF     		nop
 818 0012 0837     		adds	r7, r7, #8
 819              	.LCFI34:
 820              		.cfi_def_cfa_offset 8
 821 0014 BD46     		mov	sp, r7
 822              	.LCFI35:
 823              		.cfi_def_cfa_register 13
 824              		@ sp needed
 825 0016 80BD     		pop	{r7, pc}
 826              	.L28:
 827              		.align	2
 828              	.L27:
 829 0018 64000000 		.word	.LC5
 830              		.cfi_endproc
 831              	.LFE144:
 833              		.text
 834              	.Letext0:
 835              		.file 3 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stdarg.h"
 836              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 837              		.file 5 "/usr/include/newlib/sys/lock.h"
 838              		.file 6 "/usr/include/newlib/sys/_types.h"
 839              		.file 7 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 840              		.file 8 "/usr/include/newlib/sys/reent.h"
 841              		.file 9 "<built-in>"
 842              		.file 10 "/usr/include/newlib/sys/_stdint.h"
 843              		.file 11 "Inc/main.h"
 844              		.file 12 "Drivers/CMSIS/Include/core_cm7.h"
 845              		.file 13 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 846              		.file 14 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f746xx.h"
 847              		.file 15 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 848              		.file 16 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rcc_ex.h"
 849              		.file 17 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rcc.h"
 850              		.file 18 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 851              		.file 19 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_eth.h"
 852              		.file 20 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_i2c.h"
 853              		.file 21 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rtc.h"
 854              		.file 22 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_spi.h"
 855              		.file 23 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim.h"
 856              		.file 24 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_uart.h"
 857              		.file 25 "Inc/eth.h"
ARM GAS  /tmp/ccFeNcGU.s 			page 25


 858              		.file 26 "Inc/spi.h"
 859              		.file 27 "Inc/i2c.h"
 860              		.file 28 "Inc/rtc.h"
 861              		.file 29 "Inc/tim.h"
 862              		.file 30 "Inc/usart.h"
 863              		.file 31 "Inc/motor.h"
 864              		.file 32 "Inc/sensor.h"
 865              		.file 33 "Inc/gps.h"
 866              		.file 34 "Inc/spicom.h"
ARM GAS  /tmp/ccFeNcGU.s 			page 26


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
                            *COM*:0000000000000004 SpiTxData
                            *COM*:0000000000000004 SpiRxData
                            *COM*:0000000000000004 UpdateFile
                            *COM*:0000000000000008 motor1
                            *COM*:0000000000000008 motor2
                            *COM*:0000000000000008 motor3
                            *COM*:0000000000000008 motor4
                            *COM*:0000000000000014 sensorValues
                            *COM*:00000000000001a0 gpsData
                            *COM*:0000000000000004 now
                            *COM*:0000000000000004 last
     /tmp/ccFeNcGU.s:29     .rodata:0000000000000000 $d
     /tmp/ccFeNcGU.s:36     .text.main:0000000000000000 $t
     /tmp/ccFeNcGU.s:43     .text.main:0000000000000000 main
     /tmp/ccFeNcGU.s:530    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccFeNcGU.s:462    .text.mprintf:0000000000000000 mprintf
     /tmp/ccFeNcGU.s:212    .text.bootRTOS:0000000000000000 bootRTOS
     /tmp/ccFeNcGU.s:190    .text.main:00000000000000fc $d
     /tmp/ccFeNcGU.s:205    .text.bootRTOS:0000000000000000 $t
     /tmp/ccFeNcGU.s:378    .text.bootRTOS:0000000000000118 $d
     /tmp/ccFeNcGU.s:391    .text.vprint:0000000000000000 $t
     /tmp/ccFeNcGU.s:398    .text.vprint:0000000000000000 vprint
     /tmp/ccFeNcGU.s:450    .text.vprint:0000000000000044 $d
     /tmp/ccFeNcGU.s:455    .text.mprintf:0000000000000000 $t
     /tmp/ccFeNcGU.s:523    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccFeNcGU.s:741    .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/ccFeNcGU.s:721    .text.SystemClock_Config:0000000000000150 $d
     /tmp/ccFeNcGU.s:734    .text._Error_Handler:0000000000000000 $t
     /tmp/ccFeNcGU.s:778    .text._Error_Handler:000000000000001c $d
     /tmp/ccFeNcGU.s:787    .text._Event_Handler:0000000000000000 $t
     /tmp/ccFeNcGU.s:794    .text._Event_Handler:0000000000000000 _Event_Handler
     /tmp/ccFeNcGU.s:829    .text._Event_Handler:0000000000000018 $d

UNDEFINED SYMBOLS
malloc
HAL_Init
MX_GPIO_Init
MX_I2C2_Init
MX_I2C4_Init
MX_SPI1_Init
MX_TIM3_Init
MX_UART4_Init
MX_USART1_UART_Init
MX_TIM2_Init
HAL_SPI_TransmitReceive_IT
HAL_GetTick
checkDataAvailable
setDataRecieved
HAL_GPIO_TogglePin
processUpdateData
updateFinished
loadUpdateFile
free
hspi1
HAL_DeInit
ARM GAS  /tmp/ccFeNcGU.s 			page 27


HAL_RCC_DeInit
HAL_SPI_DeInit
HAL_I2C_DeInit
hi2c4
hi2c2
vsprintf
strlen
HAL_UART_Transmit
huart1
HAL_RCC_OscConfig
HAL_PWREx_EnableOverDrive
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
