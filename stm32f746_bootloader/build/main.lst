ARM GAS  /tmp/cc3BkDrd.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	motor1,8,4
  18              		.comm	motor2,8,4
  19              		.comm	motor3,8,4
  20              		.comm	motor4,8,4
  21              		.comm	sensorValues,20,4
  22              		.comm	gpsData,416,4
  23              		.section	.rodata
  24              		.align	2
  25              	.LC0:
  26 0000 426F6F74 		.ascii	"Bootloader Initializing...\015\012\000"
  26      6C6F6164 
  26      65722049 
  26      6E697469 
  26      616C697A 
  27              		.section	.text.main,"ax",%progbits
  28              		.align	1
  29              		.global	main
  30              		.syntax unified
  31              		.thumb
  32              		.thumb_func
  33              		.fpu fpv4-sp-d16
  35              	main:
  36              	.LFB136:
  37              		.file 1 "Src/main.c"
   1:Src/main.c    **** /**
   2:Src/main.c    ****   ******************************************************************************
   3:Src/main.c    ****   * @file           : main.c
   4:Src/main.c    ****   * @brief          : Main program body
   5:Src/main.c    ****   ******************************************************************************
   6:Src/main.c    ****   ** This notice applies to any and all portions of this file
   7:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   8:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
   9:Src/main.c    ****   * inserted by the user or by software development tools
  10:Src/main.c    ****   * are owned by their respective copyright owners.
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * COPYRIGHT(c) 2018 STMicroelectronics
  13:Src/main.c    ****   *
  14:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  15:Src/main.c    ****   * are permitted provided that the following conditions are met:
  16:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  17:Src/main.c    ****   *      this list of conditions and the following disclaimer.
ARM GAS  /tmp/cc3BkDrd.s 			page 2


  18:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  19:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  20:Src/main.c    ****   *      and/or other materials provided with the distribution.
  21:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  22:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  23:Src/main.c    ****   *      without specific prior written permission.
  24:Src/main.c    ****   *
  25:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  26:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  27:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  28:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  29:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  30:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  31:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  32:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  33:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  34:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:Src/main.c    ****   *
  36:Src/main.c    ****   ******************************************************************************
  37:Src/main.c    ****   */
  38:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  39:Src/main.c    **** 
  40:Src/main.c    **** #include <stdio.h>
  41:Src/main.c    **** #include "main.h"
  42:Src/main.c    **** #include "stm32f7xx_hal.h"
  43:Src/main.c    **** #include "eth.h"
  44:Src/main.c    **** #include "i2c.h"
  45:Src/main.c    **** #include "rtc.h"
  46:Src/main.c    **** #include "spi.h"
  47:Src/main.c    **** #include "tim.h"
  48:Src/main.c    **** #include "usart.h"
  49:Src/main.c    **** #include "gpio.h"
  50:Src/main.c    **** #include "motor.h"
  51:Src/main.c    **** #include "sensor.h"
  52:Src/main.c    **** #include "gps.h"
  53:Src/main.c    **** 
  54:Src/main.c    **** #include <stdarg.h>
  55:Src/main.c    **** #include <string.h>
  56:Src/main.c    **** #include <inttypes.h>
  57:Src/main.c    **** #include <stdlib.h>
  58:Src/main.c    **** 
  59:Src/main.c    **** #define SUCCESS 0
  60:Src/main.c    **** #define FAIL -1
  61:Src/main.c    **** 
  62:Src/main.c    **** #define APPLICATION_ADDRESS        0x08010000
  63:Src/main.c    **** #define UPDATE_FILE_ADRESS         0x08080000
  64:Src/main.c    **** 
  65:Src/main.c    **** 
  66:Src/main.c    **** typedef void (*pFunction)(void);
  67:Src/main.c    **** 
  68:Src/main.c    **** void SystemClock_Config(void);
  69:Src/main.c    **** void vprint(const char *fmt, va_list argp);
  70:Src/main.c    **** void mprintf(const char *fmt, ...);
  71:Src/main.c    **** void EnablePrivilegedMode (void);
  72:Src/main.c    **** void bootRTOS();
  73:Src/main.c    **** int checkUpdate();
  74:Src/main.c    **** void loadUpdateFile();
ARM GAS  /tmp/cc3BkDrd.s 			page 3


  75:Src/main.c    **** void writeFlash(uint8_t Data, long Address);
  76:Src/main.c    **** uint8_t readFlash(int Address);
  77:Src/main.c    **** 
  78:Src/main.c    **** 
  79:Src/main.c    **** 
  80:Src/main.c    **** 
  81:Src/main.c    **** //void SPI1_IRQHandler(void)
  82:Src/main.c    **** //{
  83:Src/main.c    **** 
  84:Src/main.c    **** //  HAL_SPI_IRQHandler(&hspi1);
  85:Src/main.c    **** 
  86:Src/main.c    **** //}
  87:Src/main.c    **** 
  88:Src/main.c    **** 
  89:Src/main.c    **** 
  90:Src/main.c    **** int main(void)
  91:Src/main.c    **** {
  38              		.loc 1 91 0
  39              		.cfi_startproc
  40              		@ args = 0, pretend = 0, frame = 8
  41              		@ frame_needed = 1, uses_anonymous_args = 0
  42 0000 80B5     		push	{r7, lr}
  43              	.LCFI0:
  44              		.cfi_def_cfa_offset 8
  45              		.cfi_offset 7, -8
  46              		.cfi_offset 14, -4
  47 0002 82B0     		sub	sp, sp, #8
  48              	.LCFI1:
  49              		.cfi_def_cfa_offset 16
  50 0004 00AF     		add	r7, sp, #0
  51              	.LCFI2:
  52              		.cfi_def_cfa_register 7
  92:Src/main.c    ****     int ret = 0;
  53              		.loc 1 92 0
  54 0006 0023     		movs	r3, #0
  55 0008 7B60     		str	r3, [r7, #4]
  93:Src/main.c    **** 
  94:Src/main.c    ****     HAL_Init();
  56              		.loc 1 94 0
  57 000a FFF7FEFF 		bl	HAL_Init
  95:Src/main.c    ****     SystemClock_Config();
  58              		.loc 1 95 0
  59 000e FFF7FEFF 		bl	SystemClock_Config
  96:Src/main.c    ****     MX_GPIO_Init();
  60              		.loc 1 96 0
  61 0012 FFF7FEFF 		bl	MX_GPIO_Init
  97:Src/main.c    ****     MX_I2C2_Init();
  62              		.loc 1 97 0
  63 0016 FFF7FEFF 		bl	MX_I2C2_Init
  98:Src/main.c    ****     MX_I2C4_Init();
  64              		.loc 1 98 0
  65 001a FFF7FEFF 		bl	MX_I2C4_Init
  99:Src/main.c    ****     MX_SPI1_Init();
  66              		.loc 1 99 0
  67 001e FFF7FEFF 		bl	MX_SPI1_Init
 100:Src/main.c    ****     MX_TIM3_Init();
  68              		.loc 1 100 0
ARM GAS  /tmp/cc3BkDrd.s 			page 4


  69 0022 FFF7FEFF 		bl	MX_TIM3_Init
 101:Src/main.c    ****     MX_UART4_Init();
  70              		.loc 1 101 0
  71 0026 FFF7FEFF 		bl	MX_UART4_Init
 102:Src/main.c    ****     MX_USART1_UART_Init();
  72              		.loc 1 102 0
  73 002a FFF7FEFF 		bl	MX_USART1_UART_Init
 103:Src/main.c    ****     MX_TIM2_Init();
  74              		.loc 1 103 0
  75 002e FFF7FEFF 		bl	MX_TIM2_Init
 104:Src/main.c    **** 
 105:Src/main.c    ****     mprintf("Bootloader Initializing...\r\n");
  76              		.loc 1 105 0
  77 0032 0E48     		ldr	r0, .L5
  78 0034 FFF7FEFF 		bl	mprintf
 106:Src/main.c    **** 
 107:Src/main.c    **** 
 108:Src/main.c    ****     HAL_Delay(5000);
  79              		.loc 1 108 0
  80 0038 41F28830 		movw	r0, #5000
  81 003c FFF7FEFF 		bl	HAL_Delay
 109:Src/main.c    **** 
 110:Src/main.c    **** //    HAL_FLASH_Unlock();
 111:Src/main.c    **** //    FLASH_Erase_Sector(FLASH_SECTOR_6, VOLTAGE_RANGE_3);
 112:Src/main.c    **** //    FLASH_Erase_Sector(FLASH_SECTOR_7, VOLTAGE_RANGE_3);
 113:Src/main.c    **** //    HAL_FLASH_Lock();
 114:Src/main.c    **** 
 115:Src/main.c    **** 
 116:Src/main.c    ****     ret = checkUpdate();
  82              		.loc 1 116 0
  83 0040 FFF7FEFF 		bl	checkUpdate
  84 0044 7860     		str	r0, [r7, #4]
 117:Src/main.c    **** 
 118:Src/main.c    ****     if(ret == SUCCESS)
  85              		.loc 1 118 0
  86 0046 7B68     		ldr	r3, [r7, #4]
  87 0048 002B     		cmp	r3, #0
  88 004a 08D1     		bne	.L2
 119:Src/main.c    ****     {
 120:Src/main.c    ****         loadUpdateFile();
  89              		.loc 1 120 0
  90 004c FFF7FEFF 		bl	loadUpdateFile
 121:Src/main.c    ****         HAL_Delay(1000);
  91              		.loc 1 121 0
  92 0050 4FF47A70 		mov	r0, #1000
  93 0054 FFF7FEFF 		bl	HAL_Delay
 122:Src/main.c    ****         bootRTOS();
  94              		.loc 1 122 0
  95 0058 FFF7FEFF 		bl	bootRTOS
  96 005c 01E0     		b	.L3
  97              	.L2:
 123:Src/main.c    ****     }
 124:Src/main.c    ****     else
 125:Src/main.c    ****     {
 126:Src/main.c    ****         bootRTOS();
  98              		.loc 1 126 0
  99 005e FFF7FEFF 		bl	bootRTOS
ARM GAS  /tmp/cc3BkDrd.s 			page 5


 100              	.L3:
 101 0062 0023     		movs	r3, #0
 127:Src/main.c    ****     }
 128:Src/main.c    **** 
 129:Src/main.c    **** 
 130:Src/main.c    **** }
 102              		.loc 1 130 0
 103 0064 1846     		mov	r0, r3
 104 0066 0837     		adds	r7, r7, #8
 105              	.LCFI3:
 106              		.cfi_def_cfa_offset 8
 107 0068 BD46     		mov	sp, r7
 108              	.LCFI4:
 109              		.cfi_def_cfa_register 13
 110              		@ sp needed
 111 006a 80BD     		pop	{r7, pc}
 112              	.L6:
 113              		.align	2
 114              	.L5:
 115 006c 00000000 		.word	.LC0
 116              		.cfi_endproc
 117              	.LFE136:
 119              		.section	.rodata
 120 001d 000000   		.align	2
 121              	.LC1:
 122 0020 43686563 		.ascii	"Checking Firmware Update File...\015\012\000"
 122      6B696E67 
 122      20466972 
 122      6D776172 
 122      65205570 
 123 0043 00       		.align	2
 124              	.LC2:
 125 0044 54686572 		.ascii	"There is no update file in the flash\015\012\000"
 125      65206973 
 125      206E6F20 
 125      75706461 
 125      74652066 
 126 006b 00       		.align	2
 127              	.LC3:
 128 006c 41205570 		.ascii	"A Update file has been found in the flash\000"
 128      64617465 
 128      2066696C 
 128      65206861 
 128      73206265 
 129              		.section	.text.checkUpdate,"ax",%progbits
 130              		.align	1
 131              		.global	checkUpdate
 132              		.syntax unified
 133              		.thumb
 134              		.thumb_func
 135              		.fpu fpv4-sp-d16
 137              	checkUpdate:
 138              	.LFB137:
 131:Src/main.c    **** 
 132:Src/main.c    **** int checkUpdate()
 133:Src/main.c    **** {
 139              		.loc 1 133 0
ARM GAS  /tmp/cc3BkDrd.s 			page 6


 140              		.cfi_startproc
 141              		@ args = 0, pretend = 0, frame = 8
 142              		@ frame_needed = 1, uses_anonymous_args = 0
 143 0000 90B5     		push	{r4, r7, lr}
 144              	.LCFI5:
 145              		.cfi_def_cfa_offset 12
 146              		.cfi_offset 4, -12
 147              		.cfi_offset 7, -8
 148              		.cfi_offset 14, -4
 149 0002 83B0     		sub	sp, sp, #12
 150              	.LCFI6:
 151              		.cfi_def_cfa_offset 24
 152 0004 00AF     		add	r7, sp, #0
 153              	.LCFI7:
 154              		.cfi_def_cfa_register 7
 134:Src/main.c    **** 
 135:Src/main.c    ****     uint32_t data;
 136:Src/main.c    **** 
 137:Src/main.c    ****     mprintf("Checking Firmware Update File...\r\n");
 155              		.loc 1 137 0
 156 0006 2148     		ldr	r0, .L11
 157 0008 FFF7FEFF 		bl	mprintf
 138:Src/main.c    **** 
 139:Src/main.c    ****     data = readFlash(UPDATE_FILE_ADRESS) | (readFlash(UPDATE_FILE_ADRESS + 1) << 8)
 158              		.loc 1 139 0
 159 000c 2048     		ldr	r0, .L11+4
 160 000e FFF7FEFF 		bl	readFlash
 161 0012 0346     		mov	r3, r0
 162 0014 1C46     		mov	r4, r3
 163 0016 1F48     		ldr	r0, .L11+8
 164 0018 FFF7FEFF 		bl	readFlash
 165 001c 0346     		mov	r3, r0
 166 001e 1B02     		lsls	r3, r3, #8
 167 0020 1C43     		orrs	r4, r4, r3
 140:Src/main.c    ****             | readFlash(UPDATE_FILE_ADRESS + 2) << 16 | readFlash(UPDATE_FILE_ADRESS + 3) << 24;
 168              		.loc 1 140 0
 169 0022 1D48     		ldr	r0, .L11+12
 170 0024 FFF7FEFF 		bl	readFlash
 171 0028 0346     		mov	r3, r0
 172 002a 1B04     		lsls	r3, r3, #16
 173 002c 1C43     		orrs	r4, r4, r3
 174 002e 1B48     		ldr	r0, .L11+16
 175 0030 FFF7FEFF 		bl	readFlash
 176 0034 0346     		mov	r3, r0
 177 0036 1B06     		lsls	r3, r3, #24
 178 0038 2343     		orrs	r3, r3, r4
 139:Src/main.c    ****             | readFlash(UPDATE_FILE_ADRESS + 2) << 16 | readFlash(UPDATE_FILE_ADRESS + 3) << 24;
 179              		.loc 1 139 0
 180 003a 7B60     		str	r3, [r7, #4]
 141:Src/main.c    **** 
 142:Src/main.c    **** 
 143:Src/main.c    **** 
 144:Src/main.c    ****     if(data == 0xffffffff)
 181              		.loc 1 144 0
 182 003c 7B68     		ldr	r3, [r7, #4]
 183 003e B3F1FF3F 		cmp	r3, #-1
 184 0042 05D1     		bne	.L8
ARM GAS  /tmp/cc3BkDrd.s 			page 7


 145:Src/main.c    ****     {
 146:Src/main.c    ****         mprintf("There is no update file in the flash\r\n");
 185              		.loc 1 146 0
 186 0044 1648     		ldr	r0, .L11+20
 187 0046 FFF7FEFF 		bl	mprintf
 147:Src/main.c    ****         return FAIL;
 188              		.loc 1 147 0
 189 004a 4FF0FF33 		mov	r3, #-1
 190 004e 19E0     		b	.L9
 191              	.L8:
 148:Src/main.c    **** 
 149:Src/main.c    ****     }
 150:Src/main.c    ****     else if(data > 512000 || data < 0)
 192              		.loc 1 150 0
 193 0050 7B68     		ldr	r3, [r7, #4]
 194 0052 B3F5FA2F 		cmp	r3, #512000
 195 0056 11D9     		bls	.L10
 151:Src/main.c    ****     {
 152:Src/main.c    ****         mprintf("There is no update file in the flash\r\n");
 196              		.loc 1 152 0
 197 0058 1148     		ldr	r0, .L11+20
 198 005a FFF7FEFF 		bl	mprintf
 153:Src/main.c    **** 
 154:Src/main.c    ****         HAL_FLASH_Unlock();
 199              		.loc 1 154 0
 200 005e FFF7FEFF 		bl	HAL_FLASH_Unlock
 155:Src/main.c    ****         FLASH_Erase_Sector(FLASH_SECTOR_6, VOLTAGE_RANGE_3);
 201              		.loc 1 155 0
 202 0062 0221     		movs	r1, #2
 203 0064 0620     		movs	r0, #6
 204 0066 FFF7FEFF 		bl	FLASH_Erase_Sector
 156:Src/main.c    ****         FLASH_Erase_Sector(FLASH_SECTOR_7, VOLTAGE_RANGE_3);
 205              		.loc 1 156 0
 206 006a 0221     		movs	r1, #2
 207 006c 0720     		movs	r0, #7
 208 006e FFF7FEFF 		bl	FLASH_Erase_Sector
 157:Src/main.c    ****         HAL_FLASH_Lock();
 209              		.loc 1 157 0
 210 0072 FFF7FEFF 		bl	HAL_FLASH_Lock
 158:Src/main.c    **** 
 159:Src/main.c    ****         return FAIL;
 211              		.loc 1 159 0
 212 0076 4FF0FF33 		mov	r3, #-1
 213 007a 03E0     		b	.L9
 214              	.L10:
 160:Src/main.c    ****     }
 161:Src/main.c    ****     else
 162:Src/main.c    ****     {
 163:Src/main.c    ****         mprintf("A Update file has been found in the flash");
 215              		.loc 1 163 0
 216 007c 0948     		ldr	r0, .L11+24
 217 007e FFF7FEFF 		bl	mprintf
 164:Src/main.c    ****         return SUCCESS;
 218              		.loc 1 164 0
 219 0082 0023     		movs	r3, #0
 220              	.L9:
 165:Src/main.c    ****     }
ARM GAS  /tmp/cc3BkDrd.s 			page 8


 166:Src/main.c    **** 
 167:Src/main.c    **** }
 221              		.loc 1 167 0
 222 0084 1846     		mov	r0, r3
 223 0086 0C37     		adds	r7, r7, #12
 224              	.LCFI8:
 225              		.cfi_def_cfa_offset 12
 226 0088 BD46     		mov	sp, r7
 227              	.LCFI9:
 228              		.cfi_def_cfa_register 13
 229              		@ sp needed
 230 008a 90BD     		pop	{r4, r7, pc}
 231              	.L12:
 232              		.align	2
 233              	.L11:
 234 008c 20000000 		.word	.LC1
 235 0090 00000808 		.word	134742016
 236 0094 01000808 		.word	134742017
 237 0098 02000808 		.word	134742018
 238 009c 03000808 		.word	134742019
 239 00a0 44000000 		.word	.LC2
 240 00a4 6C000000 		.word	.LC3
 241              		.cfi_endproc
 242              	.LFE137:
 244              		.section	.rodata
 245 0096 0000     		.align	2
 246              	.LC4:
 247 0098 55706461 		.ascii	"Update File Size : %d\015\012\000"
 247      74652046 
 247      696C6520 
 247      53697A65 
 247      203A2025 
 248              		.align	2
 249              	.LC5:
 250 00b0 48616C20 		.ascii	"Hal flash error\015\012\000"
 250      666C6173 
 250      68206572 
 250      726F720D 
 250      0A00
 251 00c2 0000     		.align	2
 252              	.LC6:
 253 00c4 55706461 		.ascii	"UpdateFile has been writen on memory\015\012\000"
 253      74654669 
 253      6C652068 
 253      61732062 
 253      65656E20 
 254              		.section	.text.loadUpdateFile,"ax",%progbits
 255              		.align	1
 256              		.global	loadUpdateFile
 257              		.syntax unified
 258              		.thumb
 259              		.thumb_func
 260              		.fpu fpv4-sp-d16
 262              	loadUpdateFile:
 263              	.LFB138:
 168:Src/main.c    **** 
 169:Src/main.c    **** 
ARM GAS  /tmp/cc3BkDrd.s 			page 9


 170:Src/main.c    **** 
 171:Src/main.c    **** void loadUpdateFile()
 172:Src/main.c    **** {
 264              		.loc 1 172 0
 265              		.cfi_startproc
 266              		@ args = 0, pretend = 0, frame = 24
 267              		@ frame_needed = 1, uses_anonymous_args = 0
 268 0000 90B5     		push	{r4, r7, lr}
 269              	.LCFI10:
 270              		.cfi_def_cfa_offset 12
 271              		.cfi_offset 4, -12
 272              		.cfi_offset 7, -8
 273              		.cfi_offset 14, -4
 274 0002 87B0     		sub	sp, sp, #28
 275              	.LCFI11:
 276              		.cfi_def_cfa_offset 40
 277 0004 00AF     		add	r7, sp, #0
 278              	.LCFI12:
 279              		.cfi_def_cfa_register 7
 173:Src/main.c    ****     uint32_t file_size;
 174:Src/main.c    ****     unsigned char *data;
 175:Src/main.c    ****     HAL_StatusTypeDef status;
 176:Src/main.c    **** 
 177:Src/main.c    ****     file_size = readFlash(UPDATE_FILE_ADRESS) | readFlash(UPDATE_FILE_ADRESS + 1) << 8
 280              		.loc 1 177 0
 281 0006 4348     		ldr	r0, .L19
 282 0008 FFF7FEFF 		bl	readFlash
 283 000c 0346     		mov	r3, r0
 284 000e 1C46     		mov	r4, r3
 285 0010 4148     		ldr	r0, .L19+4
 286 0012 FFF7FEFF 		bl	readFlash
 287 0016 0346     		mov	r3, r0
 288 0018 1B02     		lsls	r3, r3, #8
 289 001a 1C43     		orrs	r4, r4, r3
 178:Src/main.c    ****             | readFlash(UPDATE_FILE_ADRESS + 2) << 16 | readFlash(UPDATE_FILE_ADRESS + 3) << 24;
 290              		.loc 1 178 0
 291 001c 3F48     		ldr	r0, .L19+8
 292 001e FFF7FEFF 		bl	readFlash
 293 0022 0346     		mov	r3, r0
 294 0024 1B04     		lsls	r3, r3, #16
 295 0026 1C43     		orrs	r4, r4, r3
 296 0028 3D48     		ldr	r0, .L19+12
 297 002a FFF7FEFF 		bl	readFlash
 298 002e 0346     		mov	r3, r0
 299 0030 1B06     		lsls	r3, r3, #24
 300 0032 2343     		orrs	r3, r3, r4
 177:Src/main.c    ****             | readFlash(UPDATE_FILE_ADRESS + 2) << 16 | readFlash(UPDATE_FILE_ADRESS + 3) << 24;
 301              		.loc 1 177 0
 302 0034 FB60     		str	r3, [r7, #12]
 179:Src/main.c    **** 
 180:Src/main.c    **** 
 181:Src/main.c    ****     mprintf("Update File Size : %d\r\n", file_size);
 303              		.loc 1 181 0
 304 0036 F968     		ldr	r1, [r7, #12]
 305 0038 3A48     		ldr	r0, .L19+16
 306 003a FFF7FEFF 		bl	mprintf
 182:Src/main.c    **** 
ARM GAS  /tmp/cc3BkDrd.s 			page 10


 183:Src/main.c    ****     data = malloc(file_size);
 307              		.loc 1 183 0
 308 003e F868     		ldr	r0, [r7, #12]
 309 0040 FFF7FEFF 		bl	malloc
 310 0044 0346     		mov	r3, r0
 311 0046 BB60     		str	r3, [r7, #8]
 184:Src/main.c    **** 
 185:Src/main.c    **** 
 186:Src/main.c    ****     HAL_FLASH_Unlock();
 312              		.loc 1 186 0
 313 0048 FFF7FEFF 		bl	HAL_FLASH_Unlock
 187:Src/main.c    **** 
 188:Src/main.c    ****     FLASH_Erase_Sector(FLASH_SECTOR_2, VOLTAGE_RANGE_3);
 314              		.loc 1 188 0
 315 004c 0221     		movs	r1, #2
 316 004e 0220     		movs	r0, #2
 317 0050 FFF7FEFF 		bl	FLASH_Erase_Sector
 189:Src/main.c    ****     FLASH_Erase_Sector(FLASH_SECTOR_3, VOLTAGE_RANGE_3);
 318              		.loc 1 189 0
 319 0054 0221     		movs	r1, #2
 320 0056 0320     		movs	r0, #3
 321 0058 FFF7FEFF 		bl	FLASH_Erase_Sector
 190:Src/main.c    ****     FLASH_Erase_Sector(FLASH_SECTOR_4, VOLTAGE_RANGE_3);
 322              		.loc 1 190 0
 323 005c 0221     		movs	r1, #2
 324 005e 0420     		movs	r0, #4
 325 0060 FFF7FEFF 		bl	FLASH_Erase_Sector
 191:Src/main.c    ****     FLASH_Erase_Sector(FLASH_SECTOR_5, VOLTAGE_RANGE_3);
 326              		.loc 1 191 0
 327 0064 0221     		movs	r1, #2
 328 0066 0520     		movs	r0, #5
 329 0068 FFF7FEFF 		bl	FLASH_Erase_Sector
 192:Src/main.c    **** 
 193:Src/main.c    ****     HAL_Delay(50);
 330              		.loc 1 193 0
 331 006c 3220     		movs	r0, #50
 332 006e FFF7FEFF 		bl	HAL_Delay
 333              	.LBB12:
 194:Src/main.c    **** 
 195:Src/main.c    ****     for(int i=0; i<file_size; i++)
 334              		.loc 1 195 0
 335 0072 0023     		movs	r3, #0
 336 0074 7B61     		str	r3, [r7, #20]
 337 0076 0DE0     		b	.L14
 338              	.L15:
 196:Src/main.c    ****     {
 197:Src/main.c    ****         data[i] = readFlash(UPDATE_FILE_ADRESS + 4 + i);
 339              		.loc 1 197 0 discriminator 3
 340 0078 7B69     		ldr	r3, [r7, #20]
 341 007a BA68     		ldr	r2, [r7, #8]
 342 007c D418     		adds	r4, r2, r3
 343 007e 7A69     		ldr	r2, [r7, #20]
 344 0080 294B     		ldr	r3, .L19+20
 345 0082 1344     		add	r3, r3, r2
 346 0084 1846     		mov	r0, r3
 347 0086 FFF7FEFF 		bl	readFlash
 348 008a 0346     		mov	r3, r0
ARM GAS  /tmp/cc3BkDrd.s 			page 11


 349 008c 2370     		strb	r3, [r4]
 195:Src/main.c    ****     {
 350              		.loc 1 195 0 discriminator 3
 351 008e 7B69     		ldr	r3, [r7, #20]
 352 0090 0133     		adds	r3, r3, #1
 353 0092 7B61     		str	r3, [r7, #20]
 354              	.L14:
 195:Src/main.c    ****     {
 355              		.loc 1 195 0 is_stmt 0 discriminator 1
 356 0094 7A69     		ldr	r2, [r7, #20]
 357 0096 FB68     		ldr	r3, [r7, #12]
 358 0098 9A42     		cmp	r2, r3
 359 009a EDD3     		bcc	.L15
 360              	.LBE12:
 361              	.LBB13:
 198:Src/main.c    ****     }
 199:Src/main.c    **** 
 200:Src/main.c    ****     for(int i=0; i<file_size; i++)
 362              		.loc 1 200 0 is_stmt 1
 363 009c 0023     		movs	r3, #0
 364 009e 3B61     		str	r3, [r7, #16]
 365 00a0 1AE0     		b	.L16
 366              	.L18:
 201:Src/main.c    ****     {
 202:Src/main.c    ****         status = HAL_FLASH_Program(TYPEPROGRAM_BYTE, APPLICATION_ADDRESS + i , data[i]);
 367              		.loc 1 202 0
 368 00a2 3A69     		ldr	r2, [r7, #16]
 369 00a4 214B     		ldr	r3, .L19+24
 370 00a6 1344     		add	r3, r3, r2
 371 00a8 1946     		mov	r1, r3
 372 00aa 3B69     		ldr	r3, [r7, #16]
 373 00ac BA68     		ldr	r2, [r7, #8]
 374 00ae 1344     		add	r3, r3, r2
 375 00b0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 376 00b2 DBB2     		uxtb	r3, r3
 377 00b4 4FF00004 		mov	r4, #0
 378 00b8 1A46     		mov	r2, r3
 379 00ba 2346     		mov	r3, r4
 380 00bc 0020     		movs	r0, #0
 381 00be FFF7FEFF 		bl	HAL_FLASH_Program
 382 00c2 0346     		mov	r3, r0
 383 00c4 FB71     		strb	r3, [r7, #7]
 203:Src/main.c    **** 
 204:Src/main.c    ****         if(status != HAL_OK)
 384              		.loc 1 204 0
 385 00c6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 386 00c8 002B     		cmp	r3, #0
 387 00ca 02D0     		beq	.L17
 205:Src/main.c    ****             mprintf("Hal flash error\r\n");
 388              		.loc 1 205 0
 389 00cc 1848     		ldr	r0, .L19+28
 390 00ce FFF7FEFF 		bl	mprintf
 391              	.L17:
 200:Src/main.c    ****     {
 392              		.loc 1 200 0 discriminator 2
 393 00d2 3B69     		ldr	r3, [r7, #16]
 394 00d4 0133     		adds	r3, r3, #1
ARM GAS  /tmp/cc3BkDrd.s 			page 12


 395 00d6 3B61     		str	r3, [r7, #16]
 396              	.L16:
 200:Src/main.c    ****     {
 397              		.loc 1 200 0 is_stmt 0 discriminator 1
 398 00d8 3A69     		ldr	r2, [r7, #16]
 399 00da FB68     		ldr	r3, [r7, #12]
 400 00dc 9A42     		cmp	r2, r3
 401 00de E0D3     		bcc	.L18
 402              	.LBE13:
 206:Src/main.c    **** 
 207:Src/main.c    ****     }
 208:Src/main.c    **** 
 209:Src/main.c    **** 
 210:Src/main.c    **** 
 211:Src/main.c    ****     FLASH_Erase_Sector(FLASH_SECTOR_6, VOLTAGE_RANGE_3);
 403              		.loc 1 211 0 is_stmt 1
 404 00e0 0221     		movs	r1, #2
 405 00e2 0620     		movs	r0, #6
 406 00e4 FFF7FEFF 		bl	FLASH_Erase_Sector
 212:Src/main.c    ****     HAL_Delay(1);
 407              		.loc 1 212 0
 408 00e8 0120     		movs	r0, #1
 409 00ea FFF7FEFF 		bl	HAL_Delay
 213:Src/main.c    ****     FLASH_Erase_Sector(FLASH_SECTOR_7, VOLTAGE_RANGE_3);
 410              		.loc 1 213 0
 411 00ee 0221     		movs	r1, #2
 412 00f0 0720     		movs	r0, #7
 413 00f2 FFF7FEFF 		bl	FLASH_Erase_Sector
 214:Src/main.c    ****     HAL_Delay(1);
 414              		.loc 1 214 0
 415 00f6 0120     		movs	r0, #1
 416 00f8 FFF7FEFF 		bl	HAL_Delay
 215:Src/main.c    **** 
 216:Src/main.c    ****     HAL_FLASH_Lock();
 417              		.loc 1 216 0
 418 00fc FFF7FEFF 		bl	HAL_FLASH_Lock
 217:Src/main.c    **** 
 218:Src/main.c    **** 
 219:Src/main.c    ****     mprintf("UpdateFile has been writen on memory\r\n");
 419              		.loc 1 219 0
 420 0100 0C48     		ldr	r0, .L19+32
 421 0102 FFF7FEFF 		bl	mprintf
 220:Src/main.c    **** 
 221:Src/main.c    ****     free(data);
 422              		.loc 1 221 0
 423 0106 B868     		ldr	r0, [r7, #8]
 424 0108 FFF7FEFF 		bl	free
 222:Src/main.c    **** 
 223:Src/main.c    **** 
 224:Src/main.c    **** }
 425              		.loc 1 224 0
 426 010c 00BF     		nop
 427 010e 1C37     		adds	r7, r7, #28
 428              	.LCFI13:
 429              		.cfi_def_cfa_offset 12
 430 0110 BD46     		mov	sp, r7
 431              	.LCFI14:
ARM GAS  /tmp/cc3BkDrd.s 			page 13


 432              		.cfi_def_cfa_register 13
 433              		@ sp needed
 434 0112 90BD     		pop	{r4, r7, pc}
 435              	.L20:
 436              		.align	2
 437              	.L19:
 438 0114 00000808 		.word	134742016
 439 0118 01000808 		.word	134742017
 440 011c 02000808 		.word	134742018
 441 0120 03000808 		.word	134742019
 442 0124 98000000 		.word	.LC4
 443 0128 04000808 		.word	134742020
 444 012c 00000108 		.word	134283264
 445 0130 B0000000 		.word	.LC5
 446 0134 C4000000 		.word	.LC6
 447              		.cfi_endproc
 448              	.LFE138:
 450              		.section	.rodata
 451 00eb 00       		.align	2
 452              	.LC7:
 453 00ec 426F6F74 		.ascii	"Booting...\015\012\000"
 453      696E672E 
 453      2E2E0D0A 
 453      00
 454              		.section	.text.bootRTOS,"ax",%progbits
 455              		.align	1
 456              		.global	bootRTOS
 457              		.syntax unified
 458              		.thumb
 459              		.thumb_func
 460              		.fpu fpv4-sp-d16
 462              	bootRTOS:
 463              	.LFB139:
 225:Src/main.c    **** 
 226:Src/main.c    **** 
 227:Src/main.c    **** 
 228:Src/main.c    **** void bootRTOS()
 229:Src/main.c    **** {
 464              		.loc 1 229 0
 465              		.cfi_startproc
 466              		@ args = 0, pretend = 0, frame = 16
 467              		@ frame_needed = 1, uses_anonymous_args = 0
 468 0000 80B5     		push	{r7, lr}
 469              	.LCFI15:
 470              		.cfi_def_cfa_offset 8
 471              		.cfi_offset 7, -8
 472              		.cfi_offset 14, -4
 473 0002 84B0     		sub	sp, sp, #16
 474              	.LCFI16:
 475              		.cfi_def_cfa_offset 24
 476 0004 00AF     		add	r7, sp, #0
 477              	.LCFI17:
 478              		.cfi_def_cfa_register 7
 230:Src/main.c    **** 
 231:Src/main.c    **** 
 232:Src/main.c    ****     pFunction appEntry;
 233:Src/main.c    ****     uint32_t appStack;
ARM GAS  /tmp/cc3BkDrd.s 			page 14


 234:Src/main.c    **** 
 235:Src/main.c    ****     mprintf("Booting...\r\n");
 479              		.loc 1 235 0
 480 0006 0A48     		ldr	r0, .L22
 481 0008 FFF7FEFF 		bl	mprintf
 236:Src/main.c    **** 
 237:Src/main.c    **** //    EnablePrivilegedMode( ) ;
 238:Src/main.c    **** 
 239:Src/main.c    **** 
 240:Src/main.c    **** //    // Disable all interrupts
 241:Src/main.c    **** //    NVIC->ICER[ 0 ] = 0xFFFFFFFF ;
 242:Src/main.c    **** //    NVIC->ICER[ 1 ] = 0xFFFFFFFF ;
 243:Src/main.c    **** //    NVIC->ICER[ 2 ] = 0xFFFFFFFF ;
 244:Src/main.c    **** //    NVIC->ICER[ 3 ] = 0xFFFFFFFF ;
 245:Src/main.c    **** //    NVIC->ICER[ 4 ] = 0xFFFFFFFF ;
 246:Src/main.c    **** //    NVIC->ICER[ 5 ] = 0xFFFFFFFF ;
 247:Src/main.c    **** //    NVIC->ICER[ 6 ] = 0xFFFFFFFF ;
 248:Src/main.c    **** //    NVIC->ICER[ 7 ] = 0xFFFFFFFF ;
 249:Src/main.c    **** 
 250:Src/main.c    **** 
 251:Src/main.c    **** //    // Clear pendings
 252:Src/main.c    **** //    NVIC->ICPR[ 0 ] = 0xFFFFFFFF ;
 253:Src/main.c    **** //    NVIC->ICPR[ 1 ] = 0xFFFFFFFF ;
 254:Src/main.c    **** //    NVIC->ICPR[ 2 ] = 0xFFFFFFFF ;
 255:Src/main.c    **** //    NVIC->ICPR[ 3 ] = 0xFFFFFFFF ;
 256:Src/main.c    **** //    NVIC->ICPR[ 4 ] = 0xFFFFFFFF ;
 257:Src/main.c    **** //    NVIC->ICPR[ 5 ] = 0xFFFFFFFF ;
 258:Src/main.c    **** //    NVIC->ICPR[ 6 ] = 0xFFFFFFFF ;
 259:Src/main.c    **** //    NVIC->ICPR[ 7 ] = 0xFFFFFFFF ;
 260:Src/main.c    **** 
 261:Src/main.c    **** 
 262:Src/main.c    **** //    // Stop sys tick
 263:Src/main.c    **** //    SysTick->CTRL = 0 ;
 264:Src/main.c    **** //    SCB->ICSR |= SCB_ICSR_PENDSTCLR_Msk ;
 265:Src/main.c    **** 
 266:Src/main.c    **** //    // Disable individual fault handlers if the bootloader used them.
 267:Src/main.c    **** //    SCB->SHCSR &= ~( SCB_SHCSR_USGFAULTENA_Msk | \
 268:Src/main.c    **** //                    SCB_SHCSR_BUSFAULTENA_Msk | \
 269:Src/main.c    **** //                    SCB_SHCSR_MEMFAULTENA_Msk ) ;
 270:Src/main.c    **** 
 271:Src/main.c    **** //    // Activate the MSP, if the core is found to currently run with the PSP.
 272:Src/main.c    **** //    if( CONTROL_SPSEL_Msk & __get_CONTROL( ) )
 273:Src/main.c    **** //    {  /* MSP is not active */
 274:Src/main.c    **** //     __set_CONTROL( __get_CONTROL( ) & ~CONTROL_SPSEL_Msk ) ;
 275:Src/main.c    **** //    }
 276:Src/main.c    **** 
 277:Src/main.c    **** //    __set_CONTROL(0);
 278:Src/main.c    **** 
 279:Src/main.c    ****     /* Get the application stack pointer (First entry in the application vector table) */
 280:Src/main.c    ****     appStack = (uint32_t) *((__IO uint32_t*)APPLICATION_ADDRESS);
 482              		.loc 1 280 0
 483 000c 094B     		ldr	r3, .L22+4
 484 000e 1B68     		ldr	r3, [r3]
 485 0010 FB60     		str	r3, [r7, #12]
 281:Src/main.c    **** 
 282:Src/main.c    ****     /* Get the application entry point (Second entry in the application vector table) */
 283:Src/main.c    ****     appEntry = (pFunction) *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
ARM GAS  /tmp/cc3BkDrd.s 			page 15


 486              		.loc 1 283 0
 487 0012 094B     		ldr	r3, .L22+8
 488 0014 1B68     		ldr	r3, [r3]
 489 0016 BB60     		str	r3, [r7, #8]
 490 0018 FB68     		ldr	r3, [r7, #12]
 491 001a 7B60     		str	r3, [r7, #4]
 492              	.LBB14:
 493              	.LBB15:
 494              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
ARM GAS  /tmp/cc3BkDrd.s 			page 16


  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
ARM GAS  /tmp/cc3BkDrd.s 			page 17


 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
ARM GAS  /tmp/cc3BkDrd.s 			page 18


 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 495              		.loc 2 190 0
 496 001c 7B68     		ldr	r3, [r7, #4]
 497              		.syntax unified
 498              	@ 190 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 499 001e 83F30888 		MSR msp, r3
 500              	
 501              	@ 0 "" 2
 502              		.thumb
 503              		.syntax unified
 504              	.LBE15:
 505              	.LBE14:
 284:Src/main.c    **** 
 285:Src/main.c    **** //    /* Set the application stack pointer */
 286:Src/main.c    **** //    SYSCFG->MEMRMP = 0x01;
 287:Src/main.c    **** 
 288:Src/main.c    **** //    SCB->SHCSR &= ~( SCB_SHCSR_USGFAULTENA_Msk | \
 289:Src/main.c    **** //                     SCB_SHCSR_BUSFAULTENA_Msk | \
 290:Src/main.c    **** //                     SCB_SHCSR_MEMFAULTENA_Msk ) ;
 291:Src/main.c    **** 
 292:Src/main.c    ****     __set_MSP(appStack);
 293:Src/main.c    **** 
 294:Src/main.c    ****     /* Start the application */
 295:Src/main.c    ****     appEntry();
 506              		.loc 1 295 0
 507 0022 BB68     		ldr	r3, [r7, #8]
 508 0024 9847     		blx	r3
 509              	.LVL0:
 296:Src/main.c    **** 
 297:Src/main.c    **** }
ARM GAS  /tmp/cc3BkDrd.s 			page 19


 510              		.loc 1 297 0
 511 0026 00BF     		nop
 512 0028 1037     		adds	r7, r7, #16
 513              	.LCFI18:
 514              		.cfi_def_cfa_offset 8
 515 002a BD46     		mov	sp, r7
 516              	.LCFI19:
 517              		.cfi_def_cfa_register 13
 518              		@ sp needed
 519 002c 80BD     		pop	{r7, pc}
 520              	.L23:
 521 002e 00BF     		.align	2
 522              	.L22:
 523 0030 EC000000 		.word	.LC7
 524 0034 00000108 		.word	134283264
 525 0038 04000108 		.word	134283268
 526              		.cfi_endproc
 527              	.LFE139:
 529              		.section	.text.writeFlash,"ax",%progbits
 530              		.align	1
 531              		.global	writeFlash
 532              		.syntax unified
 533              		.thumb
 534              		.thumb_func
 535              		.fpu fpv4-sp-d16
 537              	writeFlash:
 538              	.LFB140:
 298:Src/main.c    **** 
 299:Src/main.c    **** 
 300:Src/main.c    **** 
 301:Src/main.c    **** 
 302:Src/main.c    **** void writeFlash(uint8_t Data, long Address)
 303:Src/main.c    **** {
 539              		.loc 1 303 0
 540              		.cfi_startproc
 541              		@ args = 0, pretend = 0, frame = 8
 542              		@ frame_needed = 1, uses_anonymous_args = 0
 543 0000 90B5     		push	{r4, r7, lr}
 544              	.LCFI20:
 545              		.cfi_def_cfa_offset 12
 546              		.cfi_offset 4, -12
 547              		.cfi_offset 7, -8
 548              		.cfi_offset 14, -4
 549 0002 83B0     		sub	sp, sp, #12
 550              	.LCFI21:
 551              		.cfi_def_cfa_offset 24
 552 0004 00AF     		add	r7, sp, #0
 553              	.LCFI22:
 554              		.cfi_def_cfa_register 7
 555 0006 0346     		mov	r3, r0
 556 0008 3960     		str	r1, [r7]
 557 000a FB71     		strb	r3, [r7, #7]
 304:Src/main.c    **** 
 305:Src/main.c    ****      HAL_FLASH_Unlock();
 558              		.loc 1 305 0
 559 000c FFF7FEFF 		bl	HAL_FLASH_Unlock
 306:Src/main.c    ****      HAL_FLASH_Program(TYPEPROGRAM_BYTE, Address , (uint8_t) Data);
ARM GAS  /tmp/cc3BkDrd.s 			page 20


 560              		.loc 1 306 0
 561 0010 3968     		ldr	r1, [r7]
 562 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 563 0014 4FF00004 		mov	r4, #0
 564 0018 1A46     		mov	r2, r3
 565 001a 2346     		mov	r3, r4
 566 001c 0020     		movs	r0, #0
 567 001e FFF7FEFF 		bl	HAL_FLASH_Program
 307:Src/main.c    ****      HAL_FLASH_Lock();
 568              		.loc 1 307 0
 569 0022 FFF7FEFF 		bl	HAL_FLASH_Lock
 308:Src/main.c    **** }
 570              		.loc 1 308 0
 571 0026 00BF     		nop
 572 0028 0C37     		adds	r7, r7, #12
 573              	.LCFI23:
 574              		.cfi_def_cfa_offset 12
 575 002a BD46     		mov	sp, r7
 576              	.LCFI24:
 577              		.cfi_def_cfa_register 13
 578              		@ sp needed
 579 002c 90BD     		pop	{r4, r7, pc}
 580              		.cfi_endproc
 581              	.LFE140:
 583              		.section	.text.readFlash,"ax",%progbits
 584              		.align	1
 585              		.global	readFlash
 586              		.syntax unified
 587              		.thumb
 588              		.thumb_func
 589              		.fpu fpv4-sp-d16
 591              	readFlash:
 592              	.LFB141:
 309:Src/main.c    **** 
 310:Src/main.c    **** uint8_t readFlash(int Address)
 311:Src/main.c    **** {
 593              		.loc 1 311 0
 594              		.cfi_startproc
 595              		@ args = 0, pretend = 0, frame = 16
 596              		@ frame_needed = 1, uses_anonymous_args = 0
 597              		@ link register save eliminated.
 598 0000 80B4     		push	{r7}
 599              	.LCFI25:
 600              		.cfi_def_cfa_offset 4
 601              		.cfi_offset 7, -4
 602 0002 85B0     		sub	sp, sp, #20
 603              	.LCFI26:
 604              		.cfi_def_cfa_offset 24
 605 0004 00AF     		add	r7, sp, #0
 606              	.LCFI27:
 607              		.cfi_def_cfa_register 7
 608 0006 7860     		str	r0, [r7, #4]
 312:Src/main.c    **** 
 313:Src/main.c    ****     uint8_t flash_data;
 314:Src/main.c    **** 
 315:Src/main.c    ****     flash_data = *(uint8_t *)Address;
 609              		.loc 1 315 0
ARM GAS  /tmp/cc3BkDrd.s 			page 21


 610 0008 7B68     		ldr	r3, [r7, #4]
 611 000a 1B78     		ldrb	r3, [r3]
 612 000c FB73     		strb	r3, [r7, #15]
 316:Src/main.c    **** 
 317:Src/main.c    ****     return flash_data;
 613              		.loc 1 317 0
 614 000e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 318:Src/main.c    **** 
 319:Src/main.c    **** }
 615              		.loc 1 319 0
 616 0010 1846     		mov	r0, r3
 617 0012 1437     		adds	r7, r7, #20
 618              	.LCFI28:
 619              		.cfi_def_cfa_offset 4
 620 0014 BD46     		mov	sp, r7
 621              	.LCFI29:
 622              		.cfi_def_cfa_register 13
 623              		@ sp needed
 624 0016 5DF8047B 		ldr	r7, [sp], #4
 625              	.LCFI30:
 626              		.cfi_restore 7
 627              		.cfi_def_cfa_offset 0
 628 001a 7047     		bx	lr
 629              		.cfi_endproc
 630              	.LFE141:
 632              		.section	.text.EnablePrivilegedMode,"ax",%progbits
 633              		.align	1
 634              		.global	EnablePrivilegedMode
 635              		.syntax unified
 636              		.thumb
 637              		.thumb_func
 638              		.fpu fpv4-sp-d16
 640              	EnablePrivilegedMode:
 641              	.LFB142:
 320:Src/main.c    **** 
 321:Src/main.c    **** 
 322:Src/main.c    **** 
 323:Src/main.c    **** void EnablePrivilegedMode (void){
 642              		.loc 1 323 0
 643              		.cfi_startproc
 644              		@ args = 0, pretend = 0, frame = 8
 645              		@ frame_needed = 1, uses_anonymous_args = 0
 646              		@ link register save eliminated.
 647 0000 80B4     		push	{r7}
 648              	.LCFI31:
 649              		.cfi_def_cfa_offset 4
 650              		.cfi_offset 7, -4
 651 0002 83B0     		sub	sp, sp, #12
 652              	.LCFI32:
 653              		.cfi_def_cfa_offset 16
 654 0004 00AF     		add	r7, sp, #0
 655              	.LCFI33:
 656              		.cfi_def_cfa_register 7
 657              	.LBB16:
 658              	.LBB17:
  71:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659              		.loc 2 71 0
ARM GAS  /tmp/cc3BkDrd.s 			page 22


 660              		.syntax unified
 661              	@ 71 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 662 0006 72B6     		cpsid i
 663              	@ 0 "" 2
 664              		.thumb
 665              		.syntax unified
 666              	.LBE17:
 667              	.LBE16:
 668              	.LBB18:
 669              	.LBB19:
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 670              		.loc 2 84 0
 671              		.syntax unified
 672              	@ 84 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 673 0008 EFF31483 		MRS r3, control
 674              	@ 0 "" 2
 675              		.thumb
 676              		.syntax unified
 677 000c 3B60     		str	r3, [r7]
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 678              		.loc 2 85 0
 679 000e 3B68     		ldr	r3, [r7]
 680              	.LBE19:
 681              	.LBE18:
 324:Src/main.c    ****         __disable_irq();
 325:Src/main.c    ****         __set_CONTROL((__get_CONTROL( ))& 0xFFFFFFFE);  // enter priv mode
 682              		.loc 1 325 0
 683 0010 23F00103 		bic	r3, r3, #1
 684 0014 7B60     		str	r3, [r7, #4]
 685              	.LBB20:
 686              	.LBB21:
  96:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 687              		.loc 2 96 0
 688 0016 7B68     		ldr	r3, [r7, #4]
 689              		.syntax unified
 690              	@ 96 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 691 0018 83F31488 		MSR control, r3
 692              	@ 0 "" 2
 693              		.thumb
 694              		.syntax unified
 695              	.LBE21:
 696              	.LBE20:
 697              	.LBB22:
 698              	.LBB23:
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 699              		.loc 2 60 0
 700              		.syntax unified
 701              	@ 60 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 702 001c 62B6     		cpsie i
 703              	@ 0 "" 2
 704              		.thumb
 705              		.syntax unified
 706              	.LBE23:
 707              	.LBE22:
 326:Src/main.c    ****         __enable_irq();
 327:Src/main.c    **** }
 708              		.loc 1 327 0
ARM GAS  /tmp/cc3BkDrd.s 			page 23


 709 001e 00BF     		nop
 710 0020 0C37     		adds	r7, r7, #12
 711              	.LCFI34:
 712              		.cfi_def_cfa_offset 4
 713 0022 BD46     		mov	sp, r7
 714              	.LCFI35:
 715              		.cfi_def_cfa_register 13
 716              		@ sp needed
 717 0024 5DF8047B 		ldr	r7, [sp], #4
 718              	.LCFI36:
 719              		.cfi_restore 7
 720              		.cfi_def_cfa_offset 0
 721 0028 7047     		bx	lr
 722              		.cfi_endproc
 723              	.LFE142:
 725              		.section	.text.vprint,"ax",%progbits
 726              		.align	1
 727              		.global	vprint
 728              		.syntax unified
 729              		.thumb
 730              		.thumb_func
 731              		.fpu fpv4-sp-d16
 733              	vprint:
 734              	.LFB143:
 328:Src/main.c    **** 
 329:Src/main.c    **** 
 330:Src/main.c    **** 
 331:Src/main.c    **** void vprint(const char *fmt, va_list argp)
 332:Src/main.c    **** {
 735              		.loc 1 332 0
 736              		.cfi_startproc
 737              		@ args = 0, pretend = 0, frame = 208
 738              		@ frame_needed = 1, uses_anonymous_args = 0
 739 0000 80B5     		push	{r7, lr}
 740              	.LCFI37:
 741              		.cfi_def_cfa_offset 8
 742              		.cfi_offset 7, -8
 743              		.cfi_offset 14, -4
 744 0002 B4B0     		sub	sp, sp, #208
 745              	.LCFI38:
 746              		.cfi_def_cfa_offset 216
 747 0004 00AF     		add	r7, sp, #0
 748              	.LCFI39:
 749              		.cfi_def_cfa_register 7
 750 0006 7860     		str	r0, [r7, #4]
 751 0008 3960     		str	r1, [r7]
 333:Src/main.c    ****     char string[200];
 334:Src/main.c    ****     if(0 < vsprintf(string,fmt,argp)) // build string
 752              		.loc 1 334 0
 753 000a 07F10803 		add	r3, r7, #8
 754 000e 3A68     		ldr	r2, [r7]
 755 0010 7968     		ldr	r1, [r7, #4]
 756 0012 1846     		mov	r0, r3
 757 0014 FFF7FEFF 		bl	vsprintf
 758 0018 0346     		mov	r3, r0
 759 001a 002B     		cmp	r3, #0
 760 001c 0DDD     		ble	.L31
ARM GAS  /tmp/cc3BkDrd.s 			page 24


 335:Src/main.c    ****     {
 336:Src/main.c    ****         HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via
 761              		.loc 1 336 0
 762 001e 07F10803 		add	r3, r7, #8
 763 0022 1846     		mov	r0, r3
 764 0024 FFF7FEFF 		bl	strlen
 765 0028 0346     		mov	r3, r0
 766 002a 9AB2     		uxth	r2, r3
 767 002c 07F10801 		add	r1, r7, #8
 768 0030 6FF07F43 		mvn	r3, #-16777216
 769 0034 0348     		ldr	r0, .L32
 770 0036 FFF7FEFF 		bl	HAL_UART_Transmit
 771              	.L31:
 337:Src/main.c    ****     }
 338:Src/main.c    **** }
 772              		.loc 1 338 0
 773 003a 00BF     		nop
 774 003c D037     		adds	r7, r7, #208
 775              	.LCFI40:
 776              		.cfi_def_cfa_offset 8
 777 003e BD46     		mov	sp, r7
 778              	.LCFI41:
 779              		.cfi_def_cfa_register 13
 780              		@ sp needed
 781 0040 80BD     		pop	{r7, pc}
 782              	.L33:
 783 0042 00BF     		.align	2
 784              	.L32:
 785 0044 00000000 		.word	huart1
 786              		.cfi_endproc
 787              	.LFE143:
 789              		.section	.text.mprintf,"ax",%progbits
 790              		.align	1
 791              		.global	mprintf
 792              		.syntax unified
 793              		.thumb
 794              		.thumb_func
 795              		.fpu fpv4-sp-d16
 797              	mprintf:
 798              	.LFB144:
 339:Src/main.c    **** 
 340:Src/main.c    **** 
 341:Src/main.c    **** 
 342:Src/main.c    **** void mprintf(const char *fmt, ...) // custom printf() function
 343:Src/main.c    **** {
 799              		.loc 1 343 0
 800              		.cfi_startproc
 801              		@ args = 4, pretend = 16, frame = 8
 802              		@ frame_needed = 1, uses_anonymous_args = 1
 803 0000 0FB4     		push	{r0, r1, r2, r3}
 804              	.LCFI42:
 805              		.cfi_def_cfa_offset 16
 806              		.cfi_offset 0, -16
 807              		.cfi_offset 1, -12
 808              		.cfi_offset 2, -8
 809              		.cfi_offset 3, -4
 810 0002 80B5     		push	{r7, lr}
ARM GAS  /tmp/cc3BkDrd.s 			page 25


 811              	.LCFI43:
 812              		.cfi_def_cfa_offset 24
 813              		.cfi_offset 7, -24
 814              		.cfi_offset 14, -20
 815 0004 82B0     		sub	sp, sp, #8
 816              	.LCFI44:
 817              		.cfi_def_cfa_offset 32
 818 0006 00AF     		add	r7, sp, #0
 819              	.LCFI45:
 820              		.cfi_def_cfa_register 7
 344:Src/main.c    ****     va_list argp;
 345:Src/main.c    ****     va_start(argp, fmt);
 821              		.loc 1 345 0
 822 0008 07F11403 		add	r3, r7, #20
 823 000c 7B60     		str	r3, [r7, #4]
 346:Src/main.c    ****     vprint(fmt, argp);
 824              		.loc 1 346 0
 825 000e 7968     		ldr	r1, [r7, #4]
 826 0010 3869     		ldr	r0, [r7, #16]
 827 0012 FFF7FEFF 		bl	vprint
 347:Src/main.c    ****     va_end(argp);
 348:Src/main.c    **** }
 828              		.loc 1 348 0
 829 0016 00BF     		nop
 830 0018 0837     		adds	r7, r7, #8
 831              	.LCFI46:
 832              		.cfi_def_cfa_offset 24
 833 001a BD46     		mov	sp, r7
 834              	.LCFI47:
 835              		.cfi_def_cfa_register 13
 836              		@ sp needed
 837 001c BDE88040 		pop	{r7, lr}
 838              	.LCFI48:
 839              		.cfi_restore 14
 840              		.cfi_restore 7
 841              		.cfi_def_cfa_offset 16
 842 0020 04B0     		add	sp, sp, #16
 843              	.LCFI49:
 844              		.cfi_restore 3
 845              		.cfi_restore 2
 846              		.cfi_restore 1
 847              		.cfi_restore 0
 848              		.cfi_def_cfa_offset 0
 849 0022 7047     		bx	lr
 850              		.cfi_endproc
 851              	.LFE144:
 853              		.section	.rodata
 854 00f9 000000   		.align	2
 855              	.LC8:
 856 00fc 5372632F 		.ascii	"Src/main.c\000"
 856      6D61696E 
 856      2E6300
 857              		.section	.text.SystemClock_Config,"ax",%progbits
 858              		.align	1
 859              		.global	SystemClock_Config
 860              		.syntax unified
 861              		.thumb
ARM GAS  /tmp/cc3BkDrd.s 			page 26


 862              		.thumb_func
 863              		.fpu fpv4-sp-d16
 865              	SystemClock_Config:
 866              	.LFB145:
 349:Src/main.c    **** 
 350:Src/main.c    **** 
 351:Src/main.c    **** 
 352:Src/main.c    **** void SystemClock_Config(void)
 353:Src/main.c    **** {
 867              		.loc 1 353 0
 868              		.cfi_startproc
 869              		@ args = 0, pretend = 0, frame = 208
 870              		@ frame_needed = 1, uses_anonymous_args = 0
 871 0000 80B5     		push	{r7, lr}
 872              	.LCFI50:
 873              		.cfi_def_cfa_offset 8
 874              		.cfi_offset 7, -8
 875              		.cfi_offset 14, -4
 876 0002 B4B0     		sub	sp, sp, #208
 877              	.LCFI51:
 878              		.cfi_def_cfa_offset 216
 879 0004 00AF     		add	r7, sp, #0
 880              	.LCFI52:
 881              		.cfi_def_cfa_register 7
 882              	.LBB24:
 354:Src/main.c    **** 
 355:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 356:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 357:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
 358:Src/main.c    **** 
 359:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 360:Src/main.c    ****     */
 361:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 883              		.loc 1 361 0
 884 0006 524A     		ldr	r2, .L40
 885 0008 514B     		ldr	r3, .L40
 886 000a 1B6C     		ldr	r3, [r3, #64]
 887 000c 43F08053 		orr	r3, r3, #268435456
 888 0010 1364     		str	r3, [r2, #64]
 889 0012 4F4B     		ldr	r3, .L40
 890 0014 1B6C     		ldr	r3, [r3, #64]
 891 0016 03F08053 		and	r3, r3, #268435456
 892 001a 7B60     		str	r3, [r7, #4]
 893 001c 7B68     		ldr	r3, [r7, #4]
 894              	.LBE24:
 895              	.LBB25:
 362:Src/main.c    **** 
 363:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 896              		.loc 1 363 0
 897 001e 4D4A     		ldr	r2, .L40+4
 898 0020 4C4B     		ldr	r3, .L40+4
 899 0022 1B68     		ldr	r3, [r3]
 900 0024 43F44043 		orr	r3, r3, #49152
 901 0028 1360     		str	r3, [r2]
 902 002a 4A4B     		ldr	r3, .L40+4
 903 002c 1B68     		ldr	r3, [r3]
 904 002e 03F44043 		and	r3, r3, #49152
ARM GAS  /tmp/cc3BkDrd.s 			page 27


 905 0032 3B60     		str	r3, [r7]
 906 0034 3B68     		ldr	r3, [r7]
 907              	.LBE25:
 364:Src/main.c    **** 
 365:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 366:Src/main.c    ****     */
 367:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 908              		.loc 1 367 0
 909 0036 0923     		movs	r3, #9
 910 0038 C7F8A030 		str	r3, [r7, #160]
 368:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 911              		.loc 1 368 0
 912 003c 4FF48033 		mov	r3, #65536
 913 0040 C7F8A430 		str	r3, [r7, #164]
 369:Src/main.c    ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 914              		.loc 1 369 0
 915 0044 0123     		movs	r3, #1
 916 0046 C7F8B430 		str	r3, [r7, #180]
 370:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 917              		.loc 1 370 0
 918 004a 0223     		movs	r3, #2
 919 004c C7F8B830 		str	r3, [r7, #184]
 371:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 920              		.loc 1 371 0
 921 0050 4FF48003 		mov	r3, #4194304
 922 0054 C7F8BC30 		str	r3, [r7, #188]
 372:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 923              		.loc 1 372 0
 924 0058 0823     		movs	r3, #8
 925 005a C7F8C030 		str	r3, [r7, #192]
 373:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 926              		.loc 1 373 0
 927 005e 4FF4A873 		mov	r3, #336
 928 0062 C7F8C430 		str	r3, [r7, #196]
 374:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 929              		.loc 1 374 0
 930 0066 0223     		movs	r3, #2
 931 0068 C7F8C830 		str	r3, [r7, #200]
 375:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 932              		.loc 1 375 0
 933 006c 0223     		movs	r3, #2
 934 006e C7F8CC30 		str	r3, [r7, #204]
 376:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 935              		.loc 1 376 0
 936 0072 07F1A003 		add	r3, r7, #160
 937 0076 1846     		mov	r0, r3
 938 0078 FFF7FEFF 		bl	HAL_RCC_OscConfig
 939 007c 0346     		mov	r3, r0
 940 007e 002B     		cmp	r3, #0
 941 0080 04D0     		beq	.L36
 377:Src/main.c    ****   {
 378:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 942              		.loc 1 378 0
 943 0082 4FF4BD71 		mov	r1, #378
 944 0086 3448     		ldr	r0, .L40+8
 945 0088 FFF7FEFF 		bl	_Error_Handler
 946              	.L36:
ARM GAS  /tmp/cc3BkDrd.s 			page 28


 379:Src/main.c    ****   }
 380:Src/main.c    **** 
 381:Src/main.c    ****     /**Activate the Over-Drive mode 
 382:Src/main.c    ****     */
 383:Src/main.c    ****   if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 947              		.loc 1 383 0
 948 008c FFF7FEFF 		bl	HAL_PWREx_EnableOverDrive
 949 0090 0346     		mov	r3, r0
 950 0092 002B     		cmp	r3, #0
 951 0094 04D0     		beq	.L37
 384:Src/main.c    ****   {
 385:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 952              		.loc 1 385 0
 953 0096 40F28111 		movw	r1, #385
 954 009a 2F48     		ldr	r0, .L40+8
 955 009c FFF7FEFF 		bl	_Error_Handler
 956              	.L37:
 386:Src/main.c    ****   }
 387:Src/main.c    **** 
 388:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 389:Src/main.c    ****     */
 390:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 957              		.loc 1 390 0
 958 00a0 0F23     		movs	r3, #15
 959 00a2 C7F88C30 		str	r3, [r7, #140]
 391:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 392:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 960              		.loc 1 392 0
 961 00a6 0223     		movs	r3, #2
 962 00a8 C7F89030 		str	r3, [r7, #144]
 393:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 963              		.loc 1 393 0
 964 00ac 0023     		movs	r3, #0
 965 00ae C7F89430 		str	r3, [r7, #148]
 394:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 966              		.loc 1 394 0
 967 00b2 4FF4A053 		mov	r3, #5120
 968 00b6 C7F89830 		str	r3, [r7, #152]
 395:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 969              		.loc 1 395 0
 970 00ba 4FF48053 		mov	r3, #4096
 971 00be C7F89C30 		str	r3, [r7, #156]
 396:Src/main.c    **** 
 397:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 972              		.loc 1 397 0
 973 00c2 07F18C03 		add	r3, r7, #140
 974 00c6 0721     		movs	r1, #7
 975 00c8 1846     		mov	r0, r3
 976 00ca FFF7FEFF 		bl	HAL_RCC_ClockConfig
 977 00ce 0346     		mov	r3, r0
 978 00d0 002B     		cmp	r3, #0
 979 00d2 04D0     		beq	.L38
 398:Src/main.c    ****   {
 399:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 980              		.loc 1 399 0
 981 00d4 40F28F11 		movw	r1, #399
 982 00d8 1F48     		ldr	r0, .L40+8
ARM GAS  /tmp/cc3BkDrd.s 			page 29


 983 00da FFF7FEFF 		bl	_Error_Handler
 984              	.L38:
 400:Src/main.c    ****   }
 401:Src/main.c    **** 
 402:Src/main.c    ****   PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 985              		.loc 1 402 0
 986 00de 1F4B     		ldr	r3, .L40+12
 987 00e0 BB60     		str	r3, [r7, #8]
 403:Src/main.c    ****                               |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_UART7
 404:Src/main.c    ****                               |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_I2C1
 405:Src/main.c    ****                               |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C3
 406:Src/main.c    ****                               |RCC_PERIPHCLK_I2C4;
 407:Src/main.c    ****   PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 988              		.loc 1 407 0
 989 00e2 4FF40073 		mov	r3, #512
 990 00e6 BB63     		str	r3, [r7, #56]
 408:Src/main.c    ****   PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 991              		.loc 1 408 0
 992 00e8 0023     		movs	r3, #0
 993 00ea FB64     		str	r3, [r7, #76]
 409:Src/main.c    ****   PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 994              		.loc 1 409 0
 995 00ec 0023     		movs	r3, #0
 996 00ee BB65     		str	r3, [r7, #88]
 410:Src/main.c    ****   PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 997              		.loc 1 410 0
 998 00f0 0023     		movs	r3, #0
 999 00f2 7B66     		str	r3, [r7, #100]
 411:Src/main.c    ****   PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 1000              		.loc 1 411 0
 1001 00f4 0023     		movs	r3, #0
 1002 00f6 BB66     		str	r3, [r7, #104]
 412:Src/main.c    ****   PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 1003              		.loc 1 412 0
 1004 00f8 0023     		movs	r3, #0
 1005 00fa FB66     		str	r3, [r7, #108]
 413:Src/main.c    ****   PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 1006              		.loc 1 413 0
 1007 00fc 0023     		movs	r3, #0
 1008 00fe 3B67     		str	r3, [r7, #112]
 414:Src/main.c    ****   PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 1009              		.loc 1 414 0
 1010 0100 0023     		movs	r3, #0
 1011 0102 7B67     		str	r3, [r7, #116]
 415:Src/main.c    ****   PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 1012              		.loc 1 415 0
 1013 0104 0023     		movs	r3, #0
 1014 0106 BB67     		str	r3, [r7, #120]
 416:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 1015              		.loc 1 416 0
 1016 0108 07F10803 		add	r3, r7, #8
 1017 010c 1846     		mov	r0, r3
 1018 010e FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1019 0112 0346     		mov	r3, r0
 1020 0114 002B     		cmp	r3, #0
 1021 0116 04D0     		beq	.L39
 417:Src/main.c    ****   {
ARM GAS  /tmp/cc3BkDrd.s 			page 30


 418:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 1022              		.loc 1 418 0
 1023 0118 4FF4D171 		mov	r1, #418
 1024 011c 0E48     		ldr	r0, .L40+8
 1025 011e FFF7FEFF 		bl	_Error_Handler
 1026              	.L39:
 419:Src/main.c    ****   }
 420:Src/main.c    **** 
 421:Src/main.c    **** 
 422:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 1027              		.loc 1 422 0
 1028 0122 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1029 0126 0246     		mov	r2, r0
 1030 0128 0D4B     		ldr	r3, .L40+16
 1031 012a A3FB0223 		umull	r2, r3, r3, r2
 1032 012e 9B09     		lsrs	r3, r3, #6
 1033 0130 1846     		mov	r0, r3
 1034 0132 FFF7FEFF 		bl	HAL_SYSTICK_Config
 423:Src/main.c    **** 
 424:Src/main.c    **** 
 425:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 1035              		.loc 1 425 0
 1036 0136 0420     		movs	r0, #4
 1037 0138 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 426:Src/main.c    **** 
 427:Src/main.c    **** 
 428:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 1038              		.loc 1 428 0
 1039 013c 0022     		movs	r2, #0
 1040 013e 0021     		movs	r1, #0
 1041 0140 4FF0FF30 		mov	r0, #-1
 1042 0144 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 429:Src/main.c    **** 
 430:Src/main.c    **** }
 1043              		.loc 1 430 0
 1044 0148 00BF     		nop
 1045 014a D037     		adds	r7, r7, #208
 1046              	.LCFI53:
 1047              		.cfi_def_cfa_offset 8
 1048 014c BD46     		mov	sp, r7
 1049              	.LCFI54:
 1050              		.cfi_def_cfa_register 13
 1051              		@ sp needed
 1052 014e 80BD     		pop	{r7, pc}
 1053              	.L41:
 1054              		.align	2
 1055              	.L40:
 1056 0150 00380240 		.word	1073887232
 1057 0154 00700040 		.word	1073770496
 1058 0158 FC000000 		.word	.LC8
 1059 015c 60F20300 		.word	258656
 1060 0160 D34D6210 		.word	274877907
 1061              		.cfi_endproc
 1062              	.LFE145:
 1064              		.section	.rodata
 1065 0107 00       		.align	2
 1066              	.LC9:
ARM GAS  /tmp/cc3BkDrd.s 			page 31


 1067 0108 4552524F 		.ascii	"ERROR EVENT %s - %d\015\012\000"
 1067      52204556 
 1067      454E5420 
 1067      2573202D 
 1067      2025640D 
 1068              		.section	.text._Error_Handler,"ax",%progbits
 1069              		.align	1
 1070              		.global	_Error_Handler
 1071              		.syntax unified
 1072              		.thumb
 1073              		.thumb_func
 1074              		.fpu fpv4-sp-d16
 1076              	_Error_Handler:
 1077              	.LFB146:
 431:Src/main.c    **** 
 432:Src/main.c    **** 
 433:Src/main.c    **** void _Error_Handler(char *file, int line)
 434:Src/main.c    **** {
 1078              		.loc 1 434 0
 1079              		.cfi_startproc
 1080              		@ args = 0, pretend = 0, frame = 8
 1081              		@ frame_needed = 1, uses_anonymous_args = 0
 1082 0000 80B5     		push	{r7, lr}
 1083              	.LCFI55:
 1084              		.cfi_def_cfa_offset 8
 1085              		.cfi_offset 7, -8
 1086              		.cfi_offset 14, -4
 1087 0002 82B0     		sub	sp, sp, #8
 1088              	.LCFI56:
 1089              		.cfi_def_cfa_offset 16
 1090 0004 00AF     		add	r7, sp, #0
 1091              	.LCFI57:
 1092              		.cfi_def_cfa_register 7
 1093 0006 7860     		str	r0, [r7, #4]
 1094 0008 3960     		str	r1, [r7]
 435:Src/main.c    **** 
 436:Src/main.c    ****     mprintf("ERROR EVENT %s - %d\r\n", file, line);
 1095              		.loc 1 436 0
 1096 000a 3A68     		ldr	r2, [r7]
 1097 000c 7968     		ldr	r1, [r7, #4]
 1098 000e 0348     		ldr	r0, .L43
 1099 0010 FFF7FEFF 		bl	mprintf
 437:Src/main.c    **** 
 438:Src/main.c    **** }
 1100              		.loc 1 438 0
 1101 0014 00BF     		nop
 1102 0016 0837     		adds	r7, r7, #8
 1103              	.LCFI58:
 1104              		.cfi_def_cfa_offset 8
 1105 0018 BD46     		mov	sp, r7
 1106              	.LCFI59:
 1107              		.cfi_def_cfa_register 13
 1108              		@ sp needed
 1109 001a 80BD     		pop	{r7, pc}
 1110              	.L44:
 1111              		.align	2
 1112              	.L43:
ARM GAS  /tmp/cc3BkDrd.s 			page 32


 1113 001c 08010000 		.word	.LC9
 1114              		.cfi_endproc
 1115              	.LFE146:
 1117              		.section	.rodata
 1118 011e 0000     		.align	2
 1119              	.LC10:
 1120 0120 25730D0A 		.ascii	"%s\015\012\000"
 1120      00
 1121              		.section	.text._Event_Handler,"ax",%progbits
 1122              		.align	1
 1123              		.global	_Event_Handler
 1124              		.syntax unified
 1125              		.thumb
 1126              		.thumb_func
 1127              		.fpu fpv4-sp-d16
 1129              	_Event_Handler:
 1130              	.LFB147:
 439:Src/main.c    **** 
 440:Src/main.c    **** void _Event_Handler(char *Event)
 441:Src/main.c    **** {
 1131              		.loc 1 441 0
 1132              		.cfi_startproc
 1133              		@ args = 0, pretend = 0, frame = 8
 1134              		@ frame_needed = 1, uses_anonymous_args = 0
 1135 0000 80B5     		push	{r7, lr}
 1136              	.LCFI60:
 1137              		.cfi_def_cfa_offset 8
 1138              		.cfi_offset 7, -8
 1139              		.cfi_offset 14, -4
 1140 0002 82B0     		sub	sp, sp, #8
 1141              	.LCFI61:
 1142              		.cfi_def_cfa_offset 16
 1143 0004 00AF     		add	r7, sp, #0
 1144              	.LCFI62:
 1145              		.cfi_def_cfa_register 7
 1146 0006 7860     		str	r0, [r7, #4]
 442:Src/main.c    ****     mprintf("%s\r\n", Event);
 1147              		.loc 1 442 0
 1148 0008 7968     		ldr	r1, [r7, #4]
 1149 000a 0348     		ldr	r0, .L46
 1150 000c FFF7FEFF 		bl	mprintf
 443:Src/main.c    **** }
 1151              		.loc 1 443 0
 1152 0010 00BF     		nop
 1153 0012 0837     		adds	r7, r7, #8
 1154              	.LCFI63:
 1155              		.cfi_def_cfa_offset 8
 1156 0014 BD46     		mov	sp, r7
 1157              	.LCFI64:
 1158              		.cfi_def_cfa_register 13
 1159              		@ sp needed
 1160 0016 80BD     		pop	{r7, pc}
 1161              	.L47:
 1162              		.align	2
 1163              	.L46:
 1164 0018 20010000 		.word	.LC10
 1165              		.cfi_endproc
ARM GAS  /tmp/cc3BkDrd.s 			page 33


 1166              	.LFE147:
 1168              		.text
 1169              	.Letext0:
 1170              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 1171              		.file 4 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stdarg.h"
 1172              		.file 5 "/usr/include/newlib/sys/lock.h"
 1173              		.file 6 "/usr/include/newlib/sys/_types.h"
 1174              		.file 7 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 1175              		.file 8 "/usr/include/newlib/sys/reent.h"
 1176              		.file 9 "<built-in>"
 1177              		.file 10 "/usr/include/newlib/sys/_stdint.h"
 1178              		.file 11 "Drivers/CMSIS/Include/core_cm7.h"
 1179              		.file 12 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 1180              		.file 13 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f746xx.h"
 1181              		.file 14 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 1182              		.file 15 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rcc_ex.h"
 1183              		.file 16 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rcc.h"
 1184              		.file 17 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 1185              		.file 18 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_eth.h"
 1186              		.file 19 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_i2c.h"
 1187              		.file 20 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rtc.h"
 1188              		.file 21 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_spi.h"
 1189              		.file 22 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim.h"
 1190              		.file 23 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_uart.h"
 1191              		.file 24 "Inc/eth.h"
 1192              		.file 25 "Inc/i2c.h"
 1193              		.file 26 "Inc/rtc.h"
 1194              		.file 27 "Inc/spi.h"
 1195              		.file 28 "Inc/tim.h"
 1196              		.file 29 "Inc/usart.h"
 1197              		.file 30 "Inc/motor.h"
 1198              		.file 31 "Inc/sensor.h"
 1199              		.file 32 "Inc/gps.h"
ARM GAS  /tmp/cc3BkDrd.s 			page 34


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
                            *COM*:0000000000000008 motor1
                            *COM*:0000000000000008 motor2
                            *COM*:0000000000000008 motor3
                            *COM*:0000000000000008 motor4
                            *COM*:0000000000000014 sensorValues
                            *COM*:00000000000001a0 gpsData
     /tmp/cc3BkDrd.s:24     .rodata:0000000000000000 $d
     /tmp/cc3BkDrd.s:28     .text.main:0000000000000000 $t
     /tmp/cc3BkDrd.s:35     .text.main:0000000000000000 main
     /tmp/cc3BkDrd.s:865    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc3BkDrd.s:797    .text.mprintf:0000000000000000 mprintf
     /tmp/cc3BkDrd.s:137    .text.checkUpdate:0000000000000000 checkUpdate
     /tmp/cc3BkDrd.s:262    .text.loadUpdateFile:0000000000000000 loadUpdateFile
     /tmp/cc3BkDrd.s:462    .text.bootRTOS:0000000000000000 bootRTOS
     /tmp/cc3BkDrd.s:115    .text.main:000000000000006c $d
     /tmp/cc3BkDrd.s:130    .text.checkUpdate:0000000000000000 $t
     /tmp/cc3BkDrd.s:591    .text.readFlash:0000000000000000 readFlash
     /tmp/cc3BkDrd.s:234    .text.checkUpdate:000000000000008c $d
     /tmp/cc3BkDrd.s:255    .text.loadUpdateFile:0000000000000000 $t
     /tmp/cc3BkDrd.s:438    .text.loadUpdateFile:0000000000000114 $d
     /tmp/cc3BkDrd.s:455    .text.bootRTOS:0000000000000000 $t
     /tmp/cc3BkDrd.s:523    .text.bootRTOS:0000000000000030 $d
     /tmp/cc3BkDrd.s:530    .text.writeFlash:0000000000000000 $t
     /tmp/cc3BkDrd.s:537    .text.writeFlash:0000000000000000 writeFlash
     /tmp/cc3BkDrd.s:584    .text.readFlash:0000000000000000 $t
     /tmp/cc3BkDrd.s:633    .text.EnablePrivilegedMode:0000000000000000 $t
     /tmp/cc3BkDrd.s:640    .text.EnablePrivilegedMode:0000000000000000 EnablePrivilegedMode
     /tmp/cc3BkDrd.s:726    .text.vprint:0000000000000000 $t
     /tmp/cc3BkDrd.s:733    .text.vprint:0000000000000000 vprint
     /tmp/cc3BkDrd.s:785    .text.vprint:0000000000000044 $d
     /tmp/cc3BkDrd.s:790    .text.mprintf:0000000000000000 $t
     /tmp/cc3BkDrd.s:858    .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc3BkDrd.s:1076   .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/cc3BkDrd.s:1056   .text.SystemClock_Config:0000000000000150 $d
     /tmp/cc3BkDrd.s:1069   .text._Error_Handler:0000000000000000 $t
     /tmp/cc3BkDrd.s:1113   .text._Error_Handler:000000000000001c $d
     /tmp/cc3BkDrd.s:1122   .text._Event_Handler:0000000000000000 $t
     /tmp/cc3BkDrd.s:1129   .text._Event_Handler:0000000000000000 _Event_Handler
     /tmp/cc3BkDrd.s:1164   .text._Event_Handler:0000000000000018 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_Init
MX_GPIO_Init
MX_I2C2_Init
MX_I2C4_Init
MX_SPI1_Init
MX_TIM3_Init
MX_UART4_Init
MX_USART1_UART_Init
MX_TIM2_Init
HAL_Delay
HAL_FLASH_Unlock
FLASH_Erase_Sector
HAL_FLASH_Lock
ARM GAS  /tmp/cc3BkDrd.s 			page 35


malloc
HAL_FLASH_Program
free
vsprintf
strlen
HAL_UART_Transmit
huart1
HAL_RCC_OscConfig
HAL_PWREx_EnableOverDrive
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
