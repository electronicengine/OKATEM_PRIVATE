ARM GAS  /tmp/ccg1mW9H.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	motor1,8,4
  18              		.comm	motor2,8,4
  19              		.comm	motor3,8,4
  20              		.comm	motor4,8,4
  21              		.comm	sensorValues,20,4
  22              		.comm	gpsData,416,4
  23              		.section	.rodata
  24              		.align	2
  25              	.LC0:
  26 0000 426F6F74 		.ascii	"Bootloader Initializing...\015\012\000"
  26      6C6F6164 
  26      65722049 
  26      6E697469 
  26      616C697A 
  27              		.section	.text.main,"ax",%progbits
  28              		.align	1
  29              		.global	main
  30              		.syntax unified
  31              		.thumb
  32              		.thumb_func
  33              		.fpu fpv4-sp-d16
  35              	main:
  36              	.LFB136:
  37              		.file 1 "Src/main.c"
   1:Src/main.c    **** /**
   2:Src/main.c    ****   ******************************************************************************
   3:Src/main.c    ****   * @file           : main.c
   4:Src/main.c    ****   * @brief          : Main program body
   5:Src/main.c    ****   ******************************************************************************
   6:Src/main.c    ****   ** This notice applies to any and all portions of this file
   7:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   8:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
   9:Src/main.c    ****   * inserted by the user or by software development tools
  10:Src/main.c    ****   * are owned by their respective copyright owners.
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * COPYRIGHT(c) 2018 STMicroelectronics
  13:Src/main.c    ****   *
  14:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  15:Src/main.c    ****   * are permitted provided that the following conditions are met:
  16:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  17:Src/main.c    ****   *      this list of conditions and the following disclaimer.
ARM GAS  /tmp/ccg1mW9H.s 			page 2


  18:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  19:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  20:Src/main.c    ****   *      and/or other materials provided with the distribution.
  21:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  22:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  23:Src/main.c    ****   *      without specific prior written permission.
  24:Src/main.c    ****   *
  25:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  26:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  27:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  28:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  29:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  30:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  31:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  32:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  33:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  34:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:Src/main.c    ****   *
  36:Src/main.c    ****   ******************************************************************************
  37:Src/main.c    ****   */
  38:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  39:Src/main.c    **** 
  40:Src/main.c    **** #include <stdio.h>
  41:Src/main.c    **** #include "main.h"
  42:Src/main.c    **** #include "stm32f7xx_hal.h"
  43:Src/main.c    **** #include "eth.h"
  44:Src/main.c    **** #include "i2c.h"
  45:Src/main.c    **** #include "rtc.h"
  46:Src/main.c    **** #include "spi.h"
  47:Src/main.c    **** #include "tim.h"
  48:Src/main.c    **** #include "usart.h"
  49:Src/main.c    **** #include "gpio.h"
  50:Src/main.c    **** #include "motor.h"
  51:Src/main.c    **** #include "sensor.h"
  52:Src/main.c    **** #include "gps.h"
  53:Src/main.c    **** 
  54:Src/main.c    **** #include <stdarg.h>
  55:Src/main.c    **** #include <string.h>
  56:Src/main.c    **** #include <inttypes.h>
  57:Src/main.c    **** #include <stdlib.h>
  58:Src/main.c    **** 
  59:Src/main.c    **** #define SUCCESS 0
  60:Src/main.c    **** #define FAIL -1
  61:Src/main.c    **** 
  62:Src/main.c    **** #define APPLICATION_ADDRESS        0x08010000
  63:Src/main.c    **** #define UPDATE_FILE_ADRESS         0x08080000
  64:Src/main.c    **** 
  65:Src/main.c    **** 
  66:Src/main.c    **** typedef void (*pFunction)(void);
  67:Src/main.c    **** 
  68:Src/main.c    **** void SystemClock_Config(void);
  69:Src/main.c    **** void vprint(const char *fmt, va_list argp);
  70:Src/main.c    **** void mprintf(const char *fmt, ...);
  71:Src/main.c    **** void EnablePrivilegedMode (void);
  72:Src/main.c    **** void bootRTOS();
  73:Src/main.c    **** int checkUpdate();
  74:Src/main.c    **** void loadUpdateFile();
ARM GAS  /tmp/ccg1mW9H.s 			page 3


  75:Src/main.c    **** void writeFlash(uint8_t Data, long Address);
  76:Src/main.c    **** uint8_t readFlash(int Address);
  77:Src/main.c    **** 
  78:Src/main.c    **** 
  79:Src/main.c    **** 
  80:Src/main.c    **** 
  81:Src/main.c    **** //void SPI1_IRQHandler(void)
  82:Src/main.c    **** //{
  83:Src/main.c    **** 
  84:Src/main.c    **** //  HAL_SPI_IRQHandler(&hspi1);
  85:Src/main.c    **** 
  86:Src/main.c    **** //}
  87:Src/main.c    **** 
  88:Src/main.c    **** 
  89:Src/main.c    **** 
  90:Src/main.c    **** int main(void)
  91:Src/main.c    **** {
  38              		.loc 1 91 0
  39              		.cfi_startproc
  40              		@ args = 0, pretend = 0, frame = 8
  41              		@ frame_needed = 1, uses_anonymous_args = 0
  42 0000 80B5     		push	{r7, lr}
  43              	.LCFI0:
  44              		.cfi_def_cfa_offset 8
  45              		.cfi_offset 7, -8
  46              		.cfi_offset 14, -4
  47 0002 82B0     		sub	sp, sp, #8
  48              	.LCFI1:
  49              		.cfi_def_cfa_offset 16
  50 0004 00AF     		add	r7, sp, #0
  51              	.LCFI2:
  52              		.cfi_def_cfa_register 7
  92:Src/main.c    ****     int ret = 0;
  53              		.loc 1 92 0
  54 0006 0023     		movs	r3, #0
  55 0008 7B60     		str	r3, [r7, #4]
  93:Src/main.c    **** 
  94:Src/main.c    ****     HAL_Init();
  56              		.loc 1 94 0
  57 000a FFF7FEFF 		bl	HAL_Init
  95:Src/main.c    ****     SystemClock_Config();
  58              		.loc 1 95 0
  59 000e FFF7FEFF 		bl	SystemClock_Config
  96:Src/main.c    ****     MX_GPIO_Init();
  60              		.loc 1 96 0
  61 0012 FFF7FEFF 		bl	MX_GPIO_Init
  97:Src/main.c    ****     MX_I2C2_Init();
  62              		.loc 1 97 0
  63 0016 FFF7FEFF 		bl	MX_I2C2_Init
  98:Src/main.c    ****     MX_I2C4_Init();
  64              		.loc 1 98 0
  65 001a FFF7FEFF 		bl	MX_I2C4_Init
  99:Src/main.c    ****     MX_SPI1_Init();
  66              		.loc 1 99 0
  67 001e FFF7FEFF 		bl	MX_SPI1_Init
 100:Src/main.c    ****     MX_TIM3_Init();
  68              		.loc 1 100 0
ARM GAS  /tmp/ccg1mW9H.s 			page 4


  69 0022 FFF7FEFF 		bl	MX_TIM3_Init
 101:Src/main.c    ****     MX_UART4_Init();
  70              		.loc 1 101 0
  71 0026 FFF7FEFF 		bl	MX_UART4_Init
 102:Src/main.c    ****     MX_USART1_UART_Init();
  72              		.loc 1 102 0
  73 002a FFF7FEFF 		bl	MX_USART1_UART_Init
 103:Src/main.c    ****     MX_TIM2_Init();
  74              		.loc 1 103 0
  75 002e FFF7FEFF 		bl	MX_TIM2_Init
 104:Src/main.c    **** 
 105:Src/main.c    ****     mprintf("Bootloader Initializing...\r\n");
  76              		.loc 1 105 0
  77 0032 0E48     		ldr	r0, .L5
  78 0034 FFF7FEFF 		bl	mprintf
 106:Src/main.c    **** 
 107:Src/main.c    **** 
 108:Src/main.c    ****     HAL_Delay(5000);
  79              		.loc 1 108 0
  80 0038 41F28830 		movw	r0, #5000
  81 003c FFF7FEFF 		bl	HAL_Delay
 109:Src/main.c    **** 
 110:Src/main.c    **** //    HAL_FLASH_Unlock();
 111:Src/main.c    **** //    FLASH_Erase_Sector(FLASH_SECTOR_6, VOLTAGE_RANGE_3);
 112:Src/main.c    **** //    FLASH_Erase_Sector(FLASH_SECTOR_7, VOLTAGE_RANGE_3);
 113:Src/main.c    **** //    HAL_FLASH_Lock();
 114:Src/main.c    **** 
 115:Src/main.c    **** 
 116:Src/main.c    ****     ret = checkUpdate();
  82              		.loc 1 116 0
  83 0040 FFF7FEFF 		bl	checkUpdate
  84 0044 7860     		str	r0, [r7, #4]
 117:Src/main.c    **** 
 118:Src/main.c    ****     if(ret == SUCCESS)
  85              		.loc 1 118 0
  86 0046 7B68     		ldr	r3, [r7, #4]
  87 0048 002B     		cmp	r3, #0
  88 004a 08D1     		bne	.L2
 119:Src/main.c    ****     {
 120:Src/main.c    ****         loadUpdateFile();
  89              		.loc 1 120 0
  90 004c FFF7FEFF 		bl	loadUpdateFile
 121:Src/main.c    ****         HAL_Delay(1000);
  91              		.loc 1 121 0
  92 0050 4FF47A70 		mov	r0, #1000
  93 0054 FFF7FEFF 		bl	HAL_Delay
 122:Src/main.c    ****         bootRTOS();
  94              		.loc 1 122 0
  95 0058 FFF7FEFF 		bl	bootRTOS
  96 005c 01E0     		b	.L3
  97              	.L2:
 123:Src/main.c    ****     }
 124:Src/main.c    ****     else
 125:Src/main.c    ****     {
 126:Src/main.c    ****         bootRTOS();
  98              		.loc 1 126 0
  99 005e FFF7FEFF 		bl	bootRTOS
ARM GAS  /tmp/ccg1mW9H.s 			page 5


 100              	.L3:
 101 0062 0023     		movs	r3, #0
 127:Src/main.c    ****     }
 128:Src/main.c    **** 
 129:Src/main.c    **** 
 130:Src/main.c    **** }
 102              		.loc 1 130 0
 103 0064 1846     		mov	r0, r3
 104 0066 0837     		adds	r7, r7, #8
 105              	.LCFI3:
 106              		.cfi_def_cfa_offset 8
 107 0068 BD46     		mov	sp, r7
 108              	.LCFI4:
 109              		.cfi_def_cfa_register 13
 110              		@ sp needed
 111 006a 80BD     		pop	{r7, pc}
 112              	.L6:
 113              		.align	2
 114              	.L5:
 115 006c 00000000 		.word	.LC0
 116              		.cfi_endproc
 117              	.LFE136:
 119              		.section	.rodata
 120 001d 000000   		.align	2
 121              	.LC1:
 122 0020 43686563 		.ascii	"Checking Firmware Update File...\015\012\000"
 122      6B696E67 
 122      20466972 
 122      6D776172 
 122      65205570 
 123 0043 00       		.align	2
 124              	.LC2:
 125 0044 54686572 		.ascii	"There is no update file in the flash\015\012\000"
 125      65206973 
 125      206E6F20 
 125      75706461 
 125      74652066 
 126 006b 00       		.align	2
 127              	.LC3:
 128 006c 41205570 		.ascii	"A Update file has been found in the flash\000"
 128      64617465 
 128      2066696C 
 128      65206861 
 128      73206265 
 129              		.section	.text.checkUpdate,"ax",%progbits
 130              		.align	1
 131              		.global	checkUpdate
 132              		.syntax unified
 133              		.thumb
 134              		.thumb_func
 135              		.fpu fpv4-sp-d16
 137              	checkUpdate:
 138              	.LFB137:
 131:Src/main.c    **** 
 132:Src/main.c    **** int checkUpdate()
 133:Src/main.c    **** {
 139              		.loc 1 133 0
ARM GAS  /tmp/ccg1mW9H.s 			page 6


 140              		.cfi_startproc
 141              		@ args = 0, pretend = 0, frame = 8
 142              		@ frame_needed = 1, uses_anonymous_args = 0
 143 0000 90B5     		push	{r4, r7, lr}
 144              	.LCFI5:
 145              		.cfi_def_cfa_offset 12
 146              		.cfi_offset 4, -12
 147              		.cfi_offset 7, -8
 148              		.cfi_offset 14, -4
 149 0002 83B0     		sub	sp, sp, #12
 150              	.LCFI6:
 151              		.cfi_def_cfa_offset 24
 152 0004 00AF     		add	r7, sp, #0
 153              	.LCFI7:
 154              		.cfi_def_cfa_register 7
 134:Src/main.c    **** 
 135:Src/main.c    ****     uint32_t data;
 136:Src/main.c    **** 
 137:Src/main.c    ****     mprintf("Checking Firmware Update File...\r\n");
 155              		.loc 1 137 0
 156 0006 2148     		ldr	r0, .L11
 157 0008 FFF7FEFF 		bl	mprintf
 138:Src/main.c    **** 
 139:Src/main.c    ****     data = readFlash(UPDATE_FILE_ADRESS) | (readFlash(UPDATE_FILE_ADRESS + 1) << 8)
 158              		.loc 1 139 0
 159 000c 2048     		ldr	r0, .L11+4
 160 000e FFF7FEFF 		bl	readFlash
 161 0012 0346     		mov	r3, r0
 162 0014 1C46     		mov	r4, r3
 163 0016 1F48     		ldr	r0, .L11+8
 164 0018 FFF7FEFF 		bl	readFlash
 165 001c 0346     		mov	r3, r0
 166 001e 1B02     		lsls	r3, r3, #8
 167 0020 1C43     		orrs	r4, r4, r3
 140:Src/main.c    ****             | readFlash(UPDATE_FILE_ADRESS + 2) << 16 | readFlash(UPDATE_FILE_ADRESS + 3) << 24;
 168              		.loc 1 140 0
 169 0022 1D48     		ldr	r0, .L11+12
 170 0024 FFF7FEFF 		bl	readFlash
 171 0028 0346     		mov	r3, r0
 172 002a 1B04     		lsls	r3, r3, #16
 173 002c 1C43     		orrs	r4, r4, r3
 174 002e 1B48     		ldr	r0, .L11+16
 175 0030 FFF7FEFF 		bl	readFlash
 176 0034 0346     		mov	r3, r0
 177 0036 1B06     		lsls	r3, r3, #24
 178 0038 2343     		orrs	r3, r3, r4
 139:Src/main.c    ****             | readFlash(UPDATE_FILE_ADRESS + 2) << 16 | readFlash(UPDATE_FILE_ADRESS + 3) << 24;
 179              		.loc 1 139 0
 180 003a 7B60     		str	r3, [r7, #4]
 141:Src/main.c    **** 
 142:Src/main.c    **** 
 143:Src/main.c    **** 
 144:Src/main.c    ****     if(data == 0xffffffff)
 181              		.loc 1 144 0
 182 003c 7B68     		ldr	r3, [r7, #4]
 183 003e B3F1FF3F 		cmp	r3, #-1
 184 0042 05D1     		bne	.L8
ARM GAS  /tmp/ccg1mW9H.s 			page 7


 145:Src/main.c    ****     {
 146:Src/main.c    ****         mprintf("There is no update file in the flash\r\n");
 185              		.loc 1 146 0
 186 0044 1648     		ldr	r0, .L11+20
 187 0046 FFF7FEFF 		bl	mprintf
 147:Src/main.c    ****         return FAIL;
 188              		.loc 1 147 0
 189 004a 4FF0FF33 		mov	r3, #-1
 190 004e 19E0     		b	.L9
 191              	.L8:
 148:Src/main.c    **** 
 149:Src/main.c    ****     }
 150:Src/main.c    ****     else if(data > 512000 || data < 0)
 192              		.loc 1 150 0
 193 0050 7B68     		ldr	r3, [r7, #4]
 194 0052 B3F5FA2F 		cmp	r3, #512000
 195 0056 11D9     		bls	.L10
 151:Src/main.c    ****     {
 152:Src/main.c    ****         mprintf("There is no update file in the flash\r\n");
 196              		.loc 1 152 0
 197 0058 1148     		ldr	r0, .L11+20
 198 005a FFF7FEFF 		bl	mprintf
 153:Src/main.c    **** 
 154:Src/main.c    ****         HAL_FLASH_Unlock();
 199              		.loc 1 154 0
 200 005e FFF7FEFF 		bl	HAL_FLASH_Unlock
 155:Src/main.c    ****         FLASH_Erase_Sector(FLASH_SECTOR_6, VOLTAGE_RANGE_3);
 201              		.loc 1 155 0
 202 0062 0221     		movs	r1, #2
 203 0064 0620     		movs	r0, #6
 204 0066 FFF7FEFF 		bl	FLASH_Erase_Sector
 156:Src/main.c    ****         FLASH_Erase_Sector(FLASH_SECTOR_7, VOLTAGE_RANGE_3);
 205              		.loc 1 156 0
 206 006a 0221     		movs	r1, #2
 207 006c 0720     		movs	r0, #7
 208 006e FFF7FEFF 		bl	FLASH_Erase_Sector
 157:Src/main.c    ****         HAL_FLASH_Lock();
 209              		.loc 1 157 0
 210 0072 FFF7FEFF 		bl	HAL_FLASH_Lock
 158:Src/main.c    **** 
 159:Src/main.c    ****         return FAIL;
 211              		.loc 1 159 0
 212 0076 4FF0FF33 		mov	r3, #-1
 213 007a 03E0     		b	.L9
 214              	.L10:
 160:Src/main.c    ****     }
 161:Src/main.c    ****     else
 162:Src/main.c    ****     {
 163:Src/main.c    ****         mprintf("A Update file has been found in the flash");
 215              		.loc 1 163 0
 216 007c 0948     		ldr	r0, .L11+24
 217 007e FFF7FEFF 		bl	mprintf
 164:Src/main.c    ****         return SUCCESS;
 218              		.loc 1 164 0
 219 0082 0023     		movs	r3, #0
 220              	.L9:
 165:Src/main.c    ****     }
ARM GAS  /tmp/ccg1mW9H.s 			page 8


 166:Src/main.c    **** 
 167:Src/main.c    **** }
 221              		.loc 1 167 0
 222 0084 1846     		mov	r0, r3
 223 0086 0C37     		adds	r7, r7, #12
 224              	.LCFI8:
 225              		.cfi_def_cfa_offset 12
 226 0088 BD46     		mov	sp, r7
 227              	.LCFI9:
 228              		.cfi_def_cfa_register 13
 229              		@ sp needed
 230 008a 90BD     		pop	{r4, r7, pc}
 231              	.L12:
 232              		.align	2
 233              	.L11:
 234 008c 20000000 		.word	.LC1
 235 0090 00000808 		.word	134742016
 236 0094 01000808 		.word	134742017
 237 0098 02000808 		.word	134742018
 238 009c 03000808 		.word	134742019
 239 00a0 44000000 		.word	.LC2
 240 00a4 6C000000 		.word	.LC3
 241              		.cfi_endproc
 242              	.LFE137:
 244              		.section	.rodata
 245 0096 0000     		.align	2
 246              	.LC4:
 247 0098 55706461 		.ascii	"Update File Size : %d\015\012\000"
 247      74652046 
 247      696C6520 
 247      53697A65 
 247      203A2025 
 248              		.align	2
 249              	.LC5:
 250 00b0 55706461 		.ascii	"UpdateFile has been writen on memory\015\012\000"
 250      74654669 
 250      6C652068 
 250      61732062 
 250      65656E20 
 251              		.section	.text.loadUpdateFile,"ax",%progbits
 252              		.align	1
 253              		.global	loadUpdateFile
 254              		.syntax unified
 255              		.thumb
 256              		.thumb_func
 257              		.fpu fpv4-sp-d16
 259              	loadUpdateFile:
 260              	.LFB138:
 168:Src/main.c    **** 
 169:Src/main.c    **** 
 170:Src/main.c    **** 
 171:Src/main.c    **** void loadUpdateFile()
 172:Src/main.c    **** {
 261              		.loc 1 172 0
 262              		.cfi_startproc
 263              		@ args = 0, pretend = 0, frame = 16
 264              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccg1mW9H.s 			page 9


 265 0000 90B5     		push	{r4, r7, lr}
 266              	.LCFI10:
 267              		.cfi_def_cfa_offset 12
 268              		.cfi_offset 4, -12
 269              		.cfi_offset 7, -8
 270              		.cfi_offset 14, -4
 271 0002 85B0     		sub	sp, sp, #20
 272              	.LCFI11:
 273              		.cfi_def_cfa_offset 32
 274 0004 00AF     		add	r7, sp, #0
 275              	.LCFI12:
 276              		.cfi_def_cfa_register 7
 173:Src/main.c    ****     uint32_t file_size;
 174:Src/main.c    ****     unsigned char *data;
 175:Src/main.c    **** 
 176:Src/main.c    ****     file_size = readFlash(UPDATE_FILE_ADRESS) | readFlash(UPDATE_FILE_ADRESS + 1) << 8
 277              		.loc 1 176 0
 278 0006 3E48     		ldr	r0, .L18
 279 0008 FFF7FEFF 		bl	readFlash
 280 000c 0346     		mov	r3, r0
 281 000e 1C46     		mov	r4, r3
 282 0010 3C48     		ldr	r0, .L18+4
 283 0012 FFF7FEFF 		bl	readFlash
 284 0016 0346     		mov	r3, r0
 285 0018 1B02     		lsls	r3, r3, #8
 286 001a 1C43     		orrs	r4, r4, r3
 177:Src/main.c    ****             | readFlash(UPDATE_FILE_ADRESS + 2) << 16 | readFlash(UPDATE_FILE_ADRESS + 3) << 24;
 287              		.loc 1 177 0
 288 001c 3A48     		ldr	r0, .L18+8
 289 001e FFF7FEFF 		bl	readFlash
 290 0022 0346     		mov	r3, r0
 291 0024 1B04     		lsls	r3, r3, #16
 292 0026 1C43     		orrs	r4, r4, r3
 293 0028 3848     		ldr	r0, .L18+12
 294 002a FFF7FEFF 		bl	readFlash
 295 002e 0346     		mov	r3, r0
 296 0030 1B06     		lsls	r3, r3, #24
 297 0032 2343     		orrs	r3, r3, r4
 176:Src/main.c    ****             | readFlash(UPDATE_FILE_ADRESS + 2) << 16 | readFlash(UPDATE_FILE_ADRESS + 3) << 24;
 298              		.loc 1 176 0
 299 0034 7B60     		str	r3, [r7, #4]
 178:Src/main.c    **** 
 179:Src/main.c    **** 
 180:Src/main.c    ****     mprintf("Update File Size : %d\r\n", file_size);
 300              		.loc 1 180 0
 301 0036 7968     		ldr	r1, [r7, #4]
 302 0038 3548     		ldr	r0, .L18+16
 303 003a FFF7FEFF 		bl	mprintf
 181:Src/main.c    **** 
 182:Src/main.c    ****     data = malloc(file_size);
 304              		.loc 1 182 0
 305 003e 7868     		ldr	r0, [r7, #4]
 306 0040 FFF7FEFF 		bl	malloc
 307 0044 0346     		mov	r3, r0
 308 0046 3B60     		str	r3, [r7]
 183:Src/main.c    **** 
 184:Src/main.c    **** 
ARM GAS  /tmp/ccg1mW9H.s 			page 10


 185:Src/main.c    ****     HAL_FLASH_Unlock();
 309              		.loc 1 185 0
 310 0048 FFF7FEFF 		bl	HAL_FLASH_Unlock
 186:Src/main.c    ****     FLASH_Erase_Sector(FLASH_SECTOR_2, VOLTAGE_RANGE_3);
 311              		.loc 1 186 0
 312 004c 0221     		movs	r1, #2
 313 004e 0220     		movs	r0, #2
 314 0050 FFF7FEFF 		bl	FLASH_Erase_Sector
 187:Src/main.c    ****     FLASH_Erase_Sector(FLASH_SECTOR_3, VOLTAGE_RANGE_3);
 315              		.loc 1 187 0
 316 0054 0221     		movs	r1, #2
 317 0056 0320     		movs	r0, #3
 318 0058 FFF7FEFF 		bl	FLASH_Erase_Sector
 188:Src/main.c    ****     FLASH_Erase_Sector(FLASH_SECTOR_4, VOLTAGE_RANGE_3);
 319              		.loc 1 188 0
 320 005c 0221     		movs	r1, #2
 321 005e 0420     		movs	r0, #4
 322 0060 FFF7FEFF 		bl	FLASH_Erase_Sector
 189:Src/main.c    ****     FLASH_Erase_Sector(FLASH_SECTOR_5, VOLTAGE_RANGE_3);
 323              		.loc 1 189 0
 324 0064 0221     		movs	r1, #2
 325 0066 0520     		movs	r0, #5
 326 0068 FFF7FEFF 		bl	FLASH_Erase_Sector
 190:Src/main.c    ****     HAL_FLASH_Lock();
 327              		.loc 1 190 0
 328 006c FFF7FEFF 		bl	HAL_FLASH_Lock
 191:Src/main.c    **** 
 192:Src/main.c    ****     HAL_Delay(1000);
 329              		.loc 1 192 0
 330 0070 4FF47A70 		mov	r0, #1000
 331 0074 FFF7FEFF 		bl	HAL_Delay
 332              	.LBB12:
 193:Src/main.c    **** 
 194:Src/main.c    ****     for(int i=0; i<file_size; i++)
 333              		.loc 1 194 0
 334 0078 0023     		movs	r3, #0
 335 007a FB60     		str	r3, [r7, #12]
 336 007c 0DE0     		b	.L14
 337              	.L15:
 195:Src/main.c    ****         data[i] =readFlash(UPDATE_FILE_ADRESS + 4 + i);
 338              		.loc 1 195 0 discriminator 3
 339 007e FB68     		ldr	r3, [r7, #12]
 340 0080 3A68     		ldr	r2, [r7]
 341 0082 D418     		adds	r4, r2, r3
 342 0084 FA68     		ldr	r2, [r7, #12]
 343 0086 234B     		ldr	r3, .L18+20
 344 0088 1344     		add	r3, r3, r2
 345 008a 1846     		mov	r0, r3
 346 008c FFF7FEFF 		bl	readFlash
 347 0090 0346     		mov	r3, r0
 348 0092 2370     		strb	r3, [r4]
 194:Src/main.c    ****         data[i] =readFlash(UPDATE_FILE_ADRESS + 4 + i);
 349              		.loc 1 194 0 discriminator 3
 350 0094 FB68     		ldr	r3, [r7, #12]
 351 0096 0133     		adds	r3, r3, #1
 352 0098 FB60     		str	r3, [r7, #12]
 353              	.L14:
ARM GAS  /tmp/ccg1mW9H.s 			page 11


 194:Src/main.c    ****         data[i] =readFlash(UPDATE_FILE_ADRESS + 4 + i);
 354              		.loc 1 194 0 is_stmt 0 discriminator 1
 355 009a FA68     		ldr	r2, [r7, #12]
 356 009c 7B68     		ldr	r3, [r7, #4]
 357 009e 9A42     		cmp	r2, r3
 358 00a0 EDD3     		bcc	.L15
 359              	.LBE12:
 360              	.LBB13:
 196:Src/main.c    **** 
 197:Src/main.c    ****     for(int i=0; i<file_size; i++)
 361              		.loc 1 197 0 is_stmt 1
 362 00a2 0023     		movs	r3, #0
 363 00a4 BB60     		str	r3, [r7, #8]
 364 00a6 0CE0     		b	.L16
 365              	.L17:
 198:Src/main.c    ****         writeFlash(data[i], APPLICATION_ADDRESS + i);
 366              		.loc 1 198 0 discriminator 3
 367 00a8 BB68     		ldr	r3, [r7, #8]
 368 00aa 3A68     		ldr	r2, [r7]
 369 00ac 1344     		add	r3, r3, r2
 370 00ae 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 371 00b0 BA68     		ldr	r2, [r7, #8]
 372 00b2 194B     		ldr	r3, .L18+24
 373 00b4 1344     		add	r3, r3, r2
 374 00b6 1946     		mov	r1, r3
 375 00b8 FFF7FEFF 		bl	writeFlash
 197:Src/main.c    ****         writeFlash(data[i], APPLICATION_ADDRESS + i);
 376              		.loc 1 197 0 discriminator 3
 377 00bc BB68     		ldr	r3, [r7, #8]
 378 00be 0133     		adds	r3, r3, #1
 379 00c0 BB60     		str	r3, [r7, #8]
 380              	.L16:
 197:Src/main.c    ****         writeFlash(data[i], APPLICATION_ADDRESS + i);
 381              		.loc 1 197 0 is_stmt 0 discriminator 1
 382 00c2 BA68     		ldr	r2, [r7, #8]
 383 00c4 7B68     		ldr	r3, [r7, #4]
 384 00c6 9A42     		cmp	r2, r3
 385 00c8 EED3     		bcc	.L17
 386              	.LBE13:
 199:Src/main.c    **** 
 200:Src/main.c    **** 
 201:Src/main.c    ****     HAL_Delay(1000);
 387              		.loc 1 201 0 is_stmt 1
 388 00ca 4FF47A70 		mov	r0, #1000
 389 00ce FFF7FEFF 		bl	HAL_Delay
 202:Src/main.c    **** 
 203:Src/main.c    ****     HAL_FLASH_Unlock();
 390              		.loc 1 203 0
 391 00d2 FFF7FEFF 		bl	HAL_FLASH_Unlock
 204:Src/main.c    ****     FLASH_Erase_Sector(FLASH_SECTOR_6, VOLTAGE_RANGE_3);
 392              		.loc 1 204 0
 393 00d6 0221     		movs	r1, #2
 394 00d8 0620     		movs	r0, #6
 395 00da FFF7FEFF 		bl	FLASH_Erase_Sector
 205:Src/main.c    ****     FLASH_Erase_Sector(FLASH_SECTOR_7, VOLTAGE_RANGE_3);
 396              		.loc 1 205 0
 397 00de 0221     		movs	r1, #2
ARM GAS  /tmp/ccg1mW9H.s 			page 12


 398 00e0 0720     		movs	r0, #7
 399 00e2 FFF7FEFF 		bl	FLASH_Erase_Sector
 206:Src/main.c    ****     HAL_FLASH_Lock();
 400              		.loc 1 206 0
 401 00e6 FFF7FEFF 		bl	HAL_FLASH_Lock
 207:Src/main.c    **** 
 208:Src/main.c    ****     mprintf("UpdateFile has been writen on memory\r\n");
 402              		.loc 1 208 0
 403 00ea 0C48     		ldr	r0, .L18+28
 404 00ec FFF7FEFF 		bl	mprintf
 209:Src/main.c    **** 
 210:Src/main.c    **** 
 211:Src/main.c    ****     free(data);
 405              		.loc 1 211 0
 406 00f0 3868     		ldr	r0, [r7]
 407 00f2 FFF7FEFF 		bl	free
 212:Src/main.c    **** 
 213:Src/main.c    **** 
 214:Src/main.c    **** }
 408              		.loc 1 214 0
 409 00f6 00BF     		nop
 410 00f8 1437     		adds	r7, r7, #20
 411              	.LCFI13:
 412              		.cfi_def_cfa_offset 12
 413 00fa BD46     		mov	sp, r7
 414              	.LCFI14:
 415              		.cfi_def_cfa_register 13
 416              		@ sp needed
 417 00fc 90BD     		pop	{r4, r7, pc}
 418              	.L19:
 419 00fe 00BF     		.align	2
 420              	.L18:
 421 0100 00000808 		.word	134742016
 422 0104 01000808 		.word	134742017
 423 0108 02000808 		.word	134742018
 424 010c 03000808 		.word	134742019
 425 0110 98000000 		.word	.LC4
 426 0114 04000808 		.word	134742020
 427 0118 00000108 		.word	134283264
 428 011c B0000000 		.word	.LC5
 429              		.cfi_endproc
 430              	.LFE138:
 432              		.section	.rodata
 433 00d7 00       		.align	2
 434              	.LC6:
 435 00d8 426F6F74 		.ascii	"Booting...\015\012\000"
 435      696E672E 
 435      2E2E0D0A 
 435      00
 436              		.section	.text.bootRTOS,"ax",%progbits
 437              		.align	1
 438              		.global	bootRTOS
 439              		.syntax unified
 440              		.thumb
 441              		.thumb_func
 442              		.fpu fpv4-sp-d16
 444              	bootRTOS:
ARM GAS  /tmp/ccg1mW9H.s 			page 13


 445              	.LFB139:
 215:Src/main.c    **** 
 216:Src/main.c    **** 
 217:Src/main.c    **** 
 218:Src/main.c    **** void bootRTOS()
 219:Src/main.c    **** {
 446              		.loc 1 219 0
 447              		.cfi_startproc
 448              		@ args = 0, pretend = 0, frame = 16
 449              		@ frame_needed = 1, uses_anonymous_args = 0
 450 0000 80B5     		push	{r7, lr}
 451              	.LCFI15:
 452              		.cfi_def_cfa_offset 8
 453              		.cfi_offset 7, -8
 454              		.cfi_offset 14, -4
 455 0002 84B0     		sub	sp, sp, #16
 456              	.LCFI16:
 457              		.cfi_def_cfa_offset 24
 458 0004 00AF     		add	r7, sp, #0
 459              	.LCFI17:
 460              		.cfi_def_cfa_register 7
 220:Src/main.c    **** 
 221:Src/main.c    **** 
 222:Src/main.c    ****     pFunction appEntry;
 223:Src/main.c    ****     uint32_t appStack;
 224:Src/main.c    **** 
 225:Src/main.c    ****     mprintf("Booting...\r\n");
 461              		.loc 1 225 0
 462 0006 0A48     		ldr	r0, .L21
 463 0008 FFF7FEFF 		bl	mprintf
 226:Src/main.c    **** 
 227:Src/main.c    **** //    EnablePrivilegedMode( ) ;
 228:Src/main.c    **** 
 229:Src/main.c    **** 
 230:Src/main.c    **** //    // Disable all interrupts
 231:Src/main.c    **** //    NVIC->ICER[ 0 ] = 0xFFFFFFFF ;
 232:Src/main.c    **** //    NVIC->ICER[ 1 ] = 0xFFFFFFFF ;
 233:Src/main.c    **** //    NVIC->ICER[ 2 ] = 0xFFFFFFFF ;
 234:Src/main.c    **** //    NVIC->ICER[ 3 ] = 0xFFFFFFFF ;
 235:Src/main.c    **** //    NVIC->ICER[ 4 ] = 0xFFFFFFFF ;
 236:Src/main.c    **** //    NVIC->ICER[ 5 ] = 0xFFFFFFFF ;
 237:Src/main.c    **** //    NVIC->ICER[ 6 ] = 0xFFFFFFFF ;
 238:Src/main.c    **** //    NVIC->ICER[ 7 ] = 0xFFFFFFFF ;
 239:Src/main.c    **** 
 240:Src/main.c    **** 
 241:Src/main.c    **** //    // Clear pendings
 242:Src/main.c    **** //    NVIC->ICPR[ 0 ] = 0xFFFFFFFF ;
 243:Src/main.c    **** //    NVIC->ICPR[ 1 ] = 0xFFFFFFFF ;
 244:Src/main.c    **** //    NVIC->ICPR[ 2 ] = 0xFFFFFFFF ;
 245:Src/main.c    **** //    NVIC->ICPR[ 3 ] = 0xFFFFFFFF ;
 246:Src/main.c    **** //    NVIC->ICPR[ 4 ] = 0xFFFFFFFF ;
 247:Src/main.c    **** //    NVIC->ICPR[ 5 ] = 0xFFFFFFFF ;
 248:Src/main.c    **** //    NVIC->ICPR[ 6 ] = 0xFFFFFFFF ;
 249:Src/main.c    **** //    NVIC->ICPR[ 7 ] = 0xFFFFFFFF ;
 250:Src/main.c    **** 
 251:Src/main.c    **** 
 252:Src/main.c    **** //    // Stop sys tick
ARM GAS  /tmp/ccg1mW9H.s 			page 14


 253:Src/main.c    **** //    SysTick->CTRL = 0 ;
 254:Src/main.c    **** //    SCB->ICSR |= SCB_ICSR_PENDSTCLR_Msk ;
 255:Src/main.c    **** 
 256:Src/main.c    **** //    // Disable individual fault handlers if the bootloader used them.
 257:Src/main.c    **** //    SCB->SHCSR &= ~( SCB_SHCSR_USGFAULTENA_Msk | \
 258:Src/main.c    **** //                    SCB_SHCSR_BUSFAULTENA_Msk | \
 259:Src/main.c    **** //                    SCB_SHCSR_MEMFAULTENA_Msk ) ;
 260:Src/main.c    **** 
 261:Src/main.c    **** //    // Activate the MSP, if the core is found to currently run with the PSP.
 262:Src/main.c    **** //    if( CONTROL_SPSEL_Msk & __get_CONTROL( ) )
 263:Src/main.c    **** //    {  /* MSP is not active */
 264:Src/main.c    **** //     __set_CONTROL( __get_CONTROL( ) & ~CONTROL_SPSEL_Msk ) ;
 265:Src/main.c    **** //    }
 266:Src/main.c    **** 
 267:Src/main.c    **** //    __set_CONTROL(0);
 268:Src/main.c    **** 
 269:Src/main.c    ****     /* Get the application stack pointer (First entry in the application vector table) */
 270:Src/main.c    ****     appStack = (uint32_t) *((__IO uint32_t*)APPLICATION_ADDRESS);
 464              		.loc 1 270 0
 465 000c 094B     		ldr	r3, .L21+4
 466 000e 1B68     		ldr	r3, [r3]
 467 0010 FB60     		str	r3, [r7, #12]
 271:Src/main.c    **** 
 272:Src/main.c    ****     /* Get the application entry point (Second entry in the application vector table) */
 273:Src/main.c    ****     appEntry = (pFunction) *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 468              		.loc 1 273 0
 469 0012 094B     		ldr	r3, .L21+8
 470 0014 1B68     		ldr	r3, [r3]
 471 0016 BB60     		str	r3, [r7, #8]
 472 0018 FB68     		ldr	r3, [r7, #12]
 473 001a 7B60     		str	r3, [r7, #4]
 474              	.LBB14:
 475              	.LBB15:
 476              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARM GAS  /tmp/ccg1mW9H.s 			page 15


  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
ARM GAS  /tmp/ccg1mW9H.s 			page 16


  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccg1mW9H.s 			page 17


 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 477              		.loc 2 190 0
 478 001c 7B68     		ldr	r3, [r7, #4]
 479              		.syntax unified
 480              	@ 190 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
ARM GAS  /tmp/ccg1mW9H.s 			page 18


 481 001e 83F30888 		MSR msp, r3
 482              	
 483              	@ 0 "" 2
 484              		.thumb
 485              		.syntax unified
 486              	.LBE15:
 487              	.LBE14:
 274:Src/main.c    **** 
 275:Src/main.c    **** //    /* Set the application stack pointer */
 276:Src/main.c    **** //    SYSCFG->MEMRMP = 0x01;
 277:Src/main.c    **** 
 278:Src/main.c    **** //    SCB->SHCSR &= ~( SCB_SHCSR_USGFAULTENA_Msk | \
 279:Src/main.c    **** //                     SCB_SHCSR_BUSFAULTENA_Msk | \
 280:Src/main.c    **** //                     SCB_SHCSR_MEMFAULTENA_Msk ) ;
 281:Src/main.c    **** 
 282:Src/main.c    ****     __set_MSP(appStack);
 283:Src/main.c    **** 
 284:Src/main.c    ****     /* Start the application */
 285:Src/main.c    ****     appEntry();
 488              		.loc 1 285 0
 489 0022 BB68     		ldr	r3, [r7, #8]
 490 0024 9847     		blx	r3
 491              	.LVL0:
 286:Src/main.c    **** 
 287:Src/main.c    **** }
 492              		.loc 1 287 0
 493 0026 00BF     		nop
 494 0028 1037     		adds	r7, r7, #16
 495              	.LCFI18:
 496              		.cfi_def_cfa_offset 8
 497 002a BD46     		mov	sp, r7
 498              	.LCFI19:
 499              		.cfi_def_cfa_register 13
 500              		@ sp needed
 501 002c 80BD     		pop	{r7, pc}
 502              	.L22:
 503 002e 00BF     		.align	2
 504              	.L21:
 505 0030 D8000000 		.word	.LC6
 506 0034 00000108 		.word	134283264
 507 0038 04000108 		.word	134283268
 508              		.cfi_endproc
 509              	.LFE139:
 511              		.section	.text.writeFlash,"ax",%progbits
 512              		.align	1
 513              		.global	writeFlash
 514              		.syntax unified
 515              		.thumb
 516              		.thumb_func
 517              		.fpu fpv4-sp-d16
 519              	writeFlash:
 520              	.LFB140:
 288:Src/main.c    **** 
 289:Src/main.c    **** 
 290:Src/main.c    **** 
 291:Src/main.c    **** 
 292:Src/main.c    **** void writeFlash(uint8_t Data, long Address)
ARM GAS  /tmp/ccg1mW9H.s 			page 19


 293:Src/main.c    **** {
 521              		.loc 1 293 0
 522              		.cfi_startproc
 523              		@ args = 0, pretend = 0, frame = 8
 524              		@ frame_needed = 1, uses_anonymous_args = 0
 525 0000 90B5     		push	{r4, r7, lr}
 526              	.LCFI20:
 527              		.cfi_def_cfa_offset 12
 528              		.cfi_offset 4, -12
 529              		.cfi_offset 7, -8
 530              		.cfi_offset 14, -4
 531 0002 83B0     		sub	sp, sp, #12
 532              	.LCFI21:
 533              		.cfi_def_cfa_offset 24
 534 0004 00AF     		add	r7, sp, #0
 535              	.LCFI22:
 536              		.cfi_def_cfa_register 7
 537 0006 0346     		mov	r3, r0
 538 0008 3960     		str	r1, [r7]
 539 000a FB71     		strb	r3, [r7, #7]
 294:Src/main.c    **** 
 295:Src/main.c    ****      HAL_FLASH_Unlock();
 540              		.loc 1 295 0
 541 000c FFF7FEFF 		bl	HAL_FLASH_Unlock
 296:Src/main.c    ****      HAL_FLASH_Program(TYPEPROGRAM_BYTE, Address , (uint8_t) Data);
 542              		.loc 1 296 0
 543 0010 3968     		ldr	r1, [r7]
 544 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 545 0014 4FF00004 		mov	r4, #0
 546 0018 1A46     		mov	r2, r3
 547 001a 2346     		mov	r3, r4
 548 001c 0020     		movs	r0, #0
 549 001e FFF7FEFF 		bl	HAL_FLASH_Program
 297:Src/main.c    ****      HAL_FLASH_Lock();
 550              		.loc 1 297 0
 551 0022 FFF7FEFF 		bl	HAL_FLASH_Lock
 298:Src/main.c    **** }
 552              		.loc 1 298 0
 553 0026 00BF     		nop
 554 0028 0C37     		adds	r7, r7, #12
 555              	.LCFI23:
 556              		.cfi_def_cfa_offset 12
 557 002a BD46     		mov	sp, r7
 558              	.LCFI24:
 559              		.cfi_def_cfa_register 13
 560              		@ sp needed
 561 002c 90BD     		pop	{r4, r7, pc}
 562              		.cfi_endproc
 563              	.LFE140:
 565              		.section	.text.readFlash,"ax",%progbits
 566              		.align	1
 567              		.global	readFlash
 568              		.syntax unified
 569              		.thumb
 570              		.thumb_func
 571              		.fpu fpv4-sp-d16
 573              	readFlash:
ARM GAS  /tmp/ccg1mW9H.s 			page 20


 574              	.LFB141:
 299:Src/main.c    **** 
 300:Src/main.c    **** uint8_t readFlash(int Address)
 301:Src/main.c    **** {
 575              		.loc 1 301 0
 576              		.cfi_startproc
 577              		@ args = 0, pretend = 0, frame = 16
 578              		@ frame_needed = 1, uses_anonymous_args = 0
 579              		@ link register save eliminated.
 580 0000 80B4     		push	{r7}
 581              	.LCFI25:
 582              		.cfi_def_cfa_offset 4
 583              		.cfi_offset 7, -4
 584 0002 85B0     		sub	sp, sp, #20
 585              	.LCFI26:
 586              		.cfi_def_cfa_offset 24
 587 0004 00AF     		add	r7, sp, #0
 588              	.LCFI27:
 589              		.cfi_def_cfa_register 7
 590 0006 7860     		str	r0, [r7, #4]
 302:Src/main.c    **** 
 303:Src/main.c    ****     uint8_t flash_data;
 304:Src/main.c    **** 
 305:Src/main.c    ****     flash_data = *(uint8_t *)Address;
 591              		.loc 1 305 0
 592 0008 7B68     		ldr	r3, [r7, #4]
 593 000a 1B78     		ldrb	r3, [r3]
 594 000c FB73     		strb	r3, [r7, #15]
 306:Src/main.c    **** 
 307:Src/main.c    ****     return flash_data;
 595              		.loc 1 307 0
 596 000e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 308:Src/main.c    **** 
 309:Src/main.c    **** }
 597              		.loc 1 309 0
 598 0010 1846     		mov	r0, r3
 599 0012 1437     		adds	r7, r7, #20
 600              	.LCFI28:
 601              		.cfi_def_cfa_offset 4
 602 0014 BD46     		mov	sp, r7
 603              	.LCFI29:
 604              		.cfi_def_cfa_register 13
 605              		@ sp needed
 606 0016 5DF8047B 		ldr	r7, [sp], #4
 607              	.LCFI30:
 608              		.cfi_restore 7
 609              		.cfi_def_cfa_offset 0
 610 001a 7047     		bx	lr
 611              		.cfi_endproc
 612              	.LFE141:
 614              		.section	.text.EnablePrivilegedMode,"ax",%progbits
 615              		.align	1
 616              		.global	EnablePrivilegedMode
 617              		.syntax unified
 618              		.thumb
 619              		.thumb_func
 620              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccg1mW9H.s 			page 21


 622              	EnablePrivilegedMode:
 623              	.LFB142:
 310:Src/main.c    **** 
 311:Src/main.c    **** 
 312:Src/main.c    **** 
 313:Src/main.c    **** void EnablePrivilegedMode (void){
 624              		.loc 1 313 0
 625              		.cfi_startproc
 626              		@ args = 0, pretend = 0, frame = 8
 627              		@ frame_needed = 1, uses_anonymous_args = 0
 628              		@ link register save eliminated.
 629 0000 80B4     		push	{r7}
 630              	.LCFI31:
 631              		.cfi_def_cfa_offset 4
 632              		.cfi_offset 7, -4
 633 0002 83B0     		sub	sp, sp, #12
 634              	.LCFI32:
 635              		.cfi_def_cfa_offset 16
 636 0004 00AF     		add	r7, sp, #0
 637              	.LCFI33:
 638              		.cfi_def_cfa_register 7
 639              	.LBB16:
 640              	.LBB17:
  71:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 641              		.loc 2 71 0
 642              		.syntax unified
 643              	@ 71 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 644 0006 72B6     		cpsid i
 645              	@ 0 "" 2
 646              		.thumb
 647              		.syntax unified
 648              	.LBE17:
 649              	.LBE16:
 650              	.LBB18:
 651              	.LBB19:
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 652              		.loc 2 84 0
 653              		.syntax unified
 654              	@ 84 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 655 0008 EFF31483 		MRS r3, control
 656              	@ 0 "" 2
 657              		.thumb
 658              		.syntax unified
 659 000c 3B60     		str	r3, [r7]
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 660              		.loc 2 85 0
 661 000e 3B68     		ldr	r3, [r7]
 662              	.LBE19:
 663              	.LBE18:
 314:Src/main.c    ****         __disable_irq();
 315:Src/main.c    ****         __set_CONTROL((__get_CONTROL( ))& 0xFFFFFFFE);  // enter priv mode
 664              		.loc 1 315 0
 665 0010 23F00103 		bic	r3, r3, #1
 666 0014 7B60     		str	r3, [r7, #4]
 667              	.LBB20:
 668              	.LBB21:
  96:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccg1mW9H.s 			page 22


 669              		.loc 2 96 0
 670 0016 7B68     		ldr	r3, [r7, #4]
 671              		.syntax unified
 672              	@ 96 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 673 0018 83F31488 		MSR control, r3
 674              	@ 0 "" 2
 675              		.thumb
 676              		.syntax unified
 677              	.LBE21:
 678              	.LBE20:
 679              	.LBB22:
 680              	.LBB23:
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 681              		.loc 2 60 0
 682              		.syntax unified
 683              	@ 60 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 684 001c 62B6     		cpsie i
 685              	@ 0 "" 2
 686              		.thumb
 687              		.syntax unified
 688              	.LBE23:
 689              	.LBE22:
 316:Src/main.c    ****         __enable_irq();
 317:Src/main.c    **** }
 690              		.loc 1 317 0
 691 001e 00BF     		nop
 692 0020 0C37     		adds	r7, r7, #12
 693              	.LCFI34:
 694              		.cfi_def_cfa_offset 4
 695 0022 BD46     		mov	sp, r7
 696              	.LCFI35:
 697              		.cfi_def_cfa_register 13
 698              		@ sp needed
 699 0024 5DF8047B 		ldr	r7, [sp], #4
 700              	.LCFI36:
 701              		.cfi_restore 7
 702              		.cfi_def_cfa_offset 0
 703 0028 7047     		bx	lr
 704              		.cfi_endproc
 705              	.LFE142:
 707              		.section	.text.vprint,"ax",%progbits
 708              		.align	1
 709              		.global	vprint
 710              		.syntax unified
 711              		.thumb
 712              		.thumb_func
 713              		.fpu fpv4-sp-d16
 715              	vprint:
 716              	.LFB143:
 318:Src/main.c    **** 
 319:Src/main.c    **** 
 320:Src/main.c    **** 
 321:Src/main.c    **** void vprint(const char *fmt, va_list argp)
 322:Src/main.c    **** {
 717              		.loc 1 322 0
 718              		.cfi_startproc
 719              		@ args = 0, pretend = 0, frame = 208
ARM GAS  /tmp/ccg1mW9H.s 			page 23


 720              		@ frame_needed = 1, uses_anonymous_args = 0
 721 0000 80B5     		push	{r7, lr}
 722              	.LCFI37:
 723              		.cfi_def_cfa_offset 8
 724              		.cfi_offset 7, -8
 725              		.cfi_offset 14, -4
 726 0002 B4B0     		sub	sp, sp, #208
 727              	.LCFI38:
 728              		.cfi_def_cfa_offset 216
 729 0004 00AF     		add	r7, sp, #0
 730              	.LCFI39:
 731              		.cfi_def_cfa_register 7
 732 0006 7860     		str	r0, [r7, #4]
 733 0008 3960     		str	r1, [r7]
 323:Src/main.c    ****     char string[200];
 324:Src/main.c    ****     if(0 < vsprintf(string,fmt,argp)) // build string
 734              		.loc 1 324 0
 735 000a 07F10803 		add	r3, r7, #8
 736 000e 3A68     		ldr	r2, [r7]
 737 0010 7968     		ldr	r1, [r7, #4]
 738 0012 1846     		mov	r0, r3
 739 0014 FFF7FEFF 		bl	vsprintf
 740 0018 0346     		mov	r3, r0
 741 001a 002B     		cmp	r3, #0
 742 001c 0DDD     		ble	.L30
 325:Src/main.c    ****     {
 326:Src/main.c    ****         HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via
 743              		.loc 1 326 0
 744 001e 07F10803 		add	r3, r7, #8
 745 0022 1846     		mov	r0, r3
 746 0024 FFF7FEFF 		bl	strlen
 747 0028 0346     		mov	r3, r0
 748 002a 9AB2     		uxth	r2, r3
 749 002c 07F10801 		add	r1, r7, #8
 750 0030 6FF07F43 		mvn	r3, #-16777216
 751 0034 0348     		ldr	r0, .L31
 752 0036 FFF7FEFF 		bl	HAL_UART_Transmit
 753              	.L30:
 327:Src/main.c    ****     }
 328:Src/main.c    **** }
 754              		.loc 1 328 0
 755 003a 00BF     		nop
 756 003c D037     		adds	r7, r7, #208
 757              	.LCFI40:
 758              		.cfi_def_cfa_offset 8
 759 003e BD46     		mov	sp, r7
 760              	.LCFI41:
 761              		.cfi_def_cfa_register 13
 762              		@ sp needed
 763 0040 80BD     		pop	{r7, pc}
 764              	.L32:
 765 0042 00BF     		.align	2
 766              	.L31:
 767 0044 00000000 		.word	huart1
 768              		.cfi_endproc
 769              	.LFE143:
 771              		.section	.text.mprintf,"ax",%progbits
ARM GAS  /tmp/ccg1mW9H.s 			page 24


 772              		.align	1
 773              		.global	mprintf
 774              		.syntax unified
 775              		.thumb
 776              		.thumb_func
 777              		.fpu fpv4-sp-d16
 779              	mprintf:
 780              	.LFB144:
 329:Src/main.c    **** 
 330:Src/main.c    **** 
 331:Src/main.c    **** 
 332:Src/main.c    **** void mprintf(const char *fmt, ...) // custom printf() function
 333:Src/main.c    **** {
 781              		.loc 1 333 0
 782              		.cfi_startproc
 783              		@ args = 4, pretend = 16, frame = 8
 784              		@ frame_needed = 1, uses_anonymous_args = 1
 785 0000 0FB4     		push	{r0, r1, r2, r3}
 786              	.LCFI42:
 787              		.cfi_def_cfa_offset 16
 788              		.cfi_offset 0, -16
 789              		.cfi_offset 1, -12
 790              		.cfi_offset 2, -8
 791              		.cfi_offset 3, -4
 792 0002 80B5     		push	{r7, lr}
 793              	.LCFI43:
 794              		.cfi_def_cfa_offset 24
 795              		.cfi_offset 7, -24
 796              		.cfi_offset 14, -20
 797 0004 82B0     		sub	sp, sp, #8
 798              	.LCFI44:
 799              		.cfi_def_cfa_offset 32
 800 0006 00AF     		add	r7, sp, #0
 801              	.LCFI45:
 802              		.cfi_def_cfa_register 7
 334:Src/main.c    ****     va_list argp;
 335:Src/main.c    ****     va_start(argp, fmt);
 803              		.loc 1 335 0
 804 0008 07F11403 		add	r3, r7, #20
 805 000c 7B60     		str	r3, [r7, #4]
 336:Src/main.c    ****     vprint(fmt, argp);
 806              		.loc 1 336 0
 807 000e 7968     		ldr	r1, [r7, #4]
 808 0010 3869     		ldr	r0, [r7, #16]
 809 0012 FFF7FEFF 		bl	vprint
 337:Src/main.c    ****     va_end(argp);
 338:Src/main.c    **** }
 810              		.loc 1 338 0
 811 0016 00BF     		nop
 812 0018 0837     		adds	r7, r7, #8
 813              	.LCFI46:
 814              		.cfi_def_cfa_offset 24
 815 001a BD46     		mov	sp, r7
 816              	.LCFI47:
 817              		.cfi_def_cfa_register 13
 818              		@ sp needed
 819 001c BDE88040 		pop	{r7, lr}
ARM GAS  /tmp/ccg1mW9H.s 			page 25


 820              	.LCFI48:
 821              		.cfi_restore 14
 822              		.cfi_restore 7
 823              		.cfi_def_cfa_offset 16
 824 0020 04B0     		add	sp, sp, #16
 825              	.LCFI49:
 826              		.cfi_restore 3
 827              		.cfi_restore 2
 828              		.cfi_restore 1
 829              		.cfi_restore 0
 830              		.cfi_def_cfa_offset 0
 831 0022 7047     		bx	lr
 832              		.cfi_endproc
 833              	.LFE144:
 835              		.section	.rodata
 836 00e5 000000   		.align	2
 837              	.LC7:
 838 00e8 5372632F 		.ascii	"Src/main.c\000"
 838      6D61696E 
 838      2E6300
 839              		.section	.text.SystemClock_Config,"ax",%progbits
 840              		.align	1
 841              		.global	SystemClock_Config
 842              		.syntax unified
 843              		.thumb
 844              		.thumb_func
 845              		.fpu fpv4-sp-d16
 847              	SystemClock_Config:
 848              	.LFB145:
 339:Src/main.c    **** 
 340:Src/main.c    **** 
 341:Src/main.c    **** 
 342:Src/main.c    **** void SystemClock_Config(void)
 343:Src/main.c    **** {
 849              		.loc 1 343 0
 850              		.cfi_startproc
 851              		@ args = 0, pretend = 0, frame = 208
 852              		@ frame_needed = 1, uses_anonymous_args = 0
 853 0000 80B5     		push	{r7, lr}
 854              	.LCFI50:
 855              		.cfi_def_cfa_offset 8
 856              		.cfi_offset 7, -8
 857              		.cfi_offset 14, -4
 858 0002 B4B0     		sub	sp, sp, #208
 859              	.LCFI51:
 860              		.cfi_def_cfa_offset 216
 861 0004 00AF     		add	r7, sp, #0
 862              	.LCFI52:
 863              		.cfi_def_cfa_register 7
 864              	.LBB24:
 344:Src/main.c    **** 
 345:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 346:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 347:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
 348:Src/main.c    **** 
 349:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 350:Src/main.c    ****     */
ARM GAS  /tmp/ccg1mW9H.s 			page 26


 351:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 865              		.loc 1 351 0
 866 0006 524A     		ldr	r2, .L39
 867 0008 514B     		ldr	r3, .L39
 868 000a 1B6C     		ldr	r3, [r3, #64]
 869 000c 43F08053 		orr	r3, r3, #268435456
 870 0010 1364     		str	r3, [r2, #64]
 871 0012 4F4B     		ldr	r3, .L39
 872 0014 1B6C     		ldr	r3, [r3, #64]
 873 0016 03F08053 		and	r3, r3, #268435456
 874 001a 7B60     		str	r3, [r7, #4]
 875 001c 7B68     		ldr	r3, [r7, #4]
 876              	.LBE24:
 877              	.LBB25:
 352:Src/main.c    **** 
 353:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 878              		.loc 1 353 0
 879 001e 4D4A     		ldr	r2, .L39+4
 880 0020 4C4B     		ldr	r3, .L39+4
 881 0022 1B68     		ldr	r3, [r3]
 882 0024 43F44043 		orr	r3, r3, #49152
 883 0028 1360     		str	r3, [r2]
 884 002a 4A4B     		ldr	r3, .L39+4
 885 002c 1B68     		ldr	r3, [r3]
 886 002e 03F44043 		and	r3, r3, #49152
 887 0032 3B60     		str	r3, [r7]
 888 0034 3B68     		ldr	r3, [r7]
 889              	.LBE25:
 354:Src/main.c    **** 
 355:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 356:Src/main.c    ****     */
 357:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 890              		.loc 1 357 0
 891 0036 0923     		movs	r3, #9
 892 0038 C7F8A030 		str	r3, [r7, #160]
 358:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 893              		.loc 1 358 0
 894 003c 4FF48033 		mov	r3, #65536
 895 0040 C7F8A430 		str	r3, [r7, #164]
 359:Src/main.c    ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 896              		.loc 1 359 0
 897 0044 0123     		movs	r3, #1
 898 0046 C7F8B430 		str	r3, [r7, #180]
 360:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 899              		.loc 1 360 0
 900 004a 0223     		movs	r3, #2
 901 004c C7F8B830 		str	r3, [r7, #184]
 361:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 902              		.loc 1 361 0
 903 0050 4FF48003 		mov	r3, #4194304
 904 0054 C7F8BC30 		str	r3, [r7, #188]
 362:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 905              		.loc 1 362 0
 906 0058 0823     		movs	r3, #8
 907 005a C7F8C030 		str	r3, [r7, #192]
 363:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 908              		.loc 1 363 0
ARM GAS  /tmp/ccg1mW9H.s 			page 27


 909 005e 4FF4A873 		mov	r3, #336
 910 0062 C7F8C430 		str	r3, [r7, #196]
 364:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 911              		.loc 1 364 0
 912 0066 0223     		movs	r3, #2
 913 0068 C7F8C830 		str	r3, [r7, #200]
 365:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 914              		.loc 1 365 0
 915 006c 0223     		movs	r3, #2
 916 006e C7F8CC30 		str	r3, [r7, #204]
 366:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 917              		.loc 1 366 0
 918 0072 07F1A003 		add	r3, r7, #160
 919 0076 1846     		mov	r0, r3
 920 0078 FFF7FEFF 		bl	HAL_RCC_OscConfig
 921 007c 0346     		mov	r3, r0
 922 007e 002B     		cmp	r3, #0
 923 0080 04D0     		beq	.L35
 367:Src/main.c    ****   {
 368:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 924              		.loc 1 368 0
 925 0082 4FF4B871 		mov	r1, #368
 926 0086 3448     		ldr	r0, .L39+8
 927 0088 FFF7FEFF 		bl	_Error_Handler
 928              	.L35:
 369:Src/main.c    ****   }
 370:Src/main.c    **** 
 371:Src/main.c    ****     /**Activate the Over-Drive mode 
 372:Src/main.c    ****     */
 373:Src/main.c    ****   if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 929              		.loc 1 373 0
 930 008c FFF7FEFF 		bl	HAL_PWREx_EnableOverDrive
 931 0090 0346     		mov	r3, r0
 932 0092 002B     		cmp	r3, #0
 933 0094 04D0     		beq	.L36
 374:Src/main.c    ****   {
 375:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 934              		.loc 1 375 0
 935 0096 40F27711 		movw	r1, #375
 936 009a 2F48     		ldr	r0, .L39+8
 937 009c FFF7FEFF 		bl	_Error_Handler
 938              	.L36:
 376:Src/main.c    ****   }
 377:Src/main.c    **** 
 378:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 379:Src/main.c    ****     */
 380:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 939              		.loc 1 380 0
 940 00a0 0F23     		movs	r3, #15
 941 00a2 C7F88C30 		str	r3, [r7, #140]
 381:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 382:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 942              		.loc 1 382 0
 943 00a6 0223     		movs	r3, #2
 944 00a8 C7F89030 		str	r3, [r7, #144]
 383:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 945              		.loc 1 383 0
ARM GAS  /tmp/ccg1mW9H.s 			page 28


 946 00ac 0023     		movs	r3, #0
 947 00ae C7F89430 		str	r3, [r7, #148]
 384:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 948              		.loc 1 384 0
 949 00b2 4FF4A053 		mov	r3, #5120
 950 00b6 C7F89830 		str	r3, [r7, #152]
 385:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 951              		.loc 1 385 0
 952 00ba 4FF48053 		mov	r3, #4096
 953 00be C7F89C30 		str	r3, [r7, #156]
 386:Src/main.c    **** 
 387:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 954              		.loc 1 387 0
 955 00c2 07F18C03 		add	r3, r7, #140
 956 00c6 0721     		movs	r1, #7
 957 00c8 1846     		mov	r0, r3
 958 00ca FFF7FEFF 		bl	HAL_RCC_ClockConfig
 959 00ce 0346     		mov	r3, r0
 960 00d0 002B     		cmp	r3, #0
 961 00d2 04D0     		beq	.L37
 388:Src/main.c    ****   {
 389:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 962              		.loc 1 389 0
 963 00d4 40F28511 		movw	r1, #389
 964 00d8 1F48     		ldr	r0, .L39+8
 965 00da FFF7FEFF 		bl	_Error_Handler
 966              	.L37:
 390:Src/main.c    ****   }
 391:Src/main.c    **** 
 392:Src/main.c    ****   PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 967              		.loc 1 392 0
 968 00de 1F4B     		ldr	r3, .L39+12
 969 00e0 BB60     		str	r3, [r7, #8]
 393:Src/main.c    ****                               |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_UART7
 394:Src/main.c    ****                               |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_I2C1
 395:Src/main.c    ****                               |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C3
 396:Src/main.c    ****                               |RCC_PERIPHCLK_I2C4;
 397:Src/main.c    ****   PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 970              		.loc 1 397 0
 971 00e2 4FF40073 		mov	r3, #512
 972 00e6 BB63     		str	r3, [r7, #56]
 398:Src/main.c    ****   PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 973              		.loc 1 398 0
 974 00e8 0023     		movs	r3, #0
 975 00ea FB64     		str	r3, [r7, #76]
 399:Src/main.c    ****   PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 976              		.loc 1 399 0
 977 00ec 0023     		movs	r3, #0
 978 00ee BB65     		str	r3, [r7, #88]
 400:Src/main.c    ****   PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 979              		.loc 1 400 0
 980 00f0 0023     		movs	r3, #0
 981 00f2 7B66     		str	r3, [r7, #100]
 401:Src/main.c    ****   PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 982              		.loc 1 401 0
 983 00f4 0023     		movs	r3, #0
 984 00f6 BB66     		str	r3, [r7, #104]
ARM GAS  /tmp/ccg1mW9H.s 			page 29


 402:Src/main.c    ****   PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 985              		.loc 1 402 0
 986 00f8 0023     		movs	r3, #0
 987 00fa FB66     		str	r3, [r7, #108]
 403:Src/main.c    ****   PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 988              		.loc 1 403 0
 989 00fc 0023     		movs	r3, #0
 990 00fe 3B67     		str	r3, [r7, #112]
 404:Src/main.c    ****   PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 991              		.loc 1 404 0
 992 0100 0023     		movs	r3, #0
 993 0102 7B67     		str	r3, [r7, #116]
 405:Src/main.c    ****   PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 994              		.loc 1 405 0
 995 0104 0023     		movs	r3, #0
 996 0106 BB67     		str	r3, [r7, #120]
 406:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 997              		.loc 1 406 0
 998 0108 07F10803 		add	r3, r7, #8
 999 010c 1846     		mov	r0, r3
 1000 010e FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1001 0112 0346     		mov	r3, r0
 1002 0114 002B     		cmp	r3, #0
 1003 0116 04D0     		beq	.L38
 407:Src/main.c    ****   {
 408:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 1004              		.loc 1 408 0
 1005 0118 4FF4CC71 		mov	r1, #408
 1006 011c 0E48     		ldr	r0, .L39+8
 1007 011e FFF7FEFF 		bl	_Error_Handler
 1008              	.L38:
 409:Src/main.c    ****   }
 410:Src/main.c    **** 
 411:Src/main.c    **** 
 412:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 1009              		.loc 1 412 0
 1010 0122 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1011 0126 0246     		mov	r2, r0
 1012 0128 0D4B     		ldr	r3, .L39+16
 1013 012a A3FB0223 		umull	r2, r3, r3, r2
 1014 012e 9B09     		lsrs	r3, r3, #6
 1015 0130 1846     		mov	r0, r3
 1016 0132 FFF7FEFF 		bl	HAL_SYSTICK_Config
 413:Src/main.c    **** 
 414:Src/main.c    **** 
 415:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 1017              		.loc 1 415 0
 1018 0136 0420     		movs	r0, #4
 1019 0138 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 416:Src/main.c    **** 
 417:Src/main.c    **** 
 418:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 1020              		.loc 1 418 0
 1021 013c 0022     		movs	r2, #0
 1022 013e 0021     		movs	r1, #0
 1023 0140 4FF0FF30 		mov	r0, #-1
 1024 0144 FFF7FEFF 		bl	HAL_NVIC_SetPriority
ARM GAS  /tmp/ccg1mW9H.s 			page 30


 419:Src/main.c    **** 
 420:Src/main.c    **** }
 1025              		.loc 1 420 0
 1026 0148 00BF     		nop
 1027 014a D037     		adds	r7, r7, #208
 1028              	.LCFI53:
 1029              		.cfi_def_cfa_offset 8
 1030 014c BD46     		mov	sp, r7
 1031              	.LCFI54:
 1032              		.cfi_def_cfa_register 13
 1033              		@ sp needed
 1034 014e 80BD     		pop	{r7, pc}
 1035              	.L40:
 1036              		.align	2
 1037              	.L39:
 1038 0150 00380240 		.word	1073887232
 1039 0154 00700040 		.word	1073770496
 1040 0158 E8000000 		.word	.LC7
 1041 015c 60F20300 		.word	258656
 1042 0160 D34D6210 		.word	274877907
 1043              		.cfi_endproc
 1044              	.LFE145:
 1046              		.section	.rodata
 1047 00f3 00       		.align	2
 1048              	.LC8:
 1049 00f4 4552524F 		.ascii	"ERROR EVENT %s - %d\015\012\000"
 1049      52204556 
 1049      454E5420 
 1049      2573202D 
 1049      2025640D 
 1050              		.section	.text._Error_Handler,"ax",%progbits
 1051              		.align	1
 1052              		.global	_Error_Handler
 1053              		.syntax unified
 1054              		.thumb
 1055              		.thumb_func
 1056              		.fpu fpv4-sp-d16
 1058              	_Error_Handler:
 1059              	.LFB146:
 421:Src/main.c    **** 
 422:Src/main.c    **** 
 423:Src/main.c    **** void _Error_Handler(char *file, int line)
 424:Src/main.c    **** {
 1060              		.loc 1 424 0
 1061              		.cfi_startproc
 1062              		@ args = 0, pretend = 0, frame = 8
 1063              		@ frame_needed = 1, uses_anonymous_args = 0
 1064 0000 80B5     		push	{r7, lr}
 1065              	.LCFI55:
 1066              		.cfi_def_cfa_offset 8
 1067              		.cfi_offset 7, -8
 1068              		.cfi_offset 14, -4
 1069 0002 82B0     		sub	sp, sp, #8
 1070              	.LCFI56:
 1071              		.cfi_def_cfa_offset 16
 1072 0004 00AF     		add	r7, sp, #0
 1073              	.LCFI57:
ARM GAS  /tmp/ccg1mW9H.s 			page 31


 1074              		.cfi_def_cfa_register 7
 1075 0006 7860     		str	r0, [r7, #4]
 1076 0008 3960     		str	r1, [r7]
 425:Src/main.c    **** 
 426:Src/main.c    ****     mprintf("ERROR EVENT %s - %d\r\n", file, line);
 1077              		.loc 1 426 0
 1078 000a 3A68     		ldr	r2, [r7]
 1079 000c 7968     		ldr	r1, [r7, #4]
 1080 000e 0348     		ldr	r0, .L42
 1081 0010 FFF7FEFF 		bl	mprintf
 427:Src/main.c    **** 
 428:Src/main.c    **** }
 1082              		.loc 1 428 0
 1083 0014 00BF     		nop
 1084 0016 0837     		adds	r7, r7, #8
 1085              	.LCFI58:
 1086              		.cfi_def_cfa_offset 8
 1087 0018 BD46     		mov	sp, r7
 1088              	.LCFI59:
 1089              		.cfi_def_cfa_register 13
 1090              		@ sp needed
 1091 001a 80BD     		pop	{r7, pc}
 1092              	.L43:
 1093              		.align	2
 1094              	.L42:
 1095 001c F4000000 		.word	.LC8
 1096              		.cfi_endproc
 1097              	.LFE146:
 1099              		.section	.rodata
 1100 010a 0000     		.align	2
 1101              	.LC9:
 1102 010c 25730D0A 		.ascii	"%s\015\012\000"
 1102      00
 1103              		.section	.text._Event_Handler,"ax",%progbits
 1104              		.align	1
 1105              		.global	_Event_Handler
 1106              		.syntax unified
 1107              		.thumb
 1108              		.thumb_func
 1109              		.fpu fpv4-sp-d16
 1111              	_Event_Handler:
 1112              	.LFB147:
 429:Src/main.c    **** 
 430:Src/main.c    **** void _Event_Handler(char *Event)
 431:Src/main.c    **** {
 1113              		.loc 1 431 0
 1114              		.cfi_startproc
 1115              		@ args = 0, pretend = 0, frame = 8
 1116              		@ frame_needed = 1, uses_anonymous_args = 0
 1117 0000 80B5     		push	{r7, lr}
 1118              	.LCFI60:
 1119              		.cfi_def_cfa_offset 8
 1120              		.cfi_offset 7, -8
 1121              		.cfi_offset 14, -4
 1122 0002 82B0     		sub	sp, sp, #8
 1123              	.LCFI61:
 1124              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccg1mW9H.s 			page 32


 1125 0004 00AF     		add	r7, sp, #0
 1126              	.LCFI62:
 1127              		.cfi_def_cfa_register 7
 1128 0006 7860     		str	r0, [r7, #4]
 432:Src/main.c    ****     mprintf("%s\r\n", Event);
 1129              		.loc 1 432 0
 1130 0008 7968     		ldr	r1, [r7, #4]
 1131 000a 0348     		ldr	r0, .L45
 1132 000c FFF7FEFF 		bl	mprintf
 433:Src/main.c    **** }
 1133              		.loc 1 433 0
 1134 0010 00BF     		nop
 1135 0012 0837     		adds	r7, r7, #8
 1136              	.LCFI63:
 1137              		.cfi_def_cfa_offset 8
 1138 0014 BD46     		mov	sp, r7
 1139              	.LCFI64:
 1140              		.cfi_def_cfa_register 13
 1141              		@ sp needed
 1142 0016 80BD     		pop	{r7, pc}
 1143              	.L46:
 1144              		.align	2
 1145              	.L45:
 1146 0018 0C010000 		.word	.LC9
 1147              		.cfi_endproc
 1148              	.LFE147:
 1150              		.text
 1151              	.Letext0:
 1152              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 1153              		.file 4 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stdarg.h"
 1154              		.file 5 "/usr/include/newlib/sys/lock.h"
 1155              		.file 6 "/usr/include/newlib/sys/_types.h"
 1156              		.file 7 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 1157              		.file 8 "/usr/include/newlib/sys/reent.h"
 1158              		.file 9 "<built-in>"
 1159              		.file 10 "/usr/include/newlib/sys/_stdint.h"
 1160              		.file 11 "Drivers/CMSIS/Include/core_cm7.h"
 1161              		.file 12 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 1162              		.file 13 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f746xx.h"
 1163              		.file 14 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 1164              		.file 15 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rcc_ex.h"
 1165              		.file 16 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rcc.h"
 1166              		.file 17 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 1167              		.file 18 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_eth.h"
 1168              		.file 19 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_i2c.h"
 1169              		.file 20 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rtc.h"
 1170              		.file 21 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_spi.h"
 1171              		.file 22 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim.h"
 1172              		.file 23 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_uart.h"
 1173              		.file 24 "Inc/eth.h"
 1174              		.file 25 "Inc/i2c.h"
 1175              		.file 26 "Inc/rtc.h"
 1176              		.file 27 "Inc/spi.h"
 1177              		.file 28 "Inc/tim.h"
 1178              		.file 29 "Inc/usart.h"
 1179              		.file 30 "Inc/motor.h"
 1180              		.file 31 "Inc/sensor.h"
ARM GAS  /tmp/ccg1mW9H.s 			page 33


 1181              		.file 32 "Inc/gps.h"
ARM GAS  /tmp/ccg1mW9H.s 			page 34


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
                            *COM*:0000000000000008 motor1
                            *COM*:0000000000000008 motor2
                            *COM*:0000000000000008 motor3
                            *COM*:0000000000000008 motor4
                            *COM*:0000000000000014 sensorValues
                            *COM*:00000000000001a0 gpsData
     /tmp/ccg1mW9H.s:24     .rodata:0000000000000000 $d
     /tmp/ccg1mW9H.s:28     .text.main:0000000000000000 $t
     /tmp/ccg1mW9H.s:35     .text.main:0000000000000000 main
     /tmp/ccg1mW9H.s:847    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccg1mW9H.s:779    .text.mprintf:0000000000000000 mprintf
     /tmp/ccg1mW9H.s:137    .text.checkUpdate:0000000000000000 checkUpdate
     /tmp/ccg1mW9H.s:259    .text.loadUpdateFile:0000000000000000 loadUpdateFile
     /tmp/ccg1mW9H.s:444    .text.bootRTOS:0000000000000000 bootRTOS
     /tmp/ccg1mW9H.s:115    .text.main:000000000000006c $d
     /tmp/ccg1mW9H.s:130    .text.checkUpdate:0000000000000000 $t
     /tmp/ccg1mW9H.s:573    .text.readFlash:0000000000000000 readFlash
     /tmp/ccg1mW9H.s:234    .text.checkUpdate:000000000000008c $d
     /tmp/ccg1mW9H.s:252    .text.loadUpdateFile:0000000000000000 $t
     /tmp/ccg1mW9H.s:519    .text.writeFlash:0000000000000000 writeFlash
     /tmp/ccg1mW9H.s:421    .text.loadUpdateFile:0000000000000100 $d
     /tmp/ccg1mW9H.s:437    .text.bootRTOS:0000000000000000 $t
     /tmp/ccg1mW9H.s:505    .text.bootRTOS:0000000000000030 $d
     /tmp/ccg1mW9H.s:512    .text.writeFlash:0000000000000000 $t
     /tmp/ccg1mW9H.s:566    .text.readFlash:0000000000000000 $t
     /tmp/ccg1mW9H.s:615    .text.EnablePrivilegedMode:0000000000000000 $t
     /tmp/ccg1mW9H.s:622    .text.EnablePrivilegedMode:0000000000000000 EnablePrivilegedMode
     /tmp/ccg1mW9H.s:708    .text.vprint:0000000000000000 $t
     /tmp/ccg1mW9H.s:715    .text.vprint:0000000000000000 vprint
     /tmp/ccg1mW9H.s:767    .text.vprint:0000000000000044 $d
     /tmp/ccg1mW9H.s:772    .text.mprintf:0000000000000000 $t
     /tmp/ccg1mW9H.s:840    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccg1mW9H.s:1058   .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/ccg1mW9H.s:1038   .text.SystemClock_Config:0000000000000150 $d
     /tmp/ccg1mW9H.s:1051   .text._Error_Handler:0000000000000000 $t
     /tmp/ccg1mW9H.s:1095   .text._Error_Handler:000000000000001c $d
     /tmp/ccg1mW9H.s:1104   .text._Event_Handler:0000000000000000 $t
     /tmp/ccg1mW9H.s:1111   .text._Event_Handler:0000000000000000 _Event_Handler
     /tmp/ccg1mW9H.s:1146   .text._Event_Handler:0000000000000018 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_Init
MX_GPIO_Init
MX_I2C2_Init
MX_I2C4_Init
MX_SPI1_Init
MX_TIM3_Init
MX_UART4_Init
MX_USART1_UART_Init
MX_TIM2_Init
HAL_Delay
HAL_FLASH_Unlock
FLASH_Erase_Sector
HAL_FLASH_Lock
ARM GAS  /tmp/ccg1mW9H.s 			page 35


malloc
free
HAL_FLASH_Program
vsprintf
strlen
HAL_UART_Transmit
huart1
HAL_RCC_OscConfig
HAL_PWREx_EnableOverDrive
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
