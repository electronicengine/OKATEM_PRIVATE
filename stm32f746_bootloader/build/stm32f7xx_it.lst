ARM GAS  /tmp/ccUk5z8S.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f7xx_it.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.NMI_Handler,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.global	NMI_Handler
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	NMI_Handler:
  27              	.LFB138:
  28              		.file 1 "Src/stm32f7xx_it.c"
   1:Src/stm32f7xx_it.c **** /**
   2:Src/stm32f7xx_it.c ****   ******************************************************************************
   3:Src/stm32f7xx_it.c ****   * @file    stm32f7xx_it.c
   4:Src/stm32f7xx_it.c ****   * @brief   Interrupt Service Routines.
   5:Src/stm32f7xx_it.c ****   ******************************************************************************
   6:Src/stm32f7xx_it.c ****   *
   7:Src/stm32f7xx_it.c ****   * COPYRIGHT(c) 2018 STMicroelectronics
   8:Src/stm32f7xx_it.c ****   *
   9:Src/stm32f7xx_it.c ****   * Redistribution and use in source and binary forms, with or without modification,
  10:Src/stm32f7xx_it.c ****   * are permitted provided that the following conditions are met:
  11:Src/stm32f7xx_it.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  12:Src/stm32f7xx_it.c ****   *      this list of conditions and the following disclaimer.
  13:Src/stm32f7xx_it.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  14:Src/stm32f7xx_it.c ****   *      this list of conditions and the following disclaimer in the documentation
  15:Src/stm32f7xx_it.c ****   *      and/or other materials provided with the distribution.
  16:Src/stm32f7xx_it.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  17:Src/stm32f7xx_it.c ****   *      may be used to endorse or promote products derived from this software
  18:Src/stm32f7xx_it.c ****   *      without specific prior written permission.
  19:Src/stm32f7xx_it.c ****   *
  20:Src/stm32f7xx_it.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:Src/stm32f7xx_it.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:Src/stm32f7xx_it.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  23:Src/stm32f7xx_it.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  24:Src/stm32f7xx_it.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  25:Src/stm32f7xx_it.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  26:Src/stm32f7xx_it.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  27:Src/stm32f7xx_it.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  28:Src/stm32f7xx_it.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  29:Src/stm32f7xx_it.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  30:Src/stm32f7xx_it.c ****   *
ARM GAS  /tmp/ccUk5z8S.s 			page 2


  31:Src/stm32f7xx_it.c ****   ******************************************************************************
  32:Src/stm32f7xx_it.c ****   */
  33:Src/stm32f7xx_it.c **** /* Includes ------------------------------------------------------------------*/
  34:Src/stm32f7xx_it.c **** #include "stm32f7xx_hal.h"
  35:Src/stm32f7xx_it.c **** #include "stm32f7xx.h"
  36:Src/stm32f7xx_it.c **** #include "stm32f7xx_it.h"
  37:Src/stm32f7xx_it.c **** #include "main.h"
  38:Src/stm32f7xx_it.c **** #include "motor.h"
  39:Src/stm32f7xx_it.c **** #include "usart.h"
  40:Src/stm32f7xx_it.c **** #include "gps.h"
  41:Src/stm32f7xx_it.c **** 
  42:Src/stm32f7xx_it.c **** /* USER CODE BEGIN 0 */
  43:Src/stm32f7xx_it.c **** 
  44:Src/stm32f7xx_it.c **** /* USER CODE END 0 */
  45:Src/stm32f7xx_it.c **** 
  46:Src/stm32f7xx_it.c **** /* External variables --------------------------------------------------------*/
  47:Src/stm32f7xx_it.c **** extern SPI_HandleTypeDef hspi1;
  48:Src/stm32f7xx_it.c **** extern TIM_HandleTypeDef htim2;
  49:Src/stm32f7xx_it.c **** extern UART_HandleTypeDef huart4;
  50:Src/stm32f7xx_it.c **** 
  51:Src/stm32f7xx_it.c **** /******************************************************************************/
  52:Src/stm32f7xx_it.c **** /*            Cortex-M7 Processor Interruption and Exception Handlers         */ 
  53:Src/stm32f7xx_it.c **** /******************************************************************************/
  54:Src/stm32f7xx_it.c **** 
  55:Src/stm32f7xx_it.c **** /**
  56:Src/stm32f7xx_it.c **** * @brief This function handles Non maskable interrupt.
  57:Src/stm32f7xx_it.c **** */
  58:Src/stm32f7xx_it.c **** void NMI_Handler(void)
  59:Src/stm32f7xx_it.c **** {
  29              		.loc 1 59 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  60:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  61:Src/stm32f7xx_it.c **** 
  62:Src/stm32f7xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  63:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  64:Src/stm32f7xx_it.c **** 
  65:Src/stm32f7xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  66:Src/stm32f7xx_it.c **** }
  34              		.loc 1 66 0
  35 0000 7047     		bx	lr
  36              		.cfi_endproc
  37              	.LFE138:
  39 0002 00BF     		.section	.text.HardFault_Handler,"ax",%progbits
  40              		.align	1
  41              		.p2align 2,,3
  42              		.global	HardFault_Handler
  43              		.syntax unified
  44              		.thumb
  45              		.thumb_func
  46              		.fpu fpv4-sp-d16
  48              	HardFault_Handler:
  49              	.LFB139:
  67:Src/stm32f7xx_it.c **** 
  68:Src/stm32f7xx_it.c **** /**
ARM GAS  /tmp/ccUk5z8S.s 			page 3


  69:Src/stm32f7xx_it.c **** * @brief This function handles Hard fault interrupt.
  70:Src/stm32f7xx_it.c **** */
  71:Src/stm32f7xx_it.c **** void HardFault_Handler(void)
  72:Src/stm32f7xx_it.c **** {
  50              		.loc 1 72 0
  51              		.cfi_startproc
  52              		@ Volatile: function does not return.
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 0, uses_anonymous_args = 0
  55              		@ link register save eliminated.
  56              	.L4:
  57 0000 FEE7     		b	.L4
  58              		.cfi_endproc
  59              	.LFE139:
  61 0002 00BF     		.section	.text.MemManage_Handler,"ax",%progbits
  62              		.align	1
  63              		.p2align 2,,3
  64              		.global	MemManage_Handler
  65              		.syntax unified
  66              		.thumb
  67              		.thumb_func
  68              		.fpu fpv4-sp-d16
  70              	MemManage_Handler:
  71              	.LFB140:
  73:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  74:Src/stm32f7xx_it.c **** 
  75:Src/stm32f7xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  76:Src/stm32f7xx_it.c ****   while (1)
  77:Src/stm32f7xx_it.c ****   {
  78:Src/stm32f7xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  79:Src/stm32f7xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  80:Src/stm32f7xx_it.c ****   }
  81:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 1 */
  82:Src/stm32f7xx_it.c **** 
  83:Src/stm32f7xx_it.c ****   /* USER CODE END HardFault_IRQn 1 */
  84:Src/stm32f7xx_it.c **** }
  85:Src/stm32f7xx_it.c **** 
  86:Src/stm32f7xx_it.c **** /**
  87:Src/stm32f7xx_it.c **** * @brief This function handles Memory management fault.
  88:Src/stm32f7xx_it.c **** */
  89:Src/stm32f7xx_it.c **** void MemManage_Handler(void)
  90:Src/stm32f7xx_it.c **** {
  72              		.loc 1 90 0
  73              		.cfi_startproc
  74              		@ Volatile: function does not return.
  75              		@ args = 0, pretend = 0, frame = 0
  76              		@ frame_needed = 0, uses_anonymous_args = 0
  77              		@ link register save eliminated.
  78              	.L6:
  79 0000 FEE7     		b	.L6
  80              		.cfi_endproc
  81              	.LFE140:
  83 0002 00BF     		.section	.text.BusFault_Handler,"ax",%progbits
  84              		.align	1
  85              		.p2align 2,,3
  86              		.global	BusFault_Handler
  87              		.syntax unified
ARM GAS  /tmp/ccUk5z8S.s 			page 4


  88              		.thumb
  89              		.thumb_func
  90              		.fpu fpv4-sp-d16
  92              	BusFault_Handler:
  93              	.LFB141:
  91:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  92:Src/stm32f7xx_it.c **** 
  93:Src/stm32f7xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
  94:Src/stm32f7xx_it.c ****   while (1)
  95:Src/stm32f7xx_it.c ****   {
  96:Src/stm32f7xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
  97:Src/stm32f7xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
  98:Src/stm32f7xx_it.c ****   }
  99:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 1 */
 100:Src/stm32f7xx_it.c **** 
 101:Src/stm32f7xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 1 */
 102:Src/stm32f7xx_it.c **** }
 103:Src/stm32f7xx_it.c **** 
 104:Src/stm32f7xx_it.c **** /**
 105:Src/stm32f7xx_it.c **** * @brief This function handles Pre-fetch fault, memory access fault.
 106:Src/stm32f7xx_it.c **** */
 107:Src/stm32f7xx_it.c **** void BusFault_Handler(void)
 108:Src/stm32f7xx_it.c **** {
  94              		.loc 1 108 0
  95              		.cfi_startproc
  96              		@ Volatile: function does not return.
  97              		@ args = 0, pretend = 0, frame = 0
  98              		@ frame_needed = 0, uses_anonymous_args = 0
  99              		@ link register save eliminated.
 100              	.L8:
 101 0000 FEE7     		b	.L8
 102              		.cfi_endproc
 103              	.LFE141:
 105 0002 00BF     		.section	.text.UsageFault_Handler,"ax",%progbits
 106              		.align	1
 107              		.p2align 2,,3
 108              		.global	UsageFault_Handler
 109              		.syntax unified
 110              		.thumb
 111              		.thumb_func
 112              		.fpu fpv4-sp-d16
 114              	UsageFault_Handler:
 115              	.LFB142:
 109:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 110:Src/stm32f7xx_it.c **** 
 111:Src/stm32f7xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 112:Src/stm32f7xx_it.c ****   while (1)
 113:Src/stm32f7xx_it.c ****   {
 114:Src/stm32f7xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 115:Src/stm32f7xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 116:Src/stm32f7xx_it.c ****   }
 117:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 1 */
 118:Src/stm32f7xx_it.c **** 
 119:Src/stm32f7xx_it.c ****   /* USER CODE END BusFault_IRQn 1 */
 120:Src/stm32f7xx_it.c **** }
 121:Src/stm32f7xx_it.c **** 
 122:Src/stm32f7xx_it.c **** /**
ARM GAS  /tmp/ccUk5z8S.s 			page 5


 123:Src/stm32f7xx_it.c **** * @brief This function handles Undefined instruction or illegal state.
 124:Src/stm32f7xx_it.c **** */
 125:Src/stm32f7xx_it.c **** void UsageFault_Handler(void)
 126:Src/stm32f7xx_it.c **** {
 116              		.loc 1 126 0
 117              		.cfi_startproc
 118              		@ Volatile: function does not return.
 119              		@ args = 0, pretend = 0, frame = 0
 120              		@ frame_needed = 0, uses_anonymous_args = 0
 121              		@ link register save eliminated.
 122              	.L10:
 123 0000 FEE7     		b	.L10
 124              		.cfi_endproc
 125              	.LFE142:
 127 0002 00BF     		.section	.text.SVC_Handler,"ax",%progbits
 128              		.align	1
 129              		.p2align 2,,3
 130              		.global	SVC_Handler
 131              		.syntax unified
 132              		.thumb
 133              		.thumb_func
 134              		.fpu fpv4-sp-d16
 136              	SVC_Handler:
 137              	.LFB152:
 138              		.cfi_startproc
 139              		@ args = 0, pretend = 0, frame = 0
 140              		@ frame_needed = 0, uses_anonymous_args = 0
 141              		@ link register save eliminated.
 142 0000 7047     		bx	lr
 143              		.cfi_endproc
 144              	.LFE152:
 146 0002 00BF     		.section	.text.DebugMon_Handler,"ax",%progbits
 147              		.align	1
 148              		.p2align 2,,3
 149              		.global	DebugMon_Handler
 150              		.syntax unified
 151              		.thumb
 152              		.thumb_func
 153              		.fpu fpv4-sp-d16
 155              	DebugMon_Handler:
 156              	.LFB154:
 157              		.cfi_startproc
 158              		@ args = 0, pretend = 0, frame = 0
 159              		@ frame_needed = 0, uses_anonymous_args = 0
 160              		@ link register save eliminated.
 161 0000 7047     		bx	lr
 162              		.cfi_endproc
 163              	.LFE154:
 165 0002 00BF     		.section	.text.PendSV_Handler,"ax",%progbits
 166              		.align	1
 167              		.p2align 2,,3
 168              		.global	PendSV_Handler
 169              		.syntax unified
 170              		.thumb
 171              		.thumb_func
 172              		.fpu fpv4-sp-d16
 174              	PendSV_Handler:
ARM GAS  /tmp/ccUk5z8S.s 			page 6


 175              	.LFB156:
 176              		.cfi_startproc
 177              		@ args = 0, pretend = 0, frame = 0
 178              		@ frame_needed = 0, uses_anonymous_args = 0
 179              		@ link register save eliminated.
 180 0000 7047     		bx	lr
 181              		.cfi_endproc
 182              	.LFE156:
 184 0002 00BF     		.section	.text.SysTick_Handler,"ax",%progbits
 185              		.align	1
 186              		.p2align 2,,3
 187              		.global	SysTick_Handler
 188              		.syntax unified
 189              		.thumb
 190              		.thumb_func
 191              		.fpu fpv4-sp-d16
 193              	SysTick_Handler:
 194              	.LFB146:
 127:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 128:Src/stm32f7xx_it.c **** 
 129:Src/stm32f7xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 130:Src/stm32f7xx_it.c ****   while (1)
 131:Src/stm32f7xx_it.c ****   {
 132:Src/stm32f7xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 133:Src/stm32f7xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 134:Src/stm32f7xx_it.c ****   }
 135:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 1 */
 136:Src/stm32f7xx_it.c **** 
 137:Src/stm32f7xx_it.c ****   /* USER CODE END UsageFault_IRQn 1 */
 138:Src/stm32f7xx_it.c **** }
 139:Src/stm32f7xx_it.c **** 
 140:Src/stm32f7xx_it.c **** /**
 141:Src/stm32f7xx_it.c **** * @brief This function handles System service call via SWI instruction.
 142:Src/stm32f7xx_it.c **** */
 143:Src/stm32f7xx_it.c **** void SVC_Handler(void)
 144:Src/stm32f7xx_it.c **** {
 145:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 146:Src/stm32f7xx_it.c **** 
 147:Src/stm32f7xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 148:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 149:Src/stm32f7xx_it.c **** 
 150:Src/stm32f7xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 151:Src/stm32f7xx_it.c **** }
 152:Src/stm32f7xx_it.c **** 
 153:Src/stm32f7xx_it.c **** /**
 154:Src/stm32f7xx_it.c **** * @brief This function handles Debug monitor.
 155:Src/stm32f7xx_it.c **** */
 156:Src/stm32f7xx_it.c **** void DebugMon_Handler(void)
 157:Src/stm32f7xx_it.c **** {
 158:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 159:Src/stm32f7xx_it.c **** 
 160:Src/stm32f7xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 161:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 162:Src/stm32f7xx_it.c **** 
 163:Src/stm32f7xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 164:Src/stm32f7xx_it.c **** }
 165:Src/stm32f7xx_it.c **** 
ARM GAS  /tmp/ccUk5z8S.s 			page 7


 166:Src/stm32f7xx_it.c **** /**
 167:Src/stm32f7xx_it.c **** * @brief This function handles Pendable request for system service.
 168:Src/stm32f7xx_it.c **** */
 169:Src/stm32f7xx_it.c **** void PendSV_Handler(void)
 170:Src/stm32f7xx_it.c **** {
 171:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 172:Src/stm32f7xx_it.c **** 
 173:Src/stm32f7xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 174:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 175:Src/stm32f7xx_it.c **** 
 176:Src/stm32f7xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 177:Src/stm32f7xx_it.c **** }
 178:Src/stm32f7xx_it.c **** 
 179:Src/stm32f7xx_it.c **** /**
 180:Src/stm32f7xx_it.c **** * @brief This function handles System tick timer.
 181:Src/stm32f7xx_it.c **** */
 182:Src/stm32f7xx_it.c **** void SysTick_Handler(void)
 183:Src/stm32f7xx_it.c **** {
 195              		.loc 1 183 0
 196              		.cfi_startproc
 197              		@ args = 0, pretend = 0, frame = 0
 198              		@ frame_needed = 0, uses_anonymous_args = 0
 199              		.loc 1 183 0
 200 0000 08B5     		push	{r3, lr}
 201              	.LCFI0:
 202              		.cfi_def_cfa_offset 8
 203              		.cfi_offset 3, -8
 204              		.cfi_offset 14, -4
 184:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 185:Src/stm32f7xx_it.c **** 
 186:Src/stm32f7xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 187:Src/stm32f7xx_it.c ****   HAL_IncTick();
 205              		.loc 1 187 0
 206 0002 FFF7FEFF 		bl	HAL_IncTick
 207              	.LVL0:
 188:Src/stm32f7xx_it.c ****   HAL_SYSTICK_IRQHandler();
 189:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 190:Src/stm32f7xx_it.c **** 
 191:Src/stm32f7xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 192:Src/stm32f7xx_it.c **** }
 208              		.loc 1 192 0
 209 0006 BDE80840 		pop	{r3, lr}
 210              	.LCFI1:
 211              		.cfi_restore 14
 212              		.cfi_restore 3
 213              		.cfi_def_cfa_offset 0
 188:Src/stm32f7xx_it.c ****   HAL_SYSTICK_IRQHandler();
 214              		.loc 1 188 0
 215 000a FFF7FEBF 		b	HAL_SYSTICK_IRQHandler
 216              	.LVL1:
 217              		.cfi_endproc
 218              	.LFE146:
 220 000e 00BF     		.section	.text.TIM2_IRQHandler,"ax",%progbits
 221              		.align	1
 222              		.p2align 2,,3
 223              		.global	TIM2_IRQHandler
 224              		.syntax unified
ARM GAS  /tmp/ccUk5z8S.s 			page 8


 225              		.thumb
 226              		.thumb_func
 227              		.fpu fpv4-sp-d16
 229              	TIM2_IRQHandler:
 230              	.LFB147:
 193:Src/stm32f7xx_it.c **** 
 194:Src/stm32f7xx_it.c **** /******************************************************************************/
 195:Src/stm32f7xx_it.c **** /* STM32F7xx Peripheral Interrupt Handlers                                    */
 196:Src/stm32f7xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 197:Src/stm32f7xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 198:Src/stm32f7xx_it.c **** /* please refer to the startup file (startup_stm32f7xx.s).                    */
 199:Src/stm32f7xx_it.c **** /******************************************************************************/
 200:Src/stm32f7xx_it.c **** 
 201:Src/stm32f7xx_it.c **** /**
 202:Src/stm32f7xx_it.c **** * @brief This function handles TIM2 global interrupt.
 203:Src/stm32f7xx_it.c **** */
 204:Src/stm32f7xx_it.c **** void TIM2_IRQHandler(void)
 205:Src/stm32f7xx_it.c **** {
 231              		.loc 1 205 0
 232              		.cfi_startproc
 233              		@ args = 0, pretend = 0, frame = 0
 234              		@ frame_needed = 0, uses_anonymous_args = 0
 235              		@ link register save eliminated.
 206:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 0 */
 207:Src/stm32f7xx_it.c **** 
 208:Src/stm32f7xx_it.c ****   /* USER CODE END TIM2_IRQn 0 */
 209:Src/stm32f7xx_it.c ****   HAL_TIM_IRQHandler(&htim2);
 236              		.loc 1 209 0
 237 0000 0148     		ldr	r0, .L17
 238 0002 FFF7FEBF 		b	HAL_TIM_IRQHandler
 239              	.LVL2:
 240              	.L18:
 241 0006 00BF     		.align	2
 242              	.L17:
 243 0008 00000000 		.word	htim2
 244              		.cfi_endproc
 245              	.LFE147:
 247              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 248              		.align	1
 249              		.p2align 2,,3
 250              		.global	HAL_TIM_PeriodElapsedCallback
 251              		.syntax unified
 252              		.thumb
 253              		.thumb_func
 254              		.fpu fpv4-sp-d16
 256              	HAL_TIM_PeriodElapsedCallback:
 257              	.LFB148:
 210:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 1 */
 211:Src/stm32f7xx_it.c **** 
 212:Src/stm32f7xx_it.c ****   /* USER CODE END TIM2_IRQn 1 */
 213:Src/stm32f7xx_it.c **** }
 214:Src/stm32f7xx_it.c **** 
 215:Src/stm32f7xx_it.c **** 
 216:Src/stm32f7xx_it.c **** //Motor Driver
 217:Src/stm32f7xx_it.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 218:Src/stm32f7xx_it.c **** {
 258              		.loc 1 218 0
ARM GAS  /tmp/ccUk5z8S.s 			page 9


 259              		.cfi_startproc
 260              		@ args = 0, pretend = 0, frame = 0
 261              		@ frame_needed = 0, uses_anonymous_args = 0
 262              		@ link register save eliminated.
 263              	.LVL3:
 219:Src/stm32f7xx_it.c ****     if(htim ->Instance == htim2.Instance)
 264              		.loc 1 219 0
 265 0000 034B     		ldr	r3, .L22
 266 0002 0268     		ldr	r2, [r0]
 267 0004 1B68     		ldr	r3, [r3]
 268 0006 9A42     		cmp	r2, r3
 269 0008 00D0     		beq	.L21
 220:Src/stm32f7xx_it.c ****     {
 221:Src/stm32f7xx_it.c ****         driveMotor();
 222:Src/stm32f7xx_it.c ****     }
 223:Src/stm32f7xx_it.c **** }
 270              		.loc 1 223 0
 271 000a 7047     		bx	lr
 272              	.L21:
 221:Src/stm32f7xx_it.c ****     }
 273              		.loc 1 221 0
 274 000c FFF7FEBF 		b	driveMotor
 275              	.LVL4:
 276              	.L23:
 277              		.align	2
 278              	.L22:
 279 0010 00000000 		.word	htim2
 280              		.cfi_endproc
 281              	.LFE148:
 283              		.section	.text.UART4_IRQHandler,"ax",%progbits
 284              		.align	1
 285              		.p2align 2,,3
 286              		.global	UART4_IRQHandler
 287              		.syntax unified
 288              		.thumb
 289              		.thumb_func
 290              		.fpu fpv4-sp-d16
 292              	UART4_IRQHandler:
 293              	.LFB149:
 224:Src/stm32f7xx_it.c **** 
 225:Src/stm32f7xx_it.c **** /**
 226:Src/stm32f7xx_it.c **** * @brief This function handles SPI1 global interrupt.
 227:Src/stm32f7xx_it.c **** */
 228:Src/stm32f7xx_it.c **** 
 229:Src/stm32f7xx_it.c **** /**
 230:Src/stm32f7xx_it.c **** * @brief This function handles UART4 global interrupt.
 231:Src/stm32f7xx_it.c **** */
 232:Src/stm32f7xx_it.c **** void UART4_IRQHandler(void)
 233:Src/stm32f7xx_it.c **** {
 294              		.loc 1 233 0
 295              		.cfi_startproc
 296              		@ args = 0, pretend = 0, frame = 0
 297              		@ frame_needed = 0, uses_anonymous_args = 0
 298              		@ link register save eliminated.
 234:Src/stm32f7xx_it.c **** 
 235:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN UART4_IRQn 0 */
 236:Src/stm32f7xx_it.c **** 
ARM GAS  /tmp/ccUk5z8S.s 			page 10


 237:Src/stm32f7xx_it.c ****   /* USER CODE END UART4_IRQn 0 */
 238:Src/stm32f7xx_it.c ****   HAL_UART_IRQHandler(&huart4);
 299              		.loc 1 238 0
 300 0000 0148     		ldr	r0, .L25
 301 0002 FFF7FEBF 		b	HAL_UART_IRQHandler
 302              	.LVL5:
 303              	.L26:
 304 0006 00BF     		.align	2
 305              	.L25:
 306 0008 00000000 		.word	huart4
 307              		.cfi_endproc
 308              	.LFE149:
 310              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 311              		.align	1
 312              		.p2align 2,,3
 313              		.global	HAL_UART_RxCpltCallback
 314              		.syntax unified
 315              		.thumb
 316              		.thumb_func
 317              		.fpu fpv4-sp-d16
 319              	HAL_UART_RxCpltCallback:
 320              	.LFB150:
 239:Src/stm32f7xx_it.c **** 
 240:Src/stm32f7xx_it.c **** 
 241:Src/stm32f7xx_it.c **** }
 242:Src/stm32f7xx_it.c **** 
 243:Src/stm32f7xx_it.c **** //Interrupt callback routine
 244:Src/stm32f7xx_it.c **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 245:Src/stm32f7xx_it.c **** {
 321              		.loc 1 245 0
 322              		.cfi_startproc
 323              		@ args = 0, pretend = 0, frame = 0
 324              		@ frame_needed = 0, uses_anonymous_args = 0
 325              		@ link register save eliminated.
 326              	.LVL6:
 246:Src/stm32f7xx_it.c **** 
 247:Src/stm32f7xx_it.c **** 
 248:Src/stm32f7xx_it.c ****     if(huart->Instance == huart4.Instance)  //current UART
 327              		.loc 1 248 0
 328 0000 034B     		ldr	r3, .L30
 329 0002 0268     		ldr	r2, [r0]
 330 0004 1B68     		ldr	r3, [r3]
 331 0006 9A42     		cmp	r2, r3
 332 0008 00D0     		beq	.L29
 249:Src/stm32f7xx_it.c ****     {
 250:Src/stm32f7xx_it.c **** 
 251:Src/stm32f7xx_it.c ****         receiveGpsData();
 252:Src/stm32f7xx_it.c **** 
 253:Src/stm32f7xx_it.c ****     }
 254:Src/stm32f7xx_it.c **** 
 255:Src/stm32f7xx_it.c **** }
 333              		.loc 1 255 0
 334 000a 7047     		bx	lr
 335              	.L29:
 251:Src/stm32f7xx_it.c **** 
 336              		.loc 1 251 0
 337 000c FFF7FEBF 		b	receiveGpsData
ARM GAS  /tmp/ccUk5z8S.s 			page 11


 338              	.LVL7:
 339              	.L31:
 340              		.align	2
 341              	.L30:
 342 0010 00000000 		.word	huart4
 343              		.cfi_endproc
 344              	.LFE150:
 346              		.comm	gpsData,416,4
 347              		.comm	motor4,8,4
 348              		.comm	motor3,8,4
 349              		.comm	motor2,8,4
 350              		.comm	motor1,8,4
 351              		.comm	UpdateFile,4,4
 352              		.comm	SpiRxData,4,4
 353              		.comm	SpiTxData,4,4
 354              		.text
 355              	.Letext0:
 356              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 357              		.file 3 "/usr/include/newlib/sys/lock.h"
 358              		.file 4 "/usr/include/newlib/sys/_types.h"
 359              		.file 5 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 360              		.file 6 "/usr/include/newlib/sys/reent.h"
 361              		.file 7 "/usr/include/newlib/sys/_stdint.h"
 362              		.file 8 "Inc/main.h"
 363              		.file 9 "Drivers/CMSIS/Include/core_cm7.h"
 364              		.file 10 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 365              		.file 11 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f746xx.h"
 366              		.file 12 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 367              		.file 13 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 368              		.file 14 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_spi.h"
 369              		.file 15 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim.h"
 370              		.file 16 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_uart.h"
 371              		.file 17 "Inc/motor.h"
 372              		.file 18 "Inc/usart.h"
 373              		.file 19 "Inc/gps.h"
 374              		.file 20 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
 375              		.file 21 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_cortex.h"
ARM GAS  /tmp/ccUk5z8S.s 			page 12


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f7xx_it.c
     /tmp/ccUk5z8S.s:18     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccUk5z8S.s:26     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccUk5z8S.s:40     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccUk5z8S.s:48     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccUk5z8S.s:62     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccUk5z8S.s:70     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccUk5z8S.s:84     .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccUk5z8S.s:92     .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccUk5z8S.s:106    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccUk5z8S.s:114    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccUk5z8S.s:128    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccUk5z8S.s:136    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccUk5z8S.s:147    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccUk5z8S.s:155    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccUk5z8S.s:166    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccUk5z8S.s:174    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccUk5z8S.s:185    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccUk5z8S.s:193    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccUk5z8S.s:221    .text.TIM2_IRQHandler:0000000000000000 $t
     /tmp/ccUk5z8S.s:229    .text.TIM2_IRQHandler:0000000000000000 TIM2_IRQHandler
     /tmp/ccUk5z8S.s:243    .text.TIM2_IRQHandler:0000000000000008 $d
     /tmp/ccUk5z8S.s:248    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccUk5z8S.s:256    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccUk5z8S.s:279    .text.HAL_TIM_PeriodElapsedCallback:0000000000000010 $d
     /tmp/ccUk5z8S.s:284    .text.UART4_IRQHandler:0000000000000000 $t
     /tmp/ccUk5z8S.s:292    .text.UART4_IRQHandler:0000000000000000 UART4_IRQHandler
     /tmp/ccUk5z8S.s:306    .text.UART4_IRQHandler:0000000000000008 $d
     /tmp/ccUk5z8S.s:311    .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/ccUk5z8S.s:319    .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/ccUk5z8S.s:342    .text.HAL_UART_RxCpltCallback:0000000000000010 $d
                            *COM*:00000000000001a0 gpsData
                            *COM*:0000000000000008 motor4
                            *COM*:0000000000000008 motor3
                            *COM*:0000000000000008 motor2
                            *COM*:0000000000000008 motor1
                            *COM*:0000000000000004 UpdateFile
                            *COM*:0000000000000004 SpiRxData
                            *COM*:0000000000000004 SpiTxData

UNDEFINED SYMBOLS
HAL_IncTick
HAL_SYSTICK_IRQHandler
HAL_TIM_IRQHandler
htim2
driveMotor
HAL_UART_IRQHandler
huart4
receiveGpsData
