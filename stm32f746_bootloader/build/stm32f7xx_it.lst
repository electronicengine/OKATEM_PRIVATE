ARM GAS  /tmp/ccON1RXY.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f7xx_it.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	motor1,8,4
  18              		.comm	motor2,8,4
  19              		.comm	motor3,8,4
  20              		.comm	motor4,8,4
  21              		.comm	gpsData,416,4
  22              		.section	.text.NMI_Handler,"ax",%progbits
  23              		.align	1
  24              		.global	NMI_Handler
  25              		.syntax unified
  26              		.thumb
  27              		.thumb_func
  28              		.fpu fpv4-sp-d16
  30              	NMI_Handler:
  31              	.LFB136:
  32              		.file 1 "Src/stm32f7xx_it.c"
   1:Src/stm32f7xx_it.c **** /**
   2:Src/stm32f7xx_it.c ****   ******************************************************************************
   3:Src/stm32f7xx_it.c ****   * @file    stm32f7xx_it.c
   4:Src/stm32f7xx_it.c ****   * @brief   Interrupt Service Routines.
   5:Src/stm32f7xx_it.c ****   ******************************************************************************
   6:Src/stm32f7xx_it.c ****   *
   7:Src/stm32f7xx_it.c ****   * COPYRIGHT(c) 2018 STMicroelectronics
   8:Src/stm32f7xx_it.c ****   *
   9:Src/stm32f7xx_it.c ****   * Redistribution and use in source and binary forms, with or without modification,
  10:Src/stm32f7xx_it.c ****   * are permitted provided that the following conditions are met:
  11:Src/stm32f7xx_it.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  12:Src/stm32f7xx_it.c ****   *      this list of conditions and the following disclaimer.
  13:Src/stm32f7xx_it.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  14:Src/stm32f7xx_it.c ****   *      this list of conditions and the following disclaimer in the documentation
  15:Src/stm32f7xx_it.c ****   *      and/or other materials provided with the distribution.
  16:Src/stm32f7xx_it.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  17:Src/stm32f7xx_it.c ****   *      may be used to endorse or promote products derived from this software
  18:Src/stm32f7xx_it.c ****   *      without specific prior written permission.
  19:Src/stm32f7xx_it.c ****   *
  20:Src/stm32f7xx_it.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:Src/stm32f7xx_it.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:Src/stm32f7xx_it.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  23:Src/stm32f7xx_it.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  24:Src/stm32f7xx_it.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  25:Src/stm32f7xx_it.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  26:Src/stm32f7xx_it.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
ARM GAS  /tmp/ccON1RXY.s 			page 2


  27:Src/stm32f7xx_it.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  28:Src/stm32f7xx_it.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  29:Src/stm32f7xx_it.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  30:Src/stm32f7xx_it.c ****   *
  31:Src/stm32f7xx_it.c ****   ******************************************************************************
  32:Src/stm32f7xx_it.c ****   */
  33:Src/stm32f7xx_it.c **** /* Includes ------------------------------------------------------------------*/
  34:Src/stm32f7xx_it.c **** #include "stm32f7xx_hal.h"
  35:Src/stm32f7xx_it.c **** #include "stm32f7xx.h"
  36:Src/stm32f7xx_it.c **** #include "stm32f7xx_it.h"
  37:Src/stm32f7xx_it.c **** #include "main.h"
  38:Src/stm32f7xx_it.c **** #include "motor.h"
  39:Src/stm32f7xx_it.c **** #include "usart.h"
  40:Src/stm32f7xx_it.c **** #include "gps.h"
  41:Src/stm32f7xx_it.c **** 
  42:Src/stm32f7xx_it.c **** /* USER CODE BEGIN 0 */
  43:Src/stm32f7xx_it.c **** 
  44:Src/stm32f7xx_it.c **** /* USER CODE END 0 */
  45:Src/stm32f7xx_it.c **** 
  46:Src/stm32f7xx_it.c **** /* External variables --------------------------------------------------------*/
  47:Src/stm32f7xx_it.c **** extern SPI_HandleTypeDef hspi1;
  48:Src/stm32f7xx_it.c **** extern TIM_HandleTypeDef htim2;
  49:Src/stm32f7xx_it.c **** extern UART_HandleTypeDef huart4;
  50:Src/stm32f7xx_it.c **** 
  51:Src/stm32f7xx_it.c **** /******************************************************************************/
  52:Src/stm32f7xx_it.c **** /*            Cortex-M7 Processor Interruption and Exception Handlers         */ 
  53:Src/stm32f7xx_it.c **** /******************************************************************************/
  54:Src/stm32f7xx_it.c **** 
  55:Src/stm32f7xx_it.c **** /**
  56:Src/stm32f7xx_it.c **** * @brief This function handles Non maskable interrupt.
  57:Src/stm32f7xx_it.c **** */
  58:Src/stm32f7xx_it.c **** void NMI_Handler(void)
  59:Src/stm32f7xx_it.c **** {
  33              		.loc 1 59 0
  34              		.cfi_startproc
  35              		@ args = 0, pretend = 0, frame = 0
  36              		@ frame_needed = 1, uses_anonymous_args = 0
  37              		@ link register save eliminated.
  38 0000 80B4     		push	{r7}
  39              	.LCFI0:
  40              		.cfi_def_cfa_offset 4
  41              		.cfi_offset 7, -4
  42 0002 00AF     		add	r7, sp, #0
  43              	.LCFI1:
  44              		.cfi_def_cfa_register 7
  60:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  61:Src/stm32f7xx_it.c **** 
  62:Src/stm32f7xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  63:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  64:Src/stm32f7xx_it.c **** 
  65:Src/stm32f7xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  66:Src/stm32f7xx_it.c **** }
  45              		.loc 1 66 0
  46 0004 00BF     		nop
  47 0006 BD46     		mov	sp, r7
  48              	.LCFI2:
  49              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccON1RXY.s 			page 3


  50              		@ sp needed
  51 0008 5DF8047B 		ldr	r7, [sp], #4
  52              	.LCFI3:
  53              		.cfi_restore 7
  54              		.cfi_def_cfa_offset 0
  55 000c 7047     		bx	lr
  56              		.cfi_endproc
  57              	.LFE136:
  59              		.section	.text.HardFault_Handler,"ax",%progbits
  60              		.align	1
  61              		.global	HardFault_Handler
  62              		.syntax unified
  63              		.thumb
  64              		.thumb_func
  65              		.fpu fpv4-sp-d16
  67              	HardFault_Handler:
  68              	.LFB137:
  67:Src/stm32f7xx_it.c **** 
  68:Src/stm32f7xx_it.c **** /**
  69:Src/stm32f7xx_it.c **** * @brief This function handles Hard fault interrupt.
  70:Src/stm32f7xx_it.c **** */
  71:Src/stm32f7xx_it.c **** void HardFault_Handler(void)
  72:Src/stm32f7xx_it.c **** {
  69              		.loc 1 72 0
  70              		.cfi_startproc
  71              		@ args = 0, pretend = 0, frame = 0
  72              		@ frame_needed = 1, uses_anonymous_args = 0
  73              		@ link register save eliminated.
  74 0000 80B4     		push	{r7}
  75              	.LCFI4:
  76              		.cfi_def_cfa_offset 4
  77              		.cfi_offset 7, -4
  78 0002 00AF     		add	r7, sp, #0
  79              	.LCFI5:
  80              		.cfi_def_cfa_register 7
  81              	.L3:
  73:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  74:Src/stm32f7xx_it.c **** 
  75:Src/stm32f7xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  76:Src/stm32f7xx_it.c ****   while (1)
  82              		.loc 1 76 0 discriminator 1
  83 0004 FEE7     		b	.L3
  84              		.cfi_endproc
  85              	.LFE137:
  87              		.section	.text.MemManage_Handler,"ax",%progbits
  88              		.align	1
  89              		.global	MemManage_Handler
  90              		.syntax unified
  91              		.thumb
  92              		.thumb_func
  93              		.fpu fpv4-sp-d16
  95              	MemManage_Handler:
  96              	.LFB138:
  77:Src/stm32f7xx_it.c ****   {
  78:Src/stm32f7xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  79:Src/stm32f7xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  80:Src/stm32f7xx_it.c ****   }
ARM GAS  /tmp/ccON1RXY.s 			page 4


  81:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 1 */
  82:Src/stm32f7xx_it.c **** 
  83:Src/stm32f7xx_it.c ****   /* USER CODE END HardFault_IRQn 1 */
  84:Src/stm32f7xx_it.c **** }
  85:Src/stm32f7xx_it.c **** 
  86:Src/stm32f7xx_it.c **** /**
  87:Src/stm32f7xx_it.c **** * @brief This function handles Memory management fault.
  88:Src/stm32f7xx_it.c **** */
  89:Src/stm32f7xx_it.c **** void MemManage_Handler(void)
  90:Src/stm32f7xx_it.c **** {
  97              		.loc 1 90 0
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 0
 100              		@ frame_needed = 1, uses_anonymous_args = 0
 101              		@ link register save eliminated.
 102 0000 80B4     		push	{r7}
 103              	.LCFI6:
 104              		.cfi_def_cfa_offset 4
 105              		.cfi_offset 7, -4
 106 0002 00AF     		add	r7, sp, #0
 107              	.LCFI7:
 108              		.cfi_def_cfa_register 7
 109              	.L5:
  91:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  92:Src/stm32f7xx_it.c **** 
  93:Src/stm32f7xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
  94:Src/stm32f7xx_it.c ****   while (1)
 110              		.loc 1 94 0 discriminator 1
 111 0004 FEE7     		b	.L5
 112              		.cfi_endproc
 113              	.LFE138:
 115              		.section	.text.BusFault_Handler,"ax",%progbits
 116              		.align	1
 117              		.global	BusFault_Handler
 118              		.syntax unified
 119              		.thumb
 120              		.thumb_func
 121              		.fpu fpv4-sp-d16
 123              	BusFault_Handler:
 124              	.LFB139:
  95:Src/stm32f7xx_it.c ****   {
  96:Src/stm32f7xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
  97:Src/stm32f7xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
  98:Src/stm32f7xx_it.c ****   }
  99:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 1 */
 100:Src/stm32f7xx_it.c **** 
 101:Src/stm32f7xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 1 */
 102:Src/stm32f7xx_it.c **** }
 103:Src/stm32f7xx_it.c **** 
 104:Src/stm32f7xx_it.c **** /**
 105:Src/stm32f7xx_it.c **** * @brief This function handles Pre-fetch fault, memory access fault.
 106:Src/stm32f7xx_it.c **** */
 107:Src/stm32f7xx_it.c **** void BusFault_Handler(void)
 108:Src/stm32f7xx_it.c **** {
 125              		.loc 1 108 0
 126              		.cfi_startproc
 127              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccON1RXY.s 			page 5


 128              		@ frame_needed = 1, uses_anonymous_args = 0
 129              		@ link register save eliminated.
 130 0000 80B4     		push	{r7}
 131              	.LCFI8:
 132              		.cfi_def_cfa_offset 4
 133              		.cfi_offset 7, -4
 134 0002 00AF     		add	r7, sp, #0
 135              	.LCFI9:
 136              		.cfi_def_cfa_register 7
 137              	.L7:
 109:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 110:Src/stm32f7xx_it.c **** 
 111:Src/stm32f7xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 112:Src/stm32f7xx_it.c ****   while (1)
 138              		.loc 1 112 0 discriminator 1
 139 0004 FEE7     		b	.L7
 140              		.cfi_endproc
 141              	.LFE139:
 143              		.section	.text.UsageFault_Handler,"ax",%progbits
 144              		.align	1
 145              		.global	UsageFault_Handler
 146              		.syntax unified
 147              		.thumb
 148              		.thumb_func
 149              		.fpu fpv4-sp-d16
 151              	UsageFault_Handler:
 152              	.LFB140:
 113:Src/stm32f7xx_it.c ****   {
 114:Src/stm32f7xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 115:Src/stm32f7xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 116:Src/stm32f7xx_it.c ****   }
 117:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 1 */
 118:Src/stm32f7xx_it.c **** 
 119:Src/stm32f7xx_it.c ****   /* USER CODE END BusFault_IRQn 1 */
 120:Src/stm32f7xx_it.c **** }
 121:Src/stm32f7xx_it.c **** 
 122:Src/stm32f7xx_it.c **** /**
 123:Src/stm32f7xx_it.c **** * @brief This function handles Undefined instruction or illegal state.
 124:Src/stm32f7xx_it.c **** */
 125:Src/stm32f7xx_it.c **** void UsageFault_Handler(void)
 126:Src/stm32f7xx_it.c **** {
 153              		.loc 1 126 0
 154              		.cfi_startproc
 155              		@ args = 0, pretend = 0, frame = 0
 156              		@ frame_needed = 1, uses_anonymous_args = 0
 157              		@ link register save eliminated.
 158 0000 80B4     		push	{r7}
 159              	.LCFI10:
 160              		.cfi_def_cfa_offset 4
 161              		.cfi_offset 7, -4
 162 0002 00AF     		add	r7, sp, #0
 163              	.LCFI11:
 164              		.cfi_def_cfa_register 7
 165              	.L9:
 127:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 128:Src/stm32f7xx_it.c **** 
 129:Src/stm32f7xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
ARM GAS  /tmp/ccON1RXY.s 			page 6


 130:Src/stm32f7xx_it.c ****   while (1)
 166              		.loc 1 130 0 discriminator 1
 167 0004 FEE7     		b	.L9
 168              		.cfi_endproc
 169              	.LFE140:
 171              		.section	.text.SVC_Handler,"ax",%progbits
 172              		.align	1
 173              		.global	SVC_Handler
 174              		.syntax unified
 175              		.thumb
 176              		.thumb_func
 177              		.fpu fpv4-sp-d16
 179              	SVC_Handler:
 180              	.LFB141:
 131:Src/stm32f7xx_it.c ****   {
 132:Src/stm32f7xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 133:Src/stm32f7xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 134:Src/stm32f7xx_it.c ****   }
 135:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 1 */
 136:Src/stm32f7xx_it.c **** 
 137:Src/stm32f7xx_it.c ****   /* USER CODE END UsageFault_IRQn 1 */
 138:Src/stm32f7xx_it.c **** }
 139:Src/stm32f7xx_it.c **** 
 140:Src/stm32f7xx_it.c **** /**
 141:Src/stm32f7xx_it.c **** * @brief This function handles System service call via SWI instruction.
 142:Src/stm32f7xx_it.c **** */
 143:Src/stm32f7xx_it.c **** void SVC_Handler(void)
 144:Src/stm32f7xx_it.c **** {
 181              		.loc 1 144 0
 182              		.cfi_startproc
 183              		@ args = 0, pretend = 0, frame = 0
 184              		@ frame_needed = 1, uses_anonymous_args = 0
 185              		@ link register save eliminated.
 186 0000 80B4     		push	{r7}
 187              	.LCFI12:
 188              		.cfi_def_cfa_offset 4
 189              		.cfi_offset 7, -4
 190 0002 00AF     		add	r7, sp, #0
 191              	.LCFI13:
 192              		.cfi_def_cfa_register 7
 145:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 146:Src/stm32f7xx_it.c **** 
 147:Src/stm32f7xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 148:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 149:Src/stm32f7xx_it.c **** 
 150:Src/stm32f7xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 151:Src/stm32f7xx_it.c **** }
 193              		.loc 1 151 0
 194 0004 00BF     		nop
 195 0006 BD46     		mov	sp, r7
 196              	.LCFI14:
 197              		.cfi_def_cfa_register 13
 198              		@ sp needed
 199 0008 5DF8047B 		ldr	r7, [sp], #4
 200              	.LCFI15:
 201              		.cfi_restore 7
 202              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccON1RXY.s 			page 7


 203 000c 7047     		bx	lr
 204              		.cfi_endproc
 205              	.LFE141:
 207              		.section	.text.DebugMon_Handler,"ax",%progbits
 208              		.align	1
 209              		.global	DebugMon_Handler
 210              		.syntax unified
 211              		.thumb
 212              		.thumb_func
 213              		.fpu fpv4-sp-d16
 215              	DebugMon_Handler:
 216              	.LFB142:
 152:Src/stm32f7xx_it.c **** 
 153:Src/stm32f7xx_it.c **** /**
 154:Src/stm32f7xx_it.c **** * @brief This function handles Debug monitor.
 155:Src/stm32f7xx_it.c **** */
 156:Src/stm32f7xx_it.c **** void DebugMon_Handler(void)
 157:Src/stm32f7xx_it.c **** {
 217              		.loc 1 157 0
 218              		.cfi_startproc
 219              		@ args = 0, pretend = 0, frame = 0
 220              		@ frame_needed = 1, uses_anonymous_args = 0
 221              		@ link register save eliminated.
 222 0000 80B4     		push	{r7}
 223              	.LCFI16:
 224              		.cfi_def_cfa_offset 4
 225              		.cfi_offset 7, -4
 226 0002 00AF     		add	r7, sp, #0
 227              	.LCFI17:
 228              		.cfi_def_cfa_register 7
 158:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 159:Src/stm32f7xx_it.c **** 
 160:Src/stm32f7xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 161:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 162:Src/stm32f7xx_it.c **** 
 163:Src/stm32f7xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 164:Src/stm32f7xx_it.c **** }
 229              		.loc 1 164 0
 230 0004 00BF     		nop
 231 0006 BD46     		mov	sp, r7
 232              	.LCFI18:
 233              		.cfi_def_cfa_register 13
 234              		@ sp needed
 235 0008 5DF8047B 		ldr	r7, [sp], #4
 236              	.LCFI19:
 237              		.cfi_restore 7
 238              		.cfi_def_cfa_offset 0
 239 000c 7047     		bx	lr
 240              		.cfi_endproc
 241              	.LFE142:
 243              		.section	.text.PendSV_Handler,"ax",%progbits
 244              		.align	1
 245              		.global	PendSV_Handler
 246              		.syntax unified
 247              		.thumb
 248              		.thumb_func
 249              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccON1RXY.s 			page 8


 251              	PendSV_Handler:
 252              	.LFB143:
 165:Src/stm32f7xx_it.c **** 
 166:Src/stm32f7xx_it.c **** /**
 167:Src/stm32f7xx_it.c **** * @brief This function handles Pendable request for system service.
 168:Src/stm32f7xx_it.c **** */
 169:Src/stm32f7xx_it.c **** void PendSV_Handler(void)
 170:Src/stm32f7xx_it.c **** {
 253              		.loc 1 170 0
 254              		.cfi_startproc
 255              		@ args = 0, pretend = 0, frame = 0
 256              		@ frame_needed = 1, uses_anonymous_args = 0
 257              		@ link register save eliminated.
 258 0000 80B4     		push	{r7}
 259              	.LCFI20:
 260              		.cfi_def_cfa_offset 4
 261              		.cfi_offset 7, -4
 262 0002 00AF     		add	r7, sp, #0
 263              	.LCFI21:
 264              		.cfi_def_cfa_register 7
 171:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 172:Src/stm32f7xx_it.c **** 
 173:Src/stm32f7xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 174:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 175:Src/stm32f7xx_it.c **** 
 176:Src/stm32f7xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 177:Src/stm32f7xx_it.c **** }
 265              		.loc 1 177 0
 266 0004 00BF     		nop
 267 0006 BD46     		mov	sp, r7
 268              	.LCFI22:
 269              		.cfi_def_cfa_register 13
 270              		@ sp needed
 271 0008 5DF8047B 		ldr	r7, [sp], #4
 272              	.LCFI23:
 273              		.cfi_restore 7
 274              		.cfi_def_cfa_offset 0
 275 000c 7047     		bx	lr
 276              		.cfi_endproc
 277              	.LFE143:
 279              		.section	.text.SysTick_Handler,"ax",%progbits
 280              		.align	1
 281              		.global	SysTick_Handler
 282              		.syntax unified
 283              		.thumb
 284              		.thumb_func
 285              		.fpu fpv4-sp-d16
 287              	SysTick_Handler:
 288              	.LFB144:
 178:Src/stm32f7xx_it.c **** 
 179:Src/stm32f7xx_it.c **** /**
 180:Src/stm32f7xx_it.c **** * @brief This function handles System tick timer.
 181:Src/stm32f7xx_it.c **** */
 182:Src/stm32f7xx_it.c **** void SysTick_Handler(void)
 183:Src/stm32f7xx_it.c **** {
 289              		.loc 1 183 0
 290              		.cfi_startproc
ARM GAS  /tmp/ccON1RXY.s 			page 9


 291              		@ args = 0, pretend = 0, frame = 0
 292              		@ frame_needed = 1, uses_anonymous_args = 0
 293 0000 80B5     		push	{r7, lr}
 294              	.LCFI24:
 295              		.cfi_def_cfa_offset 8
 296              		.cfi_offset 7, -8
 297              		.cfi_offset 14, -4
 298 0002 00AF     		add	r7, sp, #0
 299              	.LCFI25:
 300              		.cfi_def_cfa_register 7
 184:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 185:Src/stm32f7xx_it.c **** 
 186:Src/stm32f7xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 187:Src/stm32f7xx_it.c ****   HAL_IncTick();
 301              		.loc 1 187 0
 302 0004 FFF7FEFF 		bl	HAL_IncTick
 188:Src/stm32f7xx_it.c ****   HAL_SYSTICK_IRQHandler();
 303              		.loc 1 188 0
 304 0008 FFF7FEFF 		bl	HAL_SYSTICK_IRQHandler
 189:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 190:Src/stm32f7xx_it.c **** 
 191:Src/stm32f7xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 192:Src/stm32f7xx_it.c **** }
 305              		.loc 1 192 0
 306 000c 00BF     		nop
 307 000e 80BD     		pop	{r7, pc}
 308              		.cfi_endproc
 309              	.LFE144:
 311              		.section	.text.TIM2_IRQHandler,"ax",%progbits
 312              		.align	1
 313              		.global	TIM2_IRQHandler
 314              		.syntax unified
 315              		.thumb
 316              		.thumb_func
 317              		.fpu fpv4-sp-d16
 319              	TIM2_IRQHandler:
 320              	.LFB145:
 193:Src/stm32f7xx_it.c **** 
 194:Src/stm32f7xx_it.c **** /******************************************************************************/
 195:Src/stm32f7xx_it.c **** /* STM32F7xx Peripheral Interrupt Handlers                                    */
 196:Src/stm32f7xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 197:Src/stm32f7xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 198:Src/stm32f7xx_it.c **** /* please refer to the startup file (startup_stm32f7xx.s).                    */
 199:Src/stm32f7xx_it.c **** /******************************************************************************/
 200:Src/stm32f7xx_it.c **** 
 201:Src/stm32f7xx_it.c **** /**
 202:Src/stm32f7xx_it.c **** * @brief This function handles TIM2 global interrupt.
 203:Src/stm32f7xx_it.c **** */
 204:Src/stm32f7xx_it.c **** void TIM2_IRQHandler(void)
 205:Src/stm32f7xx_it.c **** {
 321              		.loc 1 205 0
 322              		.cfi_startproc
 323              		@ args = 0, pretend = 0, frame = 0
 324              		@ frame_needed = 1, uses_anonymous_args = 0
 325 0000 80B5     		push	{r7, lr}
 326              	.LCFI26:
 327              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccON1RXY.s 			page 10


 328              		.cfi_offset 7, -8
 329              		.cfi_offset 14, -4
 330 0002 00AF     		add	r7, sp, #0
 331              	.LCFI27:
 332              		.cfi_def_cfa_register 7
 206:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 0 */
 207:Src/stm32f7xx_it.c **** 
 208:Src/stm32f7xx_it.c ****   /* USER CODE END TIM2_IRQn 0 */
 209:Src/stm32f7xx_it.c ****   HAL_TIM_IRQHandler(&htim2);
 333              		.loc 1 209 0
 334 0004 0248     		ldr	r0, .L15
 335 0006 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 210:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 1 */
 211:Src/stm32f7xx_it.c **** 
 212:Src/stm32f7xx_it.c ****   /* USER CODE END TIM2_IRQn 1 */
 213:Src/stm32f7xx_it.c **** }
 336              		.loc 1 213 0
 337 000a 00BF     		nop
 338 000c 80BD     		pop	{r7, pc}
 339              	.L16:
 340 000e 00BF     		.align	2
 341              	.L15:
 342 0010 00000000 		.word	htim2
 343              		.cfi_endproc
 344              	.LFE145:
 346              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 347              		.align	1
 348              		.global	HAL_TIM_PeriodElapsedCallback
 349              		.syntax unified
 350              		.thumb
 351              		.thumb_func
 352              		.fpu fpv4-sp-d16
 354              	HAL_TIM_PeriodElapsedCallback:
 355              	.LFB146:
 214:Src/stm32f7xx_it.c **** 
 215:Src/stm32f7xx_it.c **** 
 216:Src/stm32f7xx_it.c **** //Motor Driver
 217:Src/stm32f7xx_it.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 218:Src/stm32f7xx_it.c **** {
 356              		.loc 1 218 0
 357              		.cfi_startproc
 358              		@ args = 0, pretend = 0, frame = 8
 359              		@ frame_needed = 1, uses_anonymous_args = 0
 360 0000 80B5     		push	{r7, lr}
 361              	.LCFI28:
 362              		.cfi_def_cfa_offset 8
 363              		.cfi_offset 7, -8
 364              		.cfi_offset 14, -4
 365 0002 82B0     		sub	sp, sp, #8
 366              	.LCFI29:
 367              		.cfi_def_cfa_offset 16
 368 0004 00AF     		add	r7, sp, #0
 369              	.LCFI30:
 370              		.cfi_def_cfa_register 7
 371 0006 7860     		str	r0, [r7, #4]
 219:Src/stm32f7xx_it.c ****     if(htim ->Instance == htim2.Instance)
 372              		.loc 1 219 0
ARM GAS  /tmp/ccON1RXY.s 			page 11


 373 0008 7B68     		ldr	r3, [r7, #4]
 374 000a 1A68     		ldr	r2, [r3]
 375 000c 044B     		ldr	r3, .L20
 376 000e 1B68     		ldr	r3, [r3]
 377 0010 9A42     		cmp	r2, r3
 378 0012 01D1     		bne	.L19
 220:Src/stm32f7xx_it.c ****     {
 221:Src/stm32f7xx_it.c ****         driveMotor();
 379              		.loc 1 221 0
 380 0014 FFF7FEFF 		bl	driveMotor
 381              	.L19:
 222:Src/stm32f7xx_it.c ****     }
 223:Src/stm32f7xx_it.c **** }
 382              		.loc 1 223 0
 383 0018 00BF     		nop
 384 001a 0837     		adds	r7, r7, #8
 385              	.LCFI31:
 386              		.cfi_def_cfa_offset 8
 387 001c BD46     		mov	sp, r7
 388              	.LCFI32:
 389              		.cfi_def_cfa_register 13
 390              		@ sp needed
 391 001e 80BD     		pop	{r7, pc}
 392              	.L21:
 393              		.align	2
 394              	.L20:
 395 0020 00000000 		.word	htim2
 396              		.cfi_endproc
 397              	.LFE146:
 399              		.section	.text.SPI1_IRQHandler,"ax",%progbits
 400              		.align	1
 401              		.global	SPI1_IRQHandler
 402              		.syntax unified
 403              		.thumb
 404              		.thumb_func
 405              		.fpu fpv4-sp-d16
 407              	SPI1_IRQHandler:
 408              	.LFB147:
 224:Src/stm32f7xx_it.c **** 
 225:Src/stm32f7xx_it.c **** /**
 226:Src/stm32f7xx_it.c **** * @brief This function handles SPI1 global interrupt.
 227:Src/stm32f7xx_it.c **** */
 228:Src/stm32f7xx_it.c **** void SPI1_IRQHandler(void)
 229:Src/stm32f7xx_it.c **** {
 409              		.loc 1 229 0
 410              		.cfi_startproc
 411              		@ args = 0, pretend = 0, frame = 0
 412              		@ frame_needed = 1, uses_anonymous_args = 0
 413 0000 80B5     		push	{r7, lr}
 414              	.LCFI33:
 415              		.cfi_def_cfa_offset 8
 416              		.cfi_offset 7, -8
 417              		.cfi_offset 14, -4
 418 0002 00AF     		add	r7, sp, #0
 419              	.LCFI34:
 420              		.cfi_def_cfa_register 7
 230:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN SPI1_IRQn 0 */
ARM GAS  /tmp/ccON1RXY.s 			page 12


 231:Src/stm32f7xx_it.c **** 
 232:Src/stm32f7xx_it.c ****   /* USER CODE END SPI1_IRQn 0 */
 233:Src/stm32f7xx_it.c ****   HAL_SPI_IRQHandler(&hspi1);
 421              		.loc 1 233 0
 422 0004 0248     		ldr	r0, .L23
 423 0006 FFF7FEFF 		bl	HAL_SPI_IRQHandler
 234:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN SPI1_IRQn 1 */
 235:Src/stm32f7xx_it.c **** 
 236:Src/stm32f7xx_it.c ****   /* USER CODE END SPI1_IRQn 1 */
 237:Src/stm32f7xx_it.c **** }
 424              		.loc 1 237 0
 425 000a 00BF     		nop
 426 000c 80BD     		pop	{r7, pc}
 427              	.L24:
 428 000e 00BF     		.align	2
 429              	.L23:
 430 0010 00000000 		.word	hspi1
 431              		.cfi_endproc
 432              	.LFE147:
 434              		.section	.text.UART4_IRQHandler,"ax",%progbits
 435              		.align	1
 436              		.global	UART4_IRQHandler
 437              		.syntax unified
 438              		.thumb
 439              		.thumb_func
 440              		.fpu fpv4-sp-d16
 442              	UART4_IRQHandler:
 443              	.LFB148:
 238:Src/stm32f7xx_it.c **** 
 239:Src/stm32f7xx_it.c **** /**
 240:Src/stm32f7xx_it.c **** * @brief This function handles UART4 global interrupt.
 241:Src/stm32f7xx_it.c **** */
 242:Src/stm32f7xx_it.c **** void UART4_IRQHandler(void)
 243:Src/stm32f7xx_it.c **** {
 444              		.loc 1 243 0
 445              		.cfi_startproc
 446              		@ args = 0, pretend = 0, frame = 0
 447              		@ frame_needed = 1, uses_anonymous_args = 0
 448 0000 80B5     		push	{r7, lr}
 449              	.LCFI35:
 450              		.cfi_def_cfa_offset 8
 451              		.cfi_offset 7, -8
 452              		.cfi_offset 14, -4
 453 0002 00AF     		add	r7, sp, #0
 454              	.LCFI36:
 455              		.cfi_def_cfa_register 7
 244:Src/stm32f7xx_it.c **** 
 245:Src/stm32f7xx_it.c ****   /* USER CODE BEGIN UART4_IRQn 0 */
 246:Src/stm32f7xx_it.c **** 
 247:Src/stm32f7xx_it.c ****   /* USER CODE END UART4_IRQn 0 */
 248:Src/stm32f7xx_it.c ****   HAL_UART_IRQHandler(&huart4);
 456              		.loc 1 248 0
 457 0004 0248     		ldr	r0, .L26
 458 0006 FFF7FEFF 		bl	HAL_UART_IRQHandler
 249:Src/stm32f7xx_it.c **** 
 250:Src/stm32f7xx_it.c **** 
 251:Src/stm32f7xx_it.c **** }
ARM GAS  /tmp/ccON1RXY.s 			page 13


 459              		.loc 1 251 0
 460 000a 00BF     		nop
 461 000c 80BD     		pop	{r7, pc}
 462              	.L27:
 463 000e 00BF     		.align	2
 464              	.L26:
 465 0010 00000000 		.word	huart4
 466              		.cfi_endproc
 467              	.LFE148:
 469              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 470              		.align	1
 471              		.global	HAL_UART_RxCpltCallback
 472              		.syntax unified
 473              		.thumb
 474              		.thumb_func
 475              		.fpu fpv4-sp-d16
 477              	HAL_UART_RxCpltCallback:
 478              	.LFB149:
 252:Src/stm32f7xx_it.c **** 
 253:Src/stm32f7xx_it.c **** //Interrupt callback routine
 254:Src/stm32f7xx_it.c **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 255:Src/stm32f7xx_it.c **** {
 479              		.loc 1 255 0
 480              		.cfi_startproc
 481              		@ args = 0, pretend = 0, frame = 8
 482              		@ frame_needed = 1, uses_anonymous_args = 0
 483 0000 80B5     		push	{r7, lr}
 484              	.LCFI37:
 485              		.cfi_def_cfa_offset 8
 486              		.cfi_offset 7, -8
 487              		.cfi_offset 14, -4
 488 0002 82B0     		sub	sp, sp, #8
 489              	.LCFI38:
 490              		.cfi_def_cfa_offset 16
 491 0004 00AF     		add	r7, sp, #0
 492              	.LCFI39:
 493              		.cfi_def_cfa_register 7
 494 0006 7860     		str	r0, [r7, #4]
 256:Src/stm32f7xx_it.c **** 
 257:Src/stm32f7xx_it.c **** 
 258:Src/stm32f7xx_it.c ****     if(huart->Instance == huart4.Instance)  //current UART
 495              		.loc 1 258 0
 496 0008 7B68     		ldr	r3, [r7, #4]
 497 000a 1A68     		ldr	r2, [r3]
 498 000c 044B     		ldr	r3, .L31
 499 000e 1B68     		ldr	r3, [r3]
 500 0010 9A42     		cmp	r2, r3
 501 0012 01D1     		bne	.L30
 259:Src/stm32f7xx_it.c ****     {
 260:Src/stm32f7xx_it.c **** 
 261:Src/stm32f7xx_it.c ****         receiveGpsData();
 502              		.loc 1 261 0
 503 0014 FFF7FEFF 		bl	receiveGpsData
 504              	.L30:
 262:Src/stm32f7xx_it.c **** 
 263:Src/stm32f7xx_it.c ****     }
 264:Src/stm32f7xx_it.c **** 
ARM GAS  /tmp/ccON1RXY.s 			page 14


 265:Src/stm32f7xx_it.c **** }
 505              		.loc 1 265 0
 506 0018 00BF     		nop
 507 001a 0837     		adds	r7, r7, #8
 508              	.LCFI40:
 509              		.cfi_def_cfa_offset 8
 510 001c BD46     		mov	sp, r7
 511              	.LCFI41:
 512              		.cfi_def_cfa_register 13
 513              		@ sp needed
 514 001e 80BD     		pop	{r7, pc}
 515              	.L32:
 516              		.align	2
 517              	.L31:
 518 0020 00000000 		.word	huart4
 519              		.cfi_endproc
 520              	.LFE149:
 522              		.text
 523              	.Letext0:
 524              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 525              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 526              		.file 4 "Drivers/CMSIS/Include/core_cm7.h"
 527              		.file 5 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 528              		.file 6 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f746xx.h"
 529              		.file 7 "/usr/include/newlib/sys/lock.h"
 530              		.file 8 "/usr/include/newlib/sys/_types.h"
 531              		.file 9 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 532              		.file 10 "/usr/include/newlib/sys/reent.h"
 533              		.file 11 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 534              		.file 12 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 535              		.file 13 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_spi.h"
 536              		.file 14 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim.h"
 537              		.file 15 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_uart.h"
 538              		.file 16 "Inc/motor.h"
 539              		.file 17 "Inc/usart.h"
 540              		.file 18 "Inc/gps.h"
ARM GAS  /tmp/ccON1RXY.s 			page 15


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f7xx_it.c
                            *COM*:0000000000000008 motor1
                            *COM*:0000000000000008 motor2
                            *COM*:0000000000000008 motor3
                            *COM*:0000000000000008 motor4
                            *COM*:00000000000001a0 gpsData
     /tmp/ccON1RXY.s:23     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccON1RXY.s:30     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccON1RXY.s:60     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccON1RXY.s:67     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccON1RXY.s:88     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccON1RXY.s:95     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccON1RXY.s:116    .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccON1RXY.s:123    .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccON1RXY.s:144    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccON1RXY.s:151    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccON1RXY.s:172    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccON1RXY.s:179    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccON1RXY.s:208    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccON1RXY.s:215    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccON1RXY.s:244    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccON1RXY.s:251    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccON1RXY.s:280    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccON1RXY.s:287    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccON1RXY.s:312    .text.TIM2_IRQHandler:0000000000000000 $t
     /tmp/ccON1RXY.s:319    .text.TIM2_IRQHandler:0000000000000000 TIM2_IRQHandler
     /tmp/ccON1RXY.s:342    .text.TIM2_IRQHandler:0000000000000010 $d
     /tmp/ccON1RXY.s:347    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccON1RXY.s:354    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccON1RXY.s:395    .text.HAL_TIM_PeriodElapsedCallback:0000000000000020 $d
     /tmp/ccON1RXY.s:400    .text.SPI1_IRQHandler:0000000000000000 $t
     /tmp/ccON1RXY.s:407    .text.SPI1_IRQHandler:0000000000000000 SPI1_IRQHandler
     /tmp/ccON1RXY.s:430    .text.SPI1_IRQHandler:0000000000000010 $d
     /tmp/ccON1RXY.s:435    .text.UART4_IRQHandler:0000000000000000 $t
     /tmp/ccON1RXY.s:442    .text.UART4_IRQHandler:0000000000000000 UART4_IRQHandler
     /tmp/ccON1RXY.s:465    .text.UART4_IRQHandler:0000000000000010 $d
     /tmp/ccON1RXY.s:470    .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/ccON1RXY.s:477    .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/ccON1RXY.s:518    .text.HAL_UART_RxCpltCallback:0000000000000020 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_SYSTICK_IRQHandler
HAL_TIM_IRQHandler
htim2
driveMotor
HAL_SPI_IRQHandler
hspi1
HAL_UART_IRQHandler
huart4
receiveGpsData
