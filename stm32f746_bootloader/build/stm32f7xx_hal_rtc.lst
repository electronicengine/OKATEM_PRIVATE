ARM GAS  /tmp/cchUBvqp.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f7xx_hal_rtc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	SpiTxData,4,4
  18              		.comm	SpiRxData,4,4
  19              		.comm	UpdateFile,4,4
  20              		.section	.text.HAL_RTC_Init,"ax",%progbits
  21              		.align	1
  22              		.global	HAL_RTC_Init
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  26              		.fpu fpv4-sp-d16
  28              	HAL_RTC_Init:
  29              	.LFB138:
  30              		.file 1 "Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c"
   1:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
   2:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ******************************************************************************
   3:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @file    stm32f7xx_hal_rtc.c
   4:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @author  MCD Application Team
   5:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief   RTC HAL module driver.
   6:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This file provides firmware functions to manage the following 
   7:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          functionalities of the Real Time Clock (RTC) peripheral:
   8:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *           + RTC Time and Date functions
  10:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *           + RTC Alarm functions
  11:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *           + Peripheral Control functions   
  12:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *           + Peripheral State functions
  13:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         
  14:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   @verbatim
  15:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ==============================================================================
  16:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ##### Backup Domain Operating Condition #####
  17:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ==============================================================================
  18:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] The real-time clock (RTC), the RTC backup registers, and the backup 
  19:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        SRAM (BKP SRAM) can be powered from the VBAT voltage when the main 
  20:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        VDD supply is powered off.
  21:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        To retain the content of the RTC backup registers, backup SRAM, and supply 
  22:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        the RTC when VDD is turned off, VBAT pin can be connected to an optional 
  23:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        standby voltage supplied by a battery or by another source.
  24:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
  25:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] To allow the RTC operating even when the main digital supply (VDD) is turned
  26:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        off, the VBAT pin powers the following blocks:
  27:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) The RTC
  28:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) The LSE oscillator
ARM GAS  /tmp/cchUBvqp.s 			page 2


  29:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) The backup SRAM when the low power backup regulator is enabled
  30:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) PC13 to PC15 I/Os, plus PI8 I/O (when available)
  31:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
  32:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] When the backup domain is supplied by VDD (analog switch connected to VDD),
  33:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        the following pins are available:
  34:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) PC14 and PC15 can be used as either GPIO or LSE pins
  35:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) PC13 can be used as a GPIO or as the RTC_AF1 pin
  36:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) PI8 can be used as a GPIO or as the RTC_AF2 pin
  37:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
  38:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] When the backup domain is supplied by VBAT (analog switch connected to VBAT 
  39:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        because VDD is not present), the following pins are available:
  40:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) PC14 and PC15 can be used as LSE pins only
  41:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) PC13 can be used as the RTC_AF1 pin 
  42:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) PI8 can be used as the RTC_AF2 pin
  43:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) PC1 can be used as the RTC_AF3 pin
  44:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              
  45:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                    ##### Backup Domain Reset #####
  46:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ==================================================================
  47:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] The backup domain reset sets all RTC registers and the RCC_BDCR register 
  48:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        to their reset values. The BKPSRAM is not affected by this reset. The only
  49:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        way to reset the BKPSRAM is through the Flash interface by requesting 
  50:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        a protection level change from 1 to 0.
  51:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] A backup domain reset is generated when one of the following events occurs:
  52:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) Software reset, triggered by setting the BDRST bit in the 
  53:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         RCC Backup domain control register (RCC_BDCR). 
  54:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) VDD or VBAT power on, if both supplies have previously been powered off.  
  55:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
  56:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                    ##### Backup Domain Access #####
  57:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ==================================================================
  58:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] After reset, the backup domain (RTC registers, RTC backup data 
  59:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        registers and backup SRAM) is protected against possible unwanted write 
  60:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        accesses. 
  61:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] To enable access to the RTC Domain and RTC registers, proceed as follows:
  62:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) Enable the Power Controller (PWR) APB1 interface clock using the
  63:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RCC_PWR_CLK_ENABLE() function.
  64:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) Enable access to RTC domain using the HAL_PWR_EnableBkUpAccess() function.
  65:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) Select the RTC clock source using the __HAL_RCC_RTC_CONFIG() function.
  66:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) Enable RTC Clock using the __HAL_RCC_RTC_ENABLE() function.
  67:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
  68:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
  69:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                   ##### How to use this driver #####
  70:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ==================================================================
  71:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] 
  72:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) Enable the RTC domain access (see description in the section above).
  73:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) Configure the RTC Prescaler (Asynchronous and Synchronous) and RTC hour 
  74:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         format using the HAL_RTC_Init() function.
  75:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
  76:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *** Time and Date configuration ***
  77:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ===================================
  78:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] 
  79:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) To configure the RTC Calendar (Time and Date) use the HAL_RTC_SetTime() 
  80:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         and HAL_RTC_SetDate() functions.
  81:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) To read the RTC Calendar, use the HAL_RTC_GetTime() and HAL_RTC_GetDate() functions. 
  82:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
  83:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *** Alarm configuration ***
  84:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ===========================
  85:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..]
ARM GAS  /tmp/cchUBvqp.s 			page 3


  86:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) To configure the RTC Alarm use the HAL_RTC_SetAlarm() function. 
  87:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         You can also configure the RTC Alarm with interrupt mode using the HAL_RTC_SetAlarm_IT() fu
  88:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) To read the RTC Alarm, use the HAL_RTC_GetAlarm() function.
  89:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
  90:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                   ##### RTC and low power modes #####
  91:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ==================================================================
  92:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] The MCU can be woken up from a low power mode by an RTC alternate 
  93:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        function.
  94:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] The RTC alternate functions are the RTC alarms (Alarm A and Alarm B), 
  95:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
  96:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        These RTC alternate functions can wake up the system from the Stop and 
  97:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        Standby low power modes.
  98:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] The system can also wake up from low power modes without depending 
  99:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        on an external interrupt (Auto-wakeup mode), by using the RTC alarm 
 100:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        or the RTC wakeup events.
 101:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] The RTC provides a programmable time base for waking up from the 
 102:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        Stop or Standby mode at regular intervals.
 103:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        Wakeup from STOP and STANDBY modes is possible only when the RTC clock source
 104:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        is LSE or LSI.
 105:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****      
 106:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    @endverbatim
 107:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ******************************************************************************
 108:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @attention
 109:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *
 110:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
 111:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *
 112:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * Redistribution and use in source and binary forms, with or without modification,
 113:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * are permitted provided that the following conditions are met:
 114:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 115:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *      this list of conditions and the following disclaimer.
 116:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 117:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *      this list of conditions and the following disclaimer in the documentation
 118:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *      and/or other materials provided with the distribution.
 119:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 120:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *      may be used to endorse or promote products derived from this software
 121:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *      without specific prior written permission.
 122:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *
 123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 124:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 125:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 126:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 127:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 128:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 129:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 130:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 131:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 132:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 133:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *
 134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ******************************************************************************
 135:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */ 
 136:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 137:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /* Includes ------------------------------------------------------------------*/
 138:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** #include "stm32f7xx_hal.h"
 139:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 140:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /** @addtogroup STM32F7xx_HAL_Driver
 141:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @{
 142:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
ARM GAS  /tmp/cchUBvqp.s 			page 4


 143:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 144:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /** @defgroup RTC RTC
 145:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief RTC HAL module driver
 146:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @{
 147:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 148:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 149:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** #ifdef HAL_RTC_MODULE_ENABLED
 150:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 151:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 152:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /* Private define ------------------------------------------------------------*/
 153:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /* Private macro -------------------------------------------------------------*/
 154:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /* Private variables ---------------------------------------------------------*/
 155:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 156:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /* Private functions ---------------------------------------------------------*/
 157:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 158:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /** @defgroup RTC_Exported_Functions RTC Exported Functions
 159:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @{
 160:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 161:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 162:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /** @defgroup RTC_Group1 Initialization and de-initialization functions 
 163:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *  @brief    Initialization and Configuration functions 
 164:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *
 165:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @verbatim    
 166:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================
 167:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ##### Initialization and de-initialization functions #####
 168:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================
 169:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    [..] This section provides functions allowing to initialize and configure the 
 170:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****          RTC Prescaler (Synchronous and Asynchronous), RTC Hour format, disable 
 171:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****          RTC registers Write protection, enter and exit the RTC initialization mode, 
 172:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****          RTC registers synchronization check and reference clock detection enable.
 173:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****          (#) The RTC Prescaler is programmed to generate the RTC 1Hz time base. 
 174:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              It is split into 2 programmable prescalers to minimize power consumption.
 175:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              (++) A 7-bit asynchronous prescaler and a 13-bit synchronous prescaler.
 176:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              (++) When both prescalers are used, it is recommended to configure the 
 177:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  asynchronous prescaler to a high value to minimize power consumption.
 178:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****          (#) All RTC registers are Write protected. Writing to the RTC registers
 179:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              is enabled by writing a key into the Write Protection register, RTC_WPR.
 180:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****          (#) To configure the RTC Calendar, user application should enter 
 181:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              initialization mode. In this mode, the calendar counter is stopped 
 182:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              and its value can be updated. When the initialization sequence is 
 183:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              complete, the calendar restarts counting after 4 RTCCLK cycles.
 184:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****          (#) To read the calendar through the shadow registers after Calendar 
 185:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              initialization, calendar update or after wakeup from low power modes 
 186:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              the software must first clear the RSF flag. The software must then 
 187:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              wait until it is set again before reading the calendar, which means 
 188:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              that the calendar registers have been correctly copied into the 
 189:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              RTC_TR and RTC_DR shadow registers.The HAL_RTC_WaitForSynchro() function 
 190:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              implements the above software sequence (RSF clear and RSF check).
 191:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  
 192:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @endverbatim
 193:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @{
 194:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 195:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 196:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 197:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Initializes the RTC peripheral 
 198:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 199:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
ARM GAS  /tmp/cchUBvqp.s 			page 5


 200:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 201:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 202:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
 203:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
  31              		.loc 1 203 0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 8
  34              		@ frame_needed = 1, uses_anonymous_args = 0
  35 0000 80B5     		push	{r7, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 82B0     		sub	sp, sp, #8
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 16
  43 0004 00AF     		add	r7, sp, #0
  44              	.LCFI2:
  45              		.cfi_def_cfa_register 7
  46 0006 7860     		str	r0, [r7, #4]
 204:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the RTC peripheral state */
 205:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(hrtc == NULL)
  47              		.loc 1 205 0
  48 0008 7B68     		ldr	r3, [r7, #4]
  49 000a 002B     		cmp	r3, #0
  50 000c 01D1     		bne	.L2
 206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 207:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****      return HAL_ERROR;
  51              		.loc 1 207 0
  52 000e 0123     		movs	r3, #1
  53 0010 6BE0     		b	.L3
  54              	.L2:
 208:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 209:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 210:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
 211:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 212:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 213:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 214:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 215:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
 216:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 217:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 218:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 219:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(hrtc->State == HAL_RTC_STATE_RESET)
  55              		.loc 1 219 0
  56 0012 7B68     		ldr	r3, [r7, #4]
  57 0014 5B7F     		ldrb	r3, [r3, #29]
  58 0016 DBB2     		uxtb	r3, r3
  59 0018 002B     		cmp	r3, #0
  60 001a 05D1     		bne	.L4
 220:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 221:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Allocate lock resource and initialize it */
 222:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Lock = HAL_UNLOCKED;
  61              		.loc 1 222 0
  62 001c 7B68     		ldr	r3, [r7, #4]
  63 001e 0022     		movs	r2, #0
  64 0020 1A77     		strb	r2, [r3, #28]
ARM GAS  /tmp/cchUBvqp.s 			page 6


 223:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Initialize RTC MSP */
 224:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     HAL_RTC_MspInit(hrtc);
  65              		.loc 1 224 0
  66 0022 7868     		ldr	r0, [r7, #4]
  67 0024 FFF7FEFF 		bl	HAL_RTC_MspInit
  68              	.L4:
 225:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 226:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 227:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Set RTC state */  
 228:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;  
  69              		.loc 1 228 0
  70 0028 7B68     		ldr	r3, [r7, #4]
  71 002a 0222     		movs	r2, #2
  72 002c 5A77     		strb	r2, [r3, #29]
 229:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        
 230:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 231:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
  73              		.loc 1 231 0
  74 002e 7B68     		ldr	r3, [r7, #4]
  75 0030 1B68     		ldr	r3, [r3]
  76 0032 CA22     		movs	r2, #202
  77 0034 5A62     		str	r2, [r3, #36]
  78 0036 7B68     		ldr	r3, [r7, #4]
  79 0038 1B68     		ldr	r3, [r3]
  80 003a 5322     		movs	r2, #83
  81 003c 5A62     		str	r2, [r3, #36]
 232:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 233:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Set Initialization mode */
 234:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
  82              		.loc 1 234 0
  83 003e 7868     		ldr	r0, [r7, #4]
  84 0040 FFF7FEFF 		bl	RTC_EnterInitMode
  85 0044 0346     		mov	r3, r0
  86 0046 002B     		cmp	r3, #0
  87 0048 08D0     		beq	.L5
 235:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 236:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 237:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
  88              		.loc 1 237 0
  89 004a 7B68     		ldr	r3, [r7, #4]
  90 004c 1B68     		ldr	r3, [r3]
  91 004e FF22     		movs	r2, #255
  92 0050 5A62     		str	r2, [r3, #36]
 238:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 239:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Set RTC state */
 240:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
  93              		.loc 1 240 0
  94 0052 7B68     		ldr	r3, [r7, #4]
  95 0054 0422     		movs	r2, #4
  96 0056 5A77     		strb	r2, [r3, #29]
 241:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 242:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     return HAL_ERROR;
  97              		.loc 1 242 0
  98 0058 0123     		movs	r3, #1
  99 005a 46E0     		b	.L3
 100              	.L5:
 243:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   } 
ARM GAS  /tmp/cchUBvqp.s 			page 7


 244:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
 245:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   { 
 246:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Clear RTC_CR FMT, OSEL and POL Bits */
 247:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 101              		.loc 1 247 0
 102 005c 7B68     		ldr	r3, [r7, #4]
 103 005e 1B68     		ldr	r3, [r3]
 104 0060 9968     		ldr	r1, [r3, #8]
 105 0062 7B68     		ldr	r3, [r7, #4]
 106 0064 1A68     		ldr	r2, [r3]
 107 0066 234B     		ldr	r3, .L6
 108 0068 0B40     		ands	r3, r3, r1
 109 006a 9360     		str	r3, [r2, #8]
 248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Set RTC_CR register */
 249:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutP
 110              		.loc 1 249 0
 111 006c 7B68     		ldr	r3, [r7, #4]
 112 006e 1B68     		ldr	r3, [r3]
 113 0070 9968     		ldr	r1, [r3, #8]
 114 0072 7B68     		ldr	r3, [r7, #4]
 115 0074 5A68     		ldr	r2, [r3, #4]
 116 0076 7B68     		ldr	r3, [r7, #4]
 117 0078 1B69     		ldr	r3, [r3, #16]
 118 007a 1A43     		orrs	r2, r2, r3
 119 007c 7B68     		ldr	r3, [r7, #4]
 120 007e 5B69     		ldr	r3, [r3, #20]
 121 0080 1A43     		orrs	r2, r2, r3
 122 0082 7B68     		ldr	r3, [r7, #4]
 123 0084 1B68     		ldr	r3, [r3]
 124 0086 0A43     		orrs	r2, r2, r1
 125 0088 9A60     		str	r2, [r3, #8]
 250:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 251:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the RTC PRER */
 252:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 126              		.loc 1 252 0
 127 008a 7B68     		ldr	r3, [r7, #4]
 128 008c 1B68     		ldr	r3, [r3]
 129 008e 7A68     		ldr	r2, [r7, #4]
 130 0090 D268     		ldr	r2, [r2, #12]
 131 0092 1A61     		str	r2, [r3, #16]
 253:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 132              		.loc 1 253 0
 133 0094 7B68     		ldr	r3, [r7, #4]
 134 0096 1B68     		ldr	r3, [r3]
 135 0098 1969     		ldr	r1, [r3, #16]
 136 009a 7B68     		ldr	r3, [r7, #4]
 137 009c 9B68     		ldr	r3, [r3, #8]
 138 009e 1A04     		lsls	r2, r3, #16
 139 00a0 7B68     		ldr	r3, [r7, #4]
 140 00a2 1B68     		ldr	r3, [r3]
 141 00a4 0A43     		orrs	r2, r2, r1
 142 00a6 1A61     		str	r2, [r3, #16]
 254:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 255:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Exit Initialization mode */
 256:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 143              		.loc 1 256 0
 144 00a8 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cchUBvqp.s 			page 8


 145 00aa 1B68     		ldr	r3, [r3]
 146 00ac DA68     		ldr	r2, [r3, #12]
 147 00ae 7B68     		ldr	r3, [r7, #4]
 148 00b0 1B68     		ldr	r3, [r3]
 149 00b2 22F08002 		bic	r2, r2, #128
 150 00b6 DA60     		str	r2, [r3, #12]
 257:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 258:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 151              		.loc 1 258 0
 152 00b8 7B68     		ldr	r3, [r7, #4]
 153 00ba 1B68     		ldr	r3, [r3]
 154 00bc DA6C     		ldr	r2, [r3, #76]
 155 00be 7B68     		ldr	r3, [r7, #4]
 156 00c0 1B68     		ldr	r3, [r3]
 157 00c2 22F00802 		bic	r2, r2, #8
 158 00c6 DA64     		str	r2, [r3, #76]
 259:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType); 
 159              		.loc 1 259 0
 160 00c8 7B68     		ldr	r3, [r7, #4]
 161 00ca 1B68     		ldr	r3, [r3]
 162 00cc D96C     		ldr	r1, [r3, #76]
 163 00ce 7B68     		ldr	r3, [r7, #4]
 164 00d0 9A69     		ldr	r2, [r3, #24]
 165 00d2 7B68     		ldr	r3, [r7, #4]
 166 00d4 1B68     		ldr	r3, [r3]
 167 00d6 0A43     		orrs	r2, r2, r1
 168 00d8 DA64     		str	r2, [r3, #76]
 260:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 262:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 169              		.loc 1 262 0
 170 00da 7B68     		ldr	r3, [r7, #4]
 171 00dc 1B68     		ldr	r3, [r3]
 172 00de FF22     		movs	r2, #255
 173 00e0 5A62     		str	r2, [r3, #36]
 263:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 264:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Set RTC state */
 265:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_READY;
 174              		.loc 1 265 0
 175 00e2 7B68     		ldr	r3, [r7, #4]
 176 00e4 0122     		movs	r2, #1
 177 00e6 5A77     		strb	r2, [r3, #29]
 266:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 267:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     return HAL_OK;
 178              		.loc 1 267 0
 179 00e8 0023     		movs	r3, #0
 180              	.L3:
 268:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 269:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 181              		.loc 1 269 0
 182 00ea 1846     		mov	r0, r3
 183 00ec 0837     		adds	r7, r7, #8
 184              	.LCFI3:
 185              		.cfi_def_cfa_offset 8
 186 00ee BD46     		mov	sp, r7
 187              	.LCFI4:
 188              		.cfi_def_cfa_register 13
ARM GAS  /tmp/cchUBvqp.s 			page 9


 189              		@ sp needed
 190 00f0 80BD     		pop	{r7, pc}
 191              	.L7:
 192 00f2 00BF     		.align	2
 193              	.L6:
 194 00f4 BFFF8FFF 		.word	-7340097
 195              		.cfi_endproc
 196              	.LFE138:
 198              		.section	.text.HAL_RTC_DeInit,"ax",%progbits
 199              		.align	1
 200              		.global	HAL_RTC_DeInit
 201              		.syntax unified
 202              		.thumb
 203              		.thumb_func
 204              		.fpu fpv4-sp-d16
 206              	HAL_RTC_DeInit:
 207              	.LFB139:
 270:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 271:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 272:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  DeInitializes the RTC peripheral 
 273:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 274:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
 275:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @note   This function doesn't reset the RTC Backup Data registers.   
 276:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 277:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 278:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_DeInit(RTC_HandleTypeDef *hrtc)
 279:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 208              		.loc 1 279 0
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 16
 211              		@ frame_needed = 1, uses_anonymous_args = 0
 212 0000 80B5     		push	{r7, lr}
 213              	.LCFI5:
 214              		.cfi_def_cfa_offset 8
 215              		.cfi_offset 7, -8
 216              		.cfi_offset 14, -4
 217 0002 84B0     		sub	sp, sp, #16
 218              	.LCFI6:
 219              		.cfi_def_cfa_offset 24
 220 0004 00AF     		add	r7, sp, #0
 221              	.LCFI7:
 222              		.cfi_def_cfa_register 7
 223 0006 7860     		str	r0, [r7, #4]
 280:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tickstart = 0;
 224              		.loc 1 280 0
 225 0008 0023     		movs	r3, #0
 226 000a FB60     		str	r3, [r7, #12]
 281:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 282:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
 283:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 284:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 285:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Set RTC state */
 286:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY; 
 227              		.loc 1 286 0
 228 000c 7B68     		ldr	r3, [r7, #4]
 229 000e 0222     		movs	r2, #2
 230 0010 5A77     		strb	r2, [r3, #29]
ARM GAS  /tmp/cchUBvqp.s 			page 10


 287:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 288:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 289:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 231              		.loc 1 289 0
 232 0012 7B68     		ldr	r3, [r7, #4]
 233 0014 1B68     		ldr	r3, [r3]
 234 0016 CA22     		movs	r2, #202
 235 0018 5A62     		str	r2, [r3, #36]
 236 001a 7B68     		ldr	r3, [r7, #4]
 237 001c 1B68     		ldr	r3, [r3]
 238 001e 5322     		movs	r2, #83
 239 0020 5A62     		str	r2, [r3, #36]
 290:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 291:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Set Initialization mode */
 292:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
 240              		.loc 1 292 0
 241 0022 7868     		ldr	r0, [r7, #4]
 242 0024 FFF7FEFF 		bl	RTC_EnterInitMode
 243 0028 0346     		mov	r3, r0
 244 002a 002B     		cmp	r3, #0
 245 002c 08D0     		beq	.L9
 293:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 294:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 295:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 246              		.loc 1 295 0
 247 002e 7B68     		ldr	r3, [r7, #4]
 248 0030 1B68     		ldr	r3, [r3]
 249 0032 FF22     		movs	r2, #255
 250 0034 5A62     		str	r2, [r3, #36]
 296:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 297:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Set RTC state */
 298:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 251              		.loc 1 298 0
 252 0036 7B68     		ldr	r3, [r7, #4]
 253 0038 0422     		movs	r2, #4
 254 003a 5A77     		strb	r2, [r3, #29]
 299:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 300:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     return HAL_ERROR;
 255              		.loc 1 300 0
 256 003c 0123     		movs	r3, #1
 257 003e 84E0     		b	.L10
 258              	.L9:
 301:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }  
 302:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
 303:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 304:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Reset TR, DR and CR registers */
 305:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->TR = (uint32_t)0x00000000;
 259              		.loc 1 305 0
 260 0040 7B68     		ldr	r3, [r7, #4]
 261 0042 1B68     		ldr	r3, [r3]
 262 0044 0022     		movs	r2, #0
 263 0046 1A60     		str	r2, [r3]
 306:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->DR = (uint32_t)0x00002101;
 264              		.loc 1 306 0
 265 0048 7B68     		ldr	r3, [r7, #4]
 266 004a 1B68     		ldr	r3, [r3]
 267 004c 42F20112 		movw	r2, #8449
ARM GAS  /tmp/cchUBvqp.s 			page 11


 268 0050 5A60     		str	r2, [r3, #4]
 307:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 308:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->CR &= (uint32_t)0x00000007;
 269              		.loc 1 308 0
 270 0052 7B68     		ldr	r3, [r7, #4]
 271 0054 1B68     		ldr	r3, [r3]
 272 0056 9A68     		ldr	r2, [r3, #8]
 273 0058 7B68     		ldr	r3, [r7, #4]
 274 005a 1B68     		ldr	r3, [r3]
 275 005c 02F00702 		and	r2, r2, #7
 276 0060 9A60     		str	r2, [r3, #8]
 309:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 310:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
 311:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 277              		.loc 1 311 0
 278 0062 FFF7FEFF 		bl	HAL_GetTick
 279 0066 F860     		str	r0, [r7, #12]
 312:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 313:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Wait till WUTWF flag is set and if Time out is reached exit */
 314:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     while(((hrtc->Instance->ISR) & RTC_ISR_WUTWF) == (uint32_t)RESET)
 280              		.loc 1 314 0
 281 0068 10E0     		b	.L11
 282              	.L12:
 315:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 316:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 283              		.loc 1 316 0
 284 006a FFF7FEFF 		bl	HAL_GetTick
 285 006e 0246     		mov	r2, r0
 286 0070 FB68     		ldr	r3, [r7, #12]
 287 0072 D31A     		subs	r3, r2, r3
 288 0074 B3F57A7F 		cmp	r3, #1000
 289 0078 08D9     		bls	.L11
 317:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       { 
 318:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 319:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 290              		.loc 1 319 0
 291 007a 7B68     		ldr	r3, [r7, #4]
 292 007c 1B68     		ldr	r3, [r3]
 293 007e FF22     		movs	r2, #255
 294 0080 5A62     		str	r2, [r3, #36]
 320:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 321:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Set RTC state */
 322:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 295              		.loc 1 322 0
 296 0082 7B68     		ldr	r3, [r7, #4]
 297 0084 0322     		movs	r2, #3
 298 0086 5A77     		strb	r2, [r3, #29]
 323:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 324:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 299              		.loc 1 324 0
 300 0088 0323     		movs	r3, #3
 301 008a 5EE0     		b	.L10
 302              	.L11:
 314:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 303              		.loc 1 314 0
 304 008c 7B68     		ldr	r3, [r7, #4]
 305 008e 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cchUBvqp.s 			page 12


 306 0090 DB68     		ldr	r3, [r3, #12]
 307 0092 03F00403 		and	r3, r3, #4
 308 0096 002B     		cmp	r3, #0
 309 0098 E7D0     		beq	.L12
 325:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }      
 326:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 327:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 328:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Reset all RTC CR register bits */
 329:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->CR &= (uint32_t)0x00000000;
 310              		.loc 1 329 0
 311 009a 7B68     		ldr	r3, [r7, #4]
 312 009c 1B68     		ldr	r3, [r3]
 313 009e 9B68     		ldr	r3, [r3, #8]
 314 00a0 7B68     		ldr	r3, [r7, #4]
 315 00a2 1B68     		ldr	r3, [r3]
 316 00a4 0022     		movs	r2, #0
 317 00a6 9A60     		str	r2, [r3, #8]
 330:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->WUTR = (uint32_t)0x0000FFFF;
 318              		.loc 1 330 0
 319 00a8 7B68     		ldr	r3, [r7, #4]
 320 00aa 1B68     		ldr	r3, [r3]
 321 00ac 4FF6FF72 		movw	r2, #65535
 322 00b0 5A61     		str	r2, [r3, #20]
 331:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->PRER = (uint32_t)0x007F00FF;
 323              		.loc 1 331 0
 324 00b2 7B68     		ldr	r3, [r7, #4]
 325 00b4 1B68     		ldr	r3, [r3]
 326 00b6 274A     		ldr	r2, .L14
 327 00b8 1A61     		str	r2, [r3, #16]
 332:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = (uint32_t)0x00000000;
 328              		.loc 1 332 0
 329 00ba 7B68     		ldr	r3, [r7, #4]
 330 00bc 1B68     		ldr	r3, [r3]
 331 00be 0022     		movs	r2, #0
 332 00c0 DA61     		str	r2, [r3, #28]
 333:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = (uint32_t)0x00000000;
 333              		.loc 1 333 0
 334 00c2 7B68     		ldr	r3, [r7, #4]
 335 00c4 1B68     		ldr	r3, [r3]
 336 00c6 0022     		movs	r2, #0
 337 00c8 1A62     		str	r2, [r3, #32]
 334:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->SHIFTR = (uint32_t)0x00000000;
 338              		.loc 1 334 0
 339 00ca 7B68     		ldr	r3, [r7, #4]
 340 00cc 1B68     		ldr	r3, [r3]
 341 00ce 0022     		movs	r2, #0
 342 00d0 DA62     		str	r2, [r3, #44]
 335:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->CALR = (uint32_t)0x00000000;
 343              		.loc 1 335 0
 344 00d2 7B68     		ldr	r3, [r7, #4]
 345 00d4 1B68     		ldr	r3, [r3]
 346 00d6 0022     		movs	r2, #0
 347 00d8 DA63     		str	r2, [r3, #60]
 336:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = (uint32_t)0x00000000;
 348              		.loc 1 336 0
 349 00da 7B68     		ldr	r3, [r7, #4]
 350 00dc 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cchUBvqp.s 			page 13


 351 00de 0022     		movs	r2, #0
 352 00e0 5A64     		str	r2, [r3, #68]
 337:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = (uint32_t)0x00000000;
 353              		.loc 1 337 0
 354 00e2 7B68     		ldr	r3, [r7, #4]
 355 00e4 1B68     		ldr	r3, [r3]
 356 00e6 0022     		movs	r2, #0
 357 00e8 9A64     		str	r2, [r3, #72]
 338:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 339:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Reset ISR register and exit initialization mode */
 340:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ISR = (uint32_t)0x00000000;
 358              		.loc 1 340 0
 359 00ea 7B68     		ldr	r3, [r7, #4]
 360 00ec 1B68     		ldr	r3, [r3]
 361 00ee 0022     		movs	r2, #0
 362 00f0 DA60     		str	r2, [r3, #12]
 341:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 342:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Reset Tamper and alternate functions configuration register */
 343:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->TAMPCR = 0x00000000;
 363              		.loc 1 343 0
 364 00f2 7B68     		ldr	r3, [r7, #4]
 365 00f4 1B68     		ldr	r3, [r3]
 366 00f6 0022     		movs	r2, #0
 367 00f8 1A64     		str	r2, [r3, #64]
 344:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 345:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Reset Option register */
 346:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->OR = 0x00000000;
 368              		.loc 1 346 0
 369 00fa 7B68     		ldr	r3, [r7, #4]
 370 00fc 1B68     		ldr	r3, [r3]
 371 00fe 0022     		movs	r2, #0
 372 0100 DA64     		str	r2, [r3, #76]
 347:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 348:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 349:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 373              		.loc 1 349 0
 374 0102 7B68     		ldr	r3, [r7, #4]
 375 0104 1B68     		ldr	r3, [r3]
 376 0106 9B68     		ldr	r3, [r3, #8]
 377 0108 03F02003 		and	r3, r3, #32
 378 010c 002B     		cmp	r3, #0
 379 010e 0ED1     		bne	.L13
 350:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 351:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 380              		.loc 1 351 0
 381 0110 7868     		ldr	r0, [r7, #4]
 382 0112 FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 383 0116 0346     		mov	r3, r0
 384 0118 002B     		cmp	r3, #0
 385 011a 08D0     		beq	.L13
 352:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
 353:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 354:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 386              		.loc 1 354 0
 387 011c 7B68     		ldr	r3, [r7, #4]
 388 011e 1B68     		ldr	r3, [r3]
 389 0120 FF22     		movs	r2, #255
ARM GAS  /tmp/cchUBvqp.s 			page 14


 390 0122 5A62     		str	r2, [r3, #36]
 355:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 356:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_ERROR;
 391              		.loc 1 356 0
 392 0124 7B68     		ldr	r3, [r7, #4]
 393 0126 0422     		movs	r2, #4
 394 0128 5A77     		strb	r2, [r3, #29]
 357:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 358:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_ERROR;
 395              		.loc 1 358 0
 396 012a 0123     		movs	r3, #1
 397 012c 0DE0     		b	.L10
 398              	.L13:
 359:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }
 360:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }    
 361:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 362:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 363:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
 364:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 399              		.loc 1 364 0
 400 012e 7B68     		ldr	r3, [r7, #4]
 401 0130 1B68     		ldr	r3, [r3]
 402 0132 FF22     		movs	r2, #255
 403 0134 5A62     		str	r2, [r3, #36]
 365:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 366:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* De-Initialize RTC MSP */
 367:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   HAL_RTC_MspDeInit(hrtc);
 404              		.loc 1 367 0
 405 0136 7868     		ldr	r0, [r7, #4]
 406 0138 FFF7FEFF 		bl	HAL_RTC_MspDeInit
 368:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 369:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_RESET; 
 407              		.loc 1 369 0
 408 013c 7B68     		ldr	r3, [r7, #4]
 409 013e 0022     		movs	r2, #0
 410 0140 5A77     		strb	r2, [r3, #29]
 370:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 371:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Release Lock */
 372:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 411              		.loc 1 372 0
 412 0142 7B68     		ldr	r3, [r7, #4]
 413 0144 0022     		movs	r2, #0
 414 0146 1A77     		strb	r2, [r3, #28]
 373:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 374:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;
 415              		.loc 1 374 0
 416 0148 0023     		movs	r3, #0
 417              	.L10:
 375:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 418              		.loc 1 375 0
 419 014a 1846     		mov	r0, r3
 420 014c 1037     		adds	r7, r7, #16
 421              	.LCFI8:
 422              		.cfi_def_cfa_offset 8
 423 014e BD46     		mov	sp, r7
 424              	.LCFI9:
 425              		.cfi_def_cfa_register 13
ARM GAS  /tmp/cchUBvqp.s 			page 15


 426              		@ sp needed
 427 0150 80BD     		pop	{r7, pc}
 428              	.L15:
 429 0152 00BF     		.align	2
 430              	.L14:
 431 0154 FF007F00 		.word	8323327
 432              		.cfi_endproc
 433              	.LFE139:
 435              		.section	.text.HAL_RTC_MspInit,"ax",%progbits
 436              		.align	1
 437              		.weak	HAL_RTC_MspInit
 438              		.syntax unified
 439              		.thumb
 440              		.thumb_func
 441              		.fpu fpv4-sp-d16
 443              	HAL_RTC_MspInit:
 444              	.LFB140:
 376:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 377:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 378:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Initializes the RTC MSP.
 379:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 380:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.  
 381:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval None
 382:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 383:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** __weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
 384:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 445              		.loc 1 384 0
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 8
 448              		@ frame_needed = 1, uses_anonymous_args = 0
 449              		@ link register save eliminated.
 450 0000 80B4     		push	{r7}
 451              	.LCFI10:
 452              		.cfi_def_cfa_offset 4
 453              		.cfi_offset 7, -4
 454 0002 83B0     		sub	sp, sp, #12
 455              	.LCFI11:
 456              		.cfi_def_cfa_offset 16
 457 0004 00AF     		add	r7, sp, #0
 458              	.LCFI12:
 459              		.cfi_def_cfa_register 7
 460 0006 7860     		str	r0, [r7, #4]
 385:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
 386:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   UNUSED(hrtc);
 387:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 388:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 389:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****             the HAL_RTC_MspInit could be implemented in the user file
 390:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    */ 
 391:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 461              		.loc 1 391 0
 462 0008 00BF     		nop
 463 000a 0C37     		adds	r7, r7, #12
 464              	.LCFI13:
 465              		.cfi_def_cfa_offset 4
 466 000c BD46     		mov	sp, r7
 467              	.LCFI14:
 468              		.cfi_def_cfa_register 13
ARM GAS  /tmp/cchUBvqp.s 			page 16


 469              		@ sp needed
 470 000e 5DF8047B 		ldr	r7, [sp], #4
 471              	.LCFI15:
 472              		.cfi_restore 7
 473              		.cfi_def_cfa_offset 0
 474 0012 7047     		bx	lr
 475              		.cfi_endproc
 476              	.LFE140:
 478              		.section	.text.HAL_RTC_MspDeInit,"ax",%progbits
 479              		.align	1
 480              		.weak	HAL_RTC_MspDeInit
 481              		.syntax unified
 482              		.thumb
 483              		.thumb_func
 484              		.fpu fpv4-sp-d16
 486              	HAL_RTC_MspDeInit:
 487              	.LFB141:
 392:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 393:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 394:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  DeInitializes the RTC MSP.
 395:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 396:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC. 
 397:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval None
 398:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 399:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** __weak void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
 400:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 488              		.loc 1 400 0
 489              		.cfi_startproc
 490              		@ args = 0, pretend = 0, frame = 8
 491              		@ frame_needed = 1, uses_anonymous_args = 0
 492              		@ link register save eliminated.
 493 0000 80B4     		push	{r7}
 494              	.LCFI16:
 495              		.cfi_def_cfa_offset 4
 496              		.cfi_offset 7, -4
 497 0002 83B0     		sub	sp, sp, #12
 498              	.LCFI17:
 499              		.cfi_def_cfa_offset 16
 500 0004 00AF     		add	r7, sp, #0
 501              	.LCFI18:
 502              		.cfi_def_cfa_register 7
 503 0006 7860     		str	r0, [r7, #4]
 401:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
 402:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   UNUSED(hrtc);
 403:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 404:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 405:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****             the HAL_RTC_MspDeInit could be implemented in the user file
 406:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    */ 
 407:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 504              		.loc 1 407 0
 505 0008 00BF     		nop
 506 000a 0C37     		adds	r7, r7, #12
 507              	.LCFI19:
 508              		.cfi_def_cfa_offset 4
 509 000c BD46     		mov	sp, r7
 510              	.LCFI20:
 511              		.cfi_def_cfa_register 13
ARM GAS  /tmp/cchUBvqp.s 			page 17


 512              		@ sp needed
 513 000e 5DF8047B 		ldr	r7, [sp], #4
 514              	.LCFI21:
 515              		.cfi_restore 7
 516              		.cfi_def_cfa_offset 0
 517 0012 7047     		bx	lr
 518              		.cfi_endproc
 519              	.LFE141:
 521              		.section	.text.HAL_RTC_SetTime,"ax",%progbits
 522              		.align	1
 523              		.global	HAL_RTC_SetTime
 524              		.syntax unified
 525              		.thumb
 526              		.thumb_func
 527              		.fpu fpv4-sp-d16
 529              	HAL_RTC_SetTime:
 530              	.LFB142:
 408:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 409:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 410:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @}
 411:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 412:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 413:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /** @defgroup RTC_Group2 RTC Time and Date functions
 414:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *  @brief   RTC Time and Date functions
 415:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *
 416:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @verbatim   
 417:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================
 418:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  ##### RTC Time and Date functions #####
 419:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================  
 420:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  
 421:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  [..] This section provides functions allowing to configure Time and Date features
 422:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 423:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @endverbatim
 424:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @{
 425:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 426:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 427:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 428:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Sets RTC current time.
 429:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 430:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
 431:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  sTime Pointer to Time structure
 432:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 433:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 434:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg FORMAT_BIN: Binary data format 
 435:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg FORMAT_BCD: BCD data format
 436:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 437:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 438:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
 439:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 531              		.loc 1 439 0
 532              		.cfi_startproc
 533              		@ args = 0, pretend = 0, frame = 24
 534              		@ frame_needed = 1, uses_anonymous_args = 0
 535 0000 90B5     		push	{r4, r7, lr}
 536              	.LCFI22:
 537              		.cfi_def_cfa_offset 12
 538              		.cfi_offset 4, -12
ARM GAS  /tmp/cchUBvqp.s 			page 18


 539              		.cfi_offset 7, -8
 540              		.cfi_offset 14, -4
 541 0002 87B0     		sub	sp, sp, #28
 542              	.LCFI23:
 543              		.cfi_def_cfa_offset 40
 544 0004 00AF     		add	r7, sp, #0
 545              	.LCFI24:
 546              		.cfi_def_cfa_register 7
 547 0006 F860     		str	r0, [r7, #12]
 548 0008 B960     		str	r1, [r7, #8]
 549 000a 7A60     		str	r2, [r7, #4]
 440:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tmpreg = 0;
 550              		.loc 1 440 0
 551 000c 0023     		movs	r3, #0
 552 000e 7B61     		str	r3, [r7, #20]
 441:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 442:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  /* Check the parameters */
 443:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 444:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 445:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 446:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 447:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Process Locked */ 
 448:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 553              		.loc 1 448 0
 554 0010 FB68     		ldr	r3, [r7, #12]
 555 0012 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 556 0014 012B     		cmp	r3, #1
 557 0016 01D1     		bne	.L19
 558              		.loc 1 448 0 is_stmt 0 discriminator 1
 559 0018 0223     		movs	r3, #2
 560 001a B0E0     		b	.L20
 561              	.L19:
 562              		.loc 1 448 0 discriminator 2
 563 001c FB68     		ldr	r3, [r7, #12]
 564 001e 0122     		movs	r2, #1
 565 0020 1A77     		strb	r2, [r3, #28]
 449:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 450:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 566              		.loc 1 450 0 is_stmt 1 discriminator 2
 567 0022 FB68     		ldr	r3, [r7, #12]
 568 0024 0222     		movs	r2, #2
 569 0026 5A77     		strb	r2, [r3, #29]
 451:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 452:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 570              		.loc 1 452 0 discriminator 2
 571 0028 7B68     		ldr	r3, [r7, #4]
 572 002a 002B     		cmp	r3, #0
 573 002c 26D1     		bne	.L21
 453:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 454:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 574              		.loc 1 454 0
 575 002e FB68     		ldr	r3, [r7, #12]
 576 0030 1B68     		ldr	r3, [r3]
 577 0032 9B68     		ldr	r3, [r3, #8]
 578 0034 03F04003 		and	r3, r3, #64
 579 0038 002B     		cmp	r3, #0
 580 003a 02D1     		bne	.L22
ARM GAS  /tmp/cchUBvqp.s 			page 19


 455:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 456:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sTime->Hours));
 457:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 458:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     } 
 459:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
 460:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 461:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       sTime->TimeFormat = 0x00;
 581              		.loc 1 461 0
 582 003c BB68     		ldr	r3, [r7, #8]
 583 003e 0022     		movs	r2, #0
 584 0040 1A73     		strb	r2, [r3, #12]
 585              	.L22:
 462:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sTime->Hours));
 463:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 464:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sTime->Minutes));
 465:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sTime->Seconds));
 466:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 467:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 586              		.loc 1 467 0
 587 0042 BB68     		ldr	r3, [r7, #8]
 588 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 589 0046 1846     		mov	r0, r3
 590 0048 FFF7FEFF 		bl	RTC_ByteToBcd2
 591 004c 0346     		mov	r3, r0
 592 004e 1C04     		lsls	r4, r3, #16
 468:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 593              		.loc 1 468 0
 594 0050 BB68     		ldr	r3, [r7, #8]
 595 0052 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 596 0054 1846     		mov	r0, r3
 597 0056 FFF7FEFF 		bl	RTC_ByteToBcd2
 598 005a 0346     		mov	r3, r0
 599 005c 1B02     		lsls	r3, r3, #8
 467:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 600              		.loc 1 467 0
 601 005e 1C43     		orrs	r4, r4, r3
 469:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 602              		.loc 1 469 0
 603 0060 BB68     		ldr	r3, [r7, #8]
 604 0062 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 605 0064 1846     		mov	r0, r3
 606 0066 FFF7FEFF 		bl	RTC_ByteToBcd2
 607 006a 0346     		mov	r3, r0
 468:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 608              		.loc 1 468 0
 609 006c 44EA0302 		orr	r2, r4, r3
 470:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                         (((uint32_t)sTime->TimeFormat) << 16));  
 610              		.loc 1 470 0
 611 0070 BB68     		ldr	r3, [r7, #8]
 612 0072 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 613 0074 1B04     		lsls	r3, r3, #16
 467:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 614              		.loc 1 467 0
 615 0076 1343     		orrs	r3, r3, r2
 616 0078 7B61     		str	r3, [r7, #20]
 617 007a 20E0     		b	.L23
 618              	.L21:
ARM GAS  /tmp/cchUBvqp.s 			page 20


 471:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 472:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
 473:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 474:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 619              		.loc 1 474 0
 620 007c FB68     		ldr	r3, [r7, #12]
 621 007e 1B68     		ldr	r3, [r3]
 622 0080 9B68     		ldr	r3, [r3, #8]
 623 0082 03F04003 		and	r3, r3, #64
 624 0086 002B     		cmp	r3, #0
 625 0088 07D0     		beq	.L24
 475:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 476:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sTime->Hours);
 626              		.loc 1 476 0
 627 008a BB68     		ldr	r3, [r7, #8]
 628 008c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 629 008e 1846     		mov	r0, r3
 630 0090 FFF7FEFF 		bl	RTC_Bcd2ToByte
 631 0094 0346     		mov	r3, r0
 632 0096 7B61     		str	r3, [r7, #20]
 633 0098 02E0     		b	.L25
 634              	.L24:
 477:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 478:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat)); 
 479:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     } 
 480:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
 481:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 482:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       sTime->TimeFormat = 0x00;
 635              		.loc 1 482 0
 636 009a BB68     		ldr	r3, [r7, #8]
 637 009c 0022     		movs	r2, #0
 638 009e 1A73     		strb	r2, [r3, #12]
 639              	.L25:
 483:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 484:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 485:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 486:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 487:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 640              		.loc 1 487 0
 641 00a0 BB68     		ldr	r3, [r7, #8]
 642 00a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 643 00a4 1A04     		lsls	r2, r3, #16
 488:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes) << 8) | \
 644              		.loc 1 488 0
 645 00a6 BB68     		ldr	r3, [r7, #8]
 646 00a8 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 647 00aa 1B02     		lsls	r3, r3, #8
 487:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes) << 8) | \
 648              		.loc 1 487 0
 649 00ac 1343     		orrs	r3, r3, r2
 489:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sTime->Seconds) | \
 650              		.loc 1 489 0
 651 00ae BA68     		ldr	r2, [r7, #8]
 652 00b0 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 488:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes) << 8) | \
 653              		.loc 1 488 0
 654 00b2 1A43     		orrs	r2, r2, r3
ARM GAS  /tmp/cchUBvqp.s 			page 21


 490:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sTime->TimeFormat) << 16));   
 655              		.loc 1 490 0
 656 00b4 BB68     		ldr	r3, [r7, #8]
 657 00b6 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 658 00b8 1B04     		lsls	r3, r3, #16
 487:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes) << 8) | \
 659              		.loc 1 487 0
 660 00ba 1343     		orrs	r3, r3, r2
 661 00bc 7B61     		str	r3, [r7, #20]
 662              	.L23:
 491:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 492:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 493:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 494:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 663              		.loc 1 494 0
 664 00be FB68     		ldr	r3, [r7, #12]
 665 00c0 1B68     		ldr	r3, [r3]
 666 00c2 CA22     		movs	r2, #202
 667 00c4 5A62     		str	r2, [r3, #36]
 668 00c6 FB68     		ldr	r3, [r7, #12]
 669 00c8 1B68     		ldr	r3, [r3]
 670 00ca 5322     		movs	r2, #83
 671 00cc 5A62     		str	r2, [r3, #36]
 495:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 496:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Set Initialization mode */
 497:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
 672              		.loc 1 497 0
 673 00ce F868     		ldr	r0, [r7, #12]
 674 00d0 FFF7FEFF 		bl	RTC_EnterInitMode
 675 00d4 0346     		mov	r3, r0
 676 00d6 002B     		cmp	r3, #0
 677 00d8 0BD0     		beq	.L26
 498:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 499:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 500:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 678              		.loc 1 500 0
 679 00da FB68     		ldr	r3, [r7, #12]
 680 00dc 1B68     		ldr	r3, [r3]
 681 00de FF22     		movs	r2, #255
 682 00e0 5A62     		str	r2, [r3, #36]
 501:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 502:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Set RTC state */
 503:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 683              		.loc 1 503 0
 684 00e2 FB68     		ldr	r3, [r7, #12]
 685 00e4 0422     		movs	r2, #4
 686 00e6 5A77     		strb	r2, [r3, #29]
 504:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 505:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Process Unlocked */ 
 506:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
 687              		.loc 1 506 0
 688 00e8 FB68     		ldr	r3, [r7, #12]
 689 00ea 0022     		movs	r2, #0
 690 00ec 1A77     		strb	r2, [r3, #28]
 507:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 508:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     return HAL_ERROR;
 691              		.loc 1 508 0
ARM GAS  /tmp/cchUBvqp.s 			page 22


 692 00ee 0123     		movs	r3, #1
 693 00f0 45E0     		b	.L20
 694              	.L26:
 509:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   } 
 510:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
 511:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 512:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Set the RTC_TR register */
 513:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 695              		.loc 1 513 0
 696 00f2 FB68     		ldr	r3, [r7, #12]
 697 00f4 1A68     		ldr	r2, [r3]
 698 00f6 7969     		ldr	r1, [r7, #20]
 699 00f8 234B     		ldr	r3, .L28
 700 00fa 0B40     		ands	r3, r3, r1
 701 00fc 1360     		str	r3, [r2]
 514:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****      
 515:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Clear the bits to be configured */
 516:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 702              		.loc 1 516 0
 703 00fe FB68     		ldr	r3, [r7, #12]
 704 0100 1B68     		ldr	r3, [r3]
 705 0102 9A68     		ldr	r2, [r3, #8]
 706 0104 FB68     		ldr	r3, [r7, #12]
 707 0106 1B68     		ldr	r3, [r3]
 708 0108 22F48022 		bic	r2, r2, #262144
 709 010c 9A60     		str	r2, [r3, #8]
 517:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 518:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the RTC_CR register */
 519:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 710              		.loc 1 519 0
 711 010e FB68     		ldr	r3, [r7, #12]
 712 0110 1B68     		ldr	r3, [r3]
 713 0112 9968     		ldr	r1, [r3, #8]
 714 0114 BB68     		ldr	r3, [r7, #8]
 715 0116 1A69     		ldr	r2, [r3, #16]
 716 0118 BB68     		ldr	r3, [r7, #8]
 717 011a 5B69     		ldr	r3, [r3, #20]
 718 011c 1A43     		orrs	r2, r2, r3
 719 011e FB68     		ldr	r3, [r7, #12]
 720 0120 1B68     		ldr	r3, [r3]
 721 0122 0A43     		orrs	r2, r2, r1
 722 0124 9A60     		str	r2, [r3, #8]
 520:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 521:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Exit Initialization mode */
 522:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 723              		.loc 1 522 0
 724 0126 FB68     		ldr	r3, [r7, #12]
 725 0128 1B68     		ldr	r3, [r3]
 726 012a DA68     		ldr	r2, [r3, #12]
 727 012c FB68     		ldr	r3, [r7, #12]
 728 012e 1B68     		ldr	r3, [r3]
 729 0130 22F08002 		bic	r2, r2, #128
 730 0134 DA60     		str	r2, [r3, #12]
 523:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 524:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 525:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 731              		.loc 1 525 0
ARM GAS  /tmp/cchUBvqp.s 			page 23


 732 0136 FB68     		ldr	r3, [r7, #12]
 733 0138 1B68     		ldr	r3, [r3]
 734 013a 9B68     		ldr	r3, [r3, #8]
 735 013c 03F02003 		and	r3, r3, #32
 736 0140 002B     		cmp	r3, #0
 737 0142 11D1     		bne	.L27
 526:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 527:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 738              		.loc 1 527 0
 739 0144 F868     		ldr	r0, [r7, #12]
 740 0146 FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 741 014a 0346     		mov	r3, r0
 742 014c 002B     		cmp	r3, #0
 743 014e 0BD0     		beq	.L27
 528:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {        
 529:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 530:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 744              		.loc 1 530 0
 745 0150 FB68     		ldr	r3, [r7, #12]
 746 0152 1B68     		ldr	r3, [r3]
 747 0154 FF22     		movs	r2, #255
 748 0156 5A62     		str	r2, [r3, #36]
 531:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 532:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_ERROR;
 749              		.loc 1 532 0
 750 0158 FB68     		ldr	r3, [r7, #12]
 751 015a 0422     		movs	r2, #4
 752 015c 5A77     		strb	r2, [r3, #29]
 533:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 534:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */ 
 535:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 753              		.loc 1 535 0
 754 015e FB68     		ldr	r3, [r7, #12]
 755 0160 0022     		movs	r2, #0
 756 0162 1A77     		strb	r2, [r3, #28]
 536:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 537:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_ERROR;
 757              		.loc 1 537 0
 758 0164 0123     		movs	r3, #1
 759 0166 0AE0     		b	.L20
 760              	.L27:
 538:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }
 539:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 540:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 541:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 542:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 761              		.loc 1 542 0
 762 0168 FB68     		ldr	r3, [r7, #12]
 763 016a 1B68     		ldr	r3, [r3]
 764 016c FF22     		movs	r2, #255
 765 016e 5A62     		str	r2, [r3, #36]
 543:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 544:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    hrtc->State = HAL_RTC_STATE_READY;
 766              		.loc 1 544 0
 767 0170 FB68     		ldr	r3, [r7, #12]
 768 0172 0122     		movs	r2, #1
 769 0174 5A77     		strb	r2, [r3, #29]
ARM GAS  /tmp/cchUBvqp.s 			page 24


 545:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 546:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    __HAL_UNLOCK(hrtc); 
 770              		.loc 1 546 0
 771 0176 FB68     		ldr	r3, [r7, #12]
 772 0178 0022     		movs	r2, #0
 773 017a 1A77     		strb	r2, [r3, #28]
 547:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****      
 548:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    return HAL_OK;
 774              		.loc 1 548 0
 775 017c 0023     		movs	r3, #0
 776              	.L20:
 549:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 550:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 777              		.loc 1 550 0
 778 017e 1846     		mov	r0, r3
 779 0180 1C37     		adds	r7, r7, #28
 780              	.LCFI25:
 781              		.cfi_def_cfa_offset 12
 782 0182 BD46     		mov	sp, r7
 783              	.LCFI26:
 784              		.cfi_def_cfa_register 13
 785              		@ sp needed
 786 0184 90BD     		pop	{r4, r7, pc}
 787              	.L29:
 788 0186 00BF     		.align	2
 789              	.L28:
 790 0188 7F7F7F00 		.word	8355711
 791              		.cfi_endproc
 792              	.LFE142:
 794              		.section	.text.HAL_RTC_GetTime,"ax",%progbits
 795              		.align	1
 796              		.global	HAL_RTC_GetTime
 797              		.syntax unified
 798              		.thumb
 799              		.thumb_func
 800              		.fpu fpv4-sp-d16
 802              	HAL_RTC_GetTime:
 803              	.LFB143:
 551:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 552:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 553:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Gets RTC current time.
 554:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc RTC handle
 555:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  sTime Pointer to Time structure with Hours, Minutes and Seconds fields returned 
 556:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                with input format (BIN or BCD), also SubSeconds field returning the
 557:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                RTC_SSR register content and SecondFraction field the Synchronous pre-scaler
 558:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                factor to be used for second fraction ratio computation.
 559:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 560:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 561:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format 
 562:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
 563:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @note  You can use SubSeconds and SecondFraction (sTime structure fields returned) to convert S
 564:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *        value in second fraction ratio with time unit following generic formula:
 565:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *        Second fraction ratio * time_unit= [(SecondFraction-SubSeconds)/(SecondFraction+1)] * ti
 566:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *        This conversion can be performed only if no shift operation is pending (ie. SHFP=0) when
 567:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @note  You must call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values 
 568:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *        in the higher-order calendar shadow registers to ensure consistency between the time and
 569:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *        Reading RTC current time locks the values in calendar shadow registers until Current dat
ARM GAS  /tmp/cchUBvqp.s 			page 25


 570:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *        to ensure consistency between the time and date values.
 571:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 572:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 573:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
 574:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 804              		.loc 1 574 0
 805              		.cfi_startproc
 806              		@ args = 0, pretend = 0, frame = 24
 807              		@ frame_needed = 1, uses_anonymous_args = 0
 808 0000 80B5     		push	{r7, lr}
 809              	.LCFI27:
 810              		.cfi_def_cfa_offset 8
 811              		.cfi_offset 7, -8
 812              		.cfi_offset 14, -4
 813 0002 86B0     		sub	sp, sp, #24
 814              	.LCFI28:
 815              		.cfi_def_cfa_offset 32
 816 0004 00AF     		add	r7, sp, #0
 817              	.LCFI29:
 818              		.cfi_def_cfa_register 7
 819 0006 F860     		str	r0, [r7, #12]
 820 0008 B960     		str	r1, [r7, #8]
 821 000a 7A60     		str	r2, [r7, #4]
 575:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tmpreg = 0;
 822              		.loc 1 575 0
 823 000c 0023     		movs	r3, #0
 824 000e 7B61     		str	r3, [r7, #20]
 576:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 577:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
 578:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 579:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 580:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Get subseconds values from the correspondent registers*/
 581:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 825              		.loc 1 581 0
 826 0010 FB68     		ldr	r3, [r7, #12]
 827 0012 1B68     		ldr	r3, [r3]
 828 0014 9A6A     		ldr	r2, [r3, #40]
 829 0016 BB68     		ldr	r3, [r7, #8]
 830 0018 5A60     		str	r2, [r3, #4]
 582:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 583:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Get SecondFraction structure field from the corresponding register field*/
 584:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 831              		.loc 1 584 0
 832 001a FB68     		ldr	r3, [r7, #12]
 833 001c 1B68     		ldr	r3, [r3]
 834 001e 1B69     		ldr	r3, [r3, #16]
 835 0020 C3F30E02 		ubfx	r2, r3, #0, #15
 836 0024 BB68     		ldr	r3, [r7, #8]
 837 0026 9A60     		str	r2, [r3, #8]
 585:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 586:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Get the TR register */
 587:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 838              		.loc 1 587 0
 839 0028 FB68     		ldr	r3, [r7, #12]
 840 002a 1B68     		ldr	r3, [r3]
 841 002c 1A68     		ldr	r2, [r3]
 842 002e 224B     		ldr	r3, .L33
ARM GAS  /tmp/cchUBvqp.s 			page 26


 843 0030 1340     		ands	r3, r3, r2
 844 0032 7B61     		str	r3, [r7, #20]
 588:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 589:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Fill the structure fields with the read parameters */
 590:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 845              		.loc 1 590 0
 846 0034 7B69     		ldr	r3, [r7, #20]
 847 0036 1B0C     		lsrs	r3, r3, #16
 848 0038 DBB2     		uxtb	r3, r3
 849 003a 03F03F03 		and	r3, r3, #63
 850 003e DAB2     		uxtb	r2, r3
 851 0040 BB68     		ldr	r3, [r7, #8]
 852 0042 1A70     		strb	r2, [r3]
 591:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 853              		.loc 1 591 0
 854 0044 7B69     		ldr	r3, [r7, #20]
 855 0046 1B0A     		lsrs	r3, r3, #8
 856 0048 DBB2     		uxtb	r3, r3
 857 004a 03F07F03 		and	r3, r3, #127
 858 004e DAB2     		uxtb	r2, r3
 859 0050 BB68     		ldr	r3, [r7, #8]
 860 0052 5A70     		strb	r2, [r3, #1]
 592:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 861              		.loc 1 592 0
 862 0054 7B69     		ldr	r3, [r7, #20]
 863 0056 DBB2     		uxtb	r3, r3
 864 0058 03F07F03 		and	r3, r3, #127
 865 005c DAB2     		uxtb	r2, r3
 866 005e BB68     		ldr	r3, [r7, #8]
 867 0060 9A70     		strb	r2, [r3, #2]
 593:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 868              		.loc 1 593 0
 869 0062 7B69     		ldr	r3, [r7, #20]
 870 0064 1B0C     		lsrs	r3, r3, #16
 871 0066 DBB2     		uxtb	r3, r3
 872 0068 03F04003 		and	r3, r3, #64
 873 006c DAB2     		uxtb	r2, r3
 874 006e BB68     		ldr	r3, [r7, #8]
 875 0070 1A73     		strb	r2, [r3, #12]
 594:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 595:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the input parameters format */
 596:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 876              		.loc 1 596 0
 877 0072 7B68     		ldr	r3, [r7, #4]
 878 0074 002B     		cmp	r3, #0
 879 0076 1AD1     		bne	.L31
 597:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 598:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Convert the time structure parameters to Binary format */
 599:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 880              		.loc 1 599 0
 881 0078 BB68     		ldr	r3, [r7, #8]
 882 007a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 883 007c 1846     		mov	r0, r3
 884 007e FFF7FEFF 		bl	RTC_Bcd2ToByte
 885 0082 0346     		mov	r3, r0
 886 0084 1A46     		mov	r2, r3
 887 0086 BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/cchUBvqp.s 			page 27


 888 0088 1A70     		strb	r2, [r3]
 600:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 889              		.loc 1 600 0
 890 008a BB68     		ldr	r3, [r7, #8]
 891 008c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 892 008e 1846     		mov	r0, r3
 893 0090 FFF7FEFF 		bl	RTC_Bcd2ToByte
 894 0094 0346     		mov	r3, r0
 895 0096 1A46     		mov	r2, r3
 896 0098 BB68     		ldr	r3, [r7, #8]
 897 009a 5A70     		strb	r2, [r3, #1]
 601:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 898              		.loc 1 601 0
 899 009c BB68     		ldr	r3, [r7, #8]
 900 009e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 901 00a0 1846     		mov	r0, r3
 902 00a2 FFF7FEFF 		bl	RTC_Bcd2ToByte
 903 00a6 0346     		mov	r3, r0
 904 00a8 1A46     		mov	r2, r3
 905 00aa BB68     		ldr	r3, [r7, #8]
 906 00ac 9A70     		strb	r2, [r3, #2]
 907              	.L31:
 602:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 603:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 604:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;
 908              		.loc 1 604 0
 909 00ae 0023     		movs	r3, #0
 605:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 910              		.loc 1 605 0
 911 00b0 1846     		mov	r0, r3
 912 00b2 1837     		adds	r7, r7, #24
 913              	.LCFI30:
 914              		.cfi_def_cfa_offset 8
 915 00b4 BD46     		mov	sp, r7
 916              	.LCFI31:
 917              		.cfi_def_cfa_register 13
 918              		@ sp needed
 919 00b6 80BD     		pop	{r7, pc}
 920              	.L34:
 921              		.align	2
 922              	.L33:
 923 00b8 7F7F7F00 		.word	8355711
 924              		.cfi_endproc
 925              	.LFE143:
 927              		.section	.text.HAL_RTC_SetDate,"ax",%progbits
 928              		.align	1
 929              		.global	HAL_RTC_SetDate
 930              		.syntax unified
 931              		.thumb
 932              		.thumb_func
 933              		.fpu fpv4-sp-d16
 935              	HAL_RTC_SetDate:
 936              	.LFB144:
 606:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 607:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 608:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Sets RTC current date.
 609:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
ARM GAS  /tmp/cchUBvqp.s 			page 28


 610:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
 611:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  sDate Pointer to date structure
 612:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Format specifies the format of the entered parameters.
 613:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 614:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format 
 615:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
 616:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 617:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 618:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
 619:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 937              		.loc 1 619 0
 938              		.cfi_startproc
 939              		@ args = 0, pretend = 0, frame = 24
 940              		@ frame_needed = 1, uses_anonymous_args = 0
 941 0000 90B5     		push	{r4, r7, lr}
 942              	.LCFI32:
 943              		.cfi_def_cfa_offset 12
 944              		.cfi_offset 4, -12
 945              		.cfi_offset 7, -8
 946              		.cfi_offset 14, -4
 947 0002 87B0     		sub	sp, sp, #28
 948              	.LCFI33:
 949              		.cfi_def_cfa_offset 40
 950 0004 00AF     		add	r7, sp, #0
 951              	.LCFI34:
 952              		.cfi_def_cfa_register 7
 953 0006 F860     		str	r0, [r7, #12]
 954 0008 B960     		str	r1, [r7, #8]
 955 000a 7A60     		str	r2, [r7, #4]
 620:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t datetmpreg = 0;
 956              		.loc 1 620 0
 957 000c 0023     		movs	r3, #0
 958 000e 7B61     		str	r3, [r7, #20]
 621:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 622:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  /* Check the parameters */
 623:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 624:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 625:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  /* Process Locked */ 
 626:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  __HAL_LOCK(hrtc);
 959              		.loc 1 626 0
 960 0010 FB68     		ldr	r3, [r7, #12]
 961 0012 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 962 0014 012B     		cmp	r3, #1
 963 0016 01D1     		bne	.L36
 964              		.loc 1 626 0 is_stmt 0 discriminator 1
 965 0018 0223     		movs	r3, #2
 966 001a 92E0     		b	.L37
 967              	.L36:
 968              		.loc 1 626 0 discriminator 2
 969 001c FB68     		ldr	r3, [r7, #12]
 970 001e 0122     		movs	r2, #1
 971 0020 1A77     		strb	r2, [r3, #28]
 627:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 628:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY; 
 972              		.loc 1 628 0 is_stmt 1 discriminator 2
 973 0022 FB68     		ldr	r3, [r7, #12]
 974 0024 0222     		movs	r2, #2
ARM GAS  /tmp/cchUBvqp.s 			page 29


 975 0026 5A77     		strb	r2, [r3, #29]
 629:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 630:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 976              		.loc 1 630 0 discriminator 2
 977 0028 7B68     		ldr	r3, [r7, #4]
 978 002a 002B     		cmp	r3, #0
 979 002c 0ED1     		bne	.L38
 980              		.loc 1 630 0 is_stmt 0 discriminator 1
 981 002e BB68     		ldr	r3, [r7, #8]
 982 0030 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 983 0032 03F01003 		and	r3, r3, #16
 984 0036 002B     		cmp	r3, #0
 985 0038 08D0     		beq	.L38
 631:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 632:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 986              		.loc 1 632 0 is_stmt 1
 987 003a BB68     		ldr	r3, [r7, #8]
 988 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 989 003e 23F01003 		bic	r3, r3, #16
 990 0042 DBB2     		uxtb	r3, r3
 991 0044 0A33     		adds	r3, r3, #10
 992 0046 DAB2     		uxtb	r2, r3
 993 0048 BB68     		ldr	r3, [r7, #8]
 994 004a 5A70     		strb	r2, [r3, #1]
 995              	.L38:
 633:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 634:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 635:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 636:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 637:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 996              		.loc 1 637 0
 997 004c 7B68     		ldr	r3, [r7, #4]
 998 004e 002B     		cmp	r3, #0
 999 0050 1CD1     		bne	.L39
 638:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {   
 639:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_YEAR(sDate->Year));
 640:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MONTH(sDate->Month));
 641:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_DATE(sDate->Date)); 
 642:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 643:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 1000              		.loc 1 643 0
 1001 0052 BB68     		ldr	r3, [r7, #8]
 1002 0054 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1003 0056 1846     		mov	r0, r3
 1004 0058 FFF7FEFF 		bl	RTC_ByteToBcd2
 1005 005c 0346     		mov	r3, r0
 1006 005e 1C04     		lsls	r4, r3, #16
 644:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 1007              		.loc 1 644 0
 1008 0060 BB68     		ldr	r3, [r7, #8]
 1009 0062 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1010 0064 1846     		mov	r0, r3
 1011 0066 FFF7FEFF 		bl	RTC_ByteToBcd2
 1012 006a 0346     		mov	r3, r0
 1013 006c 1B02     		lsls	r3, r3, #8
 643:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 1014              		.loc 1 643 0
ARM GAS  /tmp/cchUBvqp.s 			page 30


 1015 006e 1C43     		orrs	r4, r4, r3
 645:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 1016              		.loc 1 645 0
 1017 0070 BB68     		ldr	r3, [r7, #8]
 1018 0072 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1019 0074 1846     		mov	r0, r3
 1020 0076 FFF7FEFF 		bl	RTC_ByteToBcd2
 1021 007a 0346     		mov	r3, r0
 644:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 1022              		.loc 1 644 0
 1023 007c 44EA0302 		orr	r2, r4, r3
 646:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  ((uint32_t)sDate->WeekDay << 13));   
 1024              		.loc 1 646 0
 1025 0080 BB68     		ldr	r3, [r7, #8]
 1026 0082 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1027 0084 5B03     		lsls	r3, r3, #13
 643:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 1028              		.loc 1 643 0
 1029 0086 1343     		orrs	r3, r3, r2
 1030 0088 7B61     		str	r3, [r7, #20]
 1031 008a 0EE0     		b	.L40
 1032              	.L39:
 647:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 648:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
 649:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {   
 650:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 651:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MONTH(sDate->Month));
 652:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_DATE(sDate->Date));
 653:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 654:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 1033              		.loc 1 654 0
 1034 008c BB68     		ldr	r3, [r7, #8]
 1035 008e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1036 0090 1A04     		lsls	r2, r3, #16
 655:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << 8) | \
 1037              		.loc 1 655 0
 1038 0092 BB68     		ldr	r3, [r7, #8]
 1039 0094 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1040 0096 1B02     		lsls	r3, r3, #8
 654:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << 8) | \
 1041              		.loc 1 654 0
 1042 0098 1343     		orrs	r3, r3, r2
 656:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                   ((uint32_t)sDate->Date) | \
 1043              		.loc 1 656 0
 1044 009a BA68     		ldr	r2, [r7, #8]
 1045 009c 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 655:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << 8) | \
 1046              		.loc 1 655 0
 1047 009e 1A43     		orrs	r2, r2, r3
 657:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                   (((uint32_t)sDate->WeekDay) << 13));  
 1048              		.loc 1 657 0
 1049 00a0 BB68     		ldr	r3, [r7, #8]
 1050 00a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1051 00a4 5B03     		lsls	r3, r3, #13
 654:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << 8) | \
 1052              		.loc 1 654 0
 1053 00a6 1343     		orrs	r3, r3, r2
ARM GAS  /tmp/cchUBvqp.s 			page 31


 1054 00a8 7B61     		str	r3, [r7, #20]
 1055              	.L40:
 658:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 659:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 660:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 661:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 1056              		.loc 1 661 0
 1057 00aa FB68     		ldr	r3, [r7, #12]
 1058 00ac 1B68     		ldr	r3, [r3]
 1059 00ae CA22     		movs	r2, #202
 1060 00b0 5A62     		str	r2, [r3, #36]
 1061 00b2 FB68     		ldr	r3, [r7, #12]
 1062 00b4 1B68     		ldr	r3, [r3]
 1063 00b6 5322     		movs	r2, #83
 1064 00b8 5A62     		str	r2, [r3, #36]
 662:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 663:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Set Initialization mode */
 664:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
 1065              		.loc 1 664 0
 1066 00ba F868     		ldr	r0, [r7, #12]
 1067 00bc FFF7FEFF 		bl	RTC_EnterInitMode
 1068 00c0 0346     		mov	r3, r0
 1069 00c2 002B     		cmp	r3, #0
 1070 00c4 0BD0     		beq	.L41
 665:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 666:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 667:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 1071              		.loc 1 667 0
 1072 00c6 FB68     		ldr	r3, [r7, #12]
 1073 00c8 1B68     		ldr	r3, [r3]
 1074 00ca FF22     		movs	r2, #255
 1075 00cc 5A62     		str	r2, [r3, #36]
 668:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 669:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Set RTC state*/
 670:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 1076              		.loc 1 670 0
 1077 00ce FB68     		ldr	r3, [r7, #12]
 1078 00d0 0422     		movs	r2, #4
 1079 00d2 5A77     		strb	r2, [r3, #29]
 671:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 672:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Process Unlocked */ 
 673:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
 1080              		.loc 1 673 0
 1081 00d4 FB68     		ldr	r3, [r7, #12]
 1082 00d6 0022     		movs	r2, #0
 1083 00d8 1A77     		strb	r2, [r3, #28]
 674:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 675:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     return HAL_ERROR;
 1084              		.loc 1 675 0
 1085 00da 0123     		movs	r3, #1
 1086 00dc 31E0     		b	.L37
 1087              	.L41:
 676:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   } 
 677:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
 678:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Set the RTC_DR register */
 680:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
ARM GAS  /tmp/cchUBvqp.s 			page 32


 1088              		.loc 1 680 0
 1089 00de FB68     		ldr	r3, [r7, #12]
 1090 00e0 1A68     		ldr	r2, [r3]
 1091 00e2 7969     		ldr	r1, [r7, #20]
 1092 00e4 194B     		ldr	r3, .L43
 1093 00e6 0B40     		ands	r3, r3, r1
 1094 00e8 5360     		str	r3, [r2, #4]
 681:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 682:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Exit Initialization mode */
 683:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 1095              		.loc 1 683 0
 1096 00ea FB68     		ldr	r3, [r7, #12]
 1097 00ec 1B68     		ldr	r3, [r3]
 1098 00ee DA68     		ldr	r2, [r3, #12]
 1099 00f0 FB68     		ldr	r3, [r7, #12]
 1100 00f2 1B68     		ldr	r3, [r3]
 1101 00f4 22F08002 		bic	r2, r2, #128
 1102 00f8 DA60     		str	r2, [r3, #12]
 684:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 685:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 686:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 1103              		.loc 1 686 0
 1104 00fa FB68     		ldr	r3, [r7, #12]
 1105 00fc 1B68     		ldr	r3, [r3]
 1106 00fe 9B68     		ldr	r3, [r3, #8]
 1107 0100 03F02003 		and	r3, r3, #32
 1108 0104 002B     		cmp	r3, #0
 1109 0106 11D1     		bne	.L42
 687:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 688:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 1110              		.loc 1 688 0
 1111 0108 F868     		ldr	r0, [r7, #12]
 1112 010a FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 1113 010e 0346     		mov	r3, r0
 1114 0110 002B     		cmp	r3, #0
 1115 0112 0BD0     		beq	.L42
 689:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       { 
 690:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 691:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 1116              		.loc 1 691 0
 1117 0114 FB68     		ldr	r3, [r7, #12]
 1118 0116 1B68     		ldr	r3, [r3]
 1119 0118 FF22     		movs	r2, #255
 1120 011a 5A62     		str	r2, [r3, #36]
 692:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 693:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_ERROR;
 1121              		.loc 1 693 0
 1122 011c FB68     		ldr	r3, [r7, #12]
 1123 011e 0422     		movs	r2, #4
 1124 0120 5A77     		strb	r2, [r3, #29]
 694:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 695:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */ 
 696:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 1125              		.loc 1 696 0
 1126 0122 FB68     		ldr	r3, [r7, #12]
 1127 0124 0022     		movs	r2, #0
 1128 0126 1A77     		strb	r2, [r3, #28]
ARM GAS  /tmp/cchUBvqp.s 			page 33


 697:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 698:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_ERROR;
 1129              		.loc 1 698 0
 1130 0128 0123     		movs	r3, #1
 1131 012a 0AE0     		b	.L37
 1132              	.L42:
 699:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }
 700:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 701:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 702:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 703:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 1133              		.loc 1 703 0
 1134 012c FB68     		ldr	r3, [r7, #12]
 1135 012e 1B68     		ldr	r3, [r3]
 1136 0130 FF22     		movs	r2, #255
 1137 0132 5A62     		str	r2, [r3, #36]
 704:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 705:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_READY ;
 1138              		.loc 1 705 0
 1139 0134 FB68     		ldr	r3, [r7, #12]
 1140 0136 0122     		movs	r2, #1
 1141 0138 5A77     		strb	r2, [r3, #29]
 706:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 707:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Process Unlocked */ 
 708:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
 1142              		.loc 1 708 0
 1143 013a FB68     		ldr	r3, [r7, #12]
 1144 013c 0022     		movs	r2, #0
 1145 013e 1A77     		strb	r2, [r3, #28]
 709:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 710:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     return HAL_OK;    
 1146              		.loc 1 710 0
 1147 0140 0023     		movs	r3, #0
 1148              	.L37:
 711:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 712:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 1149              		.loc 1 712 0
 1150 0142 1846     		mov	r0, r3
 1151 0144 1C37     		adds	r7, r7, #28
 1152              	.LCFI35:
 1153              		.cfi_def_cfa_offset 12
 1154 0146 BD46     		mov	sp, r7
 1155              	.LCFI36:
 1156              		.cfi_def_cfa_register 13
 1157              		@ sp needed
 1158 0148 90BD     		pop	{r4, r7, pc}
 1159              	.L44:
 1160 014a 00BF     		.align	2
 1161              	.L43:
 1162 014c 3FFFFF00 		.word	16777023
 1163              		.cfi_endproc
 1164              	.LFE144:
 1166              		.section	.text.HAL_RTC_GetDate,"ax",%progbits
 1167              		.align	1
 1168              		.global	HAL_RTC_GetDate
 1169              		.syntax unified
 1170              		.thumb
ARM GAS  /tmp/cchUBvqp.s 			page 34


 1171              		.thumb_func
 1172              		.fpu fpv4-sp-d16
 1174              	HAL_RTC_GetDate:
 1175              	.LFB145:
 713:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 714:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 715:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Gets RTC current date.
 716:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 717:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
 718:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  sDate Pointer to Date structure
 719:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 720:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 721:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN:  Binary data format 
 722:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD:  BCD data format
 723:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @note You must call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values 
 724:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * in the higher-order calendar shadow registers to ensure consistency between the time and date v
 725:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * Reading RTC current time locks the values in calendar shadow registers until Current date is re
 726:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 727:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 728:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
 729:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 1176              		.loc 1 729 0
 1177              		.cfi_startproc
 1178              		@ args = 0, pretend = 0, frame = 24
 1179              		@ frame_needed = 1, uses_anonymous_args = 0
 1180 0000 80B5     		push	{r7, lr}
 1181              	.LCFI37:
 1182              		.cfi_def_cfa_offset 8
 1183              		.cfi_offset 7, -8
 1184              		.cfi_offset 14, -4
 1185 0002 86B0     		sub	sp, sp, #24
 1186              	.LCFI38:
 1187              		.cfi_def_cfa_offset 32
 1188 0004 00AF     		add	r7, sp, #0
 1189              	.LCFI39:
 1190              		.cfi_def_cfa_register 7
 1191 0006 F860     		str	r0, [r7, #12]
 1192 0008 B960     		str	r1, [r7, #8]
 1193 000a 7A60     		str	r2, [r7, #4]
 730:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t datetmpreg = 0;
 1194              		.loc 1 730 0
 1195 000c 0023     		movs	r3, #0
 1196 000e 7B61     		str	r3, [r7, #20]
 731:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 732:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
 733:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 734:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****           
 735:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Get the DR register */
 736:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 1197              		.loc 1 736 0
 1198 0010 FB68     		ldr	r3, [r7, #12]
 1199 0012 1B68     		ldr	r3, [r3]
 1200 0014 5A68     		ldr	r2, [r3, #4]
 1201 0016 214B     		ldr	r3, .L48
 1202 0018 1340     		ands	r3, r3, r2
 1203 001a 7B61     		str	r3, [r7, #20]
 737:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
ARM GAS  /tmp/cchUBvqp.s 			page 35


 738:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Fill the structure fields with the read parameters */
 739:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 1204              		.loc 1 739 0
 1205 001c 7B69     		ldr	r3, [r7, #20]
 1206 001e 1B0C     		lsrs	r3, r3, #16
 1207 0020 DAB2     		uxtb	r2, r3
 1208 0022 BB68     		ldr	r3, [r7, #8]
 1209 0024 DA70     		strb	r2, [r3, #3]
 740:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1210              		.loc 1 740 0
 1211 0026 7B69     		ldr	r3, [r7, #20]
 1212 0028 1B0A     		lsrs	r3, r3, #8
 1213 002a DBB2     		uxtb	r3, r3
 1214 002c 03F01F03 		and	r3, r3, #31
 1215 0030 DAB2     		uxtb	r2, r3
 1216 0032 BB68     		ldr	r3, [r7, #8]
 1217 0034 5A70     		strb	r2, [r3, #1]
 741:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 1218              		.loc 1 741 0
 1219 0036 7B69     		ldr	r3, [r7, #20]
 1220 0038 DBB2     		uxtb	r3, r3
 1221 003a 03F03F03 		and	r3, r3, #63
 1222 003e DAB2     		uxtb	r2, r3
 1223 0040 BB68     		ldr	r3, [r7, #8]
 1224 0042 9A70     		strb	r2, [r3, #2]
 742:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 1225              		.loc 1 742 0
 1226 0044 7B69     		ldr	r3, [r7, #20]
 1227 0046 5B0B     		lsrs	r3, r3, #13
 1228 0048 DBB2     		uxtb	r3, r3
 1229 004a 03F00703 		and	r3, r3, #7
 1230 004e DAB2     		uxtb	r2, r3
 1231 0050 BB68     		ldr	r3, [r7, #8]
 1232 0052 1A70     		strb	r2, [r3]
 743:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 744:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the input parameters format */
 745:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 1233              		.loc 1 745 0
 1234 0054 7B68     		ldr	r3, [r7, #4]
 1235 0056 002B     		cmp	r3, #0
 1236 0058 1AD1     		bne	.L46
 746:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {    
 747:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Convert the date structure parameters to Binary format */
 748:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 1237              		.loc 1 748 0
 1238 005a BB68     		ldr	r3, [r7, #8]
 1239 005c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1240 005e 1846     		mov	r0, r3
 1241 0060 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1242 0064 0346     		mov	r3, r0
 1243 0066 1A46     		mov	r2, r3
 1244 0068 BB68     		ldr	r3, [r7, #8]
 1245 006a DA70     		strb	r2, [r3, #3]
 749:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 1246              		.loc 1 749 0
 1247 006c BB68     		ldr	r3, [r7, #8]
 1248 006e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
ARM GAS  /tmp/cchUBvqp.s 			page 36


 1249 0070 1846     		mov	r0, r3
 1250 0072 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1251 0076 0346     		mov	r3, r0
 1252 0078 1A46     		mov	r2, r3
 1253 007a BB68     		ldr	r3, [r7, #8]
 1254 007c 5A70     		strb	r2, [r3, #1]
 750:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 1255              		.loc 1 750 0
 1256 007e BB68     		ldr	r3, [r7, #8]
 1257 0080 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1258 0082 1846     		mov	r0, r3
 1259 0084 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1260 0088 0346     		mov	r3, r0
 1261 008a 1A46     		mov	r2, r3
 1262 008c BB68     		ldr	r3, [r7, #8]
 1263 008e 9A70     		strb	r2, [r3, #2]
 1264              	.L46:
 751:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 752:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;
 1265              		.loc 1 752 0
 1266 0090 0023     		movs	r3, #0
 753:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 1267              		.loc 1 753 0
 1268 0092 1846     		mov	r0, r3
 1269 0094 1837     		adds	r7, r7, #24
 1270              	.LCFI40:
 1271              		.cfi_def_cfa_offset 8
 1272 0096 BD46     		mov	sp, r7
 1273              	.LCFI41:
 1274              		.cfi_def_cfa_register 13
 1275              		@ sp needed
 1276 0098 80BD     		pop	{r7, pc}
 1277              	.L49:
 1278 009a 00BF     		.align	2
 1279              	.L48:
 1280 009c 3FFFFF00 		.word	16777023
 1281              		.cfi_endproc
 1282              	.LFE145:
 1284              		.section	.text.HAL_RTC_SetAlarm,"ax",%progbits
 1285              		.align	1
 1286              		.global	HAL_RTC_SetAlarm
 1287              		.syntax unified
 1288              		.thumb
 1289              		.thumb_func
 1290              		.fpu fpv4-sp-d16
 1292              	HAL_RTC_SetAlarm:
 1293              	.LFB146:
 754:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 755:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 756:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @}
 757:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 758:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 759:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /** @defgroup RTC_Group3 RTC Alarm functions
 760:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *  @brief   RTC Alarm functions
 761:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *
 762:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @verbatim   
 763:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================
ARM GAS  /tmp/cchUBvqp.s 			page 37


 764:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  ##### RTC Alarm functions #####
 765:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================  
 766:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  
 767:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  [..] This section provides functions allowing to configure Alarm feature
 768:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 769:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @endverbatim
 770:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @{
 771:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 772:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 773:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Sets the specified RTC Alarm.
 774:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 775:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
 776:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  sAlarm Pointer to Alarm structure
 777:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 778:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 779:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *             @arg FORMAT_BIN: Binary data format 
 780:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *             @arg FORMAT_BCD: BCD data format
 781:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 782:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 783:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Form
 784:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 1294              		.loc 1 784 0
 1295              		.cfi_startproc
 1296              		@ args = 0, pretend = 0, frame = 32
 1297              		@ frame_needed = 1, uses_anonymous_args = 0
 1298 0000 90B5     		push	{r4, r7, lr}
 1299              	.LCFI42:
 1300              		.cfi_def_cfa_offset 12
 1301              		.cfi_offset 4, -12
 1302              		.cfi_offset 7, -8
 1303              		.cfi_offset 14, -4
 1304 0002 89B0     		sub	sp, sp, #36
 1305              	.LCFI43:
 1306              		.cfi_def_cfa_offset 48
 1307 0004 00AF     		add	r7, sp, #0
 1308              	.LCFI44:
 1309              		.cfi_def_cfa_register 7
 1310 0006 F860     		str	r0, [r7, #12]
 1311 0008 B960     		str	r1, [r7, #8]
 1312 000a 7A60     		str	r2, [r7, #4]
 785:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tickstart = 0;
 1313              		.loc 1 785 0
 1314 000c 0023     		movs	r3, #0
 1315 000e BB61     		str	r3, [r7, #24]
 786:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tmpreg = 0, subsecondtmpreg = 0;
 1316              		.loc 1 786 0
 1317 0010 0023     		movs	r3, #0
 1318 0012 FB61     		str	r3, [r7, #28]
 1319 0014 0023     		movs	r3, #0
 1320 0016 7B61     		str	r3, [r7, #20]
 787:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
 789:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 790:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 791:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 792:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 793:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
ARM GAS  /tmp/cchUBvqp.s 			page 38


 794:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 795:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 796:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Process Locked */ 
 797:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 1321              		.loc 1 797 0
 1322 0018 FB68     		ldr	r3, [r7, #12]
 1323 001a 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 1324 001c 012B     		cmp	r3, #1
 1325 001e 01D1     		bne	.L51
 1326              		.loc 1 797 0 is_stmt 0 discriminator 1
 1327 0020 0223     		movs	r3, #2
 1328 0022 1EE1     		b	.L52
 1329              	.L51:
 1330              		.loc 1 797 0 discriminator 2
 1331 0024 FB68     		ldr	r3, [r7, #12]
 1332 0026 0122     		movs	r2, #1
 1333 0028 1A77     		strb	r2, [r3, #28]
 798:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 799:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 1334              		.loc 1 799 0 is_stmt 1 discriminator 2
 1335 002a FB68     		ldr	r3, [r7, #12]
 1336 002c 0222     		movs	r2, #2
 1337 002e 5A77     		strb	r2, [r3, #29]
 800:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 801:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 1338              		.loc 1 801 0 discriminator 2
 1339 0030 7B68     		ldr	r3, [r7, #4]
 1340 0032 002B     		cmp	r3, #0
 1341 0034 37D1     		bne	.L53
 802:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 803:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1342              		.loc 1 803 0
 1343 0036 FB68     		ldr	r3, [r7, #12]
 1344 0038 1B68     		ldr	r3, [r3]
 1345 003a 9B68     		ldr	r3, [r3, #8]
 1346 003c 03F04003 		and	r3, r3, #64
 1347 0040 002B     		cmp	r3, #0
 1348 0042 02D1     		bne	.L54
 804:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 805:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 806:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 807:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     } 
 808:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
 809:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 810:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00;
 1349              		.loc 1 810 0
 1350 0044 BB68     		ldr	r3, [r7, #8]
 1351 0046 0022     		movs	r2, #0
 1352 0048 1A73     		strb	r2, [r3, #12]
 1353              	.L54:
 811:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 812:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 813:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 814:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 815:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 816:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 817:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
ARM GAS  /tmp/cchUBvqp.s 			page 39


 818:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 819:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 820:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
 821:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 822:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
 823:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 824:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 825:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 1354              		.loc 1 825 0
 1355 004a BB68     		ldr	r3, [r7, #8]
 1356 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1357 004e 1846     		mov	r0, r3
 1358 0050 FFF7FEFF 		bl	RTC_ByteToBcd2
 1359 0054 0346     		mov	r3, r0
 1360 0056 1C04     		lsls	r4, r3, #16
 826:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 1361              		.loc 1 826 0
 1362 0058 BB68     		ldr	r3, [r7, #8]
 1363 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1364 005c 1846     		mov	r0, r3
 1365 005e FFF7FEFF 		bl	RTC_ByteToBcd2
 1366 0062 0346     		mov	r3, r0
 1367 0064 1B02     		lsls	r3, r3, #8
 825:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 1368              		.loc 1 825 0
 1369 0066 1C43     		orrs	r4, r4, r3
 827:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 1370              		.loc 1 827 0
 1371 0068 BB68     		ldr	r3, [r7, #8]
 1372 006a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1373 006c 1846     		mov	r0, r3
 1374 006e FFF7FEFF 		bl	RTC_ByteToBcd2
 1375 0072 0346     		mov	r3, r0
 826:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 1376              		.loc 1 826 0
 1377 0074 44EA0302 		orr	r2, r4, r3
 828:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 1378              		.loc 1 828 0
 1379 0078 BB68     		ldr	r3, [r7, #8]
 1380 007a 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1381 007c 1B04     		lsls	r3, r3, #16
 827:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 1382              		.loc 1 827 0
 1383 007e 42EA0304 		orr	r4, r2, r3
 829:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 1384              		.loc 1 829 0
 1385 0082 BB68     		ldr	r3, [r7, #8]
 1386 0084 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1387 0088 1846     		mov	r0, r3
 1388 008a FFF7FEFF 		bl	RTC_ByteToBcd2
 1389 008e 0346     		mov	r3, r0
 1390 0090 1B06     		lsls	r3, r3, #24
 828:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 1391              		.loc 1 828 0
 1392 0092 44EA0302 		orr	r2, r4, r3
 830:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1393              		.loc 1 830 0
ARM GAS  /tmp/cchUBvqp.s 			page 40


 1394 0096 BB68     		ldr	r3, [r7, #8]
 1395 0098 1B6A     		ldr	r3, [r3, #32]
 829:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 1396              		.loc 1 829 0
 1397 009a 1A43     		orrs	r2, r2, r3
 831:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask)); 
 1398              		.loc 1 831 0
 1399 009c BB68     		ldr	r3, [r7, #8]
 1400 009e 9B69     		ldr	r3, [r3, #24]
 825:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 1401              		.loc 1 825 0
 1402 00a0 1343     		orrs	r3, r3, r2
 1403 00a2 FB61     		str	r3, [r7, #28]
 1404 00a4 40E0     		b	.L55
 1405              	.L53:
 832:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 833:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
 834:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 835:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1406              		.loc 1 835 0
 1407 00a6 FB68     		ldr	r3, [r7, #12]
 1408 00a8 1B68     		ldr	r3, [r3]
 1409 00aa 9B68     		ldr	r3, [r3, #8]
 1410 00ac 03F04003 		and	r3, r3, #64
 1411 00b0 002B     		cmp	r3, #0
 1412 00b2 07D0     		beq	.L56
 836:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 837:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 1413              		.loc 1 837 0
 1414 00b4 BB68     		ldr	r3, [r7, #8]
 1415 00b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1416 00b8 1846     		mov	r0, r3
 1417 00ba FFF7FEFF 		bl	RTC_Bcd2ToByte
 1418 00be 0346     		mov	r3, r0
 1419 00c0 FB61     		str	r3, [r7, #28]
 1420 00c2 02E0     		b	.L57
 1421              	.L56:
 838:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 839:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 840:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     } 
 841:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
 842:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 843:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00;
 1422              		.loc 1 843 0
 1423 00c4 BB68     		ldr	r3, [r7, #8]
 1424 00c6 0022     		movs	r2, #0
 1425 00c8 1A73     		strb	r2, [r3, #12]
 1426              	.L57:
 844:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 845:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 846:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 847:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 848:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 849:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 850:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 1427              		.loc 1 850 0
 1428 00ca BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/cchUBvqp.s 			page 41


 1429 00cc 1B6A     		ldr	r3, [r3, #32]
 1430 00ce 002B     		cmp	r3, #0
 1431 00d0 08D1     		bne	.L58
 851:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 852:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 1432              		.loc 1 852 0
 1433 00d2 BB68     		ldr	r3, [r7, #8]
 1434 00d4 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1435 00d8 1846     		mov	r0, r3
 1436 00da FFF7FEFF 		bl	RTC_Bcd2ToByte
 1437 00de 0346     		mov	r3, r0
 1438 00e0 FB61     		str	r3, [r7, #28]
 1439 00e2 07E0     		b	.L59
 1440              	.L58:
 853:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
 854:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 855:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
 856:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 857:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 1441              		.loc 1 857 0
 1442 00e4 BB68     		ldr	r3, [r7, #8]
 1443 00e6 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1444 00ea 1846     		mov	r0, r3
 1445 00ec FFF7FEFF 		bl	RTC_Bcd2ToByte
 1446 00f0 0346     		mov	r3, r0
 1447 00f2 FB61     		str	r3, [r7, #28]
 1448              	.L59:
 858:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
 859:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }  
 860:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 861:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 1449              		.loc 1 861 0
 1450 00f4 BB68     		ldr	r3, [r7, #8]
 1451 00f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1452 00f8 1A04     		lsls	r2, r3, #16
 862:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 1453              		.loc 1 862 0
 1454 00fa BB68     		ldr	r3, [r7, #8]
 1455 00fc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1456 00fe 1B02     		lsls	r3, r3, #8
 861:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 1457              		.loc 1 861 0
 1458 0100 1343     		orrs	r3, r3, r2
 863:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 1459              		.loc 1 863 0
 1460 0102 BA68     		ldr	r2, [r7, #8]
 1461 0104 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 862:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 1462              		.loc 1 862 0
 1463 0106 1A43     		orrs	r2, r2, r3
 864:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 1464              		.loc 1 864 0
 1465 0108 BB68     		ldr	r3, [r7, #8]
 1466 010a 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1467 010c 1B04     		lsls	r3, r3, #16
 863:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 1468              		.loc 1 863 0
ARM GAS  /tmp/cchUBvqp.s 			page 42


 1469 010e 1A43     		orrs	r2, r2, r3
 865:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 1470              		.loc 1 865 0
 1471 0110 BB68     		ldr	r3, [r7, #8]
 1472 0112 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1473 0116 1B06     		lsls	r3, r3, #24
 864:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 1474              		.loc 1 864 0
 1475 0118 1A43     		orrs	r2, r2, r3
 866:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1476              		.loc 1 866 0
 1477 011a BB68     		ldr	r3, [r7, #8]
 1478 011c 1B6A     		ldr	r3, [r3, #32]
 865:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 1479              		.loc 1 865 0
 1480 011e 1A43     		orrs	r2, r2, r3
 867:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));   
 1481              		.loc 1 867 0
 1482 0120 BB68     		ldr	r3, [r7, #8]
 1483 0122 9B69     		ldr	r3, [r3, #24]
 861:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 1484              		.loc 1 861 0
 1485 0124 1343     		orrs	r3, r3, r2
 1486 0126 FB61     		str	r3, [r7, #28]
 1487              	.L55:
 868:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 869:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 870:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Configure the Alarm A or Alarm B Sub Second registers */
 871:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmS
 1488              		.loc 1 871 0
 1489 0128 BB68     		ldr	r3, [r7, #8]
 1490 012a 5A68     		ldr	r2, [r3, #4]
 1491 012c BB68     		ldr	r3, [r7, #8]
 1492 012e DB69     		ldr	r3, [r3, #28]
 1493 0130 1343     		orrs	r3, r3, r2
 1494 0132 7B61     		str	r3, [r7, #20]
 872:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 873:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 874:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 1495              		.loc 1 874 0
 1496 0134 FB68     		ldr	r3, [r7, #12]
 1497 0136 1B68     		ldr	r3, [r3]
 1498 0138 CA22     		movs	r2, #202
 1499 013a 5A62     		str	r2, [r3, #36]
 1500 013c FB68     		ldr	r3, [r7, #12]
 1501 013e 1B68     		ldr	r3, [r3]
 1502 0140 5322     		movs	r2, #83
 1503 0142 5A62     		str	r2, [r3, #36]
 875:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 876:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Configure the Alarm register */
 877:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(sAlarm->Alarm == RTC_ALARM_A)
 1504              		.loc 1 877 0
 1505 0144 BB68     		ldr	r3, [r7, #8]
 1506 0146 9B6A     		ldr	r3, [r3, #40]
 1507 0148 B3F5807F 		cmp	r3, #256
 1508 014c 3FD1     		bne	.L60
 878:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
ARM GAS  /tmp/cchUBvqp.s 			page 43


 879:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Disable the Alarm A interrupt */
 880:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
 1509              		.loc 1 880 0
 1510 014e FB68     		ldr	r3, [r7, #12]
 1511 0150 1B68     		ldr	r3, [r3]
 1512 0152 9A68     		ldr	r2, [r3, #8]
 1513 0154 FB68     		ldr	r3, [r7, #12]
 1514 0156 1B68     		ldr	r3, [r3]
 1515 0158 22F48072 		bic	r2, r2, #256
 1516 015c 9A60     		str	r2, [r3, #8]
 881:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 882:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */ 
 883:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 1517              		.loc 1 883 0
 1518 015e FB68     		ldr	r3, [r7, #12]
 1519 0160 1B68     		ldr	r3, [r3]
 1520 0162 9A68     		ldr	r2, [r3, #8]
 1521 0164 FB68     		ldr	r3, [r7, #12]
 1522 0166 1B68     		ldr	r3, [r3]
 1523 0168 22F48052 		bic	r2, r2, #4096
 1524 016c 9A60     		str	r2, [r3, #8]
 884:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 885:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
 886:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 1525              		.loc 1 886 0
 1526 016e FFF7FEFF 		bl	HAL_GetTick
 1527 0172 B861     		str	r0, [r7, #24]
 887:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 888:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
 889:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 1528              		.loc 1 889 0
 1529 0174 13E0     		b	.L61
 1530              	.L62:
 890:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 891:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 1531              		.loc 1 891 0
 1532 0176 FFF7FEFF 		bl	HAL_GetTick
 1533 017a 0246     		mov	r2, r0
 1534 017c BB69     		ldr	r3, [r7, #24]
 1535 017e D31A     		subs	r3, r2, r3
 1536 0180 B3F57A7F 		cmp	r3, #1000
 1537 0184 0BD9     		bls	.L61
 892:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
 893:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 894:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1538              		.loc 1 894 0
 1539 0186 FB68     		ldr	r3, [r7, #12]
 1540 0188 1B68     		ldr	r3, [r3]
 1541 018a FF22     		movs	r2, #255
 1542 018c 5A62     		str	r2, [r3, #36]
 895:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 896:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 1543              		.loc 1 896 0
 1544 018e FB68     		ldr	r3, [r7, #12]
 1545 0190 0322     		movs	r2, #3
 1546 0192 5A77     		strb	r2, [r3, #29]
 897:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
ARM GAS  /tmp/cchUBvqp.s 			page 44


 898:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */ 
 899:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 1547              		.loc 1 899 0
 1548 0194 FB68     		ldr	r3, [r7, #12]
 1549 0196 0022     		movs	r2, #0
 1550 0198 1A77     		strb	r2, [r3, #28]
 900:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 901:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 1551              		.loc 1 901 0
 1552 019a 0323     		movs	r3, #3
 1553 019c 61E0     		b	.L52
 1554              	.L61:
 889:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 1555              		.loc 1 889 0
 1556 019e FB68     		ldr	r3, [r7, #12]
 1557 01a0 1B68     		ldr	r3, [r3]
 1558 01a2 DB68     		ldr	r3, [r3, #12]
 1559 01a4 03F00103 		and	r3, r3, #1
 1560 01a8 002B     		cmp	r3, #0
 1561 01aa E4D0     		beq	.L62
 902:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }   
 903:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 904:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 905:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 1562              		.loc 1 905 0
 1563 01ac FB68     		ldr	r3, [r7, #12]
 1564 01ae 1B68     		ldr	r3, [r3]
 1565 01b0 FA69     		ldr	r2, [r7, #28]
 1566 01b2 DA61     		str	r2, [r3, #28]
 906:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm A Sub Second register */
 907:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = subsecondtmpreg;
 1567              		.loc 1 907 0
 1568 01b4 FB68     		ldr	r3, [r7, #12]
 1569 01b6 1B68     		ldr	r3, [r3]
 1570 01b8 7A69     		ldr	r2, [r7, #20]
 1571 01ba 5A64     		str	r2, [r3, #68]
 908:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
 909:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_ENABLE(hrtc);
 1572              		.loc 1 909 0
 1573 01bc FB68     		ldr	r3, [r7, #12]
 1574 01be 1B68     		ldr	r3, [r3]
 1575 01c0 9A68     		ldr	r2, [r3, #8]
 1576 01c2 FB68     		ldr	r3, [r7, #12]
 1577 01c4 1B68     		ldr	r3, [r3]
 1578 01c6 42F48072 		orr	r2, r2, #256
 1579 01ca 9A60     		str	r2, [r3, #8]
 1580 01cc 3EE0     		b	.L63
 1581              	.L60:
 910:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 911:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
 912:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 913:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Disable the Alarm B interrupt */
 914:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
 1582              		.loc 1 914 0
 1583 01ce FB68     		ldr	r3, [r7, #12]
 1584 01d0 1B68     		ldr	r3, [r3]
 1585 01d2 9A68     		ldr	r2, [r3, #8]
ARM GAS  /tmp/cchUBvqp.s 			page 45


 1586 01d4 FB68     		ldr	r3, [r7, #12]
 1587 01d6 1B68     		ldr	r3, [r3]
 1588 01d8 22F40072 		bic	r2, r2, #512
 1589 01dc 9A60     		str	r2, [r3, #8]
 915:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 916:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */ 
 917:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 1590              		.loc 1 917 0
 1591 01de FB68     		ldr	r3, [r7, #12]
 1592 01e0 1B68     		ldr	r3, [r3]
 1593 01e2 9A68     		ldr	r2, [r3, #8]
 1594 01e4 FB68     		ldr	r3, [r7, #12]
 1595 01e6 1B68     		ldr	r3, [r3]
 1596 01e8 22F40052 		bic	r2, r2, #8192
 1597 01ec 9A60     		str	r2, [r3, #8]
 918:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 919:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
 920:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 1598              		.loc 1 920 0
 1599 01ee FFF7FEFF 		bl	HAL_GetTick
 1600 01f2 B861     		str	r0, [r7, #24]
 921:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 922:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
 923:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 1601              		.loc 1 923 0
 1602 01f4 13E0     		b	.L64
 1603              	.L65:
 924:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 925:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 1604              		.loc 1 925 0
 1605 01f6 FFF7FEFF 		bl	HAL_GetTick
 1606 01fa 0246     		mov	r2, r0
 1607 01fc BB69     		ldr	r3, [r7, #24]
 1608 01fe D31A     		subs	r3, r2, r3
 1609 0200 B3F57A7F 		cmp	r3, #1000
 1610 0204 0BD9     		bls	.L64
 926:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
 927:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 928:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1611              		.loc 1 928 0
 1612 0206 FB68     		ldr	r3, [r7, #12]
 1613 0208 1B68     		ldr	r3, [r3]
 1614 020a FF22     		movs	r2, #255
 1615 020c 5A62     		str	r2, [r3, #36]
 929:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 930:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 1616              		.loc 1 930 0
 1617 020e FB68     		ldr	r3, [r7, #12]
 1618 0210 0322     		movs	r2, #3
 1619 0212 5A77     		strb	r2, [r3, #29]
 931:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 932:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */ 
 933:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 1620              		.loc 1 933 0
 1621 0214 FB68     		ldr	r3, [r7, #12]
 1622 0216 0022     		movs	r2, #0
 1623 0218 1A77     		strb	r2, [r3, #28]
ARM GAS  /tmp/cchUBvqp.s 			page 46


 934:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
 935:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 1624              		.loc 1 935 0
 1625 021a 0323     		movs	r3, #3
 1626 021c 21E0     		b	.L52
 1627              	.L64:
 923:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 1628              		.loc 1 923 0
 1629 021e FB68     		ldr	r3, [r7, #12]
 1630 0220 1B68     		ldr	r3, [r3]
 1631 0222 DB68     		ldr	r3, [r3, #12]
 1632 0224 03F00203 		and	r3, r3, #2
 1633 0228 002B     		cmp	r3, #0
 1634 022a E4D0     		beq	.L65
 936:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }  
 937:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }    
 938:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
 939:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 1635              		.loc 1 939 0
 1636 022c FB68     		ldr	r3, [r7, #12]
 1637 022e 1B68     		ldr	r3, [r3]
 1638 0230 FA69     		ldr	r2, [r7, #28]
 1639 0232 1A62     		str	r2, [r3, #32]
 940:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm B Sub Second register */
 941:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 1640              		.loc 1 941 0
 1641 0234 FB68     		ldr	r3, [r7, #12]
 1642 0236 1B68     		ldr	r3, [r3]
 1643 0238 7A69     		ldr	r2, [r7, #20]
 1644 023a 9A64     		str	r2, [r3, #72]
 942:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
 943:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_ENABLE(hrtc); 
 1645              		.loc 1 943 0
 1646 023c FB68     		ldr	r3, [r7, #12]
 1647 023e 1B68     		ldr	r3, [r3]
 1648 0240 9A68     		ldr	r2, [r3, #8]
 1649 0242 FB68     		ldr	r3, [r7, #12]
 1650 0244 1B68     		ldr	r3, [r3]
 1651 0246 42F40072 		orr	r2, r2, #512
 1652 024a 9A60     		str	r2, [r3, #8]
 1653              	.L63:
 944:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 945:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 946:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
 947:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);   
 1654              		.loc 1 947 0
 1655 024c FB68     		ldr	r3, [r7, #12]
 1656 024e 1B68     		ldr	r3, [r3]
 1657 0250 FF22     		movs	r2, #255
 1658 0252 5A62     		str	r2, [r3, #36]
 948:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 949:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Change RTC state */
 950:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 1659              		.loc 1 950 0
 1660 0254 FB68     		ldr	r3, [r7, #12]
 1661 0256 0122     		movs	r2, #1
 1662 0258 5A77     		strb	r2, [r3, #29]
ARM GAS  /tmp/cchUBvqp.s 			page 47


 951:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 952:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Process Unlocked */ 
 953:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 1663              		.loc 1 953 0
 1664 025a FB68     		ldr	r3, [r7, #12]
 1665 025c 0022     		movs	r2, #0
 1666 025e 1A77     		strb	r2, [r3, #28]
 954:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;
 1667              		.loc 1 955 0
 1668 0260 0023     		movs	r3, #0
 1669              	.L52:
 956:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 1670              		.loc 1 956 0
 1671 0262 1846     		mov	r0, r3
 1672 0264 2437     		adds	r7, r7, #36
 1673              	.LCFI45:
 1674              		.cfi_def_cfa_offset 12
 1675 0266 BD46     		mov	sp, r7
 1676              	.LCFI46:
 1677              		.cfi_def_cfa_register 13
 1678              		@ sp needed
 1679 0268 90BD     		pop	{r4, r7, pc}
 1680              		.cfi_endproc
 1681              	.LFE146:
 1683              		.section	.text.HAL_RTC_SetAlarm_IT,"ax",%progbits
 1684              		.align	1
 1685              		.global	HAL_RTC_SetAlarm_IT
 1686              		.syntax unified
 1687              		.thumb
 1688              		.thumb_func
 1689              		.fpu fpv4-sp-d16
 1691              	HAL_RTC_SetAlarm_IT:
 1692              	.LFB147:
 957:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 958:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 959:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Sets the specified RTC Alarm with Interrupt 
 960:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 961:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
 962:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  sAlarm Pointer to Alarm structure
 963:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 964:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 965:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *             @arg FORMAT_BIN: Binary data format 
 966:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *             @arg FORMAT_BCD: BCD data format
 967:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
 968:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         is disabled (Use the HAL_RTC_DeactivateAlarm()).   
 969:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.   
 970:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 971:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 972:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t F
 973:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 1693              		.loc 1 973 0
 1694              		.cfi_startproc
 1695              		@ args = 0, pretend = 0, frame = 32
 1696              		@ frame_needed = 1, uses_anonymous_args = 0
 1697 0000 90B5     		push	{r4, r7, lr}
 1698              	.LCFI47:
ARM GAS  /tmp/cchUBvqp.s 			page 48


 1699              		.cfi_def_cfa_offset 12
 1700              		.cfi_offset 4, -12
 1701              		.cfi_offset 7, -8
 1702              		.cfi_offset 14, -4
 1703 0002 89B0     		sub	sp, sp, #36
 1704              	.LCFI48:
 1705              		.cfi_def_cfa_offset 48
 1706 0004 00AF     		add	r7, sp, #0
 1707              	.LCFI49:
 1708              		.cfi_def_cfa_register 7
 1709 0006 F860     		str	r0, [r7, #12]
 1710 0008 B960     		str	r1, [r7, #8]
 1711 000a 7A60     		str	r2, [r7, #4]
 974:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 1712              		.loc 1 974 0
 1713 000c 0023     		movs	r3, #0
 1714 000e FB61     		str	r3, [r7, #28]
 1715 0010 0023     		movs	r3, #0
 1716 0012 BB61     		str	r3, [r7, #24]
 975:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 1717              		.loc 1 975 0
 1718 0014 A14B     		ldr	r3, .L82
 1719 0016 1B68     		ldr	r3, [r3]
 1720 0018 A14A     		ldr	r2, .L82+4
 1721 001a A2FB0323 		umull	r2, r3, r2, r3
 1722 001e DB0A     		lsrs	r3, r3, #11
 1723 0020 4FF47A72 		mov	r2, #1000
 1724 0024 02FB03F3 		mul	r3, r2, r3
 1725 0028 7B61     		str	r3, [r7, #20]
 976:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 977:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
 978:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 979:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 980:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 981:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 982:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 983:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 984:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       
 985:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Process Locked */ 
 986:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 1726              		.loc 1 986 0
 1727 002a FB68     		ldr	r3, [r7, #12]
 1728 002c 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 1729 002e 012B     		cmp	r3, #1
 1730 0030 01D1     		bne	.L67
 1731              		.loc 1 986 0 is_stmt 0 discriminator 1
 1732 0032 0223     		movs	r3, #2
 1733 0034 2EE1     		b	.L68
 1734              	.L67:
 1735              		.loc 1 986 0 discriminator 2
 1736 0036 FB68     		ldr	r3, [r7, #12]
 1737 0038 0122     		movs	r2, #1
 1738 003a 1A77     		strb	r2, [r3, #28]
 987:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 988:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 1739              		.loc 1 988 0 is_stmt 1 discriminator 2
 1740 003c FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/cchUBvqp.s 			page 49


 1741 003e 0222     		movs	r2, #2
 1742 0040 5A77     		strb	r2, [r3, #29]
 989:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
 990:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 1743              		.loc 1 990 0 discriminator 2
 1744 0042 7B68     		ldr	r3, [r7, #4]
 1745 0044 002B     		cmp	r3, #0
 1746 0046 37D1     		bne	.L69
 991:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 992:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1747              		.loc 1 992 0
 1748 0048 FB68     		ldr	r3, [r7, #12]
 1749 004a 1B68     		ldr	r3, [r3]
 1750 004c 9B68     		ldr	r3, [r3, #8]
 1751 004e 03F04003 		and	r3, r3, #64
 1752 0052 002B     		cmp	r3, #0
 1753 0054 02D1     		bne	.L70
 993:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 994:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 995:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 996:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     } 
 997:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
 998:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 999:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
 1754              		.loc 1 999 0
 1755 0056 BB68     		ldr	r3, [r7, #8]
 1756 0058 0022     		movs	r2, #0
 1757 005a 1A73     		strb	r2, [r3, #12]
 1758              	.L70:
1000:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
1001:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1002:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
1003:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
1004:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
1005:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1006:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1007:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
1008:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1009:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
1010:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1011:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
1012:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1013:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 1759              		.loc 1 1013 0
 1760 005c BB68     		ldr	r3, [r7, #8]
 1761 005e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1762 0060 1846     		mov	r0, r3
 1763 0062 FFF7FEFF 		bl	RTC_ByteToBcd2
 1764 0066 0346     		mov	r3, r0
 1765 0068 1C04     		lsls	r4, r3, #16
1014:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 1766              		.loc 1 1014 0
 1767 006a BB68     		ldr	r3, [r7, #8]
 1768 006c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1769 006e 1846     		mov	r0, r3
 1770 0070 FFF7FEFF 		bl	RTC_ByteToBcd2
 1771 0074 0346     		mov	r3, r0
ARM GAS  /tmp/cchUBvqp.s 			page 50


 1772 0076 1B02     		lsls	r3, r3, #8
1013:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 1773              		.loc 1 1013 0
 1774 0078 1C43     		orrs	r4, r4, r3
1015:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 1775              		.loc 1 1015 0
 1776 007a BB68     		ldr	r3, [r7, #8]
 1777 007c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1778 007e 1846     		mov	r0, r3
 1779 0080 FFF7FEFF 		bl	RTC_ByteToBcd2
 1780 0084 0346     		mov	r3, r0
1014:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 1781              		.loc 1 1014 0
 1782 0086 44EA0302 		orr	r2, r4, r3
1016:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 1783              		.loc 1 1016 0
 1784 008a BB68     		ldr	r3, [r7, #8]
 1785 008c 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1786 008e 1B04     		lsls	r3, r3, #16
1015:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 1787              		.loc 1 1015 0
 1788 0090 42EA0304 		orr	r4, r2, r3
1017:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 1789              		.loc 1 1017 0
 1790 0094 BB68     		ldr	r3, [r7, #8]
 1791 0096 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1792 009a 1846     		mov	r0, r3
 1793 009c FFF7FEFF 		bl	RTC_ByteToBcd2
 1794 00a0 0346     		mov	r3, r0
 1795 00a2 1B06     		lsls	r3, r3, #24
1016:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 1796              		.loc 1 1016 0
 1797 00a4 44EA0302 		orr	r2, r4, r3
1018:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1798              		.loc 1 1018 0
 1799 00a8 BB68     		ldr	r3, [r7, #8]
 1800 00aa 1B6A     		ldr	r3, [r3, #32]
1017:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 1801              		.loc 1 1017 0
 1802 00ac 1A43     		orrs	r2, r2, r3
1019:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask)); 
 1803              		.loc 1 1019 0
 1804 00ae BB68     		ldr	r3, [r7, #8]
 1805 00b0 9B69     		ldr	r3, [r3, #24]
1013:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 1806              		.loc 1 1013 0
 1807 00b2 1343     		orrs	r3, r3, r2
 1808 00b4 FB61     		str	r3, [r7, #28]
 1809 00b6 40E0     		b	.L71
 1810              	.L69:
1020:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1021:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
1022:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1023:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1811              		.loc 1 1023 0
 1812 00b8 FB68     		ldr	r3, [r7, #12]
 1813 00ba 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cchUBvqp.s 			page 51


 1814 00bc 9B68     		ldr	r3, [r3, #8]
 1815 00be 03F04003 		and	r3, r3, #64
 1816 00c2 002B     		cmp	r3, #0
 1817 00c4 07D0     		beq	.L72
1024:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1025:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 1818              		.loc 1 1025 0
 1819 00c6 BB68     		ldr	r3, [r7, #8]
 1820 00c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1821 00ca 1846     		mov	r0, r3
 1822 00cc FFF7FEFF 		bl	RTC_Bcd2ToByte
 1823 00d0 0346     		mov	r3, r0
 1824 00d2 FB61     		str	r3, [r7, #28]
 1825 00d4 02E0     		b	.L73
 1826              	.L72:
1026:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
1027:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1028:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     } 
1029:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
1030:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1031:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
 1827              		.loc 1 1031 0
 1828 00d6 BB68     		ldr	r3, [r7, #8]
 1829 00d8 0022     		movs	r2, #0
 1830 00da 1A73     		strb	r2, [r3, #12]
 1831              	.L73:
1032:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1033:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1034:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
1035:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
1036:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
1037:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
1038:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 1832              		.loc 1 1038 0
 1833 00dc BB68     		ldr	r3, [r7, #8]
 1834 00de 1B6A     		ldr	r3, [r3, #32]
 1835 00e0 002B     		cmp	r3, #0
 1836 00e2 08D1     		bne	.L74
1039:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1040:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 1837              		.loc 1 1040 0
 1838 00e4 BB68     		ldr	r3, [r7, #8]
 1839 00e6 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1840 00ea 1846     		mov	r0, r3
 1841 00ec FFF7FEFF 		bl	RTC_Bcd2ToByte
 1842 00f0 0346     		mov	r3, r0
 1843 00f2 FB61     		str	r3, [r7, #28]
 1844 00f4 07E0     		b	.L75
 1845              	.L74:
1041:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
1042:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1043:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
1044:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1045:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 1846              		.loc 1 1045 0
 1847 00f6 BB68     		ldr	r3, [r7, #8]
 1848 00f8 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
ARM GAS  /tmp/cchUBvqp.s 			page 52


 1849 00fc 1846     		mov	r0, r3
 1850 00fe FFF7FEFF 		bl	RTC_Bcd2ToByte
 1851 0102 0346     		mov	r3, r0
 1852 0104 FB61     		str	r3, [r7, #28]
 1853              	.L75:
1046:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
1047:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1048:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 1854              		.loc 1 1048 0
 1855 0106 BB68     		ldr	r3, [r7, #8]
 1856 0108 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1857 010a 1A04     		lsls	r2, r3, #16
1049:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 1858              		.loc 1 1049 0
 1859 010c BB68     		ldr	r3, [r7, #8]
 1860 010e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1861 0110 1B02     		lsls	r3, r3, #8
1048:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 1862              		.loc 1 1048 0
 1863 0112 1343     		orrs	r3, r3, r2
1050:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 1864              		.loc 1 1050 0
 1865 0114 BA68     		ldr	r2, [r7, #8]
 1866 0116 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
1049:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 1867              		.loc 1 1049 0
 1868 0118 1A43     		orrs	r2, r2, r3
1051:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 1869              		.loc 1 1051 0
 1870 011a BB68     		ldr	r3, [r7, #8]
 1871 011c 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1872 011e 1B04     		lsls	r3, r3, #16
1050:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 1873              		.loc 1 1050 0
 1874 0120 1A43     		orrs	r2, r2, r3
1052:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 1875              		.loc 1 1052 0
 1876 0122 BB68     		ldr	r3, [r7, #8]
 1877 0124 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1878 0128 1B06     		lsls	r3, r3, #24
1051:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 1879              		.loc 1 1051 0
 1880 012a 1A43     		orrs	r2, r2, r3
1053:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1881              		.loc 1 1053 0
 1882 012c BB68     		ldr	r3, [r7, #8]
 1883 012e 1B6A     		ldr	r3, [r3, #32]
1052:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 1884              		.loc 1 1052 0
 1885 0130 1A43     		orrs	r2, r2, r3
1054:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));     
 1886              		.loc 1 1054 0
 1887 0132 BB68     		ldr	r3, [r7, #8]
 1888 0134 9B69     		ldr	r3, [r3, #24]
1048:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 1889              		.loc 1 1048 0
 1890 0136 1343     		orrs	r3, r3, r2
ARM GAS  /tmp/cchUBvqp.s 			page 53


 1891 0138 FB61     		str	r3, [r7, #28]
 1892              	.L71:
1055:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1056:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Configure the Alarm A or Alarm B Sub Second registers */
1057:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmS
 1893              		.loc 1 1057 0
 1894 013a BB68     		ldr	r3, [r7, #8]
 1895 013c 5A68     		ldr	r2, [r3, #4]
 1896 013e BB68     		ldr	r3, [r7, #8]
 1897 0140 DB69     		ldr	r3, [r3, #28]
 1898 0142 1343     		orrs	r3, r3, r2
 1899 0144 BB61     		str	r3, [r7, #24]
1058:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1059:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1060:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 1900              		.loc 1 1060 0
 1901 0146 FB68     		ldr	r3, [r7, #12]
 1902 0148 1B68     		ldr	r3, [r3]
 1903 014a CA22     		movs	r2, #202
 1904 014c 5A62     		str	r2, [r3, #36]
 1905 014e FB68     		ldr	r3, [r7, #12]
 1906 0150 1B68     		ldr	r3, [r3]
 1907 0152 5322     		movs	r2, #83
 1908 0154 5A62     		str	r2, [r3, #36]
1061:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1062:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Configure the Alarm register */
1063:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(sAlarm->Alarm == RTC_ALARM_A)
 1909              		.loc 1 1063 0
 1910 0156 BB68     		ldr	r3, [r7, #8]
 1911 0158 9B6A     		ldr	r3, [r3, #40]
 1912 015a B3F5807F 		cmp	r3, #256
 1913 015e 41D1     		bne	.L76
1064:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1065:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Disable the Alarm A interrupt */
1066:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
 1914              		.loc 1 1066 0
 1915 0160 FB68     		ldr	r3, [r7, #12]
 1916 0162 1B68     		ldr	r3, [r3]
 1917 0164 9A68     		ldr	r2, [r3, #8]
 1918 0166 FB68     		ldr	r3, [r7, #12]
 1919 0168 1B68     		ldr	r3, [r3]
 1920 016a 22F48072 		bic	r2, r2, #256
 1921 016e 9A60     		str	r2, [r3, #8]
1067:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1068:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Clear flag alarm A */
1069:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 1922              		.loc 1 1069 0
 1923 0170 FB68     		ldr	r3, [r7, #12]
 1924 0172 1B68     		ldr	r3, [r3]
 1925 0174 DB68     		ldr	r3, [r3, #12]
 1926 0176 DAB2     		uxtb	r2, r3
 1927 0178 FB68     		ldr	r3, [r7, #12]
 1928 017a 1B68     		ldr	r3, [r3]
 1929 017c 62F4C072 		orn	r2, r2, #384
 1930 0180 DA60     		str	r2, [r3, #12]
 1931              	.L78:
1070:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
ARM GAS  /tmp/cchUBvqp.s 			page 54


1071:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
1072:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     do
1073:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1074:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if (count-- == 0U)
 1932              		.loc 1 1074 0
 1933 0182 7B69     		ldr	r3, [r7, #20]
 1934 0184 5A1E     		subs	r2, r3, #1
 1935 0186 7A61     		str	r2, [r7, #20]
 1936 0188 002B     		cmp	r3, #0
 1937 018a 0BD1     		bne	.L77
1075:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
1076:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1077:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1938              		.loc 1 1077 0
 1939 018c FB68     		ldr	r3, [r7, #12]
 1940 018e 1B68     		ldr	r3, [r3]
 1941 0190 FF22     		movs	r2, #255
 1942 0192 5A62     		str	r2, [r3, #36]
1078:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1079:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 1943              		.loc 1 1079 0
 1944 0194 FB68     		ldr	r3, [r7, #12]
 1945 0196 0322     		movs	r2, #3
 1946 0198 5A77     		strb	r2, [r3, #29]
1080:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1081:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */
1082:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 1947              		.loc 1 1082 0
 1948 019a FB68     		ldr	r3, [r7, #12]
 1949 019c 0022     		movs	r2, #0
 1950 019e 1A77     		strb	r2, [r3, #28]
1083:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1084:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 1951              		.loc 1 1084 0
 1952 01a0 0323     		movs	r3, #3
 1953 01a2 77E0     		b	.L68
 1954              	.L77:
1085:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }
1086:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     } 
1087:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 1955              		.loc 1 1087 0
 1956 01a4 FB68     		ldr	r3, [r7, #12]
 1957 01a6 1B68     		ldr	r3, [r3]
 1958 01a8 DB68     		ldr	r3, [r3, #12]
 1959 01aa 03F00103 		and	r3, r3, #1
 1960 01ae 002B     		cmp	r3, #0
 1961 01b0 E7D0     		beq	.L78
1088:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1089:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 1962              		.loc 1 1089 0
 1963 01b2 FB68     		ldr	r3, [r7, #12]
 1964 01b4 1B68     		ldr	r3, [r3]
 1965 01b6 FA69     		ldr	r2, [r7, #28]
 1966 01b8 DA61     		str	r2, [r3, #28]
1090:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm A Sub Second register */
1091:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = subsecondtmpreg;
 1967              		.loc 1 1091 0
ARM GAS  /tmp/cchUBvqp.s 			page 55


 1968 01ba FB68     		ldr	r3, [r7, #12]
 1969 01bc 1B68     		ldr	r3, [r3]
 1970 01be BA69     		ldr	r2, [r7, #24]
 1971 01c0 5A64     		str	r2, [r3, #68]
1092:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1093:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_ENABLE(hrtc);
 1972              		.loc 1 1093 0
 1973 01c2 FB68     		ldr	r3, [r7, #12]
 1974 01c4 1B68     		ldr	r3, [r3]
 1975 01c6 9A68     		ldr	r2, [r3, #8]
 1976 01c8 FB68     		ldr	r3, [r7, #12]
 1977 01ca 1B68     		ldr	r3, [r3]
 1978 01cc 42F48072 		orr	r2, r2, #256
 1979 01d0 9A60     		str	r2, [r3, #8]
1094:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
1095:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 1980              		.loc 1 1095 0
 1981 01d2 FB68     		ldr	r3, [r7, #12]
 1982 01d4 1B68     		ldr	r3, [r3]
 1983 01d6 9A68     		ldr	r2, [r3, #8]
 1984 01d8 FB68     		ldr	r3, [r7, #12]
 1985 01da 1B68     		ldr	r3, [r3]
 1986 01dc 42F48052 		orr	r2, r2, #4096
 1987 01e0 9A60     		str	r2, [r3, #8]
 1988 01e2 40E0     		b	.L79
 1989              	.L76:
1096:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1097:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
1098:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1099:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Disable the Alarm B interrupt */
1100:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
 1990              		.loc 1 1100 0
 1991 01e4 FB68     		ldr	r3, [r7, #12]
 1992 01e6 1B68     		ldr	r3, [r3]
 1993 01e8 9A68     		ldr	r2, [r3, #8]
 1994 01ea FB68     		ldr	r3, [r7, #12]
 1995 01ec 1B68     		ldr	r3, [r3]
 1996 01ee 22F40072 		bic	r2, r2, #512
 1997 01f2 9A60     		str	r2, [r3, #8]
1101:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1102:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Clear flag alarm B */
1103:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 1998              		.loc 1 1103 0
 1999 01f4 FB68     		ldr	r3, [r7, #12]
 2000 01f6 1B68     		ldr	r3, [r3]
 2001 01f8 DB68     		ldr	r3, [r3, #12]
 2002 01fa DAB2     		uxtb	r2, r3
 2003 01fc FB68     		ldr	r3, [r7, #12]
 2004 01fe 1B68     		ldr	r3, [r3]
 2005 0200 62F42072 		orn	r2, r2, #640
 2006 0204 DA60     		str	r2, [r3, #12]
 2007              	.L81:
1104:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1105:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
1106:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     do
1107:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1108:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if (count-- == 0U)
ARM GAS  /tmp/cchUBvqp.s 			page 56


 2008              		.loc 1 1108 0
 2009 0206 7B69     		ldr	r3, [r7, #20]
 2010 0208 5A1E     		subs	r2, r3, #1
 2011 020a 7A61     		str	r2, [r7, #20]
 2012 020c 002B     		cmp	r3, #0
 2013 020e 0BD1     		bne	.L80
1109:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
1110:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1111:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2014              		.loc 1 1111 0
 2015 0210 FB68     		ldr	r3, [r7, #12]
 2016 0212 1B68     		ldr	r3, [r3]
 2017 0214 FF22     		movs	r2, #255
 2018 0216 5A62     		str	r2, [r3, #36]
1112:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1113:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 2019              		.loc 1 1113 0
 2020 0218 FB68     		ldr	r3, [r7, #12]
 2021 021a 0322     		movs	r2, #3
 2022 021c 5A77     		strb	r2, [r3, #29]
1114:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1115:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */
1116:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 2023              		.loc 1 1116 0
 2024 021e FB68     		ldr	r3, [r7, #12]
 2025 0220 0022     		movs	r2, #0
 2026 0222 1A77     		strb	r2, [r3, #28]
1117:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1118:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2027              		.loc 1 1118 0
 2028 0224 0323     		movs	r3, #3
 2029 0226 35E0     		b	.L68
 2030              	.L80:
1119:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }
1120:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     } 
1121:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 2031              		.loc 1 1121 0
 2032 0228 FB68     		ldr	r3, [r7, #12]
 2033 022a 1B68     		ldr	r3, [r3]
 2034 022c DB68     		ldr	r3, [r3, #12]
 2035 022e 03F00203 		and	r3, r3, #2
 2036 0232 002B     		cmp	r3, #0
 2037 0234 E7D0     		beq	.L81
1122:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
1123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 2038              		.loc 1 1123 0
 2039 0236 FB68     		ldr	r3, [r7, #12]
 2040 0238 1B68     		ldr	r3, [r3]
 2041 023a FA69     		ldr	r2, [r7, #28]
 2042 023c 1A62     		str	r2, [r3, #32]
1124:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm B Sub Second register */
1125:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 2043              		.loc 1 1125 0
 2044 023e FB68     		ldr	r3, [r7, #12]
 2045 0240 1B68     		ldr	r3, [r3]
 2046 0242 BA69     		ldr	r2, [r7, #24]
 2047 0244 9A64     		str	r2, [r3, #72]
ARM GAS  /tmp/cchUBvqp.s 			page 57


1126:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1127:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_ENABLE(hrtc);
 2048              		.loc 1 1127 0
 2049 0246 FB68     		ldr	r3, [r7, #12]
 2050 0248 1B68     		ldr	r3, [r3]
 2051 024a 9A68     		ldr	r2, [r3, #8]
 2052 024c FB68     		ldr	r3, [r7, #12]
 2053 024e 1B68     		ldr	r3, [r3]
 2054 0250 42F40072 		orr	r2, r2, #512
 2055 0254 9A60     		str	r2, [r3, #8]
1128:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
1129:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 2056              		.loc 1 1129 0
 2057 0256 FB68     		ldr	r3, [r7, #12]
 2058 0258 1B68     		ldr	r3, [r3]
 2059 025a 9A68     		ldr	r2, [r3, #8]
 2060 025c FB68     		ldr	r3, [r7, #12]
 2061 025e 1B68     		ldr	r3, [r3]
 2062 0260 42F40052 		orr	r2, r2, #8192
 2063 0264 9A60     		str	r2, [r3, #8]
 2064              	.L79:
1130:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1131:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1132:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* RTC Alarm Interrupt Configuration: EXTI configuration */
1133:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 2065              		.loc 1 1133 0
 2066 0266 0F4B     		ldr	r3, .L82+8
 2067 0268 1B68     		ldr	r3, [r3]
 2068 026a 0E4A     		ldr	r2, .L82+8
 2069 026c 43F40033 		orr	r3, r3, #131072
 2070 0270 1360     		str	r3, [r2]
1134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1135:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 2071              		.loc 1 1135 0
 2072 0272 0C4B     		ldr	r3, .L82+8
 2073 0274 9B68     		ldr	r3, [r3, #8]
 2074 0276 0B4A     		ldr	r2, .L82+8
 2075 0278 43F40033 		orr	r3, r3, #131072
 2076 027c 9360     		str	r3, [r2, #8]
1136:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1137:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1138:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 2077              		.loc 1 1138 0
 2078 027e FB68     		ldr	r3, [r7, #12]
 2079 0280 1B68     		ldr	r3, [r3]
 2080 0282 FF22     		movs	r2, #255
 2081 0284 5A62     		str	r2, [r3, #36]
1139:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1140:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 2082              		.loc 1 1140 0
 2083 0286 FB68     		ldr	r3, [r7, #12]
 2084 0288 0122     		movs	r2, #1
 2085 028a 5A77     		strb	r2, [r3, #29]
1141:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1142:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Process Unlocked */ 
1143:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);  
 2086              		.loc 1 1143 0
ARM GAS  /tmp/cchUBvqp.s 			page 58


 2087 028c FB68     		ldr	r3, [r7, #12]
 2088 028e 0022     		movs	r2, #0
 2089 0290 1A77     		strb	r2, [r3, #28]
1144:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1145:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;
 2090              		.loc 1 1145 0
 2091 0292 0023     		movs	r3, #0
 2092              	.L68:
1146:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 2093              		.loc 1 1146 0
 2094 0294 1846     		mov	r0, r3
 2095 0296 2437     		adds	r7, r7, #36
 2096              	.LCFI50:
 2097              		.cfi_def_cfa_offset 12
 2098 0298 BD46     		mov	sp, r7
 2099              	.LCFI51:
 2100              		.cfi_def_cfa_register 13
 2101              		@ sp needed
 2102 029a 90BD     		pop	{r4, r7, pc}
 2103              	.L83:
 2104              		.align	2
 2105              	.L82:
 2106 029c 00000000 		.word	SystemCoreClock
 2107 02a0 D34D6210 		.word	274877907
 2108 02a4 003C0140 		.word	1073822720
 2109              		.cfi_endproc
 2110              	.LFE147:
 2112              		.section	.text.HAL_RTC_DeactivateAlarm,"ax",%progbits
 2113              		.align	1
 2114              		.global	HAL_RTC_DeactivateAlarm
 2115              		.syntax unified
 2116              		.thumb
 2117              		.thumb_func
 2118              		.fpu fpv4-sp-d16
 2120              	HAL_RTC_DeactivateAlarm:
 2121              	.LFB148:
1147:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1148:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1149:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Deactive the specified RTC Alarm 
1150:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1151:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1152:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Alarm Specifies the Alarm.
1153:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1154:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_ALARM_A:  AlarmA
1155:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_ALARM_B:  AlarmB
1156:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
1157:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1158:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
1159:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 2122              		.loc 1 1159 0
 2123              		.cfi_startproc
 2124              		@ args = 0, pretend = 0, frame = 16
 2125              		@ frame_needed = 1, uses_anonymous_args = 0
 2126 0000 80B5     		push	{r7, lr}
 2127              	.LCFI52:
 2128              		.cfi_def_cfa_offset 8
 2129              		.cfi_offset 7, -8
ARM GAS  /tmp/cchUBvqp.s 			page 59


 2130              		.cfi_offset 14, -4
 2131 0002 84B0     		sub	sp, sp, #16
 2132              	.LCFI53:
 2133              		.cfi_def_cfa_offset 24
 2134 0004 00AF     		add	r7, sp, #0
 2135              	.LCFI54:
 2136              		.cfi_def_cfa_register 7
 2137 0006 7860     		str	r0, [r7, #4]
 2138 0008 3960     		str	r1, [r7]
1160:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tickstart = 0;
 2139              		.loc 1 1160 0
 2140 000a 0023     		movs	r3, #0
 2141 000c FB60     		str	r3, [r7, #12]
1161:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1162:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
1163:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(Alarm));
1164:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1165:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Process Locked */ 
1166:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 2142              		.loc 1 1166 0
 2143 000e 7B68     		ldr	r3, [r7, #4]
 2144 0010 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 2145 0012 012B     		cmp	r3, #1
 2146 0014 01D1     		bne	.L85
 2147              		.loc 1 1166 0 is_stmt 0 discriminator 1
 2148 0016 0223     		movs	r3, #2
 2149 0018 7BE0     		b	.L86
 2150              	.L85:
 2151              		.loc 1 1166 0 discriminator 2
 2152 001a 7B68     		ldr	r3, [r7, #4]
 2153 001c 0122     		movs	r2, #1
 2154 001e 1A77     		strb	r2, [r3, #28]
1167:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1168:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 2155              		.loc 1 1168 0 is_stmt 1 discriminator 2
 2156 0020 7B68     		ldr	r3, [r7, #4]
 2157 0022 0222     		movs	r2, #2
 2158 0024 5A77     		strb	r2, [r3, #29]
1169:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1170:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1171:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 2159              		.loc 1 1171 0 discriminator 2
 2160 0026 7B68     		ldr	r3, [r7, #4]
 2161 0028 1B68     		ldr	r3, [r3]
 2162 002a CA22     		movs	r2, #202
 2163 002c 5A62     		str	r2, [r3, #36]
 2164 002e 7B68     		ldr	r3, [r7, #4]
 2165 0030 1B68     		ldr	r3, [r3]
 2166 0032 5322     		movs	r2, #83
 2167 0034 5A62     		str	r2, [r3, #36]
1172:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1173:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(Alarm == RTC_ALARM_A)
 2168              		.loc 1 1173 0 discriminator 2
 2169 0036 3B68     		ldr	r3, [r7]
 2170 0038 B3F5807F 		cmp	r3, #256
 2171 003c 2FD1     		bne	.L87
1174:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
ARM GAS  /tmp/cchUBvqp.s 			page 60


1175:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* AlarmA */
1176:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
 2172              		.loc 1 1176 0
 2173 003e 7B68     		ldr	r3, [r7, #4]
 2174 0040 1B68     		ldr	r3, [r3]
 2175 0042 9A68     		ldr	r2, [r3, #8]
 2176 0044 7B68     		ldr	r3, [r7, #4]
 2177 0046 1B68     		ldr	r3, [r3]
 2178 0048 22F48072 		bic	r2, r2, #256
 2179 004c 9A60     		str	r2, [r3, #8]
1177:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
1178:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */ 
1179:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 2180              		.loc 1 1179 0
 2181 004e 7B68     		ldr	r3, [r7, #4]
 2182 0050 1B68     		ldr	r3, [r3]
 2183 0052 9A68     		ldr	r2, [r3, #8]
 2184 0054 7B68     		ldr	r3, [r7, #4]
 2185 0056 1B68     		ldr	r3, [r3]
 2186 0058 22F48052 		bic	r2, r2, #4096
 2187 005c 9A60     		str	r2, [r3, #8]
1180:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1181:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
1182:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 2188              		.loc 1 1182 0
 2189 005e FFF7FEFF 		bl	HAL_GetTick
 2190 0062 F860     		str	r0, [r7, #12]
1183:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1184:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1185:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 2191              		.loc 1 1185 0
 2192 0064 13E0     		b	.L88
 2193              	.L89:
1186:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1187:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 2194              		.loc 1 1187 0
 2195 0066 FFF7FEFF 		bl	HAL_GetTick
 2196 006a 0246     		mov	r2, r0
 2197 006c FB68     		ldr	r3, [r7, #12]
 2198 006e D31A     		subs	r3, r2, r3
 2199 0070 B3F57A7F 		cmp	r3, #1000
 2200 0074 0BD9     		bls	.L88
1188:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       { 
1189:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1190:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2201              		.loc 1 1190 0
 2202 0076 7B68     		ldr	r3, [r7, #4]
 2203 0078 1B68     		ldr	r3, [r3]
 2204 007a FF22     		movs	r2, #255
 2205 007c 5A62     		str	r2, [r3, #36]
1191:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
1192:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 2206              		.loc 1 1192 0
 2207 007e 7B68     		ldr	r3, [r7, #4]
 2208 0080 0322     		movs	r2, #3
 2209 0082 5A77     		strb	r2, [r3, #29]
1193:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
ARM GAS  /tmp/cchUBvqp.s 			page 61


1194:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */ 
1195:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 2210              		.loc 1 1195 0
 2211 0084 7B68     		ldr	r3, [r7, #4]
 2212 0086 0022     		movs	r2, #0
 2213 0088 1A77     		strb	r2, [r3, #28]
1196:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
1197:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2214              		.loc 1 1197 0
 2215 008a 0323     		movs	r3, #3
 2216 008c 41E0     		b	.L86
 2217              	.L88:
1185:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 2218              		.loc 1 1185 0
 2219 008e 7B68     		ldr	r3, [r7, #4]
 2220 0090 1B68     		ldr	r3, [r3]
 2221 0092 DB68     		ldr	r3, [r3, #12]
 2222 0094 03F00103 		and	r3, r3, #1
 2223 0098 002B     		cmp	r3, #0
 2224 009a E4D0     		beq	.L89
 2225 009c 2EE0     		b	.L90
 2226              	.L87:
1198:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }      
1199:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1200:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1201:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
1202:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1203:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* AlarmB */
1204:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
 2227              		.loc 1 1204 0
 2228 009e 7B68     		ldr	r3, [r7, #4]
 2229 00a0 1B68     		ldr	r3, [r3]
 2230 00a2 9A68     		ldr	r2, [r3, #8]
 2231 00a4 7B68     		ldr	r3, [r7, #4]
 2232 00a6 1B68     		ldr	r3, [r3]
 2233 00a8 22F40072 		bic	r2, r2, #512
 2234 00ac 9A60     		str	r2, [r3, #8]
1205:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
1206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */ 
1207:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 2235              		.loc 1 1207 0
 2236 00ae 7B68     		ldr	r3, [r7, #4]
 2237 00b0 1B68     		ldr	r3, [r3]
 2238 00b2 9A68     		ldr	r2, [r3, #8]
 2239 00b4 7B68     		ldr	r3, [r7, #4]
 2240 00b6 1B68     		ldr	r3, [r3]
 2241 00b8 22F40052 		bic	r2, r2, #8192
 2242 00bc 9A60     		str	r2, [r3, #8]
1208:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1209:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
1210:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 2243              		.loc 1 1210 0
 2244 00be FFF7FEFF 		bl	HAL_GetTick
 2245 00c2 F860     		str	r0, [r7, #12]
1211:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1212:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1213:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
ARM GAS  /tmp/cchUBvqp.s 			page 62


 2246              		.loc 1 1213 0
 2247 00c4 13E0     		b	.L91
 2248              	.L92:
1214:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1215:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 2249              		.loc 1 1215 0
 2250 00c6 FFF7FEFF 		bl	HAL_GetTick
 2251 00ca 0246     		mov	r2, r0
 2252 00cc FB68     		ldr	r3, [r7, #12]
 2253 00ce D31A     		subs	r3, r2, r3
 2254 00d0 B3F57A7F 		cmp	r3, #1000
 2255 00d4 0BD9     		bls	.L91
1216:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
1217:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1218:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2256              		.loc 1 1218 0
 2257 00d6 7B68     		ldr	r3, [r7, #4]
 2258 00d8 1B68     		ldr	r3, [r3]
 2259 00da FF22     		movs	r2, #255
 2260 00dc 5A62     		str	r2, [r3, #36]
1219:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
1220:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 2261              		.loc 1 1220 0
 2262 00de 7B68     		ldr	r3, [r7, #4]
 2263 00e0 0322     		movs	r2, #3
 2264 00e2 5A77     		strb	r2, [r3, #29]
1221:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
1222:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */ 
1223:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 2265              		.loc 1 1223 0
 2266 00e4 7B68     		ldr	r3, [r7, #4]
 2267 00e6 0022     		movs	r2, #0
 2268 00e8 1A77     		strb	r2, [r3, #28]
1224:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         
1225:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2269              		.loc 1 1225 0
 2270 00ea 0323     		movs	r3, #3
 2271 00ec 11E0     		b	.L86
 2272              	.L91:
1213:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 2273              		.loc 1 1213 0
 2274 00ee 7B68     		ldr	r3, [r7, #4]
 2275 00f0 1B68     		ldr	r3, [r3]
 2276 00f2 DB68     		ldr	r3, [r3, #12]
 2277 00f4 03F00203 		and	r3, r3, #2
 2278 00f8 002B     		cmp	r3, #0
 2279 00fa E4D0     		beq	.L92
 2280              	.L90:
1226:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }    
1227:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1228:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1229:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1230:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2281              		.loc 1 1230 0
 2282 00fc 7B68     		ldr	r3, [r7, #4]
 2283 00fe 1B68     		ldr	r3, [r3]
 2284 0100 FF22     		movs	r2, #255
ARM GAS  /tmp/cchUBvqp.s 			page 63


 2285 0102 5A62     		str	r2, [r3, #36]
1231:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1232:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 2286              		.loc 1 1232 0
 2287 0104 7B68     		ldr	r3, [r7, #4]
 2288 0106 0122     		movs	r2, #1
 2289 0108 5A77     		strb	r2, [r3, #29]
1233:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1234:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Process Unlocked */ 
1235:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);  
 2290              		.loc 1 1235 0
 2291 010a 7B68     		ldr	r3, [r7, #4]
 2292 010c 0022     		movs	r2, #0
 2293 010e 1A77     		strb	r2, [r3, #28]
1236:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1237:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK; 
 2294              		.loc 1 1237 0
 2295 0110 0023     		movs	r3, #0
 2296              	.L86:
1238:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 2297              		.loc 1 1238 0
 2298 0112 1846     		mov	r0, r3
 2299 0114 1037     		adds	r7, r7, #16
 2300              	.LCFI55:
 2301              		.cfi_def_cfa_offset 8
 2302 0116 BD46     		mov	sp, r7
 2303              	.LCFI56:
 2304              		.cfi_def_cfa_register 13
 2305              		@ sp needed
 2306 0118 80BD     		pop	{r7, pc}
 2307              		.cfi_endproc
 2308              	.LFE148:
 2310              		.section	.text.HAL_RTC_GetAlarm,"ax",%progbits
 2311              		.align	1
 2312              		.global	HAL_RTC_GetAlarm
 2313              		.syntax unified
 2314              		.thumb
 2315              		.thumb_func
 2316              		.fpu fpv4-sp-d16
 2318              	HAL_RTC_GetAlarm:
 2319              	.LFB149:
1239:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****            
1240:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1241:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Gets the RTC Alarm value and masks.
1242:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1243:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1244:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  sAlarm Pointer to Date structure
1245:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Alarm Specifies the Alarm.
1246:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1247:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *             @arg RTC_ALARM_A: AlarmA
1248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *             @arg RTC_ALARM_B: AlarmB  
1249:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
1250:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1251:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BIN: Binary data format 
1252:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BCD: BCD data format
1253:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
1254:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
ARM GAS  /tmp/cchUBvqp.s 			page 64


1255:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alar
1256:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 2320              		.loc 1 1256 0
 2321              		.cfi_startproc
 2322              		@ args = 0, pretend = 0, frame = 24
 2323              		@ frame_needed = 1, uses_anonymous_args = 0
 2324 0000 80B5     		push	{r7, lr}
 2325              	.LCFI57:
 2326              		.cfi_def_cfa_offset 8
 2327              		.cfi_offset 7, -8
 2328              		.cfi_offset 14, -4
 2329 0002 86B0     		sub	sp, sp, #24
 2330              	.LCFI58:
 2331              		.cfi_def_cfa_offset 32
 2332 0004 00AF     		add	r7, sp, #0
 2333              	.LCFI59:
 2334              		.cfi_def_cfa_register 7
 2335 0006 F860     		str	r0, [r7, #12]
 2336 0008 B960     		str	r1, [r7, #8]
 2337 000a 7A60     		str	r2, [r7, #4]
 2338 000c 3B60     		str	r3, [r7]
1257:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tmpreg = 0, subsecondtmpreg = 0;
 2339              		.loc 1 1257 0
 2340 000e 0023     		movs	r3, #0
 2341 0010 7B61     		str	r3, [r7, #20]
 2342 0012 0023     		movs	r3, #0
 2343 0014 3B61     		str	r3, [r7, #16]
1258:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1259:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
1260:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(Alarm));
1262:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1263:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(Alarm == RTC_ALARM_A)
 2344              		.loc 1 1263 0
 2345 0016 7B68     		ldr	r3, [r7, #4]
 2346 0018 B3F5807F 		cmp	r3, #256
 2347 001c 0ED1     		bne	.L94
1264:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1265:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* AlarmA */
1266:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sAlarm->Alarm = RTC_ALARM_A;
 2348              		.loc 1 1266 0
 2349 001e BB68     		ldr	r3, [r7, #8]
 2350 0020 4FF48072 		mov	r2, #256
 2351 0024 9A62     		str	r2, [r3, #40]
1267:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
1268:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 2352              		.loc 1 1268 0
 2353 0026 FB68     		ldr	r3, [r7, #12]
 2354 0028 1B68     		ldr	r3, [r3]
 2355 002a DB69     		ldr	r3, [r3, #28]
 2356 002c 7B61     		str	r3, [r7, #20]
1269:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 2357              		.loc 1 1269 0
 2358 002e FB68     		ldr	r3, [r7, #12]
 2359 0030 1B68     		ldr	r3, [r3]
 2360 0032 5B6C     		ldr	r3, [r3, #68]
 2361 0034 C3F30E03 		ubfx	r3, r3, #0, #15
ARM GAS  /tmp/cchUBvqp.s 			page 65


 2362 0038 3B61     		str	r3, [r7, #16]
 2363 003a 0DE0     		b	.L95
 2364              	.L94:
1270:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1271:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
1272:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1273:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sAlarm->Alarm = RTC_ALARM_B;
 2365              		.loc 1 1273 0
 2366 003c BB68     		ldr	r3, [r7, #8]
 2367 003e 4FF40072 		mov	r2, #512
 2368 0042 9A62     		str	r2, [r3, #40]
1274:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
1275:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 2369              		.loc 1 1275 0
 2370 0044 FB68     		ldr	r3, [r7, #12]
 2371 0046 1B68     		ldr	r3, [r3]
 2372 0048 1B6A     		ldr	r3, [r3, #32]
 2373 004a 7B61     		str	r3, [r7, #20]
1276:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 2374              		.loc 1 1276 0
 2375 004c FB68     		ldr	r3, [r7, #12]
 2376 004e 1B68     		ldr	r3, [r3]
 2377 0050 9B6C     		ldr	r3, [r3, #72]
 2378 0052 C3F30E03 		ubfx	r3, r3, #0, #15
 2379 0056 3B61     		str	r3, [r7, #16]
 2380              	.L95:
1277:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1278:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
1279:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Fill the structure with the read parameters */
1280:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16);
 2381              		.loc 1 1280 0
 2382 0058 7B69     		ldr	r3, [r7, #20]
 2383 005a 1B0C     		lsrs	r3, r3, #16
 2384 005c DBB2     		uxtb	r3, r3
 2385 005e 03F03F03 		and	r3, r3, #63
 2386 0062 DAB2     		uxtb	r2, r3
 2387 0064 BB68     		ldr	r3, [r7, #8]
 2388 0066 1A70     		strb	r2, [r3]
1281:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8);
 2389              		.loc 1 1281 0
 2390 0068 7B69     		ldr	r3, [r7, #20]
 2391 006a 1B0A     		lsrs	r3, r3, #8
 2392 006c DBB2     		uxtb	r3, r3
 2393 006e 03F07F03 		and	r3, r3, #127
 2394 0072 DAB2     		uxtb	r2, r3
 2395 0074 BB68     		ldr	r3, [r7, #8]
 2396 0076 5A70     		strb	r2, [r3, #1]
1282:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 2397              		.loc 1 1282 0
 2398 0078 7B69     		ldr	r3, [r7, #20]
 2399 007a DBB2     		uxtb	r3, r3
 2400 007c 03F07F03 		and	r3, r3, #127
 2401 0080 DAB2     		uxtb	r2, r3
 2402 0082 BB68     		ldr	r3, [r7, #8]
 2403 0084 9A70     		strb	r2, [r3, #2]
1283:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 2404              		.loc 1 1283 0
ARM GAS  /tmp/cchUBvqp.s 			page 66


 2405 0086 7B69     		ldr	r3, [r7, #20]
 2406 0088 1B0C     		lsrs	r3, r3, #16
 2407 008a DBB2     		uxtb	r3, r3
 2408 008c 03F04003 		and	r3, r3, #64
 2409 0090 DAB2     		uxtb	r2, r3
 2410 0092 BB68     		ldr	r3, [r7, #8]
 2411 0094 1A73     		strb	r2, [r3, #12]
1284:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 2412              		.loc 1 1284 0
 2413 0096 BB68     		ldr	r3, [r7, #8]
 2414 0098 3A69     		ldr	r2, [r7, #16]
 2415 009a 5A60     		str	r2, [r3, #4]
1285:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 2416              		.loc 1 1285 0
 2417 009c 7B69     		ldr	r3, [r7, #20]
 2418 009e 1B0E     		lsrs	r3, r3, #24
 2419 00a0 DBB2     		uxtb	r3, r3
 2420 00a2 03F03F03 		and	r3, r3, #63
 2421 00a6 DAB2     		uxtb	r2, r3
 2422 00a8 BB68     		ldr	r3, [r7, #8]
 2423 00aa 83F82420 		strb	r2, [r3, #36]
1286:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 2424              		.loc 1 1286 0
 2425 00ae 7B69     		ldr	r3, [r7, #20]
 2426 00b0 03F08042 		and	r2, r3, #1073741824
 2427 00b4 BB68     		ldr	r3, [r7, #8]
 2428 00b6 1A62     		str	r2, [r3, #32]
1287:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 2429              		.loc 1 1287 0
 2430 00b8 7B69     		ldr	r3, [r7, #20]
 2431 00ba 03F08032 		and	r2, r3, #-2139062144
 2432 00be BB68     		ldr	r3, [r7, #8]
 2433 00c0 9A61     		str	r2, [r3, #24]
1288:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
1289:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 2434              		.loc 1 1289 0
 2435 00c2 3B68     		ldr	r3, [r7]
 2436 00c4 002B     		cmp	r3, #0
 2437 00c6 25D1     		bne	.L96
1290:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1291:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 2438              		.loc 1 1291 0
 2439 00c8 BB68     		ldr	r3, [r7, #8]
 2440 00ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2441 00cc 1846     		mov	r0, r3
 2442 00ce FFF7FEFF 		bl	RTC_Bcd2ToByte
 2443 00d2 0346     		mov	r3, r0
 2444 00d4 1A46     		mov	r2, r3
 2445 00d6 BB68     		ldr	r3, [r7, #8]
 2446 00d8 1A70     		strb	r2, [r3]
1292:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 2447              		.loc 1 1292 0
 2448 00da BB68     		ldr	r3, [r7, #8]
 2449 00dc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2450 00de 1846     		mov	r0, r3
 2451 00e0 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2452 00e4 0346     		mov	r3, r0
ARM GAS  /tmp/cchUBvqp.s 			page 67


 2453 00e6 1A46     		mov	r2, r3
 2454 00e8 BB68     		ldr	r3, [r7, #8]
 2455 00ea 5A70     		strb	r2, [r3, #1]
1293:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 2456              		.loc 1 1293 0
 2457 00ec BB68     		ldr	r3, [r7, #8]
 2458 00ee 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2459 00f0 1846     		mov	r0, r3
 2460 00f2 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2461 00f6 0346     		mov	r3, r0
 2462 00f8 1A46     		mov	r2, r3
 2463 00fa BB68     		ldr	r3, [r7, #8]
 2464 00fc 9A70     		strb	r2, [r3, #2]
1294:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 2465              		.loc 1 1294 0
 2466 00fe BB68     		ldr	r3, [r7, #8]
 2467 0100 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 2468 0104 1846     		mov	r0, r3
 2469 0106 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2470 010a 0346     		mov	r3, r0
 2471 010c 1A46     		mov	r2, r3
 2472 010e BB68     		ldr	r3, [r7, #8]
 2473 0110 83F82420 		strb	r2, [r3, #36]
 2474              	.L96:
1295:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }  
1296:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     
1297:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;
 2475              		.loc 1 1297 0
 2476 0114 0023     		movs	r3, #0
1298:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 2477              		.loc 1 1298 0
 2478 0116 1846     		mov	r0, r3
 2479 0118 1837     		adds	r7, r7, #24
 2480              	.LCFI60:
 2481              		.cfi_def_cfa_offset 8
 2482 011a BD46     		mov	sp, r7
 2483              	.LCFI61:
 2484              		.cfi_def_cfa_register 13
 2485              		@ sp needed
 2486 011c 80BD     		pop	{r7, pc}
 2487              		.cfi_endproc
 2488              	.LFE149:
 2490              		.section	.text.HAL_RTC_AlarmIRQHandler,"ax",%progbits
 2491              		.align	1
 2492              		.global	HAL_RTC_AlarmIRQHandler
 2493              		.syntax unified
 2494              		.thumb
 2495              		.thumb_func
 2496              		.fpu fpv4-sp-d16
 2498              	HAL_RTC_AlarmIRQHandler:
 2499              	.LFB150:
1299:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1300:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1301:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  This function handles Alarm interrupt request.
1302:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1303:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1304:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval None
ARM GAS  /tmp/cchUBvqp.s 			page 68


1305:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1306:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
1307:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {  
 2500              		.loc 1 1307 0
 2501              		.cfi_startproc
 2502              		@ args = 0, pretend = 0, frame = 8
 2503              		@ frame_needed = 1, uses_anonymous_args = 0
 2504 0000 80B5     		push	{r7, lr}
 2505              	.LCFI62:
 2506              		.cfi_def_cfa_offset 8
 2507              		.cfi_offset 7, -8
 2508              		.cfi_offset 14, -4
 2509 0002 82B0     		sub	sp, sp, #8
 2510              	.LCFI63:
 2511              		.cfi_def_cfa_offset 16
 2512 0004 00AF     		add	r7, sp, #0
 2513              	.LCFI64:
 2514              		.cfi_def_cfa_register 7
 2515 0006 7860     		str	r0, [r7, #4]
1308:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRA))
 2516              		.loc 1 1308 0
 2517 0008 7B68     		ldr	r3, [r7, #4]
 2518 000a 1B68     		ldr	r3, [r3]
 2519 000c DB68     		ldr	r3, [r3, #12]
 2520 000e 03F48073 		and	r3, r3, #256
 2521 0012 002B     		cmp	r3, #0
 2522 0014 12D0     		beq	.L99
1309:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1310:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get the status of the Interrupt */
1311:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRA) != (uint32_t)RESET)
 2523              		.loc 1 1311 0
 2524 0016 7B68     		ldr	r3, [r7, #4]
 2525 0018 1B68     		ldr	r3, [r3]
 2526 001a 9B68     		ldr	r3, [r3, #8]
 2527 001c 03F48053 		and	r3, r3, #4096
 2528 0020 002B     		cmp	r3, #0
 2529 0022 0BD0     		beq	.L99
1312:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1313:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       /* AlarmA callback */ 
1314:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       HAL_RTC_AlarmAEventCallback(hrtc);
 2530              		.loc 1 1314 0
 2531 0024 7868     		ldr	r0, [r7, #4]
 2532 0026 FFF7FEFF 		bl	HAL_RTC_AlarmAEventCallback
1315:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       
1316:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       /* Clear the Alarm interrupt pending bit */
1317:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 2533              		.loc 1 1317 0
 2534 002a 7B68     		ldr	r3, [r7, #4]
 2535 002c 1B68     		ldr	r3, [r3]
 2536 002e DB68     		ldr	r3, [r3, #12]
 2537 0030 DAB2     		uxtb	r2, r3
 2538 0032 7B68     		ldr	r3, [r7, #4]
 2539 0034 1B68     		ldr	r3, [r3]
 2540 0036 62F4C072 		orn	r2, r2, #384
 2541 003a DA60     		str	r2, [r3, #12]
 2542              	.L99:
1318:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
ARM GAS  /tmp/cchUBvqp.s 			page 69


1319:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1320:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1321:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRB))
 2543              		.loc 1 1321 0
 2544 003c 7B68     		ldr	r3, [r7, #4]
 2545 003e 1B68     		ldr	r3, [r3]
 2546 0040 DB68     		ldr	r3, [r3, #12]
 2547 0042 03F40073 		and	r3, r3, #512
 2548 0046 002B     		cmp	r3, #0
 2549 0048 12D0     		beq	.L100
1322:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1323:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get the status of the Interrupt */
1324:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRB) != (uint32_t)RESET)
 2550              		.loc 1 1324 0
 2551 004a 7B68     		ldr	r3, [r7, #4]
 2552 004c 1B68     		ldr	r3, [r3]
 2553 004e 9B68     		ldr	r3, [r3, #8]
 2554 0050 03F40053 		and	r3, r3, #8192
 2555 0054 002B     		cmp	r3, #0
 2556 0056 0BD0     		beq	.L100
1325:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1326:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       /* AlarmB callback */ 
1327:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       HAL_RTCEx_AlarmBEventCallback(hrtc);
 2557              		.loc 1 1327 0
 2558 0058 7868     		ldr	r0, [r7, #4]
 2559 005a FFF7FEFF 		bl	HAL_RTCEx_AlarmBEventCallback
1328:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       
1329:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       /* Clear the Alarm interrupt pending bit */
1330:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 2560              		.loc 1 1330 0
 2561 005e 7B68     		ldr	r3, [r7, #4]
 2562 0060 1B68     		ldr	r3, [r3]
 2563 0062 DB68     		ldr	r3, [r3, #12]
 2564 0064 DAB2     		uxtb	r2, r3
 2565 0066 7B68     		ldr	r3, [r7, #4]
 2566 0068 1B68     		ldr	r3, [r3]
 2567 006a 62F42072 		orn	r2, r2, #640
 2568 006e DA60     		str	r2, [r3, #12]
 2569              	.L100:
1331:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1332:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1333:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1334:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Clear the EXTI's line Flag for RTC Alarm */
1335:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 2570              		.loc 1 1335 0
 2571 0070 054B     		ldr	r3, .L101
 2572 0072 4FF40032 		mov	r2, #131072
 2573 0076 5A61     		str	r2, [r3, #20]
1336:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1337:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Change RTC state */
1338:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
 2574              		.loc 1 1338 0
 2575 0078 7B68     		ldr	r3, [r7, #4]
 2576 007a 0122     		movs	r2, #1
 2577 007c 5A77     		strb	r2, [r3, #29]
1339:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 2578              		.loc 1 1339 0
ARM GAS  /tmp/cchUBvqp.s 			page 70


 2579 007e 00BF     		nop
 2580 0080 0837     		adds	r7, r7, #8
 2581              	.LCFI65:
 2582              		.cfi_def_cfa_offset 8
 2583 0082 BD46     		mov	sp, r7
 2584              	.LCFI66:
 2585              		.cfi_def_cfa_register 13
 2586              		@ sp needed
 2587 0084 80BD     		pop	{r7, pc}
 2588              	.L102:
 2589 0086 00BF     		.align	2
 2590              	.L101:
 2591 0088 003C0140 		.word	1073822720
 2592              		.cfi_endproc
 2593              	.LFE150:
 2595              		.section	.text.HAL_RTC_AlarmAEventCallback,"ax",%progbits
 2596              		.align	1
 2597              		.weak	HAL_RTC_AlarmAEventCallback
 2598              		.syntax unified
 2599              		.thumb
 2600              		.thumb_func
 2601              		.fpu fpv4-sp-d16
 2603              	HAL_RTC_AlarmAEventCallback:
 2604              	.LFB151:
1340:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1341:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1342:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Alarm A callback.
1343:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1344:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1345:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval None
1346:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1347:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** __weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
1348:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 2605              		.loc 1 1348 0
 2606              		.cfi_startproc
 2607              		@ args = 0, pretend = 0, frame = 8
 2608              		@ frame_needed = 1, uses_anonymous_args = 0
 2609              		@ link register save eliminated.
 2610 0000 80B4     		push	{r7}
 2611              	.LCFI67:
 2612              		.cfi_def_cfa_offset 4
 2613              		.cfi_offset 7, -4
 2614 0002 83B0     		sub	sp, sp, #12
 2615              	.LCFI68:
 2616              		.cfi_def_cfa_offset 16
 2617 0004 00AF     		add	r7, sp, #0
 2618              	.LCFI69:
 2619              		.cfi_def_cfa_register 7
 2620 0006 7860     		str	r0, [r7, #4]
1349:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
1350:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   UNUSED(hrtc);
1351:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1352:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1353:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****             the HAL_RTC_AlarmAEventCallback could be implemented in the user file
1354:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    */
1355:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 2621              		.loc 1 1355 0
ARM GAS  /tmp/cchUBvqp.s 			page 71


 2622 0008 00BF     		nop
 2623 000a 0C37     		adds	r7, r7, #12
 2624              	.LCFI70:
 2625              		.cfi_def_cfa_offset 4
 2626 000c BD46     		mov	sp, r7
 2627              	.LCFI71:
 2628              		.cfi_def_cfa_register 13
 2629              		@ sp needed
 2630 000e 5DF8047B 		ldr	r7, [sp], #4
 2631              	.LCFI72:
 2632              		.cfi_restore 7
 2633              		.cfi_def_cfa_offset 0
 2634 0012 7047     		bx	lr
 2635              		.cfi_endproc
 2636              	.LFE151:
 2638              		.section	.text.HAL_RTC_PollForAlarmAEvent,"ax",%progbits
 2639              		.align	1
 2640              		.global	HAL_RTC_PollForAlarmAEvent
 2641              		.syntax unified
 2642              		.thumb
 2643              		.thumb_func
 2644              		.fpu fpv4-sp-d16
 2646              	HAL_RTC_PollForAlarmAEvent:
 2647              	.LFB152:
1356:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1357:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1358:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  This function handles AlarmA Polling request.
1359:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1360:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1361:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Timeout Timeout duration
1362:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
1363:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1364:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_PollForAlarmAEvent(RTC_HandleTypeDef *hrtc, uint32_t Timeout)
1365:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 2648              		.loc 1 1365 0
 2649              		.cfi_startproc
 2650              		@ args = 0, pretend = 0, frame = 16
 2651              		@ frame_needed = 1, uses_anonymous_args = 0
 2652 0000 80B5     		push	{r7, lr}
 2653              	.LCFI73:
 2654              		.cfi_def_cfa_offset 8
 2655              		.cfi_offset 7, -8
 2656              		.cfi_offset 14, -4
 2657 0002 84B0     		sub	sp, sp, #16
 2658              	.LCFI74:
 2659              		.cfi_def_cfa_offset 24
 2660 0004 00AF     		add	r7, sp, #0
 2661              	.LCFI75:
 2662              		.cfi_def_cfa_register 7
 2663 0006 7860     		str	r0, [r7, #4]
 2664 0008 3960     		str	r1, [r7]
1366:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tickstart = 0; 
 2665              		.loc 1 1366 0
 2666 000a 0023     		movs	r3, #0
 2667 000c FB60     		str	r3, [r7, #12]
1367:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1368:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
ARM GAS  /tmp/cchUBvqp.s 			page 72


1369:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 2668              		.loc 1 1369 0
 2669 000e FFF7FEFF 		bl	HAL_GetTick
 2670 0012 F860     		str	r0, [r7, #12]
1370:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1371:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) == RESET)
 2671              		.loc 1 1371 0
 2672 0014 13E0     		b	.L105
 2673              	.L108:
1372:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1373:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if(Timeout != HAL_MAX_DELAY)
 2674              		.loc 1 1373 0
 2675 0016 3B68     		ldr	r3, [r7]
 2676 0018 B3F1FF3F 		cmp	r3, #-1
 2677 001c 0FD0     		beq	.L105
1374:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1375:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 2678              		.loc 1 1375 0
 2679 001e 3B68     		ldr	r3, [r7]
 2680 0020 002B     		cmp	r3, #0
 2681 0022 07D0     		beq	.L106
 2682              		.loc 1 1375 0 is_stmt 0 discriminator 1
 2683 0024 FFF7FEFF 		bl	HAL_GetTick
 2684 0028 0246     		mov	r2, r0
 2685 002a FB68     		ldr	r3, [r7, #12]
 2686 002c D31A     		subs	r3, r2, r3
 2687 002e 3A68     		ldr	r2, [r7]
 2688 0030 9A42     		cmp	r2, r3
 2689 0032 04D2     		bcs	.L105
 2690              	.L106:
1376:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
1377:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 2691              		.loc 1 1377 0 is_stmt 1
 2692 0034 7B68     		ldr	r3, [r7, #4]
 2693 0036 0322     		movs	r2, #3
 2694 0038 5A77     		strb	r2, [r3, #29]
1378:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2695              		.loc 1 1378 0
 2696 003a 0323     		movs	r3, #3
 2697 003c 13E0     		b	.L107
 2698              	.L105:
1371:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 2699              		.loc 1 1371 0
 2700 003e 7B68     		ldr	r3, [r7, #4]
 2701 0040 1B68     		ldr	r3, [r3]
 2702 0042 DB68     		ldr	r3, [r3, #12]
 2703 0044 03F48073 		and	r3, r3, #256
 2704 0048 002B     		cmp	r3, #0
 2705 004a E4D0     		beq	.L108
1379:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }
1380:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1381:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1382:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1383:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Clear the Alarm interrupt pending bit */
1384:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 2706              		.loc 1 1384 0
 2707 004c 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cchUBvqp.s 			page 73


 2708 004e 1B68     		ldr	r3, [r3]
 2709 0050 DB68     		ldr	r3, [r3, #12]
 2710 0052 DAB2     		uxtb	r2, r3
 2711 0054 7B68     		ldr	r3, [r7, #4]
 2712 0056 1B68     		ldr	r3, [r3]
 2713 0058 62F4C072 		orn	r2, r2, #384
 2714 005c DA60     		str	r2, [r3, #12]
1385:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1386:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Change RTC state */
1387:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 2715              		.loc 1 1387 0
 2716 005e 7B68     		ldr	r3, [r7, #4]
 2717 0060 0122     		movs	r2, #1
 2718 0062 5A77     		strb	r2, [r3, #29]
1388:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1389:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;  
 2719              		.loc 1 1389 0
 2720 0064 0023     		movs	r3, #0
 2721              	.L107:
1390:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 2722              		.loc 1 1390 0
 2723 0066 1846     		mov	r0, r3
 2724 0068 1037     		adds	r7, r7, #16
 2725              	.LCFI76:
 2726              		.cfi_def_cfa_offset 8
 2727 006a BD46     		mov	sp, r7
 2728              	.LCFI77:
 2729              		.cfi_def_cfa_register 13
 2730              		@ sp needed
 2731 006c 80BD     		pop	{r7, pc}
 2732              		.cfi_endproc
 2733              	.LFE152:
 2735              		.section	.text.HAL_RTC_WaitForSynchro,"ax",%progbits
 2736              		.align	1
 2737              		.global	HAL_RTC_WaitForSynchro
 2738              		.syntax unified
 2739              		.thumb
 2740              		.thumb_func
 2741              		.fpu fpv4-sp-d16
 2743              	HAL_RTC_WaitForSynchro:
 2744              	.LFB153:
1391:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1392:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1393:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @}
1394:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1395:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1396:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /** @defgroup RTC_Group4 Peripheral Control functions 
1397:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *  @brief   Peripheral Control functions 
1398:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *
1399:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @verbatim   
1400:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================
1401:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                      ##### Peripheral Control functions #####
1402:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================  
1403:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     [..]
1404:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     This subsection provides functions allowing to
1405:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       (+) Wait for RTC Time and Date Synchronization
1406:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
ARM GAS  /tmp/cchUBvqp.s 			page 74


1407:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @endverbatim
1408:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @{
1409:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1410:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1411:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1412:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are 
1413:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         synchronized with RTC APB clock.
1414:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the 
1415:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function. 
1416:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar 
1417:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes 
1418:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         the software must first clear the RSF flag. 
1419:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         The software must then wait until it is set again before reading 
1420:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         the calendar, which means that the calendar registers have been 
1421:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
1422:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1423:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1424:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
1425:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1426:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
1427:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 2745              		.loc 1 1427 0
 2746              		.cfi_startproc
 2747              		@ args = 0, pretend = 0, frame = 16
 2748              		@ frame_needed = 1, uses_anonymous_args = 0
 2749 0000 80B5     		push	{r7, lr}
 2750              	.LCFI78:
 2751              		.cfi_def_cfa_offset 8
 2752              		.cfi_offset 7, -8
 2753              		.cfi_offset 14, -4
 2754 0002 84B0     		sub	sp, sp, #16
 2755              	.LCFI79:
 2756              		.cfi_def_cfa_offset 24
 2757 0004 00AF     		add	r7, sp, #0
 2758              	.LCFI80:
 2759              		.cfi_def_cfa_register 7
 2760 0006 7860     		str	r0, [r7, #4]
1428:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tickstart = 0;
 2761              		.loc 1 1428 0
 2762 0008 0023     		movs	r3, #0
 2763 000a FB60     		str	r3, [r7, #12]
1429:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1430:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Clear RSF flag */
1431:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 2764              		.loc 1 1431 0
 2765 000c 7B68     		ldr	r3, [r7, #4]
 2766 000e 1B68     		ldr	r3, [r3]
 2767 0010 DA68     		ldr	r2, [r3, #12]
 2768 0012 7B68     		ldr	r3, [r7, #4]
 2769 0014 1B68     		ldr	r3, [r3]
 2770 0016 22F0A002 		bic	r2, r2, #160
 2771 001a DA60     		str	r2, [r3, #12]
1432:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1433:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
1434:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 2772              		.loc 1 1434 0
 2773 001c FFF7FEFF 		bl	HAL_GetTick
ARM GAS  /tmp/cchUBvqp.s 			page 75


 2774 0020 F860     		str	r0, [r7, #12]
1435:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1436:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Wait the registers to be synchronised */
1437:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 2775              		.loc 1 1437 0
 2776 0022 09E0     		b	.L110
 2777              	.L112:
1438:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1439:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 2778              		.loc 1 1439 0
 2779 0024 FFF7FEFF 		bl	HAL_GetTick
 2780 0028 0246     		mov	r2, r0
 2781 002a FB68     		ldr	r3, [r7, #12]
 2782 002c D31A     		subs	r3, r2, r3
 2783 002e B3F57A7F 		cmp	r3, #1000
 2784 0032 01D9     		bls	.L110
1440:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {       
1441:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       return HAL_TIMEOUT;
 2785              		.loc 1 1441 0
 2786 0034 0323     		movs	r3, #3
 2787 0036 07E0     		b	.L111
 2788              	.L110:
1437:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 2789              		.loc 1 1437 0
 2790 0038 7B68     		ldr	r3, [r7, #4]
 2791 003a 1B68     		ldr	r3, [r3]
 2792 003c DB68     		ldr	r3, [r3, #12]
 2793 003e 03F02003 		and	r3, r3, #32
 2794 0042 002B     		cmp	r3, #0
 2795 0044 EED0     		beq	.L112
1442:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     } 
1443:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1444:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1445:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;
 2796              		.loc 1 1445 0
 2797 0046 0023     		movs	r3, #0
 2798              	.L111:
1446:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 2799              		.loc 1 1446 0
 2800 0048 1846     		mov	r0, r3
 2801 004a 1037     		adds	r7, r7, #16
 2802              	.LCFI81:
 2803              		.cfi_def_cfa_offset 8
 2804 004c BD46     		mov	sp, r7
 2805              	.LCFI82:
 2806              		.cfi_def_cfa_register 13
 2807              		@ sp needed
 2808 004e 80BD     		pop	{r7, pc}
 2809              		.cfi_endproc
 2810              	.LFE153:
 2812              		.section	.text.HAL_RTC_GetState,"ax",%progbits
 2813              		.align	1
 2814              		.global	HAL_RTC_GetState
 2815              		.syntax unified
 2816              		.thumb
 2817              		.thumb_func
 2818              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cchUBvqp.s 			page 76


 2820              	HAL_RTC_GetState:
 2821              	.LFB154:
1447:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1448:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1449:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @}
1450:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1451:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1452:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /** @defgroup RTC_Group5 Peripheral State functions 
1453:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *  @brief   Peripheral State functions 
1454:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *
1455:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @verbatim   
1456:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================
1457:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                      ##### Peripheral State functions #####
1458:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================  
1459:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     [..]
1460:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     This subsection provides functions allowing to
1461:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       (+) Get RTC state
1462:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1463:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @endverbatim
1464:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @{
1465:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1466:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1467:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Returns the RTC state.
1468:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1469:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1470:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL state
1471:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1472:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_RTCStateTypeDef HAL_RTC_GetState(RTC_HandleTypeDef* hrtc)
1473:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 2822              		.loc 1 1473 0
 2823              		.cfi_startproc
 2824              		@ args = 0, pretend = 0, frame = 8
 2825              		@ frame_needed = 1, uses_anonymous_args = 0
 2826              		@ link register save eliminated.
 2827 0000 80B4     		push	{r7}
 2828              	.LCFI83:
 2829              		.cfi_def_cfa_offset 4
 2830              		.cfi_offset 7, -4
 2831 0002 83B0     		sub	sp, sp, #12
 2832              	.LCFI84:
 2833              		.cfi_def_cfa_offset 16
 2834 0004 00AF     		add	r7, sp, #0
 2835              	.LCFI85:
 2836              		.cfi_def_cfa_register 7
 2837 0006 7860     		str	r0, [r7, #4]
1474:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return hrtc->State;
 2838              		.loc 1 1474 0
 2839 0008 7B68     		ldr	r3, [r7, #4]
 2840 000a 5B7F     		ldrb	r3, [r3, #29]
 2841 000c DBB2     		uxtb	r3, r3
1475:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 2842              		.loc 1 1475 0
 2843 000e 1846     		mov	r0, r3
 2844 0010 0C37     		adds	r7, r7, #12
 2845              	.LCFI86:
 2846              		.cfi_def_cfa_offset 4
 2847 0012 BD46     		mov	sp, r7
ARM GAS  /tmp/cchUBvqp.s 			page 77


 2848              	.LCFI87:
 2849              		.cfi_def_cfa_register 13
 2850              		@ sp needed
 2851 0014 5DF8047B 		ldr	r7, [sp], #4
 2852              	.LCFI88:
 2853              		.cfi_restore 7
 2854              		.cfi_def_cfa_offset 0
 2855 0018 7047     		bx	lr
 2856              		.cfi_endproc
 2857              	.LFE154:
 2859              		.section	.text.RTC_EnterInitMode,"ax",%progbits
 2860              		.align	1
 2861              		.global	RTC_EnterInitMode
 2862              		.syntax unified
 2863              		.thumb
 2864              		.thumb_func
 2865              		.fpu fpv4-sp-d16
 2867              	RTC_EnterInitMode:
 2868              	.LFB155:
1476:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1477:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1478:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @}
1479:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1480:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1481:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1482:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Enters the RTC Initialization mode.
1483:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the
1484:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
1485:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1486:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1487:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
1488:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1489:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
1490:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 2869              		.loc 1 1490 0
 2870              		.cfi_startproc
 2871              		@ args = 0, pretend = 0, frame = 16
 2872              		@ frame_needed = 1, uses_anonymous_args = 0
 2873 0000 80B5     		push	{r7, lr}
 2874              	.LCFI89:
 2875              		.cfi_def_cfa_offset 8
 2876              		.cfi_offset 7, -8
 2877              		.cfi_offset 14, -4
 2878 0002 84B0     		sub	sp, sp, #16
 2879              	.LCFI90:
 2880              		.cfi_def_cfa_offset 24
 2881 0004 00AF     		add	r7, sp, #0
 2882              	.LCFI91:
 2883              		.cfi_def_cfa_register 7
 2884 0006 7860     		str	r0, [r7, #4]
1491:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tickstart = 0; 
 2885              		.loc 1 1491 0
 2886 0008 0023     		movs	r3, #0
 2887 000a FB60     		str	r3, [r7, #12]
1492:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1493:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check if the Initialization mode is set */
1494:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
ARM GAS  /tmp/cchUBvqp.s 			page 78


 2888              		.loc 1 1494 0
 2889 000c 7B68     		ldr	r3, [r7, #4]
 2890 000e 1B68     		ldr	r3, [r3]
 2891 0010 DB68     		ldr	r3, [r3, #12]
 2892 0012 03F04003 		and	r3, r3, #64
 2893 0016 002B     		cmp	r3, #0
 2894 0018 19D1     		bne	.L116
1495:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1496:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Set the Initialization mode */
1497:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 2895              		.loc 1 1497 0
 2896 001a 7B68     		ldr	r3, [r7, #4]
 2897 001c 1B68     		ldr	r3, [r3]
 2898 001e 4FF0FF32 		mov	r2, #-1
 2899 0022 DA60     		str	r2, [r3, #12]
1498:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1499:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
1500:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 2900              		.loc 1 1500 0
 2901 0024 FFF7FEFF 		bl	HAL_GetTick
 2902 0028 F860     		str	r0, [r7, #12]
1501:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1502:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
1503:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 2903              		.loc 1 1503 0
 2904 002a 09E0     		b	.L117
 2905              	.L119:
1504:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1505:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 2906              		.loc 1 1505 0
 2907 002c FFF7FEFF 		bl	HAL_GetTick
 2908 0030 0246     		mov	r2, r0
 2909 0032 FB68     		ldr	r3, [r7, #12]
 2910 0034 D31A     		subs	r3, r2, r3
 2911 0036 B3F57A7F 		cmp	r3, #1000
 2912 003a 01D9     		bls	.L117
1506:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {       
1507:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2913              		.loc 1 1507 0
 2914 003c 0323     		movs	r3, #3
 2915 003e 07E0     		b	.L118
 2916              	.L117:
1503:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 2917              		.loc 1 1503 0
 2918 0040 7B68     		ldr	r3, [r7, #4]
 2919 0042 1B68     		ldr	r3, [r3]
 2920 0044 DB68     		ldr	r3, [r3, #12]
 2921 0046 03F04003 		and	r3, r3, #64
 2922 004a 002B     		cmp	r3, #0
 2923 004c EED0     		beq	.L119
 2924              	.L116:
1508:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       } 
1509:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1510:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1511:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1512:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;  
 2925              		.loc 1 1512 0
ARM GAS  /tmp/cchUBvqp.s 			page 79


 2926 004e 0023     		movs	r3, #0
 2927              	.L118:
1513:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 2928              		.loc 1 1513 0
 2929 0050 1846     		mov	r0, r3
 2930 0052 1037     		adds	r7, r7, #16
 2931              	.LCFI92:
 2932              		.cfi_def_cfa_offset 8
 2933 0054 BD46     		mov	sp, r7
 2934              	.LCFI93:
 2935              		.cfi_def_cfa_register 13
 2936              		@ sp needed
 2937 0056 80BD     		pop	{r7, pc}
 2938              		.cfi_endproc
 2939              	.LFE155:
 2941              		.section	.text.RTC_ByteToBcd2,"ax",%progbits
 2942              		.align	1
 2943              		.global	RTC_ByteToBcd2
 2944              		.syntax unified
 2945              		.thumb
 2946              		.thumb_func
 2947              		.fpu fpv4-sp-d16
 2949              	RTC_ByteToBcd2:
 2950              	.LFB156:
1514:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1515:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1516:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1517:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
1518:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Value Byte to be converted
1519:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval Converted byte
1520:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1521:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** uint8_t RTC_ByteToBcd2(uint8_t Value)
1522:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 2951              		.loc 1 1522 0
 2952              		.cfi_startproc
 2953              		@ args = 0, pretend = 0, frame = 16
 2954              		@ frame_needed = 1, uses_anonymous_args = 0
 2955              		@ link register save eliminated.
 2956 0000 80B4     		push	{r7}
 2957              	.LCFI94:
 2958              		.cfi_def_cfa_offset 4
 2959              		.cfi_offset 7, -4
 2960 0002 85B0     		sub	sp, sp, #20
 2961              	.LCFI95:
 2962              		.cfi_def_cfa_offset 24
 2963 0004 00AF     		add	r7, sp, #0
 2964              	.LCFI96:
 2965              		.cfi_def_cfa_register 7
 2966 0006 0346     		mov	r3, r0
 2967 0008 FB71     		strb	r3, [r7, #7]
1523:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t bcdhigh = 0;
 2968              		.loc 1 1523 0
 2969 000a 0023     		movs	r3, #0
 2970 000c FB60     		str	r3, [r7, #12]
1524:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1525:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   while(Value >= 10)
 2971              		.loc 1 1525 0
ARM GAS  /tmp/cchUBvqp.s 			page 80


 2972 000e 05E0     		b	.L121
 2973              	.L122:
1526:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1527:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     bcdhigh++;
 2974              		.loc 1 1527 0
 2975 0010 FB68     		ldr	r3, [r7, #12]
 2976 0012 0133     		adds	r3, r3, #1
 2977 0014 FB60     		str	r3, [r7, #12]
1528:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     Value -= 10;
 2978              		.loc 1 1528 0
 2979 0016 FB79     		ldrb	r3, [r7, #7]
 2980 0018 0A3B     		subs	r3, r3, #10
 2981 001a FB71     		strb	r3, [r7, #7]
 2982              	.L121:
1525:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 2983              		.loc 1 1525 0
 2984 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2985 001e 092B     		cmp	r3, #9
 2986 0020 F6D8     		bhi	.L122
1529:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1530:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   
1531:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return  ((uint8_t)(bcdhigh << 4) | Value);
 2987              		.loc 1 1531 0
 2988 0022 FB68     		ldr	r3, [r7, #12]
 2989 0024 DBB2     		uxtb	r3, r3
 2990 0026 1B01     		lsls	r3, r3, #4
 2991 0028 DAB2     		uxtb	r2, r3
 2992 002a FB79     		ldrb	r3, [r7, #7]
 2993 002c 1343     		orrs	r3, r3, r2
 2994 002e DBB2     		uxtb	r3, r3
1532:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 2995              		.loc 1 1532 0
 2996 0030 1846     		mov	r0, r3
 2997 0032 1437     		adds	r7, r7, #20
 2998              	.LCFI97:
 2999              		.cfi_def_cfa_offset 4
 3000 0034 BD46     		mov	sp, r7
 3001              	.LCFI98:
 3002              		.cfi_def_cfa_register 13
 3003              		@ sp needed
 3004 0036 5DF8047B 		ldr	r7, [sp], #4
 3005              	.LCFI99:
 3006              		.cfi_restore 7
 3007              		.cfi_def_cfa_offset 0
 3008 003a 7047     		bx	lr
 3009              		.cfi_endproc
 3010              	.LFE156:
 3012              		.section	.text.RTC_Bcd2ToByte,"ax",%progbits
 3013              		.align	1
 3014              		.global	RTC_Bcd2ToByte
 3015              		.syntax unified
 3016              		.thumb
 3017              		.thumb_func
 3018              		.fpu fpv4-sp-d16
 3020              	RTC_Bcd2ToByte:
 3021              	.LFB157:
1533:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
ARM GAS  /tmp/cchUBvqp.s 			page 81


1534:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1535:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Converts from 2 digit BCD to Binary.
1536:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Value BCD value to be converted
1537:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval Converted word
1538:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1539:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** uint8_t RTC_Bcd2ToByte(uint8_t Value)
1540:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 3022              		.loc 1 1540 0
 3023              		.cfi_startproc
 3024              		@ args = 0, pretend = 0, frame = 16
 3025              		@ frame_needed = 1, uses_anonymous_args = 0
 3026              		@ link register save eliminated.
 3027 0000 80B4     		push	{r7}
 3028              	.LCFI100:
 3029              		.cfi_def_cfa_offset 4
 3030              		.cfi_offset 7, -4
 3031 0002 85B0     		sub	sp, sp, #20
 3032              	.LCFI101:
 3033              		.cfi_def_cfa_offset 24
 3034 0004 00AF     		add	r7, sp, #0
 3035              	.LCFI102:
 3036              		.cfi_def_cfa_register 7
 3037 0006 0346     		mov	r3, r0
 3038 0008 FB71     		strb	r3, [r7, #7]
1541:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tmp = 0;
 3039              		.loc 1 1541 0
 3040 000a 0023     		movs	r3, #0
 3041 000c FB60     		str	r3, [r7, #12]
1542:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 3042              		.loc 1 1542 0
 3043 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3044 0010 1B09     		lsrs	r3, r3, #4
 3045 0012 DBB2     		uxtb	r3, r3
 3046 0014 1A46     		mov	r2, r3
 3047 0016 1346     		mov	r3, r2
 3048 0018 9B00     		lsls	r3, r3, #2
 3049 001a 1344     		add	r3, r3, r2
 3050 001c 5B00     		lsls	r3, r3, #1
 3051 001e FB60     		str	r3, [r7, #12]
1543:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
 3052              		.loc 1 1543 0
 3053 0020 FB79     		ldrb	r3, [r7, #7]
 3054 0022 03F00F03 		and	r3, r3, #15
 3055 0026 DAB2     		uxtb	r2, r3
 3056 0028 FB68     		ldr	r3, [r7, #12]
 3057 002a DBB2     		uxtb	r3, r3
 3058 002c 1344     		add	r3, r3, r2
 3059 002e DBB2     		uxtb	r3, r3
1544:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 3060              		.loc 1 1544 0
 3061 0030 1846     		mov	r0, r3
 3062 0032 1437     		adds	r7, r7, #20
 3063              	.LCFI103:
 3064              		.cfi_def_cfa_offset 4
 3065 0034 BD46     		mov	sp, r7
 3066              	.LCFI104:
 3067              		.cfi_def_cfa_register 13
ARM GAS  /tmp/cchUBvqp.s 			page 82


 3068              		@ sp needed
 3069 0036 5DF8047B 		ldr	r7, [sp], #4
 3070              	.LCFI105:
 3071              		.cfi_restore 7
 3072              		.cfi_def_cfa_offset 0
 3073 003a 7047     		bx	lr
 3074              		.cfi_endproc
 3075              	.LFE157:
 3077              		.text
 3078              	.Letext0:
 3079              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 3080              		.file 3 "/usr/include/newlib/sys/lock.h"
 3081              		.file 4 "/usr/include/newlib/sys/_types.h"
 3082              		.file 5 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 3083              		.file 6 "/usr/include/newlib/sys/reent.h"
 3084              		.file 7 "/usr/include/newlib/sys/_stdint.h"
 3085              		.file 8 "Inc/main.h"
 3086              		.file 9 "Drivers/CMSIS/Include/core_cm7.h"
 3087              		.file 10 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 3088              		.file 11 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f746xx.h"
 3089              		.file 12 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f7xx.h"
 3090              		.file 13 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 3091              		.file 14 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rtc.h"
ARM GAS  /tmp/cchUBvqp.s 			page 83


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f7xx_hal_rtc.c
                            *COM*:0000000000000004 SpiTxData
                            *COM*:0000000000000004 SpiRxData
                            *COM*:0000000000000004 UpdateFile
     /tmp/cchUBvqp.s:21     .text.HAL_RTC_Init:0000000000000000 $t
     /tmp/cchUBvqp.s:28     .text.HAL_RTC_Init:0000000000000000 HAL_RTC_Init
     /tmp/cchUBvqp.s:443    .text.HAL_RTC_MspInit:0000000000000000 HAL_RTC_MspInit
     /tmp/cchUBvqp.s:2867   .text.RTC_EnterInitMode:0000000000000000 RTC_EnterInitMode
     /tmp/cchUBvqp.s:194    .text.HAL_RTC_Init:00000000000000f4 $d
     /tmp/cchUBvqp.s:199    .text.HAL_RTC_DeInit:0000000000000000 $t
     /tmp/cchUBvqp.s:206    .text.HAL_RTC_DeInit:0000000000000000 HAL_RTC_DeInit
     /tmp/cchUBvqp.s:2743   .text.HAL_RTC_WaitForSynchro:0000000000000000 HAL_RTC_WaitForSynchro
     /tmp/cchUBvqp.s:486    .text.HAL_RTC_MspDeInit:0000000000000000 HAL_RTC_MspDeInit
     /tmp/cchUBvqp.s:431    .text.HAL_RTC_DeInit:0000000000000154 $d
     /tmp/cchUBvqp.s:436    .text.HAL_RTC_MspInit:0000000000000000 $t
     /tmp/cchUBvqp.s:479    .text.HAL_RTC_MspDeInit:0000000000000000 $t
     /tmp/cchUBvqp.s:522    .text.HAL_RTC_SetTime:0000000000000000 $t
     /tmp/cchUBvqp.s:529    .text.HAL_RTC_SetTime:0000000000000000 HAL_RTC_SetTime
     /tmp/cchUBvqp.s:2949   .text.RTC_ByteToBcd2:0000000000000000 RTC_ByteToBcd2
     /tmp/cchUBvqp.s:3020   .text.RTC_Bcd2ToByte:0000000000000000 RTC_Bcd2ToByte
     /tmp/cchUBvqp.s:790    .text.HAL_RTC_SetTime:0000000000000188 $d
     /tmp/cchUBvqp.s:795    .text.HAL_RTC_GetTime:0000000000000000 $t
     /tmp/cchUBvqp.s:802    .text.HAL_RTC_GetTime:0000000000000000 HAL_RTC_GetTime
     /tmp/cchUBvqp.s:923    .text.HAL_RTC_GetTime:00000000000000b8 $d
     /tmp/cchUBvqp.s:928    .text.HAL_RTC_SetDate:0000000000000000 $t
     /tmp/cchUBvqp.s:935    .text.HAL_RTC_SetDate:0000000000000000 HAL_RTC_SetDate
     /tmp/cchUBvqp.s:1162   .text.HAL_RTC_SetDate:000000000000014c $d
     /tmp/cchUBvqp.s:1167   .text.HAL_RTC_GetDate:0000000000000000 $t
     /tmp/cchUBvqp.s:1174   .text.HAL_RTC_GetDate:0000000000000000 HAL_RTC_GetDate
     /tmp/cchUBvqp.s:1280   .text.HAL_RTC_GetDate:000000000000009c $d
     /tmp/cchUBvqp.s:1285   .text.HAL_RTC_SetAlarm:0000000000000000 $t
     /tmp/cchUBvqp.s:1292   .text.HAL_RTC_SetAlarm:0000000000000000 HAL_RTC_SetAlarm
     /tmp/cchUBvqp.s:1684   .text.HAL_RTC_SetAlarm_IT:0000000000000000 $t
     /tmp/cchUBvqp.s:1691   .text.HAL_RTC_SetAlarm_IT:0000000000000000 HAL_RTC_SetAlarm_IT
     /tmp/cchUBvqp.s:2106   .text.HAL_RTC_SetAlarm_IT:000000000000029c $d
     /tmp/cchUBvqp.s:2113   .text.HAL_RTC_DeactivateAlarm:0000000000000000 $t
     /tmp/cchUBvqp.s:2120   .text.HAL_RTC_DeactivateAlarm:0000000000000000 HAL_RTC_DeactivateAlarm
     /tmp/cchUBvqp.s:2311   .text.HAL_RTC_GetAlarm:0000000000000000 $t
     /tmp/cchUBvqp.s:2318   .text.HAL_RTC_GetAlarm:0000000000000000 HAL_RTC_GetAlarm
     /tmp/cchUBvqp.s:2491   .text.HAL_RTC_AlarmIRQHandler:0000000000000000 $t
     /tmp/cchUBvqp.s:2498   .text.HAL_RTC_AlarmIRQHandler:0000000000000000 HAL_RTC_AlarmIRQHandler
     /tmp/cchUBvqp.s:2603   .text.HAL_RTC_AlarmAEventCallback:0000000000000000 HAL_RTC_AlarmAEventCallback
     /tmp/cchUBvqp.s:2591   .text.HAL_RTC_AlarmIRQHandler:0000000000000088 $d
     /tmp/cchUBvqp.s:2596   .text.HAL_RTC_AlarmAEventCallback:0000000000000000 $t
     /tmp/cchUBvqp.s:2639   .text.HAL_RTC_PollForAlarmAEvent:0000000000000000 $t
     /tmp/cchUBvqp.s:2646   .text.HAL_RTC_PollForAlarmAEvent:0000000000000000 HAL_RTC_PollForAlarmAEvent
     /tmp/cchUBvqp.s:2736   .text.HAL_RTC_WaitForSynchro:0000000000000000 $t
     /tmp/cchUBvqp.s:2813   .text.HAL_RTC_GetState:0000000000000000 $t
     /tmp/cchUBvqp.s:2820   .text.HAL_RTC_GetState:0000000000000000 HAL_RTC_GetState
     /tmp/cchUBvqp.s:2860   .text.RTC_EnterInitMode:0000000000000000 $t
     /tmp/cchUBvqp.s:2942   .text.RTC_ByteToBcd2:0000000000000000 $t
     /tmp/cchUBvqp.s:3013   .text.RTC_Bcd2ToByte:0000000000000000 $t

UNDEFINED SYMBOLS
HAL_GetTick
SystemCoreClock
ARM GAS  /tmp/cchUBvqp.s 			page 84


HAL_RTCEx_AlarmBEventCallback
